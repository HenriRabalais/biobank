{"version":3,"sources":["webpack:///modules/biobank/js/specimenFormIndex.js","webpack:///webpack/bootstrap 5c71e1522c1ca2250875?73d5*******","webpack:///./modules/biobank/jsx/specimenFormIndex.js","webpack:///./modules/biobank/jsx/specimenForm.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","0","_interopRequireDefault","obj","__esModule","default","_specimenForm","_specimenForm2","args","QueryString","get","document","currentScript","src","$","biobankSpecimenForm","React","createElement","className","DataURL","loris","BaseURL","barcode","action","ReactDOM","render","getElementById","7","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","BiobankSpecimenForm","_React$Component","this","_this","getPrototypeOf","state","Data","formData","uploadResult","isLoaded","loadedData","handleSubmit","bind","setFormData","showAlertMessage","ajax","dataType","success","data","container_id","specimenData","pscid","setState","error","errorCode","errorMsg","console","undefined","alertMessage","alertClass","backURL","concat","role","ref","href","FormElement","name","onSubmit","StaticElement","label","onUserInput","required","disabled","text","candidate_id","e","preventDefault","myFormData","hide","removeClass","type","url","JSON","stringify","cache","contentType","processData","xhr","window","XMLHttpRequest","upload","addEventListener","evt","lengthComputable","progressbar","progresslabel","percent","Math","round","total","width","html","attr","addClass","err","formElement","refs","alertMsg","fadeTo","delay","slideUp","Component","propTypes","PropTypes","string","isRequired","RBiobankSpecimenForm","createFactory"],"mappings":"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","file":"./modules/biobank/js/specimenFormIndex.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _specimenForm = __webpack_require__(7);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar args = QueryString.get(document.currentScript.src); /* global ReactDOM */\n\t\n\t$(function () {\n\t  var biobankSpecimenForm = React.createElement(\n\t    \"div\",\n\t    { className: \"page-specimen-form\" },\n\t    React.createElement(\n\t      \"div\",\n\t      { className: \"row\" },\n\t      React.createElement(\n\t        \"div\",\n\t        { className: \"col-md-9 col-lg-7\" },\n\t        React.createElement(_specimenForm2.default, {\n\t          DataURL: loris.BaseURL + \"/biobank/ajax/FileUpload.php?action=getData&barcode=\" + args.barcode,\n\t          action: loris.BaseURL + \"/biobank/ajax/FileUpload.php?action=specimen\"\n\t        })\n\t      )\n\t    )\n\t  );\n\t\n\t  ReactDOM.render(biobankSpecimenForm, document.getElementById(\"lorisworkspace\"));\n\t});\n\n/***/ },\n\n/***/ 7:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/* exported RBiobankSpecimenForm */\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Fetches data corresponding to a given file from Loris backend and\n\t * displays a form allowing meta information of the biobank file\n\t *\n\t * @author Alex Ilea\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankSpecimenForm = function (_React$Component) {\n\t  _inherits(BiobankSpecimenForm, _React$Component);\n\t\n\t  function BiobankSpecimenForm(props) {\n\t    _classCallCheck(this, BiobankSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimenForm.__proto__ || Object.getPrototypeOf(BiobankSpecimenForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      Data: {},\n\t      formData: {},\n\t      uploadResult: null,\n\t      isLoaded: false,\n\t      loadedData: 0\n\t    };\n\t\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.showAlertMessage = _this.showAlertMessage.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimenForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var self = this;\n\t      $.ajax(this.props.DataURL, {\n\t        dataType: 'json',\n\t        success: function success(data) {\n\t          var formData = {\n\t            container_id: data.specimenData.container_id,\n\t            pscid: data.specimenData.pscid\n\t          };\n\t\n\t          self.setState({\n\t            Data: data,\n\t            isLoaded: true,\n\t            specimenData: data.specimenData,\n\t            formData: formData\n\t          });\n\t        },\n\t        error: function error(_error, errorCode, errorMsg) {\n\t          console.error(_error, errorCode, errorMsg);\n\t          self.setState({\n\t            error: 'An error occurred when loading the form!'\n\t          });\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Data loading error\n\t      if (this.state.error !== undefined) {\n\t        return React.createElement(\n\t          'div',\n\t          { className: 'alert alert-danger text-center' },\n\t          React.createElement(\n\t            'strong',\n\t            null,\n\t            this.state.error\n\t          )\n\t        );\n\t      }\n\t\n\t      // Waiting for data to load\n\t      if (!this.state.isLoaded) {\n\t        return React.createElement(\n\t          'button',\n\t          { className: 'btn-info has-spinner' },\n\t          'Loading',\n\t          React.createElement('span', {\n\t            className: 'glyphicon glyphicon-refresh glyphicon-refresh-animate' })\n\t        );\n\t      }\n\t\n\t      var alertMessage = \"\";\n\t      var alertClass = \"alert text-center hide\";\n\t      var backURL = loris.BaseURL.concat('/biobank/');\n\t\n\t      if (this.state.uploadResult) {\n\t        if (this.state.uploadResult === \"success\") {\n\t          alertClass = \"alert alert-success text-center\";\n\t          alertMessage = \"Update Successful!\";\n\t        } else if (this.state.uploadResult === \"error\") {\n\t          alertClass = \"alert alert-danger text-center\";\n\t          alertMessage = \"Failed to update the file\";\n\t        }\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'div',\n\t          { className: alertClass, role: 'alert', ref: 'alert-message' },\n\t          alertMessage\n\t        ),\n\t        this.state.uploadResult === \"success\" ? React.createElement(\n\t          'a',\n\t          { className: 'btn btn-primary', href: backURL },\n\t          'Back to biobank'\n\t        ) : null,\n\t        React.createElement(\n\t          FormElement,\n\t          {\n\t            name: 'biobankSpecimen',\n\t            onSubmit: this.handleSubmit,\n\t            ref: 'form'\n\t          },\n\t          React.createElement(\n\t            'h3',\n\t            null,\n\t            'Specimen ',\n\t            React.createElement(\n\t              'strong',\n\t              null,\n\t              this.state.Data.barcode\n\t            )\n\t          ),\n\t          React.createElement('br', null),\n\t          React.createElement(StaticElement, {\n\t            name: 'container_id',\n\t            label: 'Container ID',\n\t            onUserInput: this.setFormData,\n\t            ref: 'container_id',\n\t            required: true,\n\t            disabled: false,\n\t            text: this.state.specimenData.container_id\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            name: 'pscid',\n\t            label: 'PSCID',\n\t            onUserInput: this.setFormData,\n\t            ref: 'pscid',\n\t            required: true,\n\t            disabled: false,\n\t            text: this.state.specimenData.candidate_id\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            name: 'data',\n\t            label: 'Data',\n\t            onUserInput: this.setFormData,\n\t            ref: 'data',\n\t            required: true,\n\t            disabled: false,\n\t            text: this.state.specimenData.data\n\t          })\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Handles form submission\n\t     * @param {event} e - Form submition event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      var self = this;\n\t      var myFormData = this.state.formData;\n\t\n\t      $('#biobankSpecimenEl').hide();\n\t      $(\"#file-progress\").removeClass('hide');\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: self.props.action,\n\t        data: JSON.stringify(myFormData),\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function xhr() {\n\t          var xhr = new window.XMLHttpRequest();\n\t          xhr.upload.addEventListener(\"progress\", function (evt) {\n\t            if (evt.lengthComputable) {\n\t              var progressbar = $(\"#progressbar\");\n\t              var progresslabel = $(\"#progresslabel\");\n\t              var percent = Math.round(evt.loaded / evt.total * 100);\n\t              $(progressbar).width(percent + \"%\");\n\t              $(progresslabel).html(percent + \"%\");\n\t              progressbar.attr('aria-valuenow', percent);\n\t            }\n\t          }, false);\n\t          return xhr;\n\t        },\n\t        success: function success(data) {\n\t          $(\"#file-progress\").addClass('hide');\n\t          self.setState({\n\t            uploadResult: \"success\"\n\t          });\n\t          self.showAlertMessage();\n\t        },\n\t        error: function error(err) {\n\t          console.error(err);\n\t          self.setState({\n\t            uploadResult: \"error\"\n\t          });\n\t          self.showAlertMessage();\n\t        }\n\t\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      var formData = this.state.formData;\n\t\n\t      if (value === \"\") {\n\t        formData[formElement] = null;\n\t      } else {\n\t        formData[formElement] = value;\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Display a success/error alert message after form submission\n\t     */\n\t\n\t  }, {\n\t    key: 'showAlertMessage',\n\t    value: function showAlertMessage() {\n\t      var self = this;\n\t\n\t      if (this.refs[\"alert-message\"] === null) {\n\t        return;\n\t      }\n\t\n\t      var alertMsg = this.refs[\"alert-message\"];\n\t      $(alertMsg).fadeTo(2000, 500).delay(3000).slideUp(500, function () {\n\t        self.setState({\n\t          uploadResult: null\n\t        });\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimenForm;\n\t}(React.Component);\n\t\n\tBiobankSpecimenForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired\n\t};\n\t\n\tvar RBiobankSpecimenForm = React.createFactory(BiobankSpecimenForm);\n\t\n\twindow.BiobankSpecimenForm = BiobankSpecimenForm;\n\twindow.RBiobankSpecimenForm = RBiobankSpecimenForm;\n\t\n\texports.default = BiobankSpecimenForm;\n\n/***/ }\n\n/******/ });\n\n\n// WEBPACK FOOTER //\n// modules/biobank/js/specimenFormIndex.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5c71e1522c1ca2250875","/* global ReactDOM */\n\nimport BiobankSpecimenForm from './specimenForm';\nconst args = QueryString.get(document.currentScript.src);\n\n$(function() {\n  const biobankSpecimenForm = (\n    <div className=\"page-specimen-form\">\n      <div className=\"row\">\n        <div className=\"col-md-9 col-lg-7\">\n          <BiobankSpecimenForm\n            DataURL={`${loris.BaseURL}/biobank/ajax/FileUpload.php?action=getData&barcode=${args.barcode}`}\n            action={`${loris.BaseURL}/biobank/ajax/FileUpload.php?action=specimen`}\n          />\n        </div>\n      </div>\n    </div>\n  );\n\n  ReactDOM.render(biobankSpecimenForm, document.getElementById(\"lorisworkspace\"));\n});\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenFormIndex.js","/* exported RBiobankSpecimenForm */\n\n/**\n * Biobank Specimen Form\n *\n * Fetches data corresponding to a given file from Loris backend and\n * displays a form allowing meta information of the biobank file\n *\n * @author Alex Ilea\n * @version 1.0.0\n *\n * */\nclass BiobankSpecimenForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      Data: {},\n      formData: {},\n      uploadResult: null,\n      isLoaded: false,\n      loadedData: 0\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.showAlertMessage = this.showAlertMessage.bind(this);\n  }\n\n  componentDidMount() {\n    var self = this;\n    $.ajax(this.props.DataURL, {\n      dataType: 'json',\n      success: function(data) {\n        var formData = {\n          container_id: data.specimenData.container_id,\n\t  pscid: data.specimenData.pscid,\n        };\n\n        self.setState({\n          Data: data,\n          isLoaded: true,\n          specimenData: data.specimenData,\n          formData: formData\n        });\n      },\n      error: function(error, errorCode, errorMsg) {\n        console.error(error, errorCode, errorMsg);\n        self.setState({\n          error: 'An error occurred when loading the form!'\n        });\n      }\n    });\n  }\n\n  render() {\n    // Data loading error\n    if (this.state.error !== undefined) {\n      return (\n        <div className=\"alert alert-danger text-center\">\n          <strong>\n            {this.state.error}\n          </strong>\n        </div>\n      );\n    }\n\n    // Waiting for data to load\n    if (!this.state.isLoaded) {\n      return (\n        <button className=\"btn-info has-spinner\">\n          Loading\n          <span\n            className=\"glyphicon glyphicon-refresh glyphicon-refresh-animate\">\n          </span>\n        </button>\n      );\n    }\n\n    var alertMessage = \"\";\n    var alertClass = \"alert text-center hide\";\n    var backURL = loris.BaseURL.concat('/biobank/');\n\n    if (this.state.uploadResult) {\n      if (this.state.uploadResult === \"success\") {\n        alertClass = \"alert alert-success text-center\";\n        alertMessage = \"Update Successful!\";\n      } else if (this.state.uploadResult === \"error\") {\n        alertClass = \"alert alert-danger text-center\";\n        alertMessage = \"Failed to update the file\";\n      }\n    }\n\n    return (\n      <div>\n        <div className={alertClass} role=\"alert\" ref=\"alert-message\">\n          {alertMessage}\n        </div>\n        {\n          this.state.uploadResult === \"success\" ?\n          <a className=\"btn btn-primary\" href={backURL}>Back to biobank</a> :\n          null\n        }\n        <FormElement\n          name=\"biobankSpecimen\"\n          onSubmit={this.handleSubmit}\n          ref=\"form\"\n        >\n          <h3>Specimen <strong>{this.state.Data.barcode}</strong></h3>\n          <br />\n          <StaticElement\n            name=\"container_id\"\n            label=\"Container ID\"\n            onUserInput={this.setFormData}\n            ref=\"container_id\"\n            required={true}\n            disabled={false}\n            text={this.state.specimenData.container_id}\n          />\n          <StaticElement\n            name=\"pscid\"\n            label=\"PSCID\"\n            onUserInput={this.setFormData}\n            ref=\"pscid\"\n            required={true}\n            disabled={false}\n            text={this.state.specimenData.candidate_id}\n          />\n          <StaticElement\n            name=\"data\"\n            label=\"Data\"\n            onUserInput={this.setFormData}\n            ref=\"data\"\n            required={true}\n            disabled={false}\n            text={this.state.specimenData.data}\n          />\n        </FormElement>\n      </div>\n    );\n  }\n\n  /**\n   * Handles form submission\n   * @param {event} e - Form submition event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    var self = this;\n    var myFormData = this.state.formData;\n\n    $('#biobankSpecimenEl').hide();\n    $(\"#file-progress\").removeClass('hide');\n\n    $.ajax({\n      type: 'POST',\n      url: self.props.action,\n      data: JSON.stringify(myFormData),\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        var xhr = new window.XMLHttpRequest();\n        xhr.upload.addEventListener(\"progress\", function(evt) {\n          if (evt.lengthComputable) {\n            var progressbar = $(\"#progressbar\");\n            var progresslabel = $(\"#progresslabel\");\n            var percent = Math.round((evt.loaded / evt.total) * 100);\n            $(progressbar).width(percent + \"%\");\n            $(progresslabel).html(percent + \"%\");\n            progressbar.attr('aria-valuenow', percent);\n          }\n        }, false);\n        return xhr;\n      },\n      success: function(data) {\n        $(\"#file-progress\").addClass('hide');\n        self.setState({\n          uploadResult: \"success\"\n        });\n        self.showAlertMessage();\n      },\n      error: function(err) {\n        console.error(err);\n        self.setState({\n          uploadResult: \"error\"\n        });\n        self.showAlertMessage();\n      }\n\n    });\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    var formData = this.state.formData;\n\n    if (value === \"\") {\n      formData[formElement] = null;\n    } else {\n      formData[formElement] = value;\n    }\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  /**\n   * Display a success/error alert message after form submission\n   */\n  showAlertMessage() {\n    var self = this;\n\n    if (this.refs[\"alert-message\"] === null) {\n      return;\n    }\n\n    var alertMsg = this.refs[\"alert-message\"];\n    $(alertMsg).fadeTo(2000, 500).delay(3000).slideUp(500, function() {\n      self.setState({\n        uploadResult: null\n      });\n    });\n  }\n\n}\n\nBiobankSpecimenForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired\n};\n\nvar RBiobankSpecimenForm = React.createFactory(BiobankSpecimenForm);\n\nwindow.BiobankSpecimenForm = BiobankSpecimenForm;\nwindow.RBiobankSpecimenForm = RBiobankSpecimenForm;\n\nexport default BiobankSpecimenForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenForm.js"],"sourceRoot":""}