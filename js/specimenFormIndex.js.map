{"version":3,"sources":["webpack:///modules/biobank/js/specimenFormIndex.js","webpack:///webpack/bootstrap 8954fbfc840a9b223bb1?0e9f*******","webpack:///./modules/biobank/jsx/specimenFormIndex.js","webpack:///./modules/biobank/jsx/specimenForm.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","0","_interopRequireDefault","obj","__esModule","default","_specimenForm","_specimenForm2","args","QueryString","get","document","currentScript","src","$","biobankSpecimenForm","React","createElement","className","DataURL","loris","BaseURL","barcode","action","ReactDOM","render","getElementById","7","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","BiobankSpecimenForm","_React$Component","this","_this","getPrototypeOf","state","Data","collectionData","uploadResult","isLoaded","loadedData","handleSubmit","bind","setCollectionData","showAlertMessage","ajax","dataType","success","data","specimen","specimenData","container","containerData","parentSpecimenBarcode","parentContainerBarcode","setState","error","errorCode","errorMsg","console","undefined","alertMessage","alertClass","backURL","concat","specimenURL","LinkElement","label","text","href","containerURL","dataObject","dataArray","keys","map","StaticElement","role","ref","FormElement","name","onSubmit","candidate_id","session_id","type_id","quantity","time_collect","notes","e","preventDefault","myCollectionData","formData","hide","removeClass","type","url","JSON","stringify","cache","contentType","processData","xhr","window","XMLHttpRequest","upload","addEventListener","evt","lengthComputable","progressbar","progresslabel","percent","Math","round","total","width","html","attr","addClass","err","formElement","refs","alertMsg","fadeTo","delay","slideUp","Component","propTypes","PropTypes","string","isRequired","RBiobankSpecimenForm","createFactory"],"mappings":"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","file":"./modules/biobank/js/specimenFormIndex.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _specimenForm = __webpack_require__(7);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar args = QueryString.get(document.currentScript.src); /* global ReactDOM */\n\t\n\t$(function () {\n\t  var biobankSpecimenForm = React.createElement(\n\t    \"div\",\n\t    { className: \"page-specimen-form\" },\n\t    React.createElement(\n\t      \"div\",\n\t      { className: \"row\" },\n\t      React.createElement(\n\t        \"div\",\n\t        { className: \"col-md-9 col-lg-7\" },\n\t        React.createElement(_specimenForm2.default, {\n\t          DataURL: loris.BaseURL + \"/biobank/ajax/FileUpload.php?action=getData&barcode=\" + args.barcode,\n\t          action: loris.BaseURL + \"/biobank/ajax/FileUpload.php?action=specimen\"\n\t        })\n\t      )\n\t    )\n\t  );\n\t\n\t  ReactDOM.render(biobankSpecimenForm, document.getElementById(\"lorisworkspace\"));\n\t});\n\n/***/ },\n\n/***/ 7:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/* exported RBiobankSpecimenForm */\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Fetches data corresponding to a given file from Loris backend and\n\t * displays a form allowing meta information of the biobank file\n\t *\n\t * @author Alex Ilea\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankSpecimenForm = function (_React$Component) {\n\t  _inherits(BiobankSpecimenForm, _React$Component);\n\t\n\t  function BiobankSpecimenForm(props) {\n\t    _classCallCheck(this, BiobankSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimenForm.__proto__ || Object.getPrototypeOf(BiobankSpecimenForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      Data: {},\n\t      collectionData: {},\n\t      uploadResult: null,\n\t      isLoaded: false,\n\t      loadedData: 0\n\t    };\n\t\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    _this.setCollectionData = _this.setCollectionData.bind(_this);\n\t    _this.showAlertMessage = _this.showAlertMessage.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimenForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var self = this;\n\t      $.ajax(this.props.DataURL, {\n\t        dataType: 'json',\n\t        success: function success(data) {\n\t          var collectionData = {\n\t            specimen: data.specimenData,\n\t            container: data.containerData,\n\t            parentSpecimenBarcode: data.parentSpecimenBarcode,\n\t            parentContainerBarcode: data.parentContainerBarcode\n\t          };\n\t\n\t          self.setState({\n\t            Data: data,\n\t            isLoaded: true,\n\t            collectionData: collectionData\n\t          });\n\t        },\n\t        error: function error(_error, errorCode, errorMsg) {\n\t          console.error(_error, errorCode, errorMsg);\n\t          self.setState({\n\t            error: 'An error occurred when loading the form!'\n\t          });\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Data loading error\n\t      if (this.state.error !== undefined) {\n\t        return React.createElement(\n\t          'div',\n\t          { className: 'alert alert-danger text-center' },\n\t          React.createElement(\n\t            'strong',\n\t            null,\n\t            this.state.error\n\t          )\n\t        );\n\t      }\n\t\n\t      // Waiting for data to load\n\t      if (!this.state.isLoaded) {\n\t        return React.createElement(\n\t          'button',\n\t          { className: 'btn-info has-spinner' },\n\t          'Loading',\n\t          React.createElement('span', {\n\t            className: 'glyphicon glyphicon-refresh glyphicon-refresh-animate' })\n\t        );\n\t      }\n\t\n\t      var alertMessage = \"\";\n\t      var alertClass = \"alert text-center hide\";\n\t      var backURL = loris.BaseURL.concat('/biobank/');\n\t\n\t      if (this.state.uploadResult) {\n\t        if (this.state.uploadResult === \"success\") {\n\t          alertClass = \"alert alert-success text-center\";\n\t          alertMessage = \"Update Successful!\";\n\t        } else if (this.state.uploadResult === \"error\") {\n\t          alertClass = \"alert alert-danger text-center\";\n\t          alertMessage = \"Failed to update the file\";\n\t        }\n\t      }\n\t\n\t      //checks if parent specimen exists and returns static element with href\n\t      if (this.state.collectionData.parentSpecimenBarcode) {\n\t        var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\";\n\t        var parentSpecimenBarcode = React.createElement(LinkElement, {\n\t          label: 'Parent Specimen',\n\t          text: this.state.collectionData.parentSpecimenBarcode,\n\t          href: specimenURL + this.state.collectionData.parentSpecimenBarcode\n\t        });\n\t      }\n\t\n\t      //checks if parent container exists and returns static element with href\n\t      if (this.state.collectionData.parentContainerBarcode) {\n\t        var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\";\n\t        var parentContainerBarcode = React.createElement(LinkElement, {\n\t          label: 'Parent Container',\n\t          text: this.state.collectionData.parentContainerBarcode,\n\t          href: containerURL + this.state.collectionData.parentContainerBarcode\n\t        });\n\t      }\n\t\n\t      //loops through data object to produce static elements\n\t      var dataObject = this.state.collectionData.specimen.data;\n\t      var dataArray = Object.keys(dataObject).map(function (key) {\n\t        return React.createElement(StaticElement, {\n\t          label: key,\n\t          text: dataObject[key]\n\t        });\n\t      });\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'div',\n\t          { className: alertClass, role: 'alert', ref: 'alert-message' },\n\t          alertMessage\n\t        ),\n\t        this.state.uploadResult === \"success\" ? React.createElement(\n\t          'a',\n\t          { className: 'btn btn-primary', href: backURL },\n\t          'Back to biobank'\n\t        ) : null,\n\t        React.createElement(\n\t          FormElement,\n\t          {\n\t            name: 'biobankSpecimen',\n\t            onSubmit: this.handleSubmit,\n\t            ref: 'form'\n\t          },\n\t          React.createElement(\n\t            'h3',\n\t            null,\n\t            'Specimen ',\n\t            React.createElement(\n\t              'strong',\n\t              null,\n\t              this.state.collectionData.container.barcode\n\t            )\n\t          ),\n\t          React.createElement('br', null),\n\t          React.createElement(StaticElement, {\n\t            label: 'PSCID',\n\t            text: this.state.collectionData.specimen.candidate_id\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Session',\n\t            text: this.state.collectionData.specimen.session_id\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Type',\n\t            text: this.state.collectionData.specimen.type_id\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Quantity',\n\t            text: this.state.collectionData.specimen.quantity\n\t          }),\n\t          parentSpecimenBarcode,\n\t          parentContainerBarcode,\n\t          React.createElement(StaticElement, {\n\t            label: 'Collection Time',\n\t            text: this.state.collectionData.specimen.time_collect\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Notes',\n\t            text: this.state.collectionData.specimen.notes\n\t          }),\n\t          dataArray\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Handles form submission\n\t     * @param {event} e - Form submition event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      var self = this;\n\t      var myCollectionData = this.state.formData;\n\t\n\t      $('#biobankSpecimenEl').hide();\n\t      $(\"#file-progress\").removeClass('hide');\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: self.props.action,\n\t        data: JSON.stringify(myCollectionData),\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function xhr() {\n\t          var xhr = new window.XMLHttpRequest();\n\t          xhr.upload.addEventListener(\"progress\", function (evt) {\n\t            if (evt.lengthComputable) {\n\t              var progressbar = $(\"#progressbar\");\n\t              var progresslabel = $(\"#progresslabel\");\n\t              var percent = Math.round(evt.loaded / evt.total * 100);\n\t              $(progressbar).width(percent + \"%\");\n\t              $(progresslabel).html(percent + \"%\");\n\t              progressbar.attr('aria-valuenow', percent);\n\t            }\n\t          }, false);\n\t          return xhr;\n\t        },\n\t        success: function success(data) {\n\t          $(\"#file-progress\").addClass('hide');\n\t          self.setState({\n\t            uploadResult: \"success\"\n\t          });\n\t          self.showAlertMessage();\n\t        },\n\t        error: function error(err) {\n\t          console.error(err);\n\t          self.setState({\n\t            uploadResult: \"error\"\n\t          });\n\t          self.showAlertMessage();\n\t        }\n\t\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setCollectionData',\n\t    value: function setCollectionData(formElement, value) {\n\t      var collectionData = this.state.collectionData;\n\t\n\t      if (value === \"\") {\n\t        collectionData[formElement] = null;\n\t      } else {\n\t        collectionData[formElement] = value;\n\t      }\n\t\n\t      this.setState({\n\t        collectionData: collectionData\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Display a success/error alert message after form submission\n\t     */\n\t\n\t  }, {\n\t    key: 'showAlertMessage',\n\t    value: function showAlertMessage() {\n\t      var self = this;\n\t\n\t      if (this.refs[\"alert-message\"] === null) {\n\t        return;\n\t      }\n\t\n\t      var alertMsg = this.refs[\"alert-message\"];\n\t      $(alertMsg).fadeTo(2000, 500).delay(3000).slideUp(500, function () {\n\t        self.setState({\n\t          uploadResult: null\n\t        });\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimenForm;\n\t}(React.Component);\n\t\n\tBiobankSpecimenForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired\n\t};\n\t\n\tvar RBiobankSpecimenForm = React.createFactory(BiobankSpecimenForm);\n\t\n\twindow.BiobankSpecimenForm = BiobankSpecimenForm;\n\twindow.RBiobankSpecimenForm = RBiobankSpecimenForm;\n\t\n\texports.default = BiobankSpecimenForm;\n\n/***/ }\n\n/******/ });\n\n\n// WEBPACK FOOTER //\n// modules/biobank/js/specimenFormIndex.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8954fbfc840a9b223bb1","/* global ReactDOM */\n\nimport BiobankSpecimenForm from './specimenForm';\nconst args = QueryString.get(document.currentScript.src);\n\n$(function() {\n  const biobankSpecimenForm = (\n    <div className=\"page-specimen-form\">\n      <div className=\"row\">\n        <div className=\"col-md-9 col-lg-7\">\n          <BiobankSpecimenForm\n            DataURL={`${loris.BaseURL}/biobank/ajax/FileUpload.php?action=getData&barcode=${args.barcode}`}\n            action={`${loris.BaseURL}/biobank/ajax/FileUpload.php?action=specimen`}\n          />\n        </div>\n      </div>\n    </div>\n  );\n\n  ReactDOM.render(biobankSpecimenForm, document.getElementById(\"lorisworkspace\"));\n});\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenFormIndex.js","/* exported RBiobankSpecimenForm */\n\n/**\n * Biobank Specimen Form\n *\n * Fetches data corresponding to a given file from Loris backend and\n * displays a form allowing meta information of the biobank file\n *\n * @author Alex Ilea\n * @version 1.0.0\n *\n * */\nclass BiobankSpecimenForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      Data: {},\n      collectionData: {},\n      uploadResult: null,\n      isLoaded: false,\n      loadedData: 0\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.setCollectionData = this.setCollectionData.bind(this);\n    this.showAlertMessage = this.showAlertMessage.bind(this);\n  }\n\n  componentDidMount() {\n    var self = this;\n    $.ajax(this.props.DataURL, {\n      dataType: 'json',\n      success: function(data) {\n        var collectionData = {\n          specimen: data.specimenData,\n\t  container: data.containerData,\n\t  parentSpecimenBarcode: data.parentSpecimenBarcode,\n\t  parentContainerBarcode: data.parentContainerBarcode,\n        };\n\n        self.setState({\n          Data: data,\n          isLoaded: true,\n          collectionData: collectionData,\n        });\n      },\n      error: function(error, errorCode, errorMsg) {\n        console.error(error, errorCode, errorMsg);\n        self.setState({\n          error: 'An error occurred when loading the form!'\n        });\n      }\n    });\n  }\n\n  render() {\n    // Data loading error\n    if (this.state.error !== undefined) {\n      return (\n        <div className=\"alert alert-danger text-center\">\n          <strong>\n            {this.state.error}\n          </strong>\n        </div>\n      );\n    }\n\n    // Waiting for data to load\n    if (!this.state.isLoaded) {\n      return (\n        <button className=\"btn-info has-spinner\">\n          Loading\n          <span\n            className=\"glyphicon glyphicon-refresh glyphicon-refresh-animate\">\n          </span>\n        </button>\n      );\n    }\n\n    var alertMessage = \"\";\n    var alertClass = \"alert text-center hide\";\n    var backURL = loris.BaseURL.concat('/biobank/');\n\n    if (this.state.uploadResult) {\n      if (this.state.uploadResult === \"success\") {\n        alertClass = \"alert alert-success text-center\";\n        alertMessage = \"Update Successful!\";\n      } else if (this.state.uploadResult === \"error\") {\n        alertClass = \"alert alert-danger text-center\";\n        alertMessage = \"Failed to update the file\";\n      }\n    }\n\n\t//checks if parent specimen exists and returns static element with href\n\tif (this.state.collectionData.parentSpecimenBarcode) {\n\t  var specimenURL = loris.BaseURL+\"/biobank/specimen/?barcode=\";\n\t  var parentSpecimenBarcode = (\n          <LinkElement\n            label=\"Parent Specimen\"\n            text={this.state.collectionData.parentSpecimenBarcode}\n\t        href={specimenURL+this.state.collectionData.parentSpecimenBarcode}\n          />\n\t  );\n\t}\t\n\n\t//checks if parent container exists and returns static element with href\n\tif (this.state.collectionData.parentContainerBarcode) {\n\t  var containerURL = loris.BaseURL+\"/biobank/container/?barcode=\";\n\t  var parentContainerBarcode = (\n          <LinkElement\n            label=\"Parent Container\"\n            text={this.state.collectionData.parentContainerBarcode}\n\t        href={containerURL+this.state.collectionData.parentContainerBarcode}\n          />\n\t  );\n\t}\t\n\n\t//loops through data object to produce static elements\n    var dataObject = this.state.collectionData.specimen.data;\n    var dataArray = Object.keys(dataObject).map(function(key) {\n      return (\n        <StaticElement\n          label = {key}\n          text = {dataObject[key]}\n        />\n      );\n    })\n\n    return (\n      <div>\n        <div className={alertClass} role=\"alert\" ref=\"alert-message\">\n          {alertMessage}\n        </div>\n        {\n          this.state.uploadResult === \"success\" ?\n          <a className=\"btn btn-primary\" href={backURL}>Back to biobank</a> :\n          null\n        }\n        <FormElement\n          name=\"biobankSpecimen\"\n          onSubmit={this.handleSubmit}\n          ref=\"form\"\n        >\n          <h3>Specimen <strong>{this.state.collectionData.container.barcode}</strong></h3>\n          <br />\n          <StaticElement\n            label=\"PSCID\"\n            text={this.state.collectionData.specimen.candidate_id}\n          />\n          <StaticElement\n            label=\"Session\"\n            text={this.state.collectionData.specimen.session_id}\n          />\n          <StaticElement\n            label=\"Type\"\n            text={this.state.collectionData.specimen.type_id}\n          />\n          <StaticElement\n            label=\"Quantity\"\n            text={this.state.collectionData.specimen.quantity}\n          />\n\t\t  {parentSpecimenBarcode}\n\t\t  {parentContainerBarcode}\n          <StaticElement\n            label=\"Collection Time\"\n            text={this.state.collectionData.specimen.time_collect}\n          />\n          <StaticElement\n            label=\"Notes\"\n            text={this.state.collectionData.specimen.notes}\n          />\n\t      {dataArray}\n        </FormElement>\n      </div>\n    ); \n  }\n\n  /**\n   * Handles form submission\n   * @param {event} e - Form submition event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    var self = this;\n    var myCollectionData = this.state.formData;\n\n    $('#biobankSpecimenEl').hide();\n    $(\"#file-progress\").removeClass('hide');\n\n    $.ajax({\n      type: 'POST',\n      url: self.props.action,\n      data: JSON.stringify(myCollectionData),\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        var xhr = new window.XMLHttpRequest();\n        xhr.upload.addEventListener(\"progress\", function(evt) {\n          if (evt.lengthComputable) {\n            var progressbar = $(\"#progressbar\");\n            var progresslabel = $(\"#progresslabel\");\n            var percent = Math.round((evt.loaded / evt.total) * 100);\n            $(progressbar).width(percent + \"%\");\n            $(progresslabel).html(percent + \"%\");\n            progressbar.attr('aria-valuenow', percent);\n          }\n        }, false);\n        return xhr;\n      },\n      success: function(data) {\n        $(\"#file-progress\").addClass('hide');\n        self.setState({\n          uploadResult: \"success\"\n        });\n        self.showAlertMessage();\n      },\n      error: function(err) {\n        console.error(err);\n        self.setState({\n          uploadResult: \"error\"\n        });\n        self.showAlertMessage();\n      }\n\n    });\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setCollectionData(formElement, value) {\n    var collectionData = this.state.collectionData;\n\n    if (value === \"\") {\n      collectionData[formElement] = null;\n    } else {\n      collectionData[formElement] = value;\n    }\n\n    this.setState({\n      collectionData: collectionData\n    });\n  }\n\n  /**\n   * Display a success/error alert message after form submission\n   */\n  showAlertMessage() {\n    var self = this;\n\n    if (this.refs[\"alert-message\"] === null) {\n      return;\n    }\n\n    var alertMsg = this.refs[\"alert-message\"];\n    $(alertMsg).fadeTo(2000, 500).delay(3000).slideUp(500, function() {\n      self.setState({\n        uploadResult: null\n      });\n    });\n  }\n\n}\n\nBiobankSpecimenForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired\n};\n\nvar RBiobankSpecimenForm = React.createFactory(BiobankSpecimenForm);\n\nwindow.BiobankSpecimenForm = BiobankSpecimenForm;\nwindow.RBiobankSpecimenForm = RBiobankSpecimenForm;\n\nexport default BiobankSpecimenForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenForm.js"],"sourceRoot":""}