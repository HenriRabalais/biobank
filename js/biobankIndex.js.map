{"version":3,"sources":["webpack:///modules/biobank/js/biobankIndex.js","webpack:///webpack/bootstrap 821b344be6e6a4c65b0d?7b42******","webpack:///./modules/biobank/jsx/biobankIndex.js","webpack:///./jsx/FilterForm.js","webpack:///./jsx/Panel.js","webpack:///./modules/biobank/jsx/specimenForm.js","webpack:///./modules/biobank/jsx/barcodeForm.js","webpack:///./modules/biobank/jsx/collectionForm.js","webpack:///./modules/biobank/jsx/containerParentForm.js","webpack:///./modules/biobank/jsx/containerForm.js","webpack:///./modules/biobank/jsx/containerBarcodeForm.js","webpack:///./jsx/Tabs.js","webpack:///./jsx/FormModal.js","webpack:///./jsx/Modal.js","webpack:///./jsx/Loader.js","webpack:///./modules/biobank/jsx/columnFormatterSpecimen.js","webpack:///./modules/biobank/jsx/columnFormatterContainer.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","_FilterForm","_FilterForm2","_specimenForm","_specimenForm2","_containerForm","_containerForm2","_Tabs","_FormModal","_FormModal2","_Loader","_Loader2","_columnFormatterSpecimen","_columnFormatterSpecimen2","_columnFormatterContainer","_columnFormatterContainer2","BiobankIndex","_React$Component","this","_this","getPrototypeOf","state","isLoaded","specimenFilter","containerFilter","isOpen","loadPage","bind","fetchSpecimenData","fetchFormData","fetchContainerData","updateSpecimenFilter","updateContainerFilter","resetFilters","mapFormOptions","$","ajax","specimenDataURL","method","dataType","success","data","setState","SpecimenData","error","console","containerDataURL","ContainerData","formDataURL","FormData","refs","biobankFilter","clearFilter","rawObject","targetAttribute","React","createElement","addSpecimenButton","addContainerButton","loris","userHasPermission","specimenTypes","containerTypesPrimary","specimenButtonContent","className","style","marginRight","title","buttonClass","buttonStyle","marginLeft","border","buttonContent","throwWarning","containersNonPrimary","specimenTypeAttributes","attributeDatatypes","capacities","containerDimensions","containerCoordinates","specimenTypeUnits","pSCIDs","visits","sessionData","action","BaseURL","refreshParent","containerTypesNonPrimary","containerButtonContent","sites","tabList","label","Tabs","tabs","defaultTab","updateURL","TabPane","TabId","Module","name","ref","columns","formElements","form","onUpdate","filter","StaticElement","text","ButtonElement","type","onUserInput","StaticDataTable","Data","Headers","Filter","getFormattedCell","Component","biobankIndex","ReactDOM","render","document","getElementById","_Panel","_Panel2","FilterForm","getFormChildren","setFilter","onElementUpdate","queryString","QueryString","get","keys","forEach","filterKey","exactMatch","clear","formChildren","Children","children","child","isValidElement","callbackFunc","callbackName","elementName","displayName","queryFieldName","filterValue","push","cloneElement","JSON","parse","stringify","fieldName","fieldValue","set","height","FormElement","defaultProps","warn","propTypes","PropTypes","string","isRequired","object","func","Panel","collapsed","initCollapsed","panelClass","toggleCollapsed","glyphClass","pencilGlyph","edit","cursor","onClick","plusGlyph","add","removeGlyph","cancel","panelHeading","data-toggle","data-target","role","_barcodeForm","_barcodeForm2","BiobankSpecimenForm","formData","barcodeFormList","barcodes","1","errorMessage","formErrors","countBarcodeForms","handleSubmit","validateForm","setFormData","specimenSubmit","addBarcodeForm","setBarcodeFormData","specimenId","candidateId","sessionId","unitId","_this2","barcodeForms","map","removeBarcodeForm","duplicateBarcodeForm","setParentFormData","units","globalFields","remainingQuantityFields","barcode","pscid","visit","TextboxElement","required","quantity","SelectElement","options","specimenUnits","emptyOption","visitLabel","disabled","onSubmit","formElement","_this3","test","isNaN","currentContainerType","specimenTypeFieldsObject","currentSpecimenType","attribute","datatype","e","preventDefault","formRefs","isValidForm","formObj","append","url","cache","contentType","processData","xhr","window","XMLHttpRequest","event","CustomEvent","dispatchEvent","swal","onSuccess","err","msg","responseJSON","message","requiredFields","field","hasError","forceUpdate","onChange","barcodeFormData","barcodeId","count","log","index","splice","DataURL","refreshTable","_collectionForm","_collectionForm2","BiobankBarcodeForm","setCollectionFormData","addBarcodeFormButton","duplicateBarcodeFormButton","removeBarcodeFormButton","glyphStyle","color","maring","appearance","outline","boxShadow","borderColor","backgroundColor","stati","Function","collectionFormData","_defineProperty","_containerParentForm","_containerParentForm2","SpecimenCollectionForm","specimenType","containerType","setSpecimenTypeFieldFormData","setContainerParentFormData","getSpecimenTypeFields","handleUpdate","updateSpecimen","containerId","collection","date","time","comments","containerParentForm","updateButton","unit","specimenTypeFields","specimenFields","DateElement","minYear","maxYear","TimeElement","TextareaElement","showCancelButton","confirmButtonText","cancelButtonText","isConfirm","toggleEdit","containerParentFormData","fieldsObject","attribte","_$$ajax","ContainerParentForm","container","parentContainerId","parentContainerField","coordinateField","containerBarcodesNonPrimary","dimensionId","dimensions","coordinatesTotal","dimension","coordinates","coordinate","_containerBarcodeForm","_containerBarcodeForm2","BiobankContainerForm","containerSubmit","margin","_loop","button","site","ContainerBarcodeForm","setSpecimenFormData","specimenFormData","hash","location","activeTab","substr","handleClick","getTabs","getTabPanes","tabId","onTabChange","scrollDistance","scrollTop","tab","tabClass","href","tabID","tabPanes","tabStyle","marginBottom","array","bool","_React$Component2","apply","arguments","classList","Title","_extends","assign","source","hasOwnProperty","_Modal","_Modal2","FormModal","show","openModal","closeModal","confirmClose","setWarning","renderChildren","Modal","modal","backdropStyle","position","zIndex","top","bottom","left","right","padding","modalStyle","maxWidth","maxHeight","borderRadius","overflowY","titleStyle","display","flexDirection","alignItems","background","borderTopRightRadius","fontSize","bodyStyle","stopPropagation","boolean","Loader","formatColumn","column","cell","rowData","rowHeaders","row","header","classes","join","specimenURL","containerURL"],"mappings":"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","file":"./modules/biobank/js/biobankIndex.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _FilterForm = __webpack_require__(1);\n\t\n\tvar _FilterForm2 = _interopRequireDefault(_FilterForm);\n\t\n\tvar _specimenForm = __webpack_require__(3);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tvar _containerForm = __webpack_require__(7);\n\t\n\tvar _containerForm2 = _interopRequireDefault(_containerForm);\n\t\n\tvar _Tabs = __webpack_require__(9);\n\t\n\tvar _FormModal = __webpack_require__(10);\n\t\n\tvar _FormModal2 = _interopRequireDefault(_FormModal);\n\t\n\tvar _Loader = __webpack_require__(12);\n\t\n\tvar _Loader2 = _interopRequireDefault(_Loader);\n\t\n\tvar _columnFormatterSpecimen = __webpack_require__(13);\n\t\n\tvar _columnFormatterSpecimen2 = _interopRequireDefault(_columnFormatterSpecimen);\n\t\n\tvar _columnFormatterContainer = __webpack_require__(14);\n\t\n\tvar _columnFormatterContainer2 = _interopRequireDefault(_columnFormatterContainer);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar BiobankIndex = function (_React$Component) {\n\t  _inherits(BiobankIndex, _React$Component);\n\t\n\t  function BiobankIndex(props) {\n\t    _classCallCheck(this, BiobankIndex);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankIndex.__proto__ || Object.getPrototypeOf(BiobankIndex)).call(this, props));\n\t\n\t    _this.state = {\n\t      isLoaded: false,\n\t      specimenFilter: {},\n\t      containerFilter: {},\n\t      isOpen: false\n\t    };\n\t\n\t    // Bind component instance to custom methods\n\t    _this.loadPage = _this.loadPage.bind(_this);\n\t    _this.fetchSpecimenData = _this.fetchSpecimenData.bind(_this);\n\t    _this.fetchFormData = _this.fetchFormData.bind(_this);\n\t    _this.fetchContainerData = _this.fetchContainerData.bind(_this);\n\t    _this.updateSpecimenFilter = _this.updateSpecimenFilter.bind(_this);\n\t    _this.updateContainerFilter = _this.updateContainerFilter.bind(_this);\n\t    _this.resetFilters = _this.resetFilters.bind(_this);\n\t    _this.mapFormOptions = _this.mapFormOptions.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankIndex, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      this.loadPage();\n\t    }\n\t  }, {\n\t    key: 'loadPage',\n\t    value: function loadPage() {\n\t      this.fetchSpecimenData();\n\t      this.fetchFormData();\n\t      this.fetchContainerData();\n\t    }\n\t    /**\n\t     * Retrieve data from the provided URL and save it in state\n\t     * Additionaly add hiddenHeaders to global loris variable\n\t     * for easy access by columnFormatter.\n\t     */\n\t\n\t  }, {\n\t    key: 'fetchSpecimenData',\n\t    value: function fetchSpecimenData() {\n\t      $.ajax(this.props.specimenDataURL, {\n\t        method: \"GET\",\n\t        dataType: 'json',\n\t        success: function (data) {\n\t          this.setState({\n\t            SpecimenData: data,\n\t            isLoaded: true\n\t          });\n\t        }.bind(this),\n\t        error: function error(_error) {\n\t          console.error(_error);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'fetchContainerData',\n\t    value: function fetchContainerData() {\n\t      $.ajax(this.props.containerDataURL, {\n\t        method: \"GET\",\n\t        dataType: 'json',\n\t        success: function (data) {\n\t          this.setState({\n\t            ContainerData: data,\n\t            isLoaded: true\n\t          });\n\t        }.bind(this),\n\t        error: function error(_error2) {\n\t          console.error(_error2);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'fetchFormData',\n\t    value: function fetchFormData() {\n\t      $.ajax(this.props.formDataURL, {\n\t        method: \"GET\",\n\t        dataType: 'json',\n\t        success: function (data) {\n\t          this.setState({\n\t            FormData: data,\n\t            isLoaded: true\n\t          });\n\t        }.bind(this),\n\t        error: function error(_error3) {\n\t          console.error(_error3);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'updateSpecimenFilter',\n\t    value: function updateSpecimenFilter(specimenFilter) {\n\t      this.setState({ specimenFilter: specimenFilter });\n\t    }\n\t\n\t    // This works,\n\t    // but there must be a way to do this with just one updateFilter function\n\t\n\t  }, {\n\t    key: 'updateContainerFilter',\n\t    value: function updateContainerFilter(containerFilter) {\n\t      this.setState({ containerFilter: containerFilter });\n\t    }\n\t  }, {\n\t    key: 'resetFilters',\n\t    value: function resetFilters() {\n\t      this.refs.biobankFilter.clearFilter();\n\t    }\n\t\n\t    //map options for forms\n\t\n\t  }, {\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(rawObject, targetAttribute) {\n\t      var data = {};\n\t      for (var id in rawObject) {\n\t        data[id] = rawObject[id][targetAttribute];\n\t      }\n\t\n\t      return data;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Waiting for async data to load\n\t      if (!this.state.isLoaded) {\n\t        return React.createElement(_Loader2.default, null);\n\t      }\n\t\n\t      var addSpecimenButton = void 0;\n\t      var addContainerButton = void 0;\n\t      if (loris.userHasPermission('biobank_write')) {\n\t\n\t        /**\n\t         * Map Options for Form Select Elements of Specimen Form\n\t         */\n\t        var specimenTypes = this.mapFormOptions(this.state.FormData.specimenTypes, 'type');\n\t        var containerTypesPrimary = this.mapFormOptions(this.state.FormData.containerTypesPrimary, 'label');\n\t\n\t        var specimenButtonContent = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement('span', {\n\t            className: 'glyphicon glyphicon-plus',\n\t            style: { marginRight: '5px' }\n\t          }),\n\t          'Add Specimen'\n\t        );\n\t\n\t        addSpecimenButton = React.createElement(\n\t          _FormModal2.default,\n\t          {\n\t            title: 'Add New Specimen',\n\t            buttonClass: 'btn btn-success',\n\t            buttonStyle: { marginLeft: '10px', border: 'none' },\n\t            buttonContent: specimenButtonContent,\n\t            throwWarning: true\n\t          },\n\t          React.createElement(_specimenForm2.default, {\n\t            specimenTypes: specimenTypes,\n\t            containerTypesPrimary: containerTypesPrimary,\n\t            containersNonPrimary: this.state.FormData.containersNonPrimary,\n\t            specimenTypeAttributes: this.state.FormData.specimenTypeAttributes,\n\t            attributeDatatypes: this.state.FormData.attributeDatatypes,\n\t            capacities: this.state.FormData.capacities,\n\t            containerDimensions: this.state.FormData.containerDimensions,\n\t            containerCoordinates: this.state.FormData.containerCoordinates,\n\t            specimenTypeUnits: this.state.FormData.specimenTypeUnits,\n\t            pSCIDs: this.state.FormData.pSCIDs,\n\t            visits: this.state.FormData.visits,\n\t            sessionData: this.state.FormData.sessionData,\n\t            action: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=submitSpecimen',\n\t            refreshParent: this.loadPage\n\t          })\n\t        );\n\t\n\t        var containerTypesNonPrimary = this.mapFormOptions(this.state.FormData.containerTypesNonPrimary, 'label');\n\t\n\t        var containerButtonContent = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement('span', {\n\t            className: 'glyphicon glyphicon-plus',\n\t            style: { marginRight: '5px' }\n\t          }),\n\t          'Add Container'\n\t        );\n\t\n\t        addContainerButton = React.createElement(\n\t          _FormModal2.default,\n\t          {\n\t            title: 'Add New Container',\n\t            buttonClass: 'btn btn-success',\n\t            buttonStyle: { marginLeft: '10px', border: 'none' },\n\t            buttonContent: containerButtonContent\n\t          },\n\t          React.createElement(_containerForm2.default, {\n\t            containerTypesNonPrimary: containerTypesNonPrimary,\n\t            sites: this.state.FormData.sites,\n\t            action: loris.BaseURL + '/biobank/ajax/ContainerInfo.php?action=submitContainer',\n\t            refreshParent: this.loadPage\n\t          })\n\t        );\n\t      }\n\t\n\t      //Look at CCNA code from Zaliqa to modify this to be more streamline\n\t      var tabList = [{ id: \"specimens\", label: \"Specimens\" }, { id: \"containers\", label: \"Containers\" }];\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { id: 'biobank-page' },\n\t        React.createElement(\n\t          _Tabs.Tabs,\n\t          { tabs: tabList, defaultTab: 'specimens', updateURL: true },\n\t          React.createElement(\n\t            _Tabs.TabPane,\n\t            { TabId: tabList[0].id },\n\t            React.createElement(\n\t              _FilterForm2.default,\n\t              {\n\t                Module: 'biobank',\n\t                name: 'specimen_filter',\n\t                id: 'specimen_filter',\n\t                ref: 'specimenFilter',\n\t                columns: 3,\n\t                formElements: this.state.SpecimenData.form,\n\t                onUpdate: this.updateSpecimenFilter,\n\t                filter: this.state.specimenFilter\n\t              },\n\t              React.createElement('br', null),\n\t              React.createElement(StaticElement, { text: addSpecimenButton }),\n\t              React.createElement(StaticElement, null),\n\t              React.createElement(ButtonElement, { label: 'Clear Filters', type: 'reset', onUserInput: this.resetFilters })\n\t            ),\n\t            React.createElement(StaticDataTable, {\n\t              Data: this.state.SpecimenData.Data,\n\t              Headers: this.state.SpecimenData.Headers,\n\t              Filter: this.state.specimenFilter,\n\t              getFormattedCell: _columnFormatterSpecimen2.default\n\t            })\n\t          ),\n\t          React.createElement(\n\t            _Tabs.TabPane,\n\t            { TabId: tabList[1].id },\n\t            React.createElement(\n\t              _FilterForm2.default,\n\t              {\n\t                Module: 'biobank',\n\t                name: 'container_filter',\n\t                id: 'container_filter',\n\t                ref: 'containerFilter',\n\t                columns: 3,\n\t                formElements: this.state.ContainerData.form,\n\t                onUpdate: this.updateContainerFilter,\n\t                filter: this.state.containerFilter\n\t              },\n\t              React.createElement('br', null),\n\t              React.createElement(StaticElement, { text: addContainerButton }),\n\t              React.createElement(StaticElement, null),\n\t              React.createElement(ButtonElement, { label: 'Clear Filters', type: 'reset', onUserInput: this.resetFilters })\n\t            ),\n\t            React.createElement(StaticDataTable, {\n\t              Data: this.state.ContainerData.Data,\n\t              Headers: this.state.ContainerData.Headers,\n\t              Filter: this.state.containerFilter,\n\t              getFormattedCell: _columnFormatterContainer2.default\n\t            })\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return BiobankIndex;\n\t}(React.Component);\n\t\n\t$(function () {\n\t  var biobankIndex = React.createElement(\n\t    'div',\n\t    { className: 'page-biobank' },\n\t    React.createElement(BiobankIndex, {\n\t      specimenDataURL: loris.BaseURL + '/biobank/?format=json',\n\t      containerDataURL: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=getContainerFilterData',\n\t      formDataURL: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=getFormData'\n\t    })\n\t  );\n\t\n\t  ReactDOM.render(biobankIndex, document.getElementById(\"lorisworkspace\"));\n\t});\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Panel = __webpack_require__(2);\n\t\n\tvar _Panel2 = _interopRequireDefault(_Panel);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file contains React component for FilterForm\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Loris Team\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.1.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/**\n\t * FilterForm component.\n\t * A wrapper for form elements inside a selection filter.\n\t *\n\t * Adds necessary filter callbacks to all children and passes them to FormElement\n\t * for proper rendering.\n\t *\n\t * Keeps track of filter object and sends it to parent on every update.\n\t *\n\t * //HACK/NOTE: Loris has special behaviour for `candID` attribute in the query string,\n\t * making it impossible to use it for selection filters. This components renames\n\t * all `candID` fields to `candidateID` automatically before appending them to URL.\n\t *\n\t */\n\tvar FilterForm = function (_React$Component) {\n\t  _inherits(FilterForm, _React$Component);\n\t\n\t  function FilterForm(props) {\n\t    _classCallCheck(this, FilterForm);\n\t\n\t    // Bind component instance to custom methods\n\t    var _this = _possibleConstructorReturn(this, (FilterForm.__proto__ || Object.getPrototypeOf(FilterForm)).call(this, props));\n\t\n\t    _this.clearFilter = _this.clearFilter.bind(_this);\n\t    _this.getFormChildren = _this.getFormChildren.bind(_this);\n\t    _this.setFilter = _this.setFilter.bind(_this);\n\t    _this.onElementUpdate = _this.onElementUpdate.bind(_this);\n\t\n\t    // Keeps track of querystring values\n\t    // Saved as class variable instead of keeping in state\n\t    _this.queryString = QueryString.get();\n\t    return _this;\n\t  }\n\t\n\t  _createClass(FilterForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var filter = {};\n\t      var queryString = this.queryString;\n\t\n\t      // Initiaze filter using querystring value\n\t      Object.keys(queryString).forEach(function (key) {\n\t        var filterKey = key === 'candidateID' ? 'candID' : key;\n\t        filter[filterKey] = {\n\t          value: queryString[key],\n\t          exactMatch: false\n\t        };\n\t      });\n\t\n\t      // Update parent component\n\t      this.props.onUpdate(filter);\n\t    }\n\t\n\t    /**\n\t     * Clear the filter object, querystring and input fields\n\t     */\n\t\n\t  }, {\n\t    key: 'clearFilter',\n\t    value: function clearFilter() {\n\t      this.queryString = QueryString.clear(this.props.Module);\n\t      this.props.onUpdate({});\n\t    }\n\t\n\t    /**\n\t     * Itterates through FilterForm children, sets necessary callback functions\n\t     * and initializes filterTable\n\t     *\n\t     * @return {Array} formChildren - array of children with necessary props\n\t     */\n\t\n\t  }, {\n\t    key: 'getFormChildren',\n\t    value: function getFormChildren() {\n\t      var formChildren = [];\n\t      React.Children.forEach(this.props.children, function (child, key) {\n\t        // If child is a React component (i.e not a simple DOM element)\n\t        if (React.isValidElement(child) && typeof child.type === \"function\" && child.props.onUserInput) {\n\t          var callbackFunc = child.props.onUserInput;\n\t          var callbackName = callbackFunc.name;\n\t          var elementName = child.type.displayName;\n\t          var queryFieldName = child.props.name === 'candID' ? 'candidateID' : child.props.name;\n\t          var filterValue = this.queryString[queryFieldName];\n\t          // If callback function was not set, set it to onElementUpdate() for form\n\t          // elements and to clearFilter() for <ButtonElement type='reset'/>.\n\t          if (callbackName === \"onUserInput\") {\n\t            if (elementName === \"ButtonElement\" && child.props.type === \"reset\") {\n\t              callbackFunc = this.clearFilter;\n\t            } else {\n\t              callbackFunc = this.onElementUpdate.bind(null, elementName);\n\t            }\n\t          }\n\t          // Pass onUserInput and value props to all children\n\t          formChildren.push(React.cloneElement(child, {\n\t            onUserInput: callbackFunc,\n\t            value: filterValue ? filterValue : '',\n\t            key: key\n\t          }));\n\t          // Initialize filter for StaticDataTable\n\t          this.setFilter(elementName, child.props.name, filterValue);\n\t        } else {\n\t          formChildren.push(React.cloneElement(child, { key: key }));\n\t        }\n\t      }.bind(this));\n\t\n\t      return formChildren;\n\t    }\n\t\n\t    /**\n\t     * Appends entry to filter object or deletes it if value is\n\t     * empty.\n\t     *\n\t     * Sets exactMatch to true for all SelectElements (i.e dropdowns)\n\t     * in order to force StaticDataTable to do exact comparaison\n\t     *\n\t     * @param {string} type - form element type (i.e component name)\n\t     * @param {string} key - the name of the form element\n\t     * @param {string} value - the value of the form element\n\t     *\n\t     * @return {{}} filter - filterData\n\t     */\n\t\n\t  }, {\n\t    key: 'setFilter',\n\t    value: function setFilter(type, key, value) {\n\t      var filter = {};\n\t      if (this.props.filter) {\n\t        filter = JSON.parse(JSON.stringify(this.props.filter));\n\t      }\n\t\n\t      if (key && value) {\n\t        filter[key] = {};\n\t        filter[key].value = value;\n\t        filter[key].exactMatch = type === \"SelectElement\";\n\t      } else if (filter && key && value === '') {\n\t        delete filter[key];\n\t      }\n\t\n\t      return filter;\n\t    }\n\t\n\t    /**\n\t     * Sets filter object and querystring to reflect values of input fields\n\t     *\n\t     * @param {string} type - form element type (i.e component name)\n\t     * @param {string} fieldName - the name of the form element\n\t     * @param {string} fieldValue - the value of the form element\n\t     */\n\t\n\t  }, {\n\t    key: 'onElementUpdate',\n\t    value: function onElementUpdate(type, fieldName, fieldValue) {\n\t      // Make sure both key/value are string before sending them to querystring\n\t      if (typeof fieldName !== \"string\" || typeof fieldValue !== \"string\") {\n\t        return;\n\t      }\n\t\n\t      // Update query string\n\t      var queryFieldName = fieldName === 'candID' ? 'candidateID' : fieldName;\n\t      this.queryString = QueryString.set(this.queryString, queryFieldName, fieldValue);\n\t\n\t      // Update filter and get new filter object\n\t      var filter = this.setFilter(type, fieldName, fieldValue);\n\t      this.props.onUpdate(filter);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Get formatted children\n\t      var formChildren = this.getFormChildren();\n\t      var formElements = this.props.formElements;\n\t\n\t      if (formElements) {\n\t        Object.keys(formElements).forEach(function (fieldName) {\n\t          var queryFieldName = fieldName === 'candID' ? 'candidateID' : fieldName;\n\t          formElements[fieldName].onUserInput = this.onElementUpdate.bind(null, fieldName);\n\t          formElements[fieldName].value = this.queryString[queryFieldName];\n\t        }.bind(this));\n\t      }\n\t\n\t      return React.createElement(\n\t        _Panel2.default,\n\t        {\n\t          id: this.props.id,\n\t          height: this.props.height,\n\t          title: this.props.title\n\t        },\n\t        React.createElement(\n\t          FormElement,\n\t          this.props,\n\t          formChildren\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return FilterForm;\n\t}(React.Component);\n\t\n\tFilterForm.defaultProps = {\n\t  id: 'selection-filter',\n\t  height: '100%',\n\t  title: 'Selection Filter',\n\t  onUpdate: function onUpdate() {\n\t    console.warn('onUpdate() callback is not set!');\n\t  }\n\t};\n\tFilterForm.propTypes = {\n\t  Module: React.PropTypes.string.isRequired,\n\t  filter: React.PropTypes.object.isRequired,\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  onUpdate: React.PropTypes.func\n\t};\n\t\n\texports.default = FilterForm;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Panel\n\t *\n\t * @author Alex I.\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Panel component\n\t * Wraps children in a collapsible bootstrap panel\n\t */\n\tvar Panel = function (_React$Component) {\n\t  _inherits(Panel, _React$Component);\n\t\n\t  function Panel(props) {\n\t    _classCallCheck(this, Panel);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).call(this, props));\n\t\n\t    _this.state = {\n\t      collapsed: _this.props.initCollapsed\n\t    };\n\t\n\t    // Initialize panel class based on collapsed status\n\t    _this.panelClass = _this.props.initCollapsed ? \"panel-collapse collapse\" : \"panel-collapse collapse in\";\n\t\n\t    _this.toggleCollapsed = _this.toggleCollapsed.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Panel, [{\n\t    key: \"toggleCollapsed\",\n\t    value: function toggleCollapsed() {\n\t      this.setState({ collapsed: !this.state.collapsed });\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      // Change arrow direction based on collapse status\n\t      var glyphClass = this.state.collapsed ? \"glyphicon pull-right glyphicon-chevron-down\" : \"glyphicon pull-right glyphicon-chevron-up\";\n\t\n\t      var pencilGlyph = void 0;\n\t      if (this.props.edit) {\n\t        pencilGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-pencil\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.edit\n\t        });\n\t      }\n\t\n\t      var plusGlyph = void 0;\n\t      if (this.props.add) {\n\t        plusGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-plus\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.add\n\t        });\n\t      }\n\t\n\t      var removeGlyph = void 0;\n\t      if (this.props.cancel) {\n\t        removeGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-remove\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.cancel\n\t        });\n\t      }\n\t\n\t      // Add panel header, if title is set\n\t      var panelHeading = this.props.title ? React.createElement(\n\t        \"div\",\n\t        {\n\t          className: \"panel-heading\"\n\t        },\n\t        React.createElement(\"span\", {\n\t          className: glyphClass,\n\t          onClick: this.toggleCollapsed,\n\t          \"data-toggle\": \"collapse\",\n\t          \"data-target\": '#' + this.props.id,\n\t          style: { cursor: 'pointer' }\n\t        }),\n\t        pencilGlyph,\n\t        plusGlyph,\n\t        removeGlyph,\n\t        this.props.title\n\t      ) : '';\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"panel panel-primary\" },\n\t        panelHeading,\n\t        React.createElement(\n\t          \"div\",\n\t          { id: this.props.id, className: this.panelClass, role: \"tabpanel\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"panel-body\", style: { height: this.props.height } },\n\t            this.props.children\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Panel;\n\t}(React.Component);\n\t\n\tPanel.propTypes = {\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  edit: React.PropTypes.func,\n\t  add: React.PropTypes.func\n\t};\n\tPanel.defaultProps = {\n\t  initCollapsed: false,\n\t  id: 'default-panel',\n\t  height: '100%'\n\t};\n\t\n\texports.default = Panel;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _barcodeForm = __webpack_require__(4);\n\t\n\tvar _barcodeForm2 = _interopRequireDefault(_barcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankSpecimenForm = function (_React$Component) {\n\t  _inherits(BiobankSpecimenForm, _React$Component);\n\t\n\t  function BiobankSpecimenForm(props) {\n\t    _classCallCheck(this, BiobankSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimenForm.__proto__ || Object.getPrototypeOf(BiobankSpecimenForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      barcodeFormList: {},\n\t      barcodes: { 1: {} },\n\t      errorMessage: null,\n\t      formErrors: {},\n\t      countBarcodeForms: 1\n\t    };\n\t\n\t    //this.getValidFileName = this.getValidFileName.bind(this);\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    //this.isValidFileName = this.isValidFileName.bind(this);\n\t    _this.validateForm = _this.validateForm.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.specimenSubmit = _this.specimenSubmit.bind(_this);\n\t    _this.addBarcodeForm = _this.addBarcodeForm.bind(_this);\n\t    _this.setBarcodeFormData = _this.setBarcodeFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimenForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t\n\t      //if this is a child specimen form then certain formData is set when component mounts\n\t      if (this.props.child) {\n\t        var formData = this.state.formData;\n\t        formData['parentSpecimen'] = this.props.specimenId;\n\t        formData['pscid'] = this.props.candidateId;\n\t        formData['visitLabel'] = this.props.sessionId;\n\t        formData['unitId'] = this.props.unitId;\n\t\n\t        this.setState({\n\t          formData: formData\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n\t      var barcodeForms = Object.keys(this.state.barcodes).map(function (key) {\n\t        return React.createElement(_barcodeForm2.default, {\n\t          key: key,\n\t          id: key,\n\t          formData: _this2.state.barcodes[key] ? _this2.state.barcodes[key] : null,\n\t          removeBarcodeForm: key !== 1 ? function () {\n\t            return _this2.removeBarcodeForm(key);\n\t          } : null,\n\t          addBarcodeForm: key == _this2.state.countBarcodeForms ? _this2.addBarcodeForm : null,\n\t          duplicateBarcodeForm: key == _this2.state.countBarcodeForms && _this2.state.barcodeFormList[key] ? function () {\n\t            return _this2.duplicateBarcodeForm(key);\n\t          } : null,\n\t          setParentFormData: _this2.setBarcodeFormData,\n\t          specimenTypes: _this2.props.specimenTypes,\n\t          containerTypesPrimary: _this2.props.containerTypesPrimary,\n\t          containersNonPrimary: _this2.props.containersNonPrimary,\n\t          specimenTypeAttributes: _this2.props.specimenTypeAttributes,\n\t          attributeDatatypes: _this2.props.attributeDatatypes,\n\t          capacities: _this2.props.capacities,\n\t          containerDimensions: _this2.props.containerDimensions,\n\t          containerCoordinates: _this2.props.containerCoordinates,\n\t          specimenTypeUnits: _this2.props.specimenTypeUnits,\n\t          units: _this2.props.units\n\t        });\n\t      });\n\t\n\t      var globalFields = void 0;\n\t      var remainingQuantityFields = void 0;\n\t      if (this.props.child) {\n\t        globalFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(StaticElement, {\n\t            label: 'Parent Specimen',\n\t            text: this.props.barcode\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'PSCID',\n\t            text: this.props.pscid\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Visit Label',\n\t            text: this.props.visit\n\t          })\n\t        );\n\t\n\t        //It may be wise to make unit static and forced, or atleast prepopulated --\n\t        remainingQuantityFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Remaining Quantity',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: this.props.specimenUnits,\n\t            onUserInput: this.setFormData,\n\t            emptyOption: false,\n\t            required: true,\n\t            value: this.state.formData.unitId\n\t          })\n\t        );\n\t      } else {\n\t        globalFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'pscid',\n\t            label: 'PSCID',\n\t            options: this.props.pSCIDs,\n\t            onUserInput: this.setFormData,\n\t            ref: 'pscid',\n\t            required: true,\n\t            value: this.state.formData.pscid\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'visitLabel',\n\t            label: 'Visit Label',\n\t            options: this.state.visits,\n\t            onUserInput: this.setFormData,\n\t            ref: 'visitLabel',\n\t            required: true,\n\t            value: this.state.formData.visitLabel,\n\t            disabled: this.state.formData.pscid ? false : true\n\t          })\n\t        );\n\t      }\n\t\n\t      //ALLOW THEM TO CANCEL THE FORM AND DELETE BARCODE FORMS\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenForm',\n\t          id: 'specimenForm',\n\t          onSubmit: this.handleSubmit,\n\t          ref: 'form'\n\t        },\n\t        React.createElement('br', null),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            globalFields\n\t          )\n\t        ),\n\t        barcodeForms,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            remainingQuantityFields\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-xs-3 col-xs-offset-9' },\n\t          React.createElement(ButtonElement, { label: 'Submit' })\n\t        )\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t    /**\n\t     * Returns a valid name for the file to be specimened\n\t     *\n\t     * @param {string} pscid - PSCID selected from the dropdown\n\t     * @param {string} visitLabel - Visit label selected from the dropdown\n\t     * @param {string} instrument - Instrument selected from the dropdown\n\t     * @return {string} - Generated valid filename for the current selection\n\t     */\n\t    //  getValidFileName(pscid, visitLabel, instrument) {\n\t    //    var fileName = pscid + \"_\" + visitLabel;\n\t    //    if (instrument) fileName += \"_\" + instrument;\n\t    //\n\t    //    return fileName;\n\t    //  }\n\t\n\t\n\t  }, {\n\t    key: 'validateForm',\n\t    value: function validateForm(formElement, value) {\n\t      var _this3 = this;\n\t\n\t      var formErrors = this.state.formErrors;\n\t\n\t      //validate barcode regex\n\t      if (formElement === \"barcode\" && value !== \"\") {\n\t        if (!/^hello/.test(this.state.formData.barcode)) {\n\t          formErrors.barcode = true;\n\t        } else {\n\t          formErrors.barcode = false;\n\t        }\n\t      }\n\t\n\t      //validate that quantity is a number and less than capacity\n\t      if (formElement === \"quantity\" && value !== \"\") {\n\t        if (isNaN(value) || value > this.props.capacities[this.state.currentContainerType]) {\n\t          formErrors.quantity = true;\n\t        } else {\n\t          formErrors.quantity = false;\n\t        }\n\t      }\n\t\n\t      //validate datatypes and regex of generated type attributes\n\t      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t      var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t\n\t        var datatype = _this3.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"number\") {\n\t          if (formElement === attribute) {\n\t            if (isNaN(value) && value !== \"\") {\n\t              formErrors[attribute] = true;\n\t            } else {\n\t              formErrors[attribute] = false;\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      this.setState({\n\t        formErrors: formErrors\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Handle form submission\n\t     * @param {object} e - Form submission event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      var formRefs = this.refs;\n\t      //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\t\n\t      // Validate the form\n\t      if (!this.isValidForm(formRefs, formData)) {\n\t        return;\n\t      }\n\t\n\t      //    // Validate specimened file name\n\t      //    let instrument = formData.instrument ? formData.instrument : null;\n\t      //    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n\t      //    let requiredFileName = this.getValidFileName(\n\t      //      formData.pscid, formData.visitLabel, instrument\n\t      //    );\n\t      //    if (!this.isValidFileName(requiredFileName, fileName)) {\n\t      //      swal(\n\t      //        \"Invalid Specimen name!\",\n\t      //        \"File name should begin with: \" + requiredFileName,\n\t      //        \"error\"\n\t      //      );\n\t      //      return;\n\t      //    }\n\t\n\t      // Check for duplicate file names\n\t      //    let isDuplicate = biobankFiles.indexOf(fileName);\n\t      //    if (isDuplicate >= 0) {\n\t      //      swal({\n\t      //        title: \"Are you sure?\",\n\t      //        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n\t      //        type: \"warning\",\n\t      //        showCancelButton: true,\n\t      //        confirmButtonText: 'Yes, I am sure!',\n\t      //        cancelButtonText: \"No, cancel it!\"\n\t      //      }, function(isConfirm) {\n\t      //        if (isConfirm) {\n\t      //          this.specimenFile();\n\t      //        } else {\n\t      //          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n\t      //        }\n\t      //      }.bind(this));\n\t      //    } else {\n\t\n\t      this.specimenSubmit();\n\t      //    }\n\t    }\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'specimenSubmit',\n\t    value: function specimenSubmit() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          // Trigger an update event to update all observers (i.e DataTable)\n\t          // THIS CURRENTLY DOES NOT WORK - LOOK INTO IT\n\t          var event = new CustomEvent('update-datatable');\n\t          window.dispatchEvent(event);\n\t\n\t          this.props.refreshParent();\n\t          swal(\"Specimen Submission Successful!\", \"\", \"success\");\n\t          this.props.onSuccess();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Checks if the inputted file name is valid\n\t     *\n\t     * @param {string} requiredFileName - Required file name\n\t     * @param {string} fileName - Provided file name\n\t     * @return {boolean} - true if fileName starts with requiredFileName, false\n\t     *   otherwise\n\t     */\n\t    //  isValidFileName(requiredFileName, fileName) {\n\t    //    if (fileName === null || requiredFileName === null) {\n\t    //      return false;\n\t    //    }\n\t    //\n\t    //    return (fileName.indexOf(requiredFileName) === 0);\n\t    //  }\n\t\n\t    /**\n\t     * Validate the form\n\t     *\n\t     * @param {object} formRefs - Object containing references to React form elements\n\t     * @param {object} formData - Object containing form data inputed by user\n\t     * @return {boolean} - true if all required fields are filled, false otherwise\n\t     */\n\t\n\t  }, {\n\t    key: 'isValidForm',\n\t    value: function isValidForm(formRefs, formData) {\n\t      var isValidForm = true;\n\t\n\t      var requiredFields = {\n\t        pscid: null,\n\t        visitLabel: null\n\t      };\n\t\n\t      Object.keys(requiredFields).map(function (field) {\n\t        if (formData[field]) {\n\t          requiredFields[field] = formData[field];\n\t        } else if (formRefs[field]) {\n\t          formRefs[field].props.hasError = true;\n\t          isValidForm = false;\n\t        }\n\t      });\n\t      this.forceUpdate();\n\t\n\t      return isValidForm;\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      // This lets the modal window know that there is formData\n\t      // and will cause a warning to be thrown of the modal window\n\t      // is exited/\n\t      this.props.onChange();\n\t\n\t      if (formElement === \"pscid\" && value !== \"\") {\n\t        this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n\t      }\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setBarcodeFormData',\n\t    value: function setBarcodeFormData(barcodeFormData, barcodeId) {\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      barcodeFormList[barcodeId] = barcodeFormData;\n\t      formData['barcodeFormList'] = barcodeFormList;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'addBarcodeForm',\n\t    value: function addBarcodeForm() {\n\t      var barcodes = this.state.barcodes;\n\t      var count = this.state.countBarcodeForms;\n\t\n\t      barcodes[count + 1] = {};\n\t\n\t      this.setState({\n\t        barcodes: barcodes,\n\t        countBarcodeForms: count + 1\n\t      });\n\t    }\n\t  }, {\n\t    key: 'duplicateBarcodeForm',\n\t    value: function duplicateBarcodeForm(key) {\n\t      var barcodes = this.state.barcodes;\n\t      var count = this.state.countBarcodeForms;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t\n\t      if (barcodeFormList[key]) {\n\t        barcodes[count + 1] = JSON.parse(JSON.stringify(barcodeFormList[key]));\n\t        console.log(barcodes);\n\t        delete barcodes[count + 1].barcode;\n\t\n\t        this.setState({\n\t          barcodes: barcodes,\n\t          countBarcodeForms: count + 1\n\t        });\n\t      } else {\n\t        swal(\"nothing to duplicate!\");\n\t      }\n\t    }\n\t  }, {\n\t    key: 'removeBarcodeForm',\n\t    value: function removeBarcodeForm(index) {\n\t      var countBarcodeForms = this.state.countBarcodeForms;\n\t      countBarcodeForms.splice(index, 1);\n\t      this.setState({\n\t        countBarcodeForms: countBarcodeForms\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimenForm;\n\t}(React.Component);\n\t\n\tBiobankSpecimenForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired,\n\t  barcode: React.PropTypes.string,\n\t  refreshTable: React.PropTypes.func\n\t};\n\t\n\texports.default = BiobankSpecimenForm;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _collectionForm = __webpack_require__(5);\n\t\n\tvar _collectionForm2 = _interopRequireDefault(_collectionForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Barcode Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar BiobankBarcodeForm = function (_React$Component) {\n\t  _inherits(BiobankBarcodeForm, _React$Component);\n\t\n\t  function BiobankBarcodeForm(props) {\n\t    _classCallCheck(this, BiobankBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankBarcodeForm.__proto__ || Object.getPrototypeOf(BiobankBarcodeForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      formErrors: {}\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setCollectionFormData = _this.setCollectionFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankBarcodeForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {}\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      var addBarcodeFormButton = void 0;\n\t      var duplicateBarcodeFormButton = void 0;\n\t      if (this.props.addBarcodeForm) {\n\t        addBarcodeFormButton = React.createElement(\n\t          'button',\n\t          {\n\t            type: 'button',\n\t            className: 'btn btn-success btn-sm',\n\t            onClick: this.props.addBarcodeForm\n\t          },\n\t          React.createElement('span', { className: 'glyphicon glyphicon-plus', style: { marginRight: 5 } }),\n\t          'New'\n\t        );\n\t      }\n\t\n\t      if (this.props.duplicateBarcodeForm) {\n\t        duplicateBarcodeFormButton = React.createElement(\n\t          'button',\n\t          {\n\t            type: 'button',\n\t            className: 'btn btn-success btn-sm',\n\t            onClick: this.props.duplicateBarcodeForm\n\t          },\n\t          React.createElement('span', { className: 'glyphicon glyphicon-plus', style: { marginRight: 5 } }),\n\t          'Duplicate'\n\t        );\n\t      }\n\t\n\t      var removeBarcodeFormButton = void 0;\n\t      if (this.props.removeBarcodeForm) {\n\t        var glyphStyle = {\n\t          color: '#DDDDDD',\n\t          maring: 'auto'\n\t        };\n\t\n\t        var buttonStyle = {\n\t          appearance: 'non',\n\t          outline: 'non',\n\t          boxShadow: 'none',\n\t          borderColor: 'transparent',\n\t          backgroundColor: 'transparent'\n\t        };\n\t\n\t        removeBarcodeFormButton = React.createElement(\n\t          'button',\n\t          {\n\t            type: 'button',\n\t            className: 'btn btn-primary-outline btn-sm',\n\t            style: buttonStyle,\n\t            onClick: this.props.removeBarcodeForm\n\t          },\n\t          React.createElement('span', { className: 'glyphicon glyphicon-remove', style: glyphStyle })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankBarcode'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                'data-toggle': 'collapse',\n\t                'data-target': \"#\" + this.props.id\n\t              },\n\t              React.createElement(TextboxElement, {\n\t                name: \"barcode\",\n\t                label: \"Barcode \" + this.props.id,\n\t                onUserInput: this.setFormData,\n\t                ref: \"barcode\",\n\t                required: true,\n\t                value: this.state.formData[\"barcode\"],\n\t                hasError: this.state.formErrors[\"barcode\"],\n\t                errorMessage: 'Incorrect Barcode format for this Specimen and Container Type'\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-1' },\n\t            removeBarcodeFormButton\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement('div', { className: 'col-xs-2' }),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-9' },\n\t            React.createElement(\n\t              'div',\n\t              { id: this.props.id, className: 'collapse' },\n\t              React.createElement(_collectionForm2.default, {\n\t                formData: this.props.formData,\n\t                setParentFormData: this.setCollectionFormData,\n\t                specimenTypes: this.props.specimenTypes,\n\t                specimenTypeAttributes: this.props.specimenTypeAttributes,\n\t                attributeDatatypes: this.props.attributeDatatypes,\n\t                containerTypesPrimary: this.props.containerTypesPrimary,\n\t                containersNonPrimary: this.props.containersNonPrimary,\n\t                containerDimensions: this.props.containerDimensions,\n\t                containerCoordinates: this.props.containerCoordinates,\n\t                specimenTypeUnits: this.props.specimenTypeUnits,\n\t                stati: this.props.stati\n\t              })\n\t            )\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement('div', { className: 'col-xs-3' }),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-1' },\n\t              addBarcodeFormButton\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-1' },\n\t              duplicateBarcodeFormButton\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setCollectionFormData',\n\t    value: function setCollectionFormData(collectionFormData) {\n\t      var formData = this.state.formData;\n\t\n\t      for (var field in collectionFormData) {\n\t        formData[field] = collectionFormData[field];\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      this.props.setParentFormData(this.state.formData, this.props.id);\n\t    }\n\t  }]);\n\t\n\t  return BiobankBarcodeForm;\n\t}(React.Component);\n\t\n\tBiobankBarcodeForm.propTypes = {\n\t\n\t  id: React.PropTypes.string,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = BiobankBarcodeForm;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _containerParentForm = __webpack_require__(6);\n\t\n\tvar _containerParentForm2 = _interopRequireDefault(_containerParentForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenCollectionForm = function (_React$Component) {\n\t  _inherits(SpecimenCollectionForm, _React$Component);\n\t\n\t  function SpecimenCollectionForm(props) {\n\t    _classCallCheck(this, SpecimenCollectionForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenCollectionForm.__proto__ || Object.getPrototypeOf(SpecimenCollectionForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: { data: {} },\n\t      currentSpecimenType: _this.props.edit ? _this.props.specimenType : null,\n\t      currentContainerType: _this.props.edit ? _this.props.containerType : null,\n\t      formErrors: {}\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setSpecimenTypeFieldFormData = _this.setSpecimenTypeFieldFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    _this.setContainerParentFormData = _this.setContainerParentFormData.bind(_this);\n\t    _this.getSpecimenTypeFields = _this.getSpecimenTypeFields.bind(_this);\n\t    _this.handleUpdate = _this.handleUpdate.bind(_this);\n\t    _this.updateSpecimen = _this.updateSpecimen.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenCollectionForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var _this2 = this;\n\t\n\t      var formData = this.state.formData;\n\t\n\t      if (this.props.formData) {\n\t        formData = this.props.formData;\n\t        var currentSpecimenType = this.state.currentSpecimenType;\n\t\n\t        this.setState({\n\t          currentSpecimenType: formData.specimenType\n\t        });\n\t      }\n\t\n\t      if (this.props.edit) {\n\t        formData['specimenId'] = this.props.specimenId;\n\t        formData['containerId'] = this.props.containerId;\n\t        formData['specimenType'] = this.props.specimenType;\n\t        formData['containerType'] = this.props.containerType;\n\t        formData['quantity'] = this.props.collection.quantity;\n\t        formData['unitId'] = this.props.collection.unitId;\n\t        formData['date'] = this.props.collection.date;\n\t        formData['time'] = this.props.collection.time;\n\t        formData['comments'] = this.props.collection.comments;\n\t\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t        if (specimenTypeFieldsObject) {\n\t          var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t            formData.data[attribute] = _this2.props.collection.data[attribute];\n\t          });\n\t        }\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(rawObject, targetAttribute) {\n\t      var data = {};\n\t      for (var id in rawObject) {\n\t        data[id] = rawObject[id][targetAttribute];\n\t      }\n\t\n\t      return data;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      // This entire parentContainerField and parentContainerCoordinateField section should go into its own\n\t      // re-usable component\n\t      var containerParentForm;\n\t      if (!this.props.edit) {\n\t        containerParentForm = React.createElement(_containerParentForm2.default, {\n\t          setParentFormData: this.setContainerParentFormData,\n\t          containersNonPrimary: this.props.containersNonPrimary,\n\t          containerDimensions: this.props.containerDimensions,\n\t          containerCoordinates: this.props.containerCoordinates\n\t        });\n\t      }\n\t\n\t      var updateButton;\n\t      if (this.props.edit) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      }\n\t\n\t      //This block of code should potentially be moved to setFormData();\n\t      //Consider Refactoring...\n\t      var specimenTypeUnits = {};\n\t      if (this.state.currentSpecimenType) {\n\t\n\t        //This modifies the selections for unit drop down based on the chosend specimen type \n\t        for (var id in this.props.specimenTypeUnits[this.state.currentSpecimenType]) {\n\t          specimenTypeUnits[id] = this.props.specimenTypeUnits[this.state.currentSpecimenType][id].unit;\n\t        }\n\t\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t        if (specimenTypeFieldsObject) {\n\t          var specimenTypeFields = this.getSpecimenTypeFields(specimenTypeFieldsObject);\n\t        }\n\t      }\n\t\n\t      var specimenFields;\n\t      if (this.state.currentSpecimenType) {\n\t        specimenFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'containerType',\n\t            label: 'Container Type',\n\t            options: this.props.containerTypesPrimary,\n\t            onUserInput: this.setFormData,\n\t            ref: 'containerType',\n\t            required: true,\n\t            value: this.state.formData.containerType\n\t          }),\n\t          containerParentForm,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Quantity',\n\t            onUserInput: this.setFormData,\n\t            ref: 'quantity',\n\t            required: true,\n\t            value: this.state.formData.quantity,\n\t            hasError: this.state.formErrors.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: specimenTypeUnits,\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.unitId\n\t          }),\n\t          specimenTypeFields,\n\t          React.createElement(DateElement, {\n\t            name: 'date',\n\t            label: 'Date',\n\t            minYear: '2000',\n\t            maxYear: '2018',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.date\n\t          }),\n\t          React.createElement(TimeElement, {\n\t            name: 'time',\n\t            label: 'Time',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.time\n\t          }),\n\t          React.createElement(TextareaElement, {\n\t            name: 'comments',\n\t            label: 'Comments',\n\t            onUserInput: this.setFormData,\n\t            ref: 'comments',\n\t            value: this.state.formData.comments\n\t          })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankSpecimen',\n\t          onSubmit: this.handleUpdate,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(SelectElement, {\n\t          name: 'specimenType',\n\t          label: 'Specimen Type',\n\t          options: this.props.specimenTypes,\n\t          onUserInput: this.setFormData,\n\t          ref: 'specimenType',\n\t          required: true,\n\t          value: this.state.formData.specimenType\n\t        }),\n\t        specimenFields,\n\t        updateButton\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      if (formElement === \"specimenType\" && value !== \"\") {\n\t        //This throws a warning if the specimen type is changed because of the cascading effects this \n\t        //would cause.\n\t        if (this.props.edit) {\n\t          swal({\n\t            title: \"Warning\",\n\t            text: \"Changing the specimen type will result in the loss of any preparation or anaylsis \" + \"data for this specimen. You will also need to manually change the specimen type of any \" + \"aliquots derived from this specimen. Proceed with caution.\",\n\t            type: \"warning\",\n\t            showCancelButton: true,\n\t            confirmButtonText: 'Cancel Change',\n\t            cancelButtonText: 'Proceed'\n\t          }, function (isConfirm) {\n\t            if (isConfirm) {\n\t              this.props.toggleEdit();\n\t            } else {}\n\t          }.bind(this));\n\t        }\n\t\n\t        //This is to eliminate the values for the specimen type fields\n\t        //This could potentially be improved later to retain the values\n\t        //for the fields that are common across specimen types\n\t        formData.data = {};\n\t        this.setState({\n\t          currentSpecimenType: value\n\t        });\n\t      }\n\t\n\t      if (formElement === \"containerType\" && value !== \"\") {\n\t        this.setState({\n\t          currentContainerType: value\n\t        });\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setSpecimenTypeFieldFormData',\n\t    value: function setSpecimenTypeFieldFormData(formElement, value) {\n\t      var formData = this.state.formData;\n\t      formData.data[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setContainerParentFormData',\n\t    value: function setContainerParentFormData(containerParentFormData) {\n\t      var formData = this.state.formData;\n\t\n\t      for (var field in containerParentFormData) {\n\t        formData[field] = containerParentFormData[field];\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      if (!this.props.edit) {\n\t        var formData = this.state.formData;\n\t        this.props.setParentFormData(formData);\n\t      }\n\t    }\n\t\n\t    // This generates all the form fields for a given specimen type\n\t\n\t  }, {\n\t    key: 'getSpecimenTypeFields',\n\t    value: function getSpecimenTypeFields(fieldsObject) {\n\t      var _this3 = this;\n\t\n\t      var specimenTypeFields = Object.keys(fieldsObject).map(function (attribute) {\n\t        var datatype = _this3.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"text\" || datatype === \"number\") {\n\t          if (fieldsObject[attribute]['refTableId'] == null) {\n\t            return React.createElement(TextboxElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this3.state.formData.data[attribute],\n\t              hasError: _this3.state.formErrors[attribute],\n\t              errorMessage: \"This is a \" + datatype + \" field.\"\n\t            });\n\t          }\n\t\n\t          // OPTIONS FOR SELECT ELEMENT WILL MOST LIKELY BE PASSED VIA AJAX CALL\n\t          // BUT IT CAN ALSO BE PRELOADED --\n\t          // ASK RIDA HOW THIS SHOULD BE DONE\n\t          if (fieldsObject[attribute]['refTableId'] !== null) {\n\t            return React.createElement(SelectElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              options: '',\n\t              onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribte]['required'],\n\t              value: _this3.state.formData.data[attribute]\n\t            });\n\t          }\n\t        }\n\t\n\t        if (datatype === \"datetime\") {\n\t          return React.createElement(DateElement, {\n\t            name: attribute,\n\t            label: fieldsObject[attribute]['name'],\n\t            onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t            ref: attribute,\n\t            required: fieldsObject[attribute]['required'],\n\t            value: _this3.state.formData.data[attribute]\n\t          });\n\t        }\n\t\n\t        if (datatype === \"boolean\") {}\n\t      });\n\t\n\t      return specimenTypeFields;\n\t    }\n\t  }, {\n\t    key: 'handleUpdate',\n\t    value: function handleUpdate(e) {\n\t      //more things will go here later\n\t      this.updateSpecimen();\n\t    }\n\t  }, {\n\t    key: 'updateSpecimen',\n\t    value: function updateSpecimen() {\n\t      var _$$ajax;\n\t\n\t      var formData = this.state.formData;\n\t      formData['data'] = JSON.stringify(formData['data']);\n\t\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax((_$$ajax = {\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false\n\t      }, _defineProperty(_$$ajax, 'processData', false), _defineProperty(_$$ajax, 'xhr', function () {\n\t        var xhr = new window.XMLHttpRequest();\n\t        return xhr;\n\t      }.bind(this)), _defineProperty(_$$ajax, 'success', function () {\n\t        //Update Parent Specimen Page Here\n\t        formData.data = JSON.parse(formData.data);\n\t        this.props.refreshParent();\n\t      }.bind(this)), _defineProperty(_$$ajax, 'error', function (err) {\n\t        console.error(err);\n\t        var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t        this.setState({\n\t          errorMessage: msg\n\t        });\n\t        swal(msg, \"\", \"error\");\n\t      }.bind(this)), _$$ajax));\n\t    }\n\t  }]);\n\t\n\t  return SpecimenCollectionForm;\n\t}(React.Component);\n\t\n\tSpecimenCollectionForm.propTypes = {\n\t  setParentFormData: React.PropTypes.func,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = SpecimenCollectionForm;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar ContainerParentForm = function (_React$Component) {\n\t  _inherits(ContainerParentForm, _React$Component);\n\t\n\t  function ContainerParentForm(props) {\n\t    _classCallCheck(this, ContainerParentForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ContainerParentForm.__proto__ || Object.getPrototypeOf(ContainerParentForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      formErrors: {},\n\t      errorMessage: null\n\t    };\n\t\n\t    _this.mapFormOptions = _this.mapFormOptions.bind(_this);\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ContainerParentForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      // This is where we will pass a parentContainerId if it already exists\n\t      // These are simply to provide 'Defaults' to the page. I am not sure that in\n\t      // if they are entirely necessary.\n\t      if (this.props.container) {\n\t        var formData = this.state.formData;\n\t        formData['container'] = JSON.stringify(this.props.container);\n\t        formData['parentContainerId'] = this.props.container.parentContainerId;\n\t\n\t        this.setState({\n\t          formData: formData\n\t        });\n\t      }\n\t    }\n\t\n\t    //map options for forms\n\t\n\t  }, {\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(rawObject, targetAttribute) {\n\t      var data = {};\n\t      for (var id in rawObject) {\n\t        data[id] = rawObject[id][targetAttribute];\n\t      }\n\t\n\t      return data;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      var parentContainerField;\n\t      var coordinateField;\n\t      var containerBarcodesNonPrimary = this.mapFormOptions(this.props.containersNonPrimary, 'barcode');\n\t\n\t      parentContainerField = React.createElement(SelectElement, {\n\t        name: 'parentContainerId',\n\t        label: 'Parent Container Barcode',\n\t        options: containerBarcodesNonPrimary,\n\t        onUserInput: this.setFormData,\n\t        ref: 'parentContainerId',\n\t        required: false,\n\t        value: this.state.formData.parentContainerId\n\t      });\n\t\n\t      // THIS IS VERY POORLY DONE AND NEEDS REFACTORING\n\t      if (this.state.formData.parentContainerId) {\n\t\n\t        var dimensionId = this.props.containersNonPrimary[this.state.formData.parentContainerId].dimensionId;\n\t\n\t        if (dimensionId) {\n\t          var dimensions = this.props.containerDimensions[dimensionId];\n\t\n\t          // Total coordinates is determined by the product of the dimensions\n\t          var coordinatesTotal = 1;\n\t          for (var dimension in dimensions) {\n\t            coordinatesTotal = coordinatesTotal * dimensions[dimension];\n\t          }\n\t\n\t          // Mapping of options for the SelectElement\n\t          var coordinates = {};\n\t          for (var i = 1; i <= coordinatesTotal; i++) {\n\t\n\t            // If the coordinate is already taken, skip it.\n\t            // this doubling of if statements seems unnecessary\n\t            if (this.props.containerCoordinates[this.state.formData.parentContainerId]) {\n\t              if (this.props.containerCoordinates[this.state.formData.parentContainerId][i]) {\n\t                continue;\n\t              }\n\t            }\n\t\n\t            coordinates[i] = i;\n\t          }\n\t\n\t          coordinateField = React.createElement(SelectElement, {\n\t            name: 'coordinate',\n\t            label: 'Coordinate',\n\t            options: coordinates,\n\t            onUserInput: this.setFormData,\n\t            ref: 'coordinate',\n\t            required: false,\n\t            value: this.state.formData.coordinate\n\t          });\n\t        }\n\t      }\n\t\n\t      var updateButton;\n\t      if (this.props.container) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          onSubmit: this.handleSubmit\n\t        },\n\t        parentContainerField,\n\t        coordinateField,\n\t        updateButton\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t    // Validation functions will go here later...\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t\n\t          this.props.refreshParent();\n\t          swal(\"Parent Container Update Successful!\", \"\", \"success\");\n\t          this.props.onSuccess();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      //let visitLabel = this.state.formData.visitLabel;\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      if (formElement === 'parentContainerId') {\n\t        formData['coordinate'] = \"\";\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      if (!this.props.container) {\n\t        var formData = this.state.formData;\n\t        this.props.setParentFormData(formData);\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return ContainerParentForm;\n\t}(React.Component);\n\t\n\tContainerParentForm.propTypes = {\n\t  DataURL: React.PropTypes.string,\n\t  action: React.PropTypes.string,\n\t  barcode: React.PropTypes.string,\n\t  refreshTable: React.PropTypes.func,\n\t  onSuccess: React.PropTypes.func\n\t};\n\t\n\texports.default = ContainerParentForm;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _containerBarcodeForm = __webpack_require__(8);\n\t\n\tvar _containerBarcodeForm2 = _interopRequireDefault(_containerBarcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankContainerForm = function (_React$Component) {\n\t  _inherits(BiobankContainerForm, _React$Component);\n\t\n\t  function BiobankContainerForm(props) {\n\t    _classCallCheck(this, BiobankContainerForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankContainerForm.__proto__ || Object.getPrototypeOf(BiobankContainerForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      barcodeFormList: {},\n\t      formErrors: {},\n\t      countBarcodeForms: [1],\n\t      errorMessage: null\n\t    };\n\t\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    _this.validateForm = _this.validateForm.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.containerSubmit = _this.containerSubmit.bind(_this);\n\t    _this.addBarcodeForm = _this.addBarcodeForm.bind(_this);\n\t    _this.setBarcodeFormData = _this.setBarcodeFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankContainerForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t\n\t      //if this is a child specimen form then certain formData is set when component mounts\n\t      if (this.props.child) {\n\t        var formData = this.state.formData;\n\t        formData['parentSpecimen'] = this.props.specimenId;\n\t        formData['visitLabel'] = this.props.sessionId;\n\t\n\t        this.setState({\n\t          formData: formData\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      //Styling for remove Barcode button\n\t      var glyphStyle = {\n\t        color: '#D3D3D3',\n\t        margin: 'auto'\n\t      };\n\t      var buttonStyle = {\n\t        appearance: 'none',\n\t        outline: 'none',\n\t        boxShadow: 'none',\n\t        borderColor: 'transparent',\n\t        backgroundColor: 'transparent'\n\t\n\t      };\n\t\n\t      //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n\t      var barcodeForms = [];\n\t\n\t      var _loop = function _loop(i) {\n\t        barcodeForms.push(React.createElement(_containerBarcodeForm2.default, {\n\t          setParentFormData: _this2.setBarcodeFormData,\n\t          id: _this2.state.countBarcodeForms[i],\n\t          containerTypesNonPrimary: _this2.props.containerTypesNonPrimary,\n\t          containerBarcodesNonPrimary: _this2.props.containerBarcodesNonPrimary,\n\t          button: i + 1 === _this2.state.countBarcodeForms.length ? React.createElement(\n\t            'button',\n\t            {\n\t              type: 'button',\n\t              className: 'btn btn-success btn-sm',\n\t              onClick: _this2.addBarcodeForm\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-plus' })\n\t          ) : React.createElement(\n\t            'button',\n\t            {\n\t              type: 'button',\n\t              className: 'btn btn-primary-outline btn-sm',\n\t              style: buttonStyle,\n\t              onClick: function onClick() {\n\t                return _this2.removeBarcodeForm(i);\n\t              }\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-remove', style: glyphStyle })\n\t          )\n\t        }));\n\t      };\n\t\n\t      for (var i = 0; i < this.state.countBarcodeForms.length; i++) {\n\t        _loop(i);\n\t      }\n\t\n\t      //ALLOW THEM TO CANCEL THE FORM AND DELETE BARCODE FORMS\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenForm',\n\t          onSubmit: this.handleSubmit,\n\t          ref: 'form'\n\t        },\n\t        React.createElement('br', null),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement(SelectElement, {\n\t              name: 'site',\n\t              label: 'Site',\n\t              options: this.props.sites,\n\t              onUserInput: this.setFormData,\n\t              ref: 'site',\n\t              required: true,\n\t              value: this.state.formData.site\n\t            })\n\t          )\n\t        ),\n\t        barcodeForms,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-xs-3 col-xs-offset-9' },\n\t          React.createElement(ButtonElement, { label: 'Submit' })\n\t        )\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t    /**\n\t     * Returns a valid name for the file to be specimened\n\t     *\n\t     * @param {string} visitLabel - Visit label selected from the dropdown\n\t     * @param {string} instrument - Instrument selected from the dropdown\n\t     * @return {string} - Generated valid filename for the current selection\n\t     */\n\t\n\t  }, {\n\t    key: 'validateForm',\n\t    value: function validateForm(formElement, value) {\n\t      var _this3 = this;\n\t\n\t      var formErrors = this.state.formErrors;\n\t\n\t      //validate barcode regex\n\t      if (formElement === \"barcode\" && value !== \"\") {\n\t        if (!/^hello/.test(this.state.formData.barcode)) {\n\t          formErrors.barcode = true;\n\t        } else {\n\t          formErrors.barcode = false;\n\t        }\n\t      }\n\t\n\t      //validate that quantity is a number and less than capacity\n\t      if (formElement === \"quantity\" && value !== \"\") {\n\t        if (isNaN(value) || value > this.props.capacities[this.state.currentContainerType]) {\n\t          formErrors.quantity = true;\n\t        } else {\n\t          formErrors.quantity = false;\n\t        }\n\t      }\n\t\n\t      //validate datatypes and regex of generated type attributes\n\t      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t      var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t\n\t        var datatype = _this3.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"number\") {\n\t          if (formElement === attribute) {\n\t            if (isNaN(value) && value !== \"\") {\n\t              formErrors[attribute] = true;\n\t            } else {\n\t              formErrors[attribute] = false;\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      this.setState({\n\t        formErrors: formErrors\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Handle form submission\n\t     * @param {object} e - Form submission event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t\n\t      this.containerSubmit();\n\t    }\n\t  }, {\n\t    key: 'containerSubmit',\n\t    value: function containerSubmit() {\n\t      // Set form data\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t\n\t          //refreshes table \n\t          this.props.refreshParent();\n\t\n\t          //provide success message\n\t          swal(\"Container Submission Successful!\", \"\", \"success\");\n\t\n\t          //close modal window\n\t          this.props.onSuccess();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      //let visitLabel = this.state.formData.visitLabel;\n\t\n\t      //LOOK AT THIS LATER - THE SWITCH TO PROPS MESSED THIS ALL UP \n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setBarcodeFormData',\n\t    value: function setBarcodeFormData(barcodeFormData, barcodeId) {\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      barcodeFormList[barcodeId] = barcodeFormData;\n\t      formData['barcodeFormList'] = barcodeFormList;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'addBarcodeForm',\n\t    value: function addBarcodeForm() {\n\t      var countBarcodeForms = this.state.countBarcodeForms;\n\t      countBarcodeForms.push(countBarcodeForms[countBarcodeForms.length - 1] + 1);\n\t      this.setState({\n\t        countBarcodeForms: countBarcodeForms\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removeBarcodeForm',\n\t    value: function removeBarcodeForm(index) {\n\t      var countBarcodeForms = this.state.countBarcodeForms;\n\t      countBarcodeForms.splice(index, 1);\n\t      this.setState({\n\t        countBarcodeForms: countBarcodeForms\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return BiobankContainerForm;\n\t}(React.Component);\n\t\n\tBiobankContainerForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired,\n\t  barcode: React.PropTypes.string,\n\t  refreshTable: React.PropTypes.func\n\t};\n\t\n\texports.default = BiobankContainerForm;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Container Barcode Form\n\t *\n\t * Acts a subform for ContainerForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar ContainerBarcodeForm = function (_React$Component) {\n\t  _inherits(ContainerBarcodeForm, _React$Component);\n\t\n\t  function ContainerBarcodeForm(props) {\n\t    _classCallCheck(this, ContainerBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ContainerBarcodeForm.__proto__ || Object.getPrototypeOf(ContainerBarcodeForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      formErrors: {}\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setSpecimenFormData = _this.setSpecimenFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ContainerBarcodeForm, [{\n\t    key: \"render\",\n\t    value: function render() {\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: \"biobankBarcode\"\n\t        },\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-11\" },\n\t            React.createElement(\n\t              \"div\",\n\t              {\n\t                \"data-toggle\": \"collapse\",\n\t                \"data-target\": \"#\" + this.props.id\n\t              },\n\t              React.createElement(TextboxElement, {\n\t                name: \"barcode\",\n\t                label: \"Barcode \" + this.props.id,\n\t                onUserInput: this.setFormData,\n\t                ref: \"barcode\",\n\t                required: true,\n\t                value: this.state.formData[\"barcode\"],\n\t                hasError: this.state.formErrors[\"barcode\"],\n\t                errorMessage: \"Incorrect Barcode format for this Specimen and Container Type\"\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-1\" },\n\t            this.props.button\n\t          )\n\t        ),\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row\" },\n\t          React.createElement(\"div\", { className: \"col-xs-2\" }),\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-9\" },\n\t            React.createElement(\n\t              \"div\",\n\t              { id: this.props.id, className: \"collapse\" },\n\t              React.createElement(SelectElement, {\n\t                name: \"containerType\",\n\t                label: \"Container Type\",\n\t                options: this.props.containerTypesNonPrimary,\n\t                onUserInput: this.setFormData,\n\t                required: true,\n\t                value: this.state.formData.containerType\n\t              })\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: \"setFormData\",\n\t    value: function setFormData(formElement, value) {\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: \"setSpecimenFormData\",\n\t    value: function setSpecimenFormData(specimenFormData) {\n\t      var formData = this.state.formData;\n\t\n\t      for (var attribute in specimenFormData) {\n\t        formData[attribute] = specimenFormData[attribute];\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: \"setParentFormData\",\n\t    value: function setParentFormData() {\n\t      this.props.setParentFormData(this.state.formData, this.props.id);\n\t    }\n\t  }]);\n\t\n\t  return ContainerBarcodeForm;\n\t}(React.Component);\n\t\n\tContainerBarcodeForm.propTypes = {\n\t  id: React.PropTypes.string,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = ContainerBarcodeForm;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Tabs component.\n\t *\n\t * @author Loris Team\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Tabs Component.\n\t * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n\t * and corresponding tab panes.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * 1. Define an array of tabs with IDs and labels\n\t *\n\t * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n\t *\n\t * 2. Pass tabList as <Tab> property and <TabPane> as child\n\t *  ```\n\t * <Tabs tabs={tabList} defaultTab=\"tab1\">\n\t *   <TabPane TabId={tabList[0].id}>\n\t *     // Tab content goes here\n\t *   </TabPane>\n\t * </Tabs>\n\t * ```\n\t * =================================================\n\t *\n\t */\n\tvar Tabs = function (_React$Component) {\n\t  _inherits(Tabs, _React$Component);\n\t\n\t  function Tabs(props) {\n\t    _classCallCheck(this, Tabs);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call(this, props));\n\t\n\t    var hash = window.location.hash;\n\t    var activeTab = \"\";\n\t\n\t    /**\n\t     * Determine the initial active tab in this order\n\t     * 1. Try to infer from the URL, otherwise\n\t     * 2. Try to infer from the defaultTab prop, otherwise\n\t     * 3. Set to be the first tab of the list\n\t     */\n\t    if (_this.props.updateURL && hash) {\n\t      activeTab = hash.substr(1);\n\t    } else if (_this.props.defaultTab) {\n\t      activeTab = _this.props.defaultTab;\n\t    } else if (_this.props.tabs.length > 0) {\n\t      activeTab = _this.props.tabs[0].id;\n\t    }\n\t\n\t    _this.state = {\n\t      activeTab: activeTab\n\t    };\n\t\n\t    _this.handleClick = _this.handleClick.bind(_this);\n\t    _this.getTabs = _this.getTabs.bind(_this);\n\t    _this.getTabPanes = _this.getTabPanes.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Tabs, [{\n\t    key: 'handleClick',\n\t    value: function handleClick(tabId, e) {\n\t      this.setState({ activeTab: tabId });\n\t      this.props.onTabChange(tabId);\n\t\n\t      // Add tab href to URL querystring and scroll the page to top\n\t      if (this.props.updateURL) {\n\t        var scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n\t        window.location.hash = e.target.hash;\n\t        $('html,body').scrollTop(scrollDistance);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getTabs',\n\t    value: function getTabs() {\n\t      var tabs = this.props.tabs.map(function (tab) {\n\t        var tabClass = this.state.activeTab === tab.id ? 'active' : null;\n\t        var href = \"#\" + tab.id;\n\t        var tabID = \"tab-\" + tab.id;\n\t        return React.createElement(\n\t          'li',\n\t          {\n\t            role: 'presentation',\n\t            className: tabClass,\n\t            key: tab.id\n\t          },\n\t          React.createElement(\n\t            'a',\n\t            { id: tabID,\n\t              href: href,\n\t              role: 'tab',\n\t              'data-toggle': 'tab',\n\t              onClick: this.handleClick.bind(null, tab.id)\n\t            },\n\t            tab.label\n\t          )\n\t        );\n\t      }.bind(this));\n\t\n\t      return tabs;\n\t    }\n\t  }, {\n\t    key: 'getTabPanes',\n\t    value: function getTabPanes() {\n\t      var tabPanes = React.Children.map(this.props.children, function (child, key) {\n\t        if (child) {\n\t          return React.cloneElement(child, {\n\t            activeTab: this.state.activeTab,\n\t            key: key\n\t          });\n\t        }\n\t      }.bind(this));\n\t\n\t      return tabPanes;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var tabs = this.getTabs();\n\t      var tabPanes = this.getTabPanes();\n\t      var tabStyle = {\n\t        marginLeft: 0,\n\t        marginBottom: '5px'\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'ul',\n\t          { className: 'nav nav-tabs', role: 'tablist', style: tabStyle },\n\t          tabs\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tab-content' },\n\t          tabPanes\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Tabs;\n\t}(React.Component);\n\t\n\tTabs.propTypes = {\n\t  tabs: React.PropTypes.array.isRequired,\n\t  defaultTab: React.PropTypes.string,\n\t  updateURL: React.PropTypes.bool\n\t};\n\tTabs.defaultProps = {\n\t  onTabChange: function onTabChange() {},\n\t  updateURL: false\n\t};\n\t\n\t/*\n\t * TabPane component.\n\t * Used to wrap content for every tab.\n\t */\n\t\n\tvar TabPane = function (_React$Component2) {\n\t  _inherits(TabPane, _React$Component2);\n\t\n\t  function TabPane() {\n\t    _classCallCheck(this, TabPane);\n\t\n\t    return _possibleConstructorReturn(this, (TabPane.__proto__ || Object.getPrototypeOf(TabPane)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(TabPane, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var classList = \"tab-pane\";\n\t      var title = void 0;\n\t\n\t      if (this.props.TabId === this.props.activeTab) {\n\t        classList += \" active\";\n\t      }\n\t      if (this.props.Title) {\n\t        title = React.createElement(\n\t          'h1',\n\t          null,\n\t          this.props.Title\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { role: 'tabpanel', className: classList, id: this.props.TabId },\n\t        title,\n\t        this.props.children\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return TabPane;\n\t}(React.Component);\n\t\n\tTabPane.propTypes = {\n\t  TabId: React.PropTypes.string.isRequired,\n\t  Title: React.PropTypes.string,\n\t  activeTab: React.PropTypes.string\n\t};\n\t\n\texports.Tabs = Tabs;\n\texports.TabPane = TabPane;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Modal = __webpack_require__(11);\n\t\n\tvar _Modal2 = _interopRequireDefault(_Modal);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file contains React components for Modal component.\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Henri Rabalais\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.1.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/**\n\t * Modal Component.\n\t * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * =================================================\n\t *\n\t */\n\t\n\tvar FormModal = function (_React$Component) {\n\t  _inherits(FormModal, _React$Component);\n\t\n\t  function FormModal(props) {\n\t    _classCallCheck(this, FormModal);\n\t\n\t    var _this = _possibleConstructorReturn(this, (FormModal.__proto__ || Object.getPrototypeOf(FormModal)).call(this, props));\n\t\n\t    _this.state = { show: false, throwWarning: false };\n\t\n\t    _this.openModal = _this.openModal.bind(_this);\n\t    _this.closeModal = _this.closeModal.bind(_this);\n\t    _this.confirmClose = _this.confirmClose.bind(_this);\n\t    _this.setWarning = _this.setWarning.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(FormModal, [{\n\t    key: \"renderChildren\",\n\t    value: function renderChildren() {\n\t      var _this2 = this;\n\t\n\t      return React.Children.map(this.props.children, function (child) {\n\t        return React.cloneElement(child, { onSuccess: _this2.closeModal, onChange: _this2.setWarning });\n\t      });\n\t    }\n\t  }, {\n\t    key: \"openModal\",\n\t    value: function openModal() {\n\t      this.setState({\n\t        show: true\n\t      });\n\t    }\n\t  }, {\n\t    key: \"setWarning\",\n\t    value: function setWarning() {\n\t      this.setState({\n\t        throwWarning: true\n\t      });\n\t    }\n\t  }, {\n\t    key: \"confirmClose\",\n\t    value: function confirmClose() {\n\t      if (this.state.throwWarning) {\n\t        swal({\n\t          title: \"Are You Sure?\",\n\t          text: \"Leaving the form will result in the loss of any information entered.\",\n\t          type: \"warning\",\n\t          showCancelButton: true,\n\t          confirmButtonText: 'Proceed',\n\t          cancelButtonText: 'Cancel'\n\t        }, function () {\n\t          this.closeModal();\n\t        }.bind(this));\n\t      } else {\n\t        this.closeModal();\n\t      }\n\t    }\n\t  }, {\n\t    key: \"closeModal\",\n\t    value: function closeModal() {\n\t      this.setState({\n\t        show: false,\n\t        throwWarning: false\n\t      });\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      return React.createElement(\n\t        _Modal2.default,\n\t        _extends({\n\t          closeModal: this.confirmClose,\n\t          openModal: this.openModal,\n\t          show: this.state.show\n\t        }, this.props),\n\t        this.renderChildren()\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return FormModal;\n\t}(React.Component);\n\t\n\tFormModal.propTypes = {\n\t  title: React.PropTypes.string,\n\t  buttonClass: React.PropTypes.string,\n\t  buttonStyle: React.PropTypes.object,\n\t  buttonContent: React.PropTypes.object\n\t};\n\tFormModal.defaultProps = {\n\t  buttonClass: 'btn btn-primary'\n\t};\n\t\n\texports.default = FormModal;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Modal component.\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Modal Component.\n\t * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * =================================================\n\t *\n\t */\n\tvar Modal = function (_React$Component) {\n\t  _inherits(Modal, _React$Component);\n\t\n\t  function Modal(props) {\n\t    _classCallCheck(this, Modal);\n\t\n\t    return _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));\n\t  }\n\t\n\t  _createClass(Modal, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      // Black Background with Alpha Channel\n\t      var backdropStyle = {\n\t        position: 'fixed',\n\t        zIndex: 9998,\n\t        top: 0,\n\t        bottom: 0,\n\t        left: 0,\n\t        right: 0,\n\t        backgroundColor: 'rgba(0,0,0,0.3)',\n\t        padding: 50\n\t      };\n\t\n\t      // White Modal Window\n\t      var modalStyle = {\n\t        position: 'relative',\n\t        maxWidth: 1000,\n\t        maxHeight: '100%',\n\t        margin: '0 auto',\n\t        backgroundColor: '#fff',\n\t        borderRadius: 10,\n\t        overflowY: 'auto',\n\t        zIndex: 9999\n\t      };\n\t\n\t      var titleStyle = {\n\t        display: 'flex',\n\t        flexDirection: 'row',\n\t        alignItems: 'center',\n\t        background: '#093782',\n\t        height: '70px',\n\t        borderTopRightRadius: '10',\n\t        color: '#FFFFFF',\n\t        fontSize: 24,\n\t        padding: 20\n\t      };\n\t\n\t      var glyphStyle = {\n\t        marginLeft: 'auto',\n\t        cursor: 'pointer'\n\t      };\n\t\n\t      var bodyStyle = {\n\t        padding: 15\n\t      };\n\t\n\t      var button = React.createElement(\n\t        'button',\n\t        {\n\t          type: 'button',\n\t          className: this.props.buttonClass,\n\t          onClick: this.props.openModal,\n\t          style: this.props.buttonStyle\n\t        },\n\t        this.props.buttonContent\n\t      );\n\t\n\t      var modal;\n\t      if (this.props.show) {\n\t        modal = React.createElement(\n\t          'div',\n\t          { style: backdropStyle, onClick: this.props.closeModal },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              style: modalStyle,\n\t              onClick: function onClick(e) {\n\t                e.stopPropagation();\n\t              }\n\t            },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                style: titleStyle\n\t              },\n\t              this.props.title,\n\t              React.createElement('span', {\n\t                className: 'glyphicon glyphicon-remove',\n\t                style: glyphStyle,\n\t                onClick: this.props.closeModal\n\t              })\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                style: bodyStyle\n\t              },\n\t              this.props.children\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        button,\n\t        modal\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Modal;\n\t}(React.Component);\n\t\n\tModal.propTypes = {\n\t  title: React.PropTypes.string,\n\t  buttonClass: React.PropTypes.string,\n\t  buttonStyle: React.PropTypes.object,\n\t  buttonContent: React.PropTypes.object,\n\t  show: React.PropTypes.boolean,\n\t  closeModal: React.PropTypes.func,\n\t  openModal: React.PropTypes.func\n\t};\n\tModal.defaultProps = {\n\t  buttonClass: 'btn btn-primary'\n\t};\n\t\n\texports.default = Modal;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Loader\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Loader component\n\t */\n\tvar Loader = function (_React$Component) {\n\t  _inherits(Loader, _React$Component);\n\t\n\t  function Loader(props) {\n\t    _classCallCheck(this, Loader);\n\t\n\t    return _possibleConstructorReturn(this, (Loader.__proto__ || Object.getPrototypeOf(Loader)).call(this, props));\n\t  }\n\t\n\t  _createClass(Loader, [{\n\t    key: \"render\",\n\t    value: function render() {\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"loader-container\" },\n\t        React.createElement(\"div\", { className: \"loader\" })\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Loader;\n\t}(React.Component);\n\t\n\texports.default = Loader;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\n\t * Modify behaviour of specified column cells in the Data Table component\n\t * @param {string} column - column name\n\t * @param {string} cell - cell content\n\t * @param {arrray} rowData - array of cell contents for a specific row\n\t * @param {arrray} rowHeaders - array of table headers (column names)\n\t * @return {*} a formated table cell for a given column\n\t */\n\tfunction formatColumn(column, cell, rowData, rowHeaders) {\n\t  // If a column if set as hidden, don't display it\n\t  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n\t  //  return null;\n\t  //}\n\t\n\t  // Create the mapping between rowHeaders and rowData in a row object.\n\t  var row = {};\n\t  rowHeaders.forEach(function (header, index) {\n\t    row[header] = rowData[index];\n\t  }, this);\n\t\n\t  // create array of classes to be added to td tag\n\t  var classes = [];\n\t\n\t  // convert array to string, with blank space separator\n\t  classes = classes.join(\" \");\n\t\n\t  //const hasWritePermission = loris.userHasPermission('media_read');\n\t  if (column === 'Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: specimenURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Parent Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Parent Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: specimenURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Container Barcode') {\n\t    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Container Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: containerURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  // if (column === 'Visit Label') {\n\t  //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n\t  //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n\t  //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n\t  //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n\t  //   }\n\t  // }\n\t\n\t  // if (column === 'Edit Metadata') {\n\t  //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n\t  //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n\t  // }\n\t\n\t  return React.createElement(\n\t    \"td\",\n\t    { className: classes },\n\t    cell\n\t  );\n\t}\n\t\n\texports.default = formatColumn;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\n\t * Modify behaviour of specified column cells in the Data Table component\n\t * @param {string} column - column name\n\t * @param {string} cell - cell content\n\t * @param {arrray} rowData - array of cell contents for a specific row\n\t * @param {arrray} rowHeaders - array of table headers (column names)\n\t * @return {*} a formated table cell for a given column\n\t */\n\tfunction formatColumn(column, cell, rowData, rowHeaders) {\n\t  // If a column if set as hidden, don't display it\n\t  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n\t  //  return null;\n\t  //}\n\t\n\t  // Create the mapping between rowHeaders and rowData in a row object.\n\t  var row = {};\n\t  rowHeaders.forEach(function (header, index) {\n\t    row[header] = rowData[index];\n\t  }, this);\n\t\n\t  // create array of classes to be added to td tag\n\t  var classes = [];\n\t\n\t  // convert array to string, with blank space separator\n\t  classes = classes.join(\" \");\n\t\n\t  //const hasWritePermission = loris.userHasPermission('media_read');\n\t  if (column === 'Barcode') {\n\t    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: containerURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Parent Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Parent Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: containerURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  // if (column === 'Visit Label') {\n\t  //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n\t  //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n\t  //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n\t  //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n\t  //   }\n\t  // }\n\t\n\t  // if (column === 'Edit Metadata') {\n\t  //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n\t  //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n\t  // }\n\t\n\t  return React.createElement(\n\t    \"td\",\n\t    { className: classes },\n\t    cell\n\t  );\n\t}\n\t\n\texports.default = formatColumn;\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// modules/biobank/js/biobankIndex.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 821b344be6e6a4c65b0d","import FilterForm from 'FilterForm';\nimport BiobankSpecimenForm from './specimenForm';\nimport BiobankContainerForm from './containerForm';\nimport {Tabs, TabPane} from 'Tabs';\nimport FormModal from 'FormModal';\nimport Loader from 'Loader';\nimport formatColumnSpecimen from './columnFormatterSpecimen';\nimport formatColumnContainer from './columnFormatterContainer';\n\nclass BiobankIndex extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoaded: false,\n      specimenFilter: {},\n      containerFilter: {},\n      isOpen: false,\n    };\n\n    // Bind component instance to custom methods\n    this.loadPage = this.loadPage.bind(this);\n    this.fetchSpecimenData = this.fetchSpecimenData.bind(this);\n    this.fetchFormData = this.fetchFormData.bind(this);\n    this.fetchContainerData = this.fetchContainerData.bind(this);\n    this.updateSpecimenFilter = this.updateSpecimenFilter.bind(this);\n    this.updateContainerFilter = this.updateContainerFilter.bind(this);\n    this.resetFilters = this.resetFilters.bind(this);\n    this.mapFormOptions = this.mapFormOptions.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadPage();\n  }\n\n  loadPage() {\n    this.fetchSpecimenData();\n    this.fetchFormData();\n    this.fetchContainerData();\n  }\n  /**\n   * Retrieve data from the provided URL and save it in state\n   * Additionaly add hiddenHeaders to global loris variable\n   * for easy access by columnFormatter.\n   */\n  fetchSpecimenData() {\n    $.ajax(this.props.specimenDataURL, {\n      method: \"GET\",\n      dataType: 'json',\n      success: function(data) {\n        this.setState({\n          SpecimenData: data,\n          isLoaded: true\n        });\n      }.bind(this),\n      error: function(error) {\n        console.error(error);\n      }\n    });\n  }\n\n  fetchContainerData() {\n    $.ajax(this.props.containerDataURL, {\n      method: \"GET\",\n      dataType: 'json',\n      success: function(data) {\n        this.setState({\n          ContainerData: data,\n          isLoaded: true\n        });\n      }.bind(this),\n      error: function(error) {\n        console.error(error);\n      }\n    });\n  }\n\n  fetchFormData() {\n    $.ajax(this.props.formDataURL, {\n      method: \"GET\",\n      dataType: 'json',\n      success: function(data) {\n        this.setState({\n          FormData: data,\n          isLoaded: true\n        });\n      }.bind(this),\n      error: function(error) {\n        console.error(error);\n      }\n    });\n  }\n\n  updateSpecimenFilter(specimenFilter) {\n    this.setState({specimenFilter});\n  }\n\n  // This works,\n  // but there must be a way to do this with just one updateFilter function\n  updateContainerFilter(containerFilter) {\n    this.setState({containerFilter});\n  }\n\n  resetFilters() {\n    this.refs.biobankFilter.clearFilter();\n  }\n\n //map options for forms\n  mapFormOptions(rawObject, targetAttribute) {\n    var data = {}; \n    for (var id in rawObject) {\n      data[id] = rawObject[id][targetAttribute];\n    }   \n\n    return data;\n  }\n\n  render() {\n    // Waiting for async data to load\n    if (!this.state.isLoaded) {\n      return (\n        <Loader/>\n      );\n    }\n\n    let addSpecimenButton;\n    let addContainerButton;\n    if (loris.userHasPermission('biobank_write')) {\n\n       /**\n        * Map Options for Form Select Elements of Specimen Form\n        */\n       let specimenTypes = this.mapFormOptions(this.state.FormData.specimenTypes, 'type');\n       let containerTypesPrimary = this.mapFormOptions(this.state.FormData.containerTypesPrimary, 'label');\n        \n       let specimenButtonContent = (\n         <div>\n           <span\n             className='glyphicon glyphicon-plus'\n             style={{marginRight: '5px'}}\n           />\n           Add Specimen\n         </div>\n       );\n\n       addSpecimenButton = (\n         <FormModal\n           title='Add New Specimen'\n           buttonClass='btn btn-success'\n           buttonStyle={{marginLeft: '10px', border: 'none'}}\n           buttonContent={specimenButtonContent}\n           throwWarning={true}\n         >\n           <BiobankSpecimenForm\n             specimenTypes={specimenTypes}\n             containerTypesPrimary={containerTypesPrimary}\n             containersNonPrimary={this.state.FormData.containersNonPrimary}\n             specimenTypeAttributes={this.state.FormData.specimenTypeAttributes}\n             attributeDatatypes={this.state.FormData.attributeDatatypes}\n             capacities={this.state.FormData.capacities}\n             containerDimensions={this.state.FormData.containerDimensions}\n             containerCoordinates={this.state.FormData.containerCoordinates}\n             specimenTypeUnits={this.state.FormData.specimenTypeUnits}\n             pSCIDs={this.state.FormData.pSCIDs}\n             visits={this.state.FormData.visits}\n             sessionData={this.state.FormData.sessionData}\n             action={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=submitSpecimen`}\n             refreshParent={this.loadPage}\n           />\n         </FormModal>\n       );\n\n       let containerTypesNonPrimary = this.mapFormOptions(this.state.FormData.containerTypesNonPrimary, 'label');\n\n       let containerButtonContent = (\n         <div>\n           <span\n             className='glyphicon glyphicon-plus'\n             style={{marginRight: '5px'}}\n           />\n           Add Container\n         </div>\n       );\n\n       addContainerButton = (\n         <FormModal\n           title='Add New Container'\n           buttonClass='btn btn-success'\n           buttonStyle={{marginLeft: '10px', border: 'none'}}\n           buttonContent={containerButtonContent}\n         >\n           <BiobankContainerForm\n             containerTypesNonPrimary={containerTypesNonPrimary}\n             sites={this.state.FormData.sites}\n             action={`${loris.BaseURL}/biobank/ajax/ContainerInfo.php?action=submitContainer`}\n             refreshParent={this.loadPage}\n           />\n         </FormModal>\n       ); \n    }\n\n    //Look at CCNA code from Zaliqa to modify this to be more streamline\n    var tabList = [\n      {id: \"specimens\", label: \"Specimens\"},\n      {id: \"containers\", label: \"Containers\"}\n    ];\n\n    return (\n    <div id='biobank-page'>\n      <Tabs tabs={tabList} defaultTab=\"specimens\" updateURL={true}>\n        <TabPane TabId={tabList[0].id}>\n          <FilterForm\n            Module=\"biobank\"\n            name=\"specimen_filter\"\n            id=\"specimen_filter\"\n            ref=\"specimenFilter\"\n            columns={3}\n            formElements={this.state.SpecimenData.form}\n            onUpdate={this.updateSpecimenFilter}\n            filter={this.state.specimenFilter}\n          >\n            <br/>\n            <StaticElement text={addSpecimenButton}/>\n            <StaticElement/>\n            <ButtonElement label=\"Clear Filters\" type=\"reset\" onUserInput={this.resetFilters}/>\n          </FilterForm>\n          <StaticDataTable\n            Data={this.state.SpecimenData.Data}\n            Headers={this.state.SpecimenData.Headers}\n            Filter={this.state.specimenFilter}\n            getFormattedCell={formatColumnSpecimen}\n          />\n        </TabPane>\n        <TabPane TabId={tabList[1].id}>\n          <FilterForm\n            Module=\"biobank\"\n            name=\"container_filter\"\n            id=\"container_filter\"\n            ref=\"containerFilter\"\n            columns={3}\n            formElements={this.state.ContainerData.form}\n            onUpdate={this.updateContainerFilter}\n            filter={this.state.containerFilter}\n\t\t  >\n            <br/>\n            <StaticElement text={addContainerButton}/>\n            <StaticElement/>\n            <ButtonElement label=\"Clear Filters\" type=\"reset\" onUserInput={this.resetFilters}/>\n          </FilterForm>\t\t\t\n          <StaticDataTable\n            Data={this.state.ContainerData.Data}\n            Headers={this.state.ContainerData.Headers}\n            Filter={this.state.containerFilter}\n            getFormattedCell={formatColumnContainer}\n          />\n        </TabPane>\n      </Tabs>\n      </div>\n    );\n  }\n}\n\n$(function() {\n  const biobankIndex = (\n    <div className=\"page-biobank\">\n      <BiobankIndex \n        specimenDataURL={`${loris.BaseURL}/biobank/?format=json`} \n        containerDataURL={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=getContainerFilterData`} \n        formDataURL={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=getFormData`}\n      />\n    </div>\n  );\n\n  ReactDOM.render(biobankIndex, document.getElementById(\"lorisworkspace\"));\n});\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/biobankIndex.js","/**\n * This file contains React component for FilterForm\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\nimport Panel from 'Panel';\n\n/**\n * FilterForm component.\n * A wrapper for form elements inside a selection filter.\n *\n * Adds necessary filter callbacks to all children and passes them to FormElement\n * for proper rendering.\n *\n * Keeps track of filter object and sends it to parent on every update.\n *\n * //HACK/NOTE: Loris has special behaviour for `candID` attribute in the query string,\n * making it impossible to use it for selection filters. This components renames\n * all `candID` fields to `candidateID` automatically before appending them to URL.\n *\n */\nclass FilterForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    // Bind component instance to custom methods\n    this.clearFilter = this.clearFilter.bind(this);\n    this.getFormChildren = this.getFormChildren.bind(this);\n    this.setFilter = this.setFilter.bind(this);\n    this.onElementUpdate = this.onElementUpdate.bind(this);\n\n    // Keeps track of querystring values\n    // Saved as class variable instead of keeping in state\n    this.queryString = QueryString.get();\n  }\n\n  componentDidMount() {\n    let filter = {};\n    let queryString = this.queryString;\n\n    // Initiaze filter using querystring value\n    Object.keys(queryString).forEach(function(key) {\n      let filterKey = (key === 'candidateID') ? 'candID' : key;\n      filter[filterKey] = {\n        value: queryString[key],\n        exactMatch: false\n      };\n    });\n\n    // Update parent component\n    this.props.onUpdate(filter);\n  }\n\n  /**\n   * Clear the filter object, querystring and input fields\n   */\n  clearFilter() {\n    this.queryString = QueryString.clear(this.props.Module);\n    this.props.onUpdate({});\n  }\n\n  /**\n   * Itterates through FilterForm children, sets necessary callback functions\n   * and initializes filterTable\n   *\n   * @return {Array} formChildren - array of children with necessary props\n   */\n  getFormChildren() {\n    let formChildren = [];\n    React.Children.forEach(this.props.children, function(child, key) {\n      // If child is a React component (i.e not a simple DOM element)\n      if (React.isValidElement(child) &&\n        typeof child.type === \"function\" &&\n        child.props.onUserInput\n      ) {\n        let callbackFunc = child.props.onUserInput;\n        let callbackName = callbackFunc.name;\n        let elementName = child.type.displayName;\n        let queryFieldName = (child.props.name === 'candID') ? 'candidateID' : child.props.name;\n        let filterValue = this.queryString[queryFieldName];\n        // If callback function was not set, set it to onElementUpdate() for form\n        // elements and to clearFilter() for <ButtonElement type='reset'/>.\n        if (callbackName === \"onUserInput\") {\n          if (elementName === \"ButtonElement\" && child.props.type === \"reset\") {\n            callbackFunc = this.clearFilter;\n          } else {\n            callbackFunc = this.onElementUpdate.bind(null, elementName);\n          }\n        }\n        // Pass onUserInput and value props to all children\n        formChildren.push(React.cloneElement(child, {\n          onUserInput: callbackFunc,\n          value: filterValue ? filterValue : '',\n          key: key\n        }));\n        // Initialize filter for StaticDataTable\n        this.setFilter(elementName, child.props.name, filterValue);\n      } else {\n        formChildren.push(React.cloneElement(child, {key: key}));\n      }\n    }.bind(this));\n\n    return formChildren;\n  }\n\n  /**\n   * Appends entry to filter object or deletes it if value is\n   * empty.\n   *\n   * Sets exactMatch to true for all SelectElements (i.e dropdowns)\n   * in order to force StaticDataTable to do exact comparaison\n   *\n   * @param {string} type - form element type (i.e component name)\n   * @param {string} key - the name of the form element\n   * @param {string} value - the value of the form element\n   *\n   * @return {{}} filter - filterData\n   */\n  setFilter(type, key, value) {\n    let filter = {};\n    if (this.props.filter) {\n      filter = JSON.parse(JSON.stringify(this.props.filter));\n    }\n\n    if (key && value) {\n      filter[key] = {};\n      filter[key].value = value;\n      filter[key].exactMatch = (type === \"SelectElement\");\n    } else if (filter && key && value === '') {\n      delete filter[key];\n    }\n\n    return filter;\n  }\n\n  /**\n   * Sets filter object and querystring to reflect values of input fields\n   *\n   * @param {string} type - form element type (i.e component name)\n   * @param {string} fieldName - the name of the form element\n   * @param {string} fieldValue - the value of the form element\n   */\n  onElementUpdate(type, fieldName, fieldValue) {\n    // Make sure both key/value are string before sending them to querystring\n    if (typeof fieldName !== \"string\" || typeof fieldValue !== \"string\") {\n      return;\n    }\n\n    // Update query string\n    let queryFieldName = (fieldName === 'candID') ? 'candidateID' : fieldName;\n    this.queryString = QueryString.set(this.queryString, queryFieldName, fieldValue);\n\n    // Update filter and get new filter object\n    let filter = this.setFilter(type, fieldName, fieldValue);\n    this.props.onUpdate(filter);\n  }\n\n  render() {\n    // Get formatted children\n    let formChildren = this.getFormChildren();\n    let formElements = this.props.formElements;\n\n    if (formElements) {\n      Object.keys(formElements).forEach(function(fieldName) {\n        let queryFieldName = (fieldName === 'candID') ? 'candidateID' : fieldName;\n        formElements[fieldName].onUserInput = this.onElementUpdate.bind(null, fieldName);\n        formElements[fieldName].value = this.queryString[queryFieldName];\n      }.bind(this));\n    }\n\n    return (\n      <Panel\n        id={this.props.id}\n        height={this.props.height}\n        title={this.props.title}\n      >\n        <FormElement {...this.props}>\n          {formChildren}\n        </FormElement>\n      </Panel>\n    );\n  }\n}\n\nFilterForm.defaultProps = {\n  id: 'selection-filter',\n  height: '100%',\n  title: 'Selection Filter',\n  onUpdate: function() {\n    console.warn('onUpdate() callback is not set!');\n  }\n};\nFilterForm.propTypes = {\n  Module: React.PropTypes.string.isRequired,\n  filter: React.PropTypes.object.isRequired,\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  onUpdate: React.PropTypes.func\n};\n\nexport default FilterForm;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/FilterForm.js","/**\n * This file contains React component for Panel\n *\n * @author Alex I.\n * @version 1.0.0\n *\n */\n\n/**\n * Panel component\n * Wraps children in a collapsible bootstrap panel\n */\nclass Panel extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsed: this.props.initCollapsed\n    };\n\n    // Initialize panel class based on collapsed status\n    this.panelClass = (\n      this.props.initCollapsed ?\n        \"panel-collapse collapse\" :\n        \"panel-collapse collapse in\"\n    );\n\n    this.toggleCollapsed = this.toggleCollapsed.bind(this);\n  }\n\n  toggleCollapsed() {\n    this.setState({collapsed: !this.state.collapsed});\n  }\n\n  render() {\n    // Change arrow direction based on collapse status\n    let glyphClass = (\n      this.state.collapsed ?\n        \"glyphicon pull-right glyphicon-chevron-down\" :\n        \"glyphicon pull-right glyphicon-chevron-up\"\n    );\n\n    let pencilGlyph;\n    if (this.props.edit) {\n      pencilGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-pencil\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.edit}\n        /> \n      );\n    } \n\n    let plusGlyph;\n    if (this.props.add) {\n      plusGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-plus\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.add}\n        />\n      );\n    }\n\n    let removeGlyph;\n    if (this.props.cancel) {\n      removeGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-remove\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.cancel}\n        />\n      );\n    }\n\n    // Add panel header, if title is set\n    const panelHeading = this.props.title ? (\n      <div\n        className=\"panel-heading\"\n      >\n        <span \n          className={glyphClass}\n          onClick={this.toggleCollapsed}\n          data-toggle=\"collapse\"\n          data-target={'#' + this.props.id}\n          style={{cursor: 'pointer'}}\n        />\n        {pencilGlyph}\n        {plusGlyph}\n        {removeGlyph}\n        {this.props.title}\n      </div>\n    ) : '';\n\n    return (\n      <div className=\"panel panel-primary\">\n        {panelHeading}\n        <div id={this.props.id} className={this.panelClass} role=\"tabpanel\">\n          <div className=\"panel-body\" style={{height: this.props.height}}>\n            {this.props.children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPanel.propTypes = {\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  edit: React.PropTypes.func,\n  add: React.PropTypes.func\n};\nPanel.defaultProps = {\n  initCollapsed: false,\n  id: 'default-panel',\n  height: '100%'\n};\n\nexport default Panel;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Panel.js","import BiobankBarcodeForm from './barcodeForm.js';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankSpecimenForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      barcodeFormList: {},\n      barcodes: {1: {}},\n      errorMessage: null,\n      formErrors: {},\n      countBarcodeForms: 1\n    };\n\n    //this.getValidFileName = this.getValidFileName.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    //this.isValidFileName = this.isValidFileName.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.specimenSubmit = this.specimenSubmit.bind(this);\n    this.addBarcodeForm = this.addBarcodeForm.bind(this);\n    this.setBarcodeFormData = this.setBarcodeFormData.bind(this);\n  }\n\n  componentDidMount() {\n\n    //if this is a child specimen form then certain formData is set when component mounts\n    if (this.props.child) {\n      var formData = this.state.formData;\n      formData['parentSpecimen'] = this.props.specimenId;\n      formData['pscid'] = this.props.candidateId;\n      formData['visitLabel'] = this.props.sessionId;\n      formData['unitId'] = this.props.unitId;\n\n      this.setState({\n        formData: formData\n      });\n    }\n  }\n\n  render() {\n\n    //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n    var barcodeForms = Object.keys(this.state.barcodes).map((key) => {\n       return ( \n        <BiobankBarcodeForm\n          key={key}\n          id={key} \n          formData={this.state.barcodes[key] ? this.state.barcodes[key] : null}\n          removeBarcodeForm={key !== 1 ? () => this.removeBarcodeForm(key) : null}\n          addBarcodeForm={key == this.state.countBarcodeForms ? this.addBarcodeForm : null}\n          duplicateBarcodeForm={key == this.state.countBarcodeForms  && this.state.barcodeFormList[key] ? () => this.duplicateBarcodeForm(key) : null}\n          setParentFormData={this.setBarcodeFormData}\n          specimenTypes={this.props.specimenTypes}\n          containerTypesPrimary={this.props.containerTypesPrimary}\n          containersNonPrimary={this.props.containersNonPrimary}\n          specimenTypeAttributes={this.props.specimenTypeAttributes}\n          attributeDatatypes={this.props.attributeDatatypes}\n          capacities={this.props.capacities}\n          containerDimensions={this.props.containerDimensions}\n          containerCoordinates={this.props.containerCoordinates}\n          specimenTypeUnits={this.props.specimenTypeUnits}\n          units={this.props.units}\n        />\n      );\n    });\n\n    let globalFields;\n    let remainingQuantityFields;\n    if (this.props.child) {\n      globalFields = (   \n        <div>\n          <StaticElement\n            label=\"Parent Specimen\"\n            text={this.props.barcode}\n          />\n          <StaticElement\n            label=\"PSCID\"\n            text={this.props.pscid}\n          />\n          <StaticElement\n            label=\"Visit Label\"\n            text={this.props.visit}\n          />\n        </div>\n      );\n\n      //It may be wise to make unit static and forced, or atleast prepopulated --\n      remainingQuantityFields = (\n        <div>\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Remaining Quantity\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={this.props.specimenUnits}\n            onUserInput={this.setFormData}\n            emptyOption={false}\n            required={true}\n            value={this.state.formData.unitId}\n          />\n        </div>\n      );\n\n    } else {\n      globalFields = (\n          <div>\n            <SelectElement\n              name=\"pscid\"\n              label=\"PSCID\"\n              options={this.props.pSCIDs}\n              onUserInput={this.setFormData}\n              ref=\"pscid\"\n              required={true}\n              value={this.state.formData.pscid}\n            />\n            <SelectElement\n              name=\"visitLabel\"\n              label=\"Visit Label\"\n              options={this.state.visits}\n              onUserInput={this.setFormData}\n              ref=\"visitLabel\"\n              required={true}\n              value={this.state.formData.visitLabel}\n              disabled={this.state.formData.pscid ? false : true}\n            />\n          </div>\n      );\n    }\n\n    //ALLOW THEM TO CANCEL THE FORM AND DELETE BARCODE FORMS\n    return (\n      <FormElement\n        name=\"specimenForm\"\n        id='specimenForm'\n        onSubmit={this.handleSubmit}\n        ref=\"form\"\n      >\n        <br/>\n        <div className='row'>\n          <div className=\"col-xs-11\">\n            {globalFields}\n          </div>\n        </div>\n        {barcodeForms}\n        <div className='row'>\n          <div className=\"col-xs-11\">\n            {remainingQuantityFields}\n          </div>\n        </div>\n        <div className=\"col-xs-3 col-xs-offset-9\">\n          <ButtonElement label=\"Submit\"/>\n        </div>\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n  /**\n   * Returns a valid name for the file to be specimened\n   *\n   * @param {string} pscid - PSCID selected from the dropdown\n   * @param {string} visitLabel - Visit label selected from the dropdown\n   * @param {string} instrument - Instrument selected from the dropdown\n   * @return {string} - Generated valid filename for the current selection\n   */\n//  getValidFileName(pscid, visitLabel, instrument) {\n//    var fileName = pscid + \"_\" + visitLabel;\n//    if (instrument) fileName += \"_\" + instrument;\n//\n//    return fileName;\n//  }\n\n\n  validateForm(formElement, value) {\n    let formErrors = this.state.formErrors;\n\n    //validate barcode regex\n    if (formElement === \"barcode\" && value !== \"\") {\n      if (!(/^hello/.test(this.state.formData.barcode))) {\n        formErrors.barcode = true;\n      } else {\n        formErrors.barcode = false;\n      }\n    }\n\n    //validate that quantity is a number and less than capacity\n    if (formElement === \"quantity\" && value !== \"\") {\n      if (isNaN(value) || (value > this.props.capacities[this.state.currentContainerType])) {\n        formErrors.quantity = true;\n      } else {\n        formErrors.quantity = false;\n      }\n    }\n\n    //validate datatypes and regex of generated type attributes\n    var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n    var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n\n      let datatype = this.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"number\") {\n        if (formElement === attribute) {\n          if (isNaN(value) && value !== \"\") {\n            formErrors[attribute] = true;\n          } else {\n            formErrors[attribute] = false;\n          }\n        }\n      }\n    })\n\n    this.setState({\n      formErrors: formErrors\n    });\n\n  }\n\n\n  /**\n   * Handle form submission\n   * @param {object} e - Form submission event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    let formRefs = this.refs;\n    //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\n    // Validate the form\n    if (!this.isValidForm(formRefs, formData)) {\n      return;\n    }\n\n\n//    // Validate specimened file name\n//    let instrument = formData.instrument ? formData.instrument : null;\n//    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n//    let requiredFileName = this.getValidFileName(\n//      formData.pscid, formData.visitLabel, instrument\n//    );\n//    if (!this.isValidFileName(requiredFileName, fileName)) {\n//      swal(\n//        \"Invalid Specimen name!\",\n//        \"File name should begin with: \" + requiredFileName,\n//        \"error\"\n//      );\n//      return;\n//    }\n\n    // Check for duplicate file names\n//    let isDuplicate = biobankFiles.indexOf(fileName);\n//    if (isDuplicate >= 0) {\n//      swal({\n//        title: \"Are you sure?\",\n//        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n//        type: \"warning\",\n//        showCancelButton: true,\n//        confirmButtonText: 'Yes, I am sure!',\n//        cancelButtonText: \"No, cancel it!\"\n//      }, function(isConfirm) {\n//        if (isConfirm) {\n//          this.specimenFile();\n//        } else {\n//          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n//        }\n//      }.bind(this));\n//    } else {\n\n    this.specimenSubmit();\n//    }\n  }\n\n  /*\n   * Uploads the file to the server\n   */\n  specimenSubmit() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        // Trigger an update event to update all observers (i.e DataTable)\n        // THIS CURRENTLY DOES NOT WORK - LOOK INTO IT\n        let event = new CustomEvent('update-datatable');\n        window.dispatchEvent(event);\n\n        this.props.refreshParent();\n        swal(\"Specimen Submission Successful!\", \"\", \"success\");\n        this.props.onSuccess();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Checks if the inputted file name is valid\n   *\n   * @param {string} requiredFileName - Required file name\n   * @param {string} fileName - Provided file name\n   * @return {boolean} - true if fileName starts with requiredFileName, false\n   *   otherwise\n   */\n//  isValidFileName(requiredFileName, fileName) {\n//    if (fileName === null || requiredFileName === null) {\n//      return false;\n//    }\n//\n//    return (fileName.indexOf(requiredFileName) === 0);\n//  }\n\n  /**\n   * Validate the form\n   *\n   * @param {object} formRefs - Object containing references to React form elements\n   * @param {object} formData - Object containing form data inputed by user\n   * @return {boolean} - true if all required fields are filled, false otherwise\n   */\n  isValidForm(formRefs, formData) {\n    var isValidForm = true;\n\n    var requiredFields = {\n      pscid: null,\n      visitLabel: null,\n    };\n\n    Object.keys(requiredFields).map(function(field) {\n      if (formData[field]) {\n        requiredFields[field] = formData[field];\n      } else if (formRefs[field]) {\n        formRefs[field].props.hasError = true;\n        isValidForm = false;\n      }\n    });\n    this.forceUpdate();\n\n    return isValidForm;\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    // This lets the modal window know that there is formData\n    // and will cause a warning to be thrown of the modal window\n    // is exited/\n    this.props.onChange();\n  \n    if (formElement === \"pscid\" && value !== \"\") {\n      this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n    }\n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  setBarcodeFormData(barcodeFormData, barcodeId) {\n    var formData = this.state.formData;\n    var barcodeFormList = this.state.barcodeFormList;\n    barcodeFormList[barcodeId] = barcodeFormData;\n    formData['barcodeFormList'] = barcodeFormList;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  addBarcodeForm() {\n    let barcodes = this.state.barcodes;\n    let count = this.state.countBarcodeForms;\n    \n    barcodes[count+1] = {}; \n\n    this.setState({\n      barcodes: barcodes,\n      countBarcodeForms: count + 1\n    });\n  }\n\n  duplicateBarcodeForm(key) {\n    let barcodes = this.state.barcodes;\n    let count = this.state.countBarcodeForms;\n    let barcodeFormList = this.state.barcodeFormList;\n    \n    if (barcodeFormList[key]) {\n      barcodes[count+1] = JSON.parse(JSON.stringify(barcodeFormList[key])); \n      console.log(barcodes);\n      delete barcodes[count+1].barcode;\n\n      this.setState({\n        barcodes: barcodes,\n        countBarcodeForms: count + 1\n      });\n    } else {\n      swal(\"nothing to duplicate!\");\n    }\n  }\n\n  removeBarcodeForm(index) {\n    let countBarcodeForms = this.state.countBarcodeForms;\n    countBarcodeForms.splice(index, 1);\n    this.setState({\n      countBarcodeForms: countBarcodeForms\n    });\n  }\n}\n\nBiobankSpecimenForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired,\n  barcode: React.PropTypes.string,\n  refreshTable: React.PropTypes.func\n};\n\nexport default BiobankSpecimenForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenForm.js","import SpecimenCollectionForm from './collectionForm'\n\n/**\n * Biobank Barcode Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass BiobankBarcodeForm extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      formData: {},\n      formErrors: {},\n    };\n   \n    this.setFormData = this.setFormData.bind(this);\n    this.setCollectionFormData = this.setCollectionFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n  }\n\n  componentDidMount() {\n  }\n\n  render() {\n\n    let addBarcodeFormButton;\n    let duplicateBarcodeFormButton;\n    if (this.props.addBarcodeForm) {\n      addBarcodeFormButton = (\n        <button\n          type='button'\n          className='btn btn-success btn-sm'\n          onClick={this.props.addBarcodeForm}\n        >\n          <span className='glyphicon glyphicon-plus' style={{marginRight: 5}}/>\n          New\n        </button>\n      );\n    }\n\t\n    if (this.props.duplicateBarcodeForm) {\n      duplicateBarcodeFormButton = (\n        <button\n          type='button'\n          className='btn btn-success btn-sm'\n          onClick={this.props.duplicateBarcodeForm}\n        >\n          <span className='glyphicon glyphicon-plus'style={{marginRight: 5}}/>\n          Duplicate\n        </button>\n      );\n    }\n\n\n    let removeBarcodeFormButton;\n    if (this.props.removeBarcodeForm) {\n      const glyphStyle = {\n        color: '#DDDDDD',\n        maring: 'auto'\n      }\n\n      const buttonStyle = {\n        appearance: 'non',\n        outline: 'non',\n        boxShadow: 'none',\n        borderColor: 'transparent',\n        backgroundColor: 'transparent'\n      }\n\n      removeBarcodeFormButton = (\n        <button\n          type='button'\n          className='btn btn-primary-outline btn-sm'\n          style={buttonStyle}\n          onClick={this.props.removeBarcodeForm}\n        >\n        <span className='glyphicon glyphicon-remove' style={glyphStyle}/>\n        </button>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"biobankBarcode\"\n      >\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <div \n              data-toggle=\"collapse\" \n              data-target={\"#\" + this.props.id}\n            >   \n              <TextboxElement\n                name={\"barcode\"}\n                label={\"Barcode \" + this.props.id}\n                onUserInput={this.setFormData}\n                ref={\"barcode\"}\n                required={true}\n                value={this.state.formData[\"barcode\"]}\n                hasError={this.state.formErrors[\"barcode\"]}\n                errorMessage=\"Incorrect Barcode format for this Specimen and Container Type\"\n              />\n            </div>\n          </div>\n          <div className=\"col-xs-1\">\n            {removeBarcodeFormButton}\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xs-2\"/>\n          <div className=\"col-xs-9\">\n            <div id={this.props.id} className=\"collapse\">\n              <SpecimenCollectionForm\n                formData={this.props.formData}\n                setParentFormData={this.setCollectionFormData}\n                specimenTypes={this.props.specimenTypes}\n                specimenTypeAttributes={this.props.specimenTypeAttributes}\n                attributeDatatypes={this.props.attributeDatatypes}\n                containerTypesPrimary={this.props.containerTypesPrimary}\n                containersNonPrimary={this.props.containersNonPrimary}\n                containerDimensions={this.props.containerDimensions}\n                containerCoordinates={this.props.containerCoordinates}\n                specimenTypeUnits={this.props.specimenTypeUnits}\n                stati={this.props.stati}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <div className=\"col-xs-3\"/>\n            <div className=\"col-xs-1\">\n              {addBarcodeFormButton}\n            </div>\n            <div className=\"col-xs-1\">\n              {duplicateBarcodeFormButton}\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    this.props.onChange instanceof Function && this.props.onChange();   \n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState(\n      {\n      formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setCollectionFormData(collectionFormData) {\n    var formData = this.state.formData;\n    \n    for (let field in collectionFormData) {\n      formData[field] = collectionFormData[field]\n    }\n \n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    this.props.setParentFormData(this.state.formData, this.props.id);\n  }\n}\n\nBiobankBarcodeForm.propTypes = {\n  \n  id: React.PropTypes.string,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n}\n\nexport default BiobankBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/barcodeForm.js","import ContainerParentForm from './containerParentForm'\n\n\n/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenCollectionForm extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      formData: {data:{}},\n      currentSpecimenType: this.props.edit ? this.props.specimenType : null,\n      currentContainerType: this.props.edit ? this.props.containerType : null,\n      formErrors: {},\n    };\n\n    this.setFormData = this.setFormData.bind(this);\n    this.setSpecimenTypeFieldFormData = this.setSpecimenTypeFieldFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n    this.setContainerParentFormData = this.setContainerParentFormData.bind(this);\n    this.getSpecimenTypeFields = this.getSpecimenTypeFields.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.updateSpecimen = this.updateSpecimen.bind(this);\n  }\n\n  componentDidMount() {\n    let formData = this.state.formData;\n\n    if (this.props.formData) {\n      formData = this.props.formData;\n      let currentSpecimenType = this.state.currentSpecimenType;\n      \n      this.setState({\n        currentSpecimenType: formData.specimenType\n      });\n    }\n\n    if (this.props.edit) {\n      formData['specimenId']    = this.props.specimenId;\n      formData['containerId']   = this.props.containerId;\n      formData['specimenType']  = this.props.specimenType;\n      formData['containerType'] = this.props.containerType;\n      formData['quantity']      = this.props.collection.quantity;\n      formData['unitId']        = this.props.collection.unitId;\n      formData['date']          = this.props.collection.date;\n      formData['time']          = this.props.collection.time;\n      formData['comments']      = this.props.collection.comments;\n\n      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n      if (specimenTypeFieldsObject) {\n        var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n          formData.data[attribute] = this.props.collection.data[attribute];\n        });\n      }\n    }\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  mapFormOptions(rawObject, targetAttribute) {\n    let data = {};\n    for (let id in rawObject) {\n      data[id] = rawObject[id][targetAttribute];\n    }\n\n    return data;\n  }\n\n  render() {\n\n    // This entire parentContainerField and parentContainerCoordinateField section should go into its own\n    // re-usable component\n    var containerParentForm;\n    if (!this.props.edit) {\n      containerParentForm = (\n        <ContainerParentForm\n          setParentFormData={this.setContainerParentFormData}\n          containersNonPrimary={this.props.containersNonPrimary}\n          containerDimensions={this.props.containerDimensions}\n          containerCoordinates={this.props.containerCoordinates}\n        />\n      );\n    }\n\n    var updateButton;\n    if (this.props.edit) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    }\n\n    //This block of code should potentially be moved to setFormData();\n    //Consider Refactoring...\n    var specimenTypeUnits = {};\n    if (this.state.currentSpecimenType) {\n     \n      //This modifies the selections for unit drop down based on the chosend specimen type \n      for (var id in this.props.specimenTypeUnits[this.state.currentSpecimenType]) {\n        specimenTypeUnits[id] = this.props.specimenTypeUnits[this.state.currentSpecimenType][id].unit;\n      }\n\n      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n      if (specimenTypeFieldsObject) {\n        var specimenTypeFields = this.getSpecimenTypeFields(specimenTypeFieldsObject);\n      }\n    }\n\n    var specimenFields;\n    if (this.state.currentSpecimenType) {\n      specimenFields = (\n        <div>\n          <SelectElement\n            name=\"containerType\"\n            label=\"Container Type\"\n            options={this.props.containerTypesPrimary}\n            onUserInput={this.setFormData}\n            ref=\"containerType\"\n            required={true}\n            value={this.state.formData.containerType}\n          />\n          {containerParentForm}\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Quantity\"\n            onUserInput={this.setFormData}\n            ref=\"quantity\"\n            required={true}\n            value={this.state.formData.quantity}\n            hasError={this.state.formErrors.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={specimenTypeUnits}\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.unitId}\n          />\n          {specimenTypeFields}\n          <DateElement\n            name=\"date\"\n            label=\"Date\"\n            minYear=\"2000\"\n            maxYear=\"2018\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.date}\n          />\n          <TimeElement\n            name=\"time\"\n            label=\"Time\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.time}\n          />\n          <TextareaElement\n            name=\"comments\"\n            label=\"Comments\"\n            onUserInput={this.setFormData}\n            ref=\"comments\"\n            value={this.state.formData.comments}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"biobankSpecimen\"\n        onSubmit={this.handleUpdate}\n        ref=\"form\"\n      >\n        <SelectElement\n          name=\"specimenType\"\n          label=\"Specimen Type\"\n          options={this.props.specimenTypes}\n          onUserInput={this.setFormData}\n          ref=\"specimenType\"\n          required={true}\n          value={this.state.formData.specimenType}\n        />\n        {specimenFields}\n        {updateButton}\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n\n    let formData = this.state.formData;\n    formData[formElement] = value;\n\n    if (formElement === \"specimenType\" && value !== \"\") {\n      //This throws a warning if the specimen type is changed because of the cascading effects this \n      //would cause.\n      if (this.props.edit) {\n        swal({\n          title: \"Warning\",\n          text: \"Changing the specimen type will result in the loss of any preparation or anaylsis \"+\n            \"data for this specimen. You will also need to manually change the specimen type of any \"+\n            \"aliquots derived from this specimen. Proceed with caution.\",\n          type: \"warning\",\n          showCancelButton: true,\n          confirmButtonText: 'Cancel Change',\n          cancelButtonText: 'Proceed',\n        }, \n        function(isConfirm) {\n          if (isConfirm) {\n            this.props.toggleEdit();\n          } else {\n          }\n        }.bind(this));\n      }\n\n      //This is to eliminate the values for the specimen type fields\n      //This could potentially be improved later to retain the values\n      //for the fields that are common across specimen types\n      formData.data = {}; \n      this.setState({\n        currentSpecimenType: value\n      });\n    }\n\n    if (formElement === \"containerType\" && value !== \"\") {\n      this.setState({\n        currentContainerType: value\n      });\n    }\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setSpecimenTypeFieldFormData(formElement, value) {\n    let formData = this.state.formData;\n    formData.data[formElement] = value;\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  \n  }\n\n  setContainerParentFormData(containerParentFormData) {\n    var formData = this.state.formData;\n\n    for (let field in containerParentFormData) {\n      formData[field] = containerParentFormData[field];\n    }\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    if (!this.props.edit) {\n      var formData = this.state.formData;\n      this.props.setParentFormData(formData);\n    }\n  }\n\n\n  // This generates all the form fields for a given specimen type\n  getSpecimenTypeFields(fieldsObject) {\n    var specimenTypeFields = Object.keys(fieldsObject).map((attribute) => {\n      let datatype = this.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"text\" || datatype === \"number\") {\n        if (fieldsObject[attribute]['refTableId'] == null) {\n          return (\n            <TextboxElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              onUserInput={this.setSpecimenTypeFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribute]['required']}\n              value={this.state.formData.data[attribute]}\n              hasError={this.state.formErrors[attribute]}\n              errorMessage={\"This is a \" + datatype + \" field.\"}\n            />\n          );\n        }\n\n        // OPTIONS FOR SELECT ELEMENT WILL MOST LIKELY BE PASSED VIA AJAX CALL\n        // BUT IT CAN ALSO BE PRELOADED --\n        // ASK RIDA HOW THIS SHOULD BE DONE\n        if (fieldsObject[attribute]['refTableId'] !== null) {\n          return (\n            <SelectElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              options=\"\"\n              onUserInput={this.setSpecimenTypeFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribte]['required']}\n              value={this.state.formData.data[attribute]}\n            />\n          );\n        }\n      }\n\n      if (datatype === \"datetime\") {\n        return (\n          <DateElement\n            name={attribute}\n            label={fieldsObject[attribute]['name']}\n            onUserInput={this.setSpecimenTypeFieldFormData}\n            ref={attribute}\n            required={fieldsObject[attribute]['required']}\n            value={this.state.formData.data[attribute]}\n          />\n        );\n      }\n\n      if (datatype === \"boolean\") {\n      \n      }\n    })\n\n    return specimenTypeFields;\n  }\n\n  handleUpdate(e) {\n    //more things will go here later\n    this.updateSpecimen();\n  }\n\n  updateSpecimen() {\n    let formData = this.state.formData;\n    formData['data'] = JSON.stringify(formData['data']);\n\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        //Update Parent Specimen Page Here\n        formData.data = JSON.parse(formData.data);\n        this.props.refreshParent();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n}\n\nSpecimenCollectionForm.propTypes = {\n  setParentFormData: React.PropTypes.func,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n}\n\nexport default SpecimenCollectionForm;\n\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/collectionForm.js","/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass ContainerParentForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      formErrors: {},\n      errorMessage: null\n    };\n\n    this.mapFormOptions = this.mapFormOptions.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n  }\n\n  componentDidMount() {\n    // This is where we will pass a parentContainerId if it already exists\n    // These are simply to provide 'Defaults' to the page. I am not sure that in\n    // if they are entirely necessary.\n    if (this.props.container) {\n    let formData = this.state.formData;\n    formData['container'] = JSON.stringify(this.props.container);\n    formData['parentContainerId'] = this.props.container.parentContainerId;\n\n    this.setState({\n      formData: formData\n    });\n    }\n  }\n\n  //map options for forms\n  mapFormOptions(rawObject, targetAttribute) {\n    var data = {}; \n    for (var id in rawObject) {\n      data[id] = rawObject[id][targetAttribute];\n    }   \n\n    return data;\n  }\n\n  render() {\n\n    var parentContainerField;\n    var coordinateField;\n    let containerBarcodesNonPrimary = this.mapFormOptions(this.props.containersNonPrimary, 'barcode');\n\n    parentContainerField = ( \n      <SelectElement\n        name=\"parentContainerId\"\n        label=\"Parent Container Barcode\"\n        options={containerBarcodesNonPrimary}\n        onUserInput={this.setFormData}\n        ref=\"parentContainerId\"\n        required={false}\n        value={this.state.formData.parentContainerId}\n      />  \n    );  \n\n    // THIS IS VERY POORLY DONE AND NEEDS REFACTORING\n    if (this.state.formData.parentContainerId) {\n\n      let dimensionId = this.props.containersNonPrimary[this.state.formData.parentContainerId].dimensionId;\n      \n      if (dimensionId) {\n        let dimensions = this.props.containerDimensions[dimensionId];\n\n        // Total coordinates is determined by the product of the dimensions\n        let coordinatesTotal = 1;\n        for (let dimension in dimensions) {\n          coordinatesTotal = coordinatesTotal * dimensions[dimension];\n        }   \n\n        // Mapping of options for the SelectElement\n        let coordinates = {}; \n        for (let i = 1; i <= coordinatesTotal; i++) {\n\n          // If the coordinate is already taken, skip it.\n          // this doubling of if statements seems unnecessary\n          if (this.props.containerCoordinates[this.state.formData.parentContainerId]) {\n            if (this.props.containerCoordinates[this.state.formData.parentContainerId][i]) {\n              continue; \n            }\n          }\n\n          coordinates[i] = i;\n        }   \n\n        coordinateField = ( \n          <SelectElement\n            name=\"coordinate\"\n            label=\"Coordinate\"\n            options={coordinates}\n            onUserInput={this.setFormData}\n            ref=\"coordinate\"\n            required={false}\n            value={this.state.formData.coordinate}\n          />  \n        );  \n      }\n    }   \n\n    var updateButton;\n    if (this.props.container) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    }\n\n    return (\n      <FormElement\n        onSubmit={this.handleSubmit}\n      >\n        {parentContainerField}\n        {coordinateField}\n        {updateButton}\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n  // Validation functions will go here later...\n\n  /*\n   * Uploads the file to the server\n   */\n  handleSubmit() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n      \n        this.props.refreshParent();\n        swal(\"Parent Container Update Successful!\", \"\", \"success\");\n        this.props.onSuccess();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    //let visitLabel = this.state.formData.visitLabel;\n  \n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    if (formElement === 'parentContainerId') {\n      formData['coordinate'] = \"\";\n    }\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    if (!this.props.container) {\n      var formData = this.state.formData;\n      this.props.setParentFormData(formData);\n    }\n  } \n}\n\nContainerParentForm.propTypes = {\n  DataURL: React.PropTypes.string,\n  action: React.PropTypes.string,\n  barcode: React.PropTypes.string,\n  refreshTable: React.PropTypes.func,\n  onSuccess: React.PropTypes.func\n};\n\nexport default ContainerParentForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerParentForm.js","import ContainerBarcodeForm from './containerBarcodeForm.js';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankContainerForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      barcodeFormList: {},\n      formErrors: {},\n      countBarcodeForms: [1],\n      errorMessage: null\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.containerSubmit = this.containerSubmit.bind(this);\n    this.addBarcodeForm = this.addBarcodeForm.bind(this);\n    this.setBarcodeFormData = this.setBarcodeFormData.bind(this);\n  }\n\n  componentDidMount() {\n\n    //if this is a child specimen form then certain formData is set when component mounts\n    if (this.props.child) {\n      var formData = this.state.formData;\n      formData['parentSpecimen'] = this.props.specimenId;\n      formData['visitLabel'] = this.props.sessionId;\n\n      this.setState({\n        formData: formData\n      });\n    }\n  }\n\n  render() {\n\n    //Styling for remove Barcode button\n    const glyphStyle = {\n     color: '#D3D3D3',\n     margin: 'auto',\n    }; \n    const buttonStyle = {\n      appearance: 'none',\n      outline: 'none',\n      boxShadow: 'none',\n      borderColor: 'transparent',\n      backgroundColor: 'transparent',\n       \n    };\n\n    //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n    var barcodeForms = [];\n    for (let i = 0; i < this.state.countBarcodeForms.length; i++) {\n      barcodeForms.push(\n        <ContainerBarcodeForm\n          setParentFormData={this.setBarcodeFormData}\n          id={this.state.countBarcodeForms[i]}\n          containerTypesNonPrimary={this.props.containerTypesNonPrimary}\n          containerBarcodesNonPrimary={this.props.containerBarcodesNonPrimary}\n          button={i+1 === this.state.countBarcodeForms.length ? (\n            <button \n              type=\"button\"\n              className=\"btn btn-success btn-sm\"\n              onClick={this.addBarcodeForm}\n            >   \n              <span className=\"glyphicon glyphicon-plus\"/>\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"btn btn-primary-outline btn-sm\"\n              style={buttonStyle}\n              onClick={() => this.removeBarcodeForm(i)}\n            >\n            <span className=\"glyphicon glyphicon-remove\" style={glyphStyle}/>\n            </button>\n          )}\n        />\n      );\n    }\n\n    //ALLOW THEM TO CANCEL THE FORM AND DELETE BARCODE FORMS\n    return (\n      <FormElement\n        name=\"specimenForm\"\n        onSubmit={this.handleSubmit}\n        ref=\"form\"\n      >\n        <br/>\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <SelectElement\n              name=\"site\"\n              label=\"Site\"\n              options={this.props.sites}\n              onUserInput={this.setFormData}\n              ref=\"site\"\n              required={true}\n              value={this.state.formData.site}\n            />\n          </div>\n        </div>\n        {barcodeForms}\n          <div className=\"col-xs-3 col-xs-offset-9\">\n            <ButtonElement label=\"Submit\"/>\n          </div>\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n  /**\n   * Returns a valid name for the file to be specimened\n   *\n   * @param {string} visitLabel - Visit label selected from the dropdown\n   * @param {string} instrument - Instrument selected from the dropdown\n   * @return {string} - Generated valid filename for the current selection\n   */\n\n\n  validateForm(formElement, value) {\n    let formErrors = this.state.formErrors;\n\n    //validate barcode regex\n    if (formElement === \"barcode\" && value !== \"\") {\n      if (!(/^hello/.test(this.state.formData.barcode))) {\n        formErrors.barcode = true;\n      } else {\n        formErrors.barcode = false;\n      }\n    }\n\n    //validate that quantity is a number and less than capacity\n    if (formElement === \"quantity\" && value !== \"\") {\n      if (isNaN(value) || (value > this.props.capacities[this.state.currentContainerType])) {\n        formErrors.quantity = true;\n      } else {\n        formErrors.quantity = false;\n      }\n    }\n\n    //validate datatypes and regex of generated type attributes\n    var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n    var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n\n      let datatype = this.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"number\") {\n        if (formElement === attribute) {\n          if (isNaN(value) && value !== \"\") {\n            formErrors[attribute] = true;\n          } else {\n            formErrors[attribute] = false;\n          }\n        }\n      }\n    })\n\n    this.setState({\n      formErrors: formErrors\n    });\n\n  }\n\n\n  /**\n   * Handle form submission\n   * @param {object} e - Form submission event\n   */\n  handleSubmit(e) {\n\n    this.containerSubmit();\n  }\n\n  containerSubmit() {\n    // Set form data\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n \n        //refreshes table \n        this.props.refreshParent();\n\n        //provide success message\n        swal(\"Container Submission Successful!\", \"\", \"success\");\n\n        //close modal window\n        this.props.onSuccess();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    //let visitLabel = this.state.formData.visitLabel;\n  \n    //LOOK AT THIS LATER - THE SWITCH TO PROPS MESSED THIS ALL UP \n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  setBarcodeFormData(barcodeFormData, barcodeId) {\n    var formData = this.state.formData;\n    var barcodeFormList = this.state.barcodeFormList;\n    barcodeFormList[barcodeId] = barcodeFormData;\n    formData['barcodeFormList'] = barcodeFormList;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  addBarcodeForm() {\n    let countBarcodeForms = this.state.countBarcodeForms;\n    countBarcodeForms.push(countBarcodeForms[countBarcodeForms.length -1] + 1); \n    this.setState({\n      countBarcodeForms: countBarcodeForms\n    });\n  }\n\n  removeBarcodeForm(index) {\n    let countBarcodeForms = this.state.countBarcodeForms;\n    countBarcodeForms.splice(index, 1);\n    this.setState({\n      countBarcodeForms: countBarcodeForms\n    });\n  }\n\n}\n\nBiobankContainerForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired,\n  barcode: React.PropTypes.string,\n  refreshTable: React.PropTypes.func\n};\n\nexport default BiobankContainerForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerForm.js","/**\n * Container Barcode Form\n *\n * Acts a subform for ContainerForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass ContainerBarcodeForm extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      formData: {},\n      formErrors: {},\n    };\n   \n    this.setFormData = this.setFormData.bind(this);\n    this.setSpecimenFormData = this.setSpecimenFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n  }\n\n  render() {\n\n    return (\n      <FormElement\n        name=\"biobankBarcode\"\n      >\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <div \n              data-toggle=\"collapse\" \n              data-target={\"#\" + this.props.id}\n            >   \n              <TextboxElement\n                name={\"barcode\"}\n                label={\"Barcode \" + this.props.id}\n                onUserInput={this.setFormData}\n                ref={\"barcode\"}\n                required={true}\n                value={this.state.formData[\"barcode\"]}\n                hasError={this.state.formErrors[\"barcode\"]}\n                errorMessage=\"Incorrect Barcode format for this Specimen and Container Type\"\n              />\n            </div>\n          </div>\n          <div className=\"col-xs-1\">\n            {this.props.button}\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xs-2\"/>\n          <div className=\"col-xs-9\">\n            <div id={this.props.id} className=\"collapse\">\n              <SelectElement\n                name=\"containerType\"\n                label=\"Container Type\"\n                options={this.props.containerTypesNonPrimary}\n                onUserInput={this.setFormData}\n                required={true}\n                value={this.state.formData.containerType}\n              />\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState(\n      {\n      formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setSpecimenFormData(specimenFormData) {\n    var formData = this.state.formData;\n    \n    for (var attribute in specimenFormData) {\n      formData[attribute] = specimenFormData[attribute]\n    }\n \n    this.setState(\n      {\n      formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    this.props.setParentFormData(this.state.formData, this.props.id);\n  }\n}\n\nContainerBarcodeForm.propTypes = {\n  id: React.PropTypes.string,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n}\n\nexport default ContainerBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerBarcodeForm.js","/**\n * This file contains React components for Tabs component.\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\n/**\n * Tabs Component.\n * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n * and corresponding tab panes.\n *\n * ================================================\n * Usage:\n *\n * 1. Define an array of tabs with IDs and labels\n *\n * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n *\n * 2. Pass tabList as <Tab> property and <TabPane> as child\n *  ```\n * <Tabs tabs={tabList} defaultTab=\"tab1\">\n *   <TabPane TabId={tabList[0].id}>\n *     // Tab content goes here\n *   </TabPane>\n * </Tabs>\n * ```\n * =================================================\n *\n */\nclass Tabs extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    const hash = window.location.hash;\n    let activeTab = \"\";\n\n    /**\n     * Determine the initial active tab in this order\n     * 1. Try to infer from the URL, otherwise\n     * 2. Try to infer from the defaultTab prop, otherwise\n     * 3. Set to be the first tab of the list\n     */\n    if (this.props.updateURL && hash) {\n      activeTab = hash.substr(1);\n    } else if (this.props.defaultTab) {\n      activeTab = this.props.defaultTab;\n    } else if (this.props.tabs.length > 0) {\n      activeTab = this.props.tabs[0].id;\n    }\n\n    this.state = {\n      activeTab: activeTab\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.getTabs = this.getTabs.bind(this);\n    this.getTabPanes = this.getTabPanes.bind(this);\n  }\n\n  handleClick(tabId, e) {\n    this.setState({activeTab: tabId});\n    this.props.onTabChange(tabId);\n\n    // Add tab href to URL querystring and scroll the page to top\n    if (this.props.updateURL) {\n      const scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n      window.location.hash = e.target.hash;\n      $('html,body').scrollTop(scrollDistance);\n    }\n  }\n\n  getTabs() {\n    let tabs = (this.props.tabs).map(function(tab) {\n      let tabClass = this.state.activeTab === tab.id ? 'active' : null;\n      let href = \"#\" + tab.id;\n      let tabID = \"tab-\" + tab.id;\n      return (\n        <li\n          role=\"presentation\"\n          className={tabClass}\n          key={tab.id}\n        >\n          <a id={tabID}\n             href={href}\n             role=\"tab\"\n             data-toggle=\"tab\"\n             onClick={this.handleClick.bind(null, tab.id)}\n          >\n            {tab.label}\n          </a>\n        </li>\n      );\n    }.bind(this));\n\n    return tabs;\n  }\n\n  getTabPanes() {\n    let tabPanes = React.Children.map(this.props.children, function(child, key) {\n      if (child) {\n        return React.cloneElement(child, {\n          activeTab: this.state.activeTab,\n          key: key\n        });\n      }\n    }.bind(this));\n\n    return tabPanes;\n  }\n\n  render() {\n    let tabs = this.getTabs();\n    let tabPanes = this.getTabPanes();\n    let tabStyle = {\n      marginLeft: 0,\n      marginBottom: '5px'\n    };\n\n    return (\n      <div>\n        <ul className=\"nav nav-tabs\" role=\"tablist\" style={tabStyle}>\n          {tabs}\n        </ul>\n        <div className=\"tab-content\">\n          {tabPanes}\n        </div>\n      </div>\n    );\n  }\n}\nTabs.propTypes = {\n  tabs: React.PropTypes.array.isRequired,\n  defaultTab: React.PropTypes.string,\n  updateURL: React.PropTypes.bool\n};\nTabs.defaultProps = {\n  onTabChange: function() {},\n  updateURL: false\n};\n\n/*\n * TabPane component.\n * Used to wrap content for every tab.\n */\nclass TabPane extends React.Component {\n  render() {\n    let classList = \"tab-pane\";\n    let title;\n\n    if (this.props.TabId === this.props.activeTab) {\n      classList += \" active\";\n    }\n    if (this.props.Title) {\n      title = <h1>{this.props.Title}</h1>;\n    }\n\n    return (\n      <div role=\"tabpanel\" className={classList} id={this.props.TabId}>\n        {title}\n        {this.props.children}\n      </div>\n    );\n  }\n}\nTabPane.propTypes = {\n  TabId: React.PropTypes.string.isRequired,\n  Title: React.PropTypes.string,\n  activeTab: React.PropTypes.string\n};\n\nexport {\n  Tabs,\n  TabPane\n};\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Tabs.js","/**\n * This file contains React components for Modal component.\n *\n * @author Henri Rabalais\n * @version 1.1.0\n *\n */\n\nimport Modal from './Modal';\n\n/**\n * Modal Component.\n * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n *\n * ================================================\n * Usage:\n *\n * =================================================\n *\n */\n\nclass FormModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { show: false, throwWarning: false }\n\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.confirmClose = this.confirmClose.bind(this);\n    this.setWarning = this.setWarning.bind(this);\n  }\n\n  renderChildren() {\n    return React.Children.map(this.props.children, child => {\n      return React.cloneElement(child, { onSuccess: this.closeModal, onChange: this.setWarning });\n    });\n  }\n\n  openModal() {\n    this.setState({\n      show: true\n    });\n  } \n\n  setWarning() {\n    this.setState({\n      throwWarning: true\n    });\n  }\n\n  confirmClose() {\n    if (this.state.throwWarning) {\n      swal({\n        title: \"Are You Sure?\",\n        text: \"Leaving the form will result in the loss of any information entered.\",\n        type: \"warning\",\n        showCancelButton: true,\n        confirmButtonText: 'Proceed',\n        cancelButtonText: 'Cancel',\n      },\n      function() {\n        this.closeModal();\n      }.bind(this));\n    } else {\n      this.closeModal();\n    }\n  }\n\n  closeModal() {\n    this.setState({\n      show: false,\n      throwWarning: false\n    });\n  }\n\n  render() {\n    return (\n      <Modal \n        closeModal={this.confirmClose} \n        openModal={this.openModal} \n        show={this.state.show}\n        {...this.props} \n      >\n        {this.renderChildren()}\n      </Modal>\n    );\n  }\n}\n\nFormModal.propTypes = {\n  title: React.PropTypes.string,\n  buttonClass: React.PropTypes.string,\n  buttonStyle: React.PropTypes.object,\n  buttonContent: React.PropTypes.object,\n};\nFormModal.defaultProps = {\n  buttonClass: 'btn btn-primary'\n};\n\nexport default FormModal;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/FormModal.js","/**\n * This file contains React components for Modal component.\n *\n * @author Henri Rabalais\n * @version 1.1.0\n *\n */\n\n/**\n * Modal Component.\n * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n *\n * ================================================\n * Usage:\n *\n * =================================================\n *\n */\nclass Modal extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n  }\n\n  render() {\n    // Black Background with Alpha Channel\n    const backdropStyle = {\n      position: 'fixed',\n      zIndex: 9998,\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundColor: 'rgba(0,0,0,0.3)',\n      padding: 50\n    };\n\n    // White Modal Window\n    const modalStyle = {\n      position: 'relative',\n      maxWidth: 1000,\n      maxHeight: '100%',\n      margin: '0 auto',\n      backgroundColor: '#fff',\n      borderRadius: 10,\n      overflowY: 'auto',\n      zIndex: 9999\n    };\n\n    const titleStyle = {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      background: '#093782',\n      height: '70px',\n      borderTopRightRadius: '10',\n      color: '#FFFFFF',\n      fontSize: 24,\n      padding: 20,\n    }\n\n    const glyphStyle = {\n      marginLeft: 'auto',\n      cursor: 'pointer'\n    }\n\n    const bodyStyle = {\n      padding: 15\n    }\n  \n    var button = (\n      <button\n        type='button'\n        className={this.props.buttonClass}\n        onClick={this.props.openModal}\n        style={this.props.buttonStyle}\n      >\n        {this.props.buttonContent}\n      </button>\n    );\n\n    var modal;\n    if (this.props.show) {\n      modal = (\n        <div style={backdropStyle} onClick={this.props.closeModal}>\n          <div\n            style={modalStyle}\n            onClick={e => {\n              e.stopPropagation();\n            }}\n          >\n            <div\n              style={titleStyle}\n            >\n              {this.props.title}\n              <span \n                className='glyphicon glyphicon-remove'\n                style={glyphStyle}\n                onClick={this.props.closeModal}\n              />\n            </div>\n            <div\n              style={bodyStyle}\n            >\n              {this.props.children}\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {button}\n        {modal}\n      </div>\n    );\n  }\n}\n\nModal.propTypes = {\n  title: React.PropTypes.string,\n  buttonClass: React.PropTypes.string,\n  buttonStyle: React.PropTypes.object,\n  buttonContent: React.PropTypes.object,\n  show: React.PropTypes.boolean,\n  closeModal: React.PropTypes.func,\n  openModal: React.PropTypes.func\n};\nModal.defaultProps = {\n  buttonClass: 'btn btn-primary'\n};\n\nexport default Modal;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Modal.js","/**\n * This file contains React component for Loader\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n */\n\n/**\n * Loader component\n */\nclass Loader extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n\n    return (\n      <div className='loader-container'>\n        <div className=\"loader\"/>\n      </div>\n\n\n    );\n  }\n}\n\nexport default Loader;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Loader.js","/**\n * Modify behaviour of specified column cells in the Data Table component\n * @param {string} column - column name\n * @param {string} cell - cell content\n * @param {arrray} rowData - array of cell contents for a specific row\n * @param {arrray} rowHeaders - array of table headers (column names)\n * @return {*} a formated table cell for a given column\n */\nfunction formatColumn(column, cell, rowData, rowHeaders) {\n  // If a column if set as hidden, don't display it\n  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n  //  return null;\n  //}\n\n  // Create the mapping between rowHeaders and rowData in a row object.\n  var row = {};\n  rowHeaders.forEach(function(header, index) {\n    row[header] = rowData[index];\n  }, this);\n\n  // create array of classes to be added to td tag\n  var classes = [];\n\n  // convert array to string, with blank space separator\n  classes = classes.join(\" \");\n\n  //const hasWritePermission = loris.userHasPermission('media_read');\n  if (column === 'Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Barcode'];\n    return <td className= {classes}><a href={specimenURL}>{cell}</a></td>;\n  }\n\n  if (column === 'Parent Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Parent Barcode'];\n    return <td className= {classes}><a href={specimenURL}>{cell}</a></td>; \n}\n\n  if (column === 'Container Barcode') {\n    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Container Barcode'];\n    return <td className= {classes}><a href={containerURL}>{cell}</a></td>;\n}\n\n // if (column === 'Visit Label') {\n //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n //   }\n // }\n\n // if (column === 'Edit Metadata') {\n //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n // }\n\n  return <td className={classes}>{cell}</td>;\n}\n\nexport default formatColumn;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/columnFormatterSpecimen.js","/**\n * Modify behaviour of specified column cells in the Data Table component\n * @param {string} column - column name\n * @param {string} cell - cell content\n * @param {arrray} rowData - array of cell contents for a specific row\n * @param {arrray} rowHeaders - array of table headers (column names)\n * @return {*} a formated table cell for a given column\n */\nfunction formatColumn(column, cell, rowData, rowHeaders) {\n  // If a column if set as hidden, don't display it\n  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n  //  return null;\n  //}\n\n  // Create the mapping between rowHeaders and rowData in a row object.\n  var row = {};\n  rowHeaders.forEach(function(header, index) {\n    row[header] = rowData[index];\n  }, this);\n\n  // create array of classes to be added to td tag\n  var classes = [];\n\n  // convert array to string, with blank space separator\n  classes = classes.join(\" \");\n\n  //const hasWritePermission = loris.userHasPermission('media_read');\n  if (column === 'Barcode') {\n    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Barcode'];\n    return <td className= {classes}><a href={containerURL}>{cell}</a></td>;\n  }\n\n  if (column === 'Parent Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Parent Barcode'];\n    return <td className= {classes}><a href={containerURL}>{cell}</a></td>; \n}\n\n // if (column === 'Visit Label') {\n //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n //   }\n // }\n\n // if (column === 'Edit Metadata') {\n //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n // }\n\n  return <td className={classes}>{cell}</td>;\n}\n\nexport default formatColumn;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/columnFormatterContainer.js"],"sourceRoot":""}