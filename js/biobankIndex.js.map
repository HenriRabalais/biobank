{"version":3,"sources":["webpack:///modules/biobank/js/biobankIndex.js","webpack:///webpack/bootstrap 74e54207929018b338c6?ca40********","webpack:///./modules/biobank/jsx/biobankIndex.js","webpack:///./jsx/Loader.js?06c1","webpack:///./jsx/Modal.js?d3d7","webpack:///./modules/biobank/jsx/containerParentForm.js?0f0c","webpack:///./modules/biobank/jsx/containerDisplay.js?4e23","webpack:///./modules/biobank/jsx/collectionForm.js?e0f7","webpack:///./modules/biobank/jsx/customFields.js?3a68","webpack:///./modules/biobank/jsx/preparationForm.js?0045","webpack:///./modules/biobank/jsx/specimenForm.js?35c0","webpack:///./modules/biobank/jsx/barcodeForm.js?02a4","webpack:///./jsx/FilterForm.js","webpack:///./jsx/Panel.js","webpack:///./modules/biobank/jsx/poolSpecimenForm.js","webpack:///./modules/biobank/jsx/containerForm.js","webpack:///./modules/biobank/jsx/containerBarcodeForm.js","webpack:///./jsx/Tabs.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_defineProperty","key","value","Object","defineProperty","enumerable","configurable","writable","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","create","constructor","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","i","length","descriptor","protoProps","staticProps","_FilterForm","_FilterForm2","_specimenForm","_specimenForm2","_poolSpecimenForm","_poolSpecimenForm2","_containerForm","_containerForm2","_Tabs","_Modal","_Modal2","_Loader","_Loader2","BiobankIndex","_React$Component","this","_this","getPrototypeOf","state","isLoaded","specimenFilter","containerFilter","isOpen","formOptions","show","specimenForm","containerForm","loadPage","bind","fetch","updateSpecimenFilter","updateContainerFilter","resetFilters","mapFormOptions","showModal","closeAll","formatSpecimenColumns","formatContainerColumns","save","specimenDataURL","containerDataURL","formOptionsURL","setState","request","url","$","ajax","method","dataType","success","data","error","console","refs","biobankFilter","clearFilter","rawObject","targetAttribute","stateKey","column","cell","rowData","rowHeaders","row","forEach","header","index","barcodeURL","loris","BaseURL","URL","React","createElement","href","pscidURL","visitLabelURL","style","color","message","_this2","Promise","resolve","type","JSON","stringify","cache","swal","textStatus","errorThrown","responseJSON","_this3","addSpecimenButton","poolSpecimenButton","addContainerButton","userHasPermission","containerTypesPrimary","containerStati","candidates","sessions","className","title","onClick","closeModal","candidateSessions","sessionCenters","specimenTypes","specimenTypeUnits","specimenTypeAttributes","attributeOptions","attributeDatatypes","containersNonPrimary","containerDimensions","containerCoordinates","refreshParent","saveBarcodeListURL","poolSpecimenButtonContent","buttonClass","buttonContent","display","specimenProtocols","specimenProtocolAttributes","capacities","specimenUnits","specimenRequest","saveSpecimen","saveContainer","containerTypesNonPrimary","centers","tabList","label","Tabs","tabs","defaultTab","updateURL","TabPane","TabId","Module","name","ref","columns","formElements","specimenData","form","onUpdate","filter","StaticElement","ButtonElement","onUserInput","StaticDataTable","Data","Headers","Filter","getFormattedCell","containerData","Component","biobankIndex","ReactDOM","render","document","getElementById","Loader","apply","arguments","Modal","throwWarning","log","text","showCancelButton","confirmButtonText","cancelButtonText","backdropStyle","position","zIndex","top","bottom","left","right","backgroundColor","padding","modalStyle","maxWidth","maxHeight","margin","borderRadius","overflowY","titleStyle","flexDirection","alignItems","background","height","borderTopRightRadius","fontSize","glyphStyle","marginLeft","cursor","bodyStyle","modal","e","stopPropagation","children","propTypes","PropTypes","string","bool","isRequired","func","defaultProps","_containerDisplay","_containerDisplay2","ContainerParentForm","containerDisplay","containerBarcodesNonPrimary","parentContainerField","SelectElement","options","setContainer","required","container","parentContainerId","dimensionId","dimensions","coordinatesTotal","dimension","coordinates","containerTypes","select","selectedCoordinate","coordinate","updateButton","FormElement","onSubmit","object","ContainerDisplay","redirectURL","drag","drop","tooltip","load","types","typeId","primary","loadSpecimen","loadContainer","barcode","preventDefault","dataTransfer","setData","parse","getData","newCoordinate","parseInt","saveChildContainer","y","x","nodeWidth","nodeStyle","width","nodeClass","tooltipTitle","dataHtml","dataToggle","dataPlacement","draggable","onDragStart","onDragOver","allowDrop","onDrop","statusId","status","coordinateDisplay","push","data-html","data-toggle","data-placement","data-original-title","rowHeight","rowStyle","_customFields","_customFields2","SpecimenCollectionForm","setCollection","addData","collection","specimen","setSpecimen","specimenTypeFields","unit","specimenTypeFieldsObject","fields","specimenFields","TextboxElement","quantity","unitId","DateElement","minYear","maxYear","date","TimeElement","time","TextareaElement","comments","CustomFields","attributeFields","keys","map","attribute","datatype","DataElement","FileElement","files","SpecimenPreparationForm","setPreparation","preparation","submitButton","specimenProtocolFields","protocolId","specimenProtocolFieldsObject","_barcodeForm","_barcodeForm2","BiobankSpecimenForm","formErrors","candidateId","sessionId","centerId","barcodeList","1","count","collapsed","copyMultiplier","toggleCollapse","addBarcode","setCopyMultiplier","copyBarcode","removeBarcode","saveBarcodeList","availableId","find","temperature","locationId","originId","freezeThaw","fTCycle","candidate","CandID","session","ID","parentSpecimenId","then","onChange","Function","nextKey","multiplier","barcodeListArray","barcodes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","barcodeKey","units","_iterator","Symbol","iterator","next","done","err","return","globalFields","remainingQuantityFields","PSCID","Visit_label","setSpecimenData","emptyOption","placeHolder","disabled","columnSize","_collectionForm","_collectionForm2","_containerParentForm","_containerParentForm2","SpecimenBarcodeForm","copy","addBarcodeButton","addBarcodeText","copyBarcodeButton","copyBarcodeText","min","max","removeBarcodeButton","parentTypeId","paddingLeft","marginTop","data-target","setContainerData","_typeof","_Panel","_Panel2","FilterForm","getFormChildren","setFilter","onElementUpdate","queryString","QueryString","get","filterKey","exactMatch","clear","formChildren","Children","child","isValidElement","callbackFunc","callbackName","elementName","displayName","queryFieldName","filterValue","cloneElement","fieldName","fieldValue","set","warn","Panel","initCollapsed","panelClass","toggleCollapsed","glyphClass","pencilGlyph","edit","marginRight","plusGlyph","add","removeGlyph","cancel","panelHeading","role","_preparationForm","_preparationForm2","PoolSpecimenForm","formData","errorMessage","barcodeCount","step","handleSubmit","validateForm","setFormData","setPreparationFormData","setSpecimenFormData","submitForm","setBarcodeCount","previous","addPreparation","removePreparation","validate","formSwitch","preparationSwitch","runAjax","poolData","responseText","inputData","reject","field","inputForm","preparationButton","preparationForm","_this4","setParentFormData","insertAction","NumericElement","pscid","pSCIDs","visit","sessionData","visits","barcodesArray","values","barcodesString","join","parentSpecimenBarcodes","parentSpecimenIds","specimenIds","action","formElement","_this5","test","isNaN","currentContainerType","currentSpecimenType","formObj","FormData","append","contentType","processData","xhr","window","XMLHttpRequest","onSuccess","msg","isValidForm","formRefs","requiredFields","visitLabel","hasError","forceUpdate","preparationFormData","specimenFormData","DataURL","refreshTable","_containerBarcodeForm","_containerBarcodeForm2","BiobankContainerForm","containerList","countContainers","addContainer","copyContainer","removeContainer","saveContainerList","siteId","containerListArray","containers","containerKey","ContainerBarcodeForm","addContainerText","copyContainerButton","copyContainerText","removeContainerButton","hash","location","activeTab","substr","handleClick","getTabs","getTabPanes","tabId","onTabChange","scrollDistance","scrollTop","tab","tabClass","tabID","tabPanes","tabStyle","marginBottom","array","VerticalTabs","_React$Component2","_React$Component3","classList","Title"],"mappings":"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","file":"./modules/biobank/js/biobankIndex.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _FilterForm = __webpack_require__(21);\n\t\n\tvar _FilterForm2 = _interopRequireDefault(_FilterForm);\n\t\n\tvar _specimenForm = __webpack_require__(15);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tvar _poolSpecimenForm = __webpack_require__(23);\n\t\n\tvar _poolSpecimenForm2 = _interopRequireDefault(_poolSpecimenForm);\n\t\n\tvar _containerForm = __webpack_require__(24);\n\t\n\tvar _containerForm2 = _interopRequireDefault(_containerForm);\n\t\n\tvar _Tabs = __webpack_require__(26);\n\t\n\tvar _Modal = __webpack_require__(3);\n\t\n\tvar _Modal2 = _interopRequireDefault(_Modal);\n\t\n\tvar _Loader = __webpack_require__(1);\n\t\n\tvar _Loader2 = _interopRequireDefault(_Loader);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar BiobankIndex = function (_React$Component) {\n\t  _inherits(BiobankIndex, _React$Component);\n\t\n\t  function BiobankIndex() {\n\t    _classCallCheck(this, BiobankIndex);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankIndex.__proto__ || Object.getPrototypeOf(BiobankIndex)).call(this));\n\t\n\t    _this.state = {\n\t      isLoaded: false,\n\t      specimenFilter: {},\n\t      containerFilter: {},\n\t      isOpen: false,\n\t      formOptions: {},\n\t      show: {\n\t        specimenForm: false,\n\t        containerForm: false\n\t      }\n\t    };\n\t\n\t    _this.loadPage = _this.loadPage.bind(_this);\n\t    _this.fetch = _this.fetch.bind(_this);\n\t    _this.updateSpecimenFilter = _this.updateSpecimenFilter.bind(_this);\n\t    _this.updateContainerFilter = _this.updateContainerFilter.bind(_this);\n\t    _this.resetFilters = _this.resetFilters.bind(_this);\n\t    _this.mapFormOptions = _this.mapFormOptions.bind(_this);\n\t    _this.showModal = _this.showModal.bind(_this);\n\t    _this.closeAll = _this.closeAll.bind(_this);\n\t    _this.formatSpecimenColumns = _this.formatSpecimenColumns.bind(_this);\n\t    _this.formatContainerColumns = _this.formatContainerColumns.bind(_this);\n\t    _this.save = _this.save.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankIndex, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      this.loadPage();\n\t    }\n\t  }, {\n\t    key: 'loadPage',\n\t    value: function loadPage() {\n\t      this.fetch('specimenData', this.props.specimenDataURL);\n\t      this.fetch('containerData', this.props.containerDataURL);\n\t      this.fetch('formOptions', this.props.formOptionsURL);\n\t      this.setState({ isLoaded: true });\n\t    }\n\t\n\t    /**\n\t     * Retrieve data from the provided URL and save it in state\n\t     */\n\t\n\t  }, {\n\t    key: 'fetch',\n\t    value: function fetch(request, url) {\n\t      $.ajax(url, {\n\t        method: \"GET\",\n\t        dataType: 'json',\n\t        success: function (data) {\n\t          this.setState(_defineProperty({}, request, data));\n\t        }.bind(this),\n\t        error: function error(_error) {\n\t          console.error(_error);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'updateSpecimenFilter',\n\t    value: function updateSpecimenFilter(specimenFilter) {\n\t      this.setState({ specimenFilter: specimenFilter });\n\t    }\n\t  }, {\n\t    key: 'updateContainerFilter',\n\t    value: function updateContainerFilter(containerFilter) {\n\t      this.setState({ containerFilter: containerFilter });\n\t    }\n\t  }, {\n\t    key: 'resetFilters',\n\t    value: function resetFilters() {\n\t      this.refs.biobankFilter.clearFilter();\n\t    }\n\t\n\t    //map options for forms\n\t\n\t  }, {\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(rawObject, targetAttribute) {\n\t      var data = {};\n\t      for (var id in rawObject) {\n\t        data[id] = rawObject[id][targetAttribute];\n\t      }\n\t\n\t      return data;\n\t    }\n\t  }, {\n\t    key: 'showModal',\n\t    value: function showModal(stateKey) {\n\t      var show = this.state.show;\n\t      show[stateKey] = true;\n\t      this.setState({ show: show });\n\t    }\n\t  }, {\n\t    key: 'closeAll',\n\t    value: function closeAll() {\n\t      var show = this.state.show;\n\t      for (var key in show) {\n\t        show[key] = false;\n\t      }\n\t      this.setState({ show: show });\n\t    }\n\t  }, {\n\t    key: 'formatSpecimenColumns',\n\t    value: function formatSpecimenColumns(column, cell, rowData, rowHeaders) {\n\t      // Create the mapping between rowHeaders and rowData in a row object.\n\t      var row = {};\n\t      rowHeaders.forEach(function (header, index) {\n\t        row[header] = rowData[index];\n\t      });\n\t\n\t      var barcodeURL = loris.BaseURL + '/biobank/barcode/?barcode=';\n\t      switch (column) {\n\t        case 'Barcode':\n\t          var URL = barcodeURL + row['Barcode'];\n\t          return React.createElement(\n\t            'td',\n\t            null,\n\t            React.createElement(\n\t              'a',\n\t              { href: URL },\n\t              cell\n\t            )\n\t          );\n\t        case 'Parent Barcode':\n\t          URL = barcodeURL + row['Parent Barcode'];\n\t          return React.createElement(\n\t            'td',\n\t            null,\n\t            React.createElement(\n\t              'a',\n\t              { href: URL },\n\t              cell\n\t            )\n\t          );\n\t        case 'Container Barcode':\n\t          URL = barcodeURL + row['Container Barcode'];\n\t          return React.createElement(\n\t            'td',\n\t            null,\n\t            React.createElement(\n\t              'a',\n\t              { href: URL },\n\t              cell\n\t            )\n\t          );\n\t        case 'PSCID':\n\t          var pscidURL = loris.BaseURL + '/' + row['PSCID'];\n\t          return React.createElement(\n\t            'td',\n\t            null,\n\t            React.createElement(\n\t              'a',\n\t              { href: pscidURL },\n\t              cell\n\t            )\n\t          );\n\t        case 'Visit Label':\n\t          var visitLabelURL = loris.BaseURL + '/instrument_list/?candID=' + row['PSCID'] + '&sessionID=' + row['Visit Label'];\n\t          return React.createElement(\n\t            'td',\n\t            null,\n\t            React.createElement(\n\t              'a',\n\t              { href: visitLabelURL },\n\t              cell\n\t            )\n\t          );\n\t        case 'Status':\n\t          switch (cell) {\n\t            case 'Available':\n\t              return React.createElement(\n\t                'td',\n\t                { style: { color: 'green' } },\n\t                cell\n\t              );\n\t            case 'Reserved':\n\t              return React.createElement(\n\t                'td',\n\t                { style: { color: 'orange' } },\n\t                cell\n\t              );\n\t            case 'Dispensed':\n\t              return React.createElement(\n\t                'td',\n\t                { style: { color: 'red' } },\n\t                cell\n\t              );\n\t          }\n\t        default:\n\t          return React.createElement(\n\t            'td',\n\t            null,\n\t            cell\n\t          );\n\t      }\n\t    }\n\t  }, {\n\t    key: 'formatContainerColumns',\n\t    value: function formatContainerColumns(column, cell, rowData, rowHeaders) {\n\t      // Create the mapping between rowHeaders and rowData in a row object.\n\t      var row = {};\n\t      rowHeaders.forEach(function (header, index) {\n\t        row[header] = rowData[index];\n\t      });\n\t\n\t      var barcodeURL = loris.BaseURL + '/biobank/barcode/?barcode=';\n\t      switch (column) {\n\t        case 'Barcode':\n\t          var URL = barcodeURL + row['Barcode'];\n\t          return React.createElement(\n\t            'td',\n\t            null,\n\t            React.createElement(\n\t              'a',\n\t              { href: URL },\n\t              cell\n\t            )\n\t          );\n\t        case 'Parent Barcode':\n\t          URL = barcodeURL + row['Parent Barcode'];\n\t          return React.createElement(\n\t            'td',\n\t            null,\n\t            React.createElement(\n\t              'a',\n\t              { href: URL },\n\t              cell\n\t            )\n\t          );\n\t        default:\n\t          return React.createElement(\n\t            'td',\n\t            null,\n\t            cell\n\t          );\n\t      }\n\t    }\n\t  }, {\n\t    key: 'save',\n\t    value: function save(data, url, message) {\n\t      var _this2 = this;\n\t\n\t      return new Promise(function (resolve) {\n\t        $.ajax({\n\t          type: 'POST',\n\t          url: url,\n\t          data: { data: JSON.stringify(data) },\n\t          cache: false,\n\t          success: function success() {\n\t            resolve();\n\t            message ? swal(message, '', 'success') : swal('Save Successful!', '', 'success');\n\t            _this2.closeAll();\n\t          },\n\t          error: function error(_error2, textStatus, errorThrown) {\n\t            var message = (_error2.responseJSON || {}).message || 'Submission error!';\n\t            swal(message, '', 'error');\n\t            console.error(_error2, textStatus, errorThrown);\n\t          }\n\t        });\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this3 = this;\n\t\n\t      // Waiting for async data to load\n\t      if (!this.state.isLoaded) {\n\t        return React.createElement(_Loader2.default, null);\n\t      }\n\t\n\t      var addSpecimenButton = void 0;\n\t      var poolSpecimenButton = void 0;\n\t      var addContainerButton = void 0;\n\t      if (loris.userHasPermission('biobank_write')) {\n\t\n\t        /**\n\t         * Map Options for Form Select Elements of Specimen Form\n\t         */\n\t        var containerTypesPrimary = this.mapFormOptions(this.state.formOptions.containerTypesPrimary, 'label');\n\t        var containerStati = this.mapFormOptions(this.state.formOptions.containerStati, 'status');\n\t        var candidates = this.mapFormOptions(this.state.formOptions.candidates, 'pscid');\n\t        var sessions = this.mapFormOptions(this.state.formOptions.sessions, 'label');\n\t\n\t        addSpecimenButton = React.createElement(\n\t          'div',\n\t          {\n\t            className: 'action',\n\t            title: 'Add Specimen'\n\t          },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: function onClick() {\n\t                _this3.showModal('specimenForm');\n\t              }\n\t            },\n\t            React.createElement(\n\t              'span',\n\t              null,\n\t              '+'\n\t            )\n\t          ),\n\t          React.createElement(\n\t            _Modal2.default,\n\t            {\n\t              title: 'Add New Specimen',\n\t              show: this.state.show.specimenForm,\n\t              closeModal: this.closeAll\n\t            },\n\t            React.createElement(_specimenForm2.default, {\n\t              candidates: candidates,\n\t              sessions: sessions,\n\t              candidateSessions: this.state.formOptions.candidateSessions,\n\t              sessionCenters: this.state.formOptions.sessionCenters,\n\t              specimenTypes: this.state.formOptions.specimenTypes,\n\t              specimenTypeUnits: this.state.formOptions.specimenTypeUnits,\n\t              specimenTypeAttributes: this.state.formOptions.specimenTypeAttributes,\n\t              attributeOptions: this.state.formOptions.attributeOptions,\n\t              attributeDatatypes: this.state.formOptions.attributeDatatypes,\n\t              containerTypesPrimary: containerTypesPrimary,\n\t              containersNonPrimary: this.state.formOptions.containersNonPrimary,\n\t              containerDimensions: this.state.formOptions.containerDimensions,\n\t              containerCoordinates: this.state.formOptions.containerCoordinates,\n\t              containerStati: containerStati,\n\t              refreshParent: this.loadPage,\n\t              mapFormOptions: this.mapFormOptions,\n\t              saveBarcodeListURL: this.props.saveBarcodeListURL,\n\t              save: this.save\n\t            })\n\t          )\n\t        );\n\t\n\t        var poolSpecimenButtonContent = React.createElement('span', { className: 'glyphicon glyphicon-resize-small' });\n\t\n\t        poolSpecimenButton = React.createElement(\n\t          _Modal2.default,\n\t          {\n\t            title: 'Pool Specimens',\n\t            buttonClass: 'action-button pool',\n\t            buttonContent: poolSpecimenButtonContent,\n\t            style: { display: 'inline-block' }\n\t          },\n\t          React.createElement(_poolSpecimenForm2.default, {\n\t            specimenTypes: this.state.formOptions.specimenTypes,\n\t            containerTypesPrimary: containerTypesPrimary,\n\t            containersNonPrimary: this.state.formOptions.containersNonPrimary,\n\t            specimenTypeAttributes: this.state.formOptions.specimenTypeAttributes,\n\t            specimenProtocols: this.state.formOptions.specimenProtocols,\n\t            specimenProtocolAttributes: this.state.formOptions.specimenProtocolAttributes,\n\t            attributeDatatypes: this.state.formOptions.attributeDatatypes,\n\t            attributeOptions: this.state.formOptions.attributeOptions,\n\t            capacities: this.state.formOptions.capacities,\n\t            containerDimensions: this.state.formOptions.containerDimensions,\n\t            containerCoordinates: this.state.formOptions.containerCoordinates,\n\t            specimenTypeUnits: this.state.formOptions.specimenTypeUnits,\n\t            specimenUnits: this.state.formOptions.specimenUnits,\n\t            candidates: candidates,\n\t            candidateSessions: this.state.formOptions.candidateSessions,\n\t            sessionCenters: this.state.formOptions.sessionCenters,\n\t            specimenRequest: loris.BaseURL + '/biobank/ajax/requestData.php?action=getSpecimenDataFromBarcode',\n\t            refreshParent: this.loadPage,\n\t            mapFormOptions: this.mapFormOptions,\n\t            saveSpecimen: loris.BaseURL + '/biobank/ajax/submitData.php?action=saveSpecimen',\n\t            saveContainer: loris.BaseURL + '/biobank/ajax/submitData.php?action=saveContainer'\n\t          })\n\t        );\n\t\n\t        var containerTypesNonPrimary = this.mapFormOptions(this.state.formOptions.containerTypesNonPrimary, 'label');\n\t\n\t        addContainerButton = React.createElement(\n\t          'div',\n\t          {\n\t            className: 'action',\n\t            title: 'Add Container'\n\t          },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: function onClick() {\n\t                _this3.showModal('containerForm');\n\t              }\n\t            },\n\t            React.createElement(\n\t              'span',\n\t              null,\n\t              '+'\n\t            )\n\t          ),\n\t          React.createElement(\n\t            _Modal2.default,\n\t            {\n\t              title: 'Add New Container',\n\t              show: this.state.show.containerForm,\n\t              closeModal: this.closeAll\n\t            },\n\t            React.createElement(_containerForm2.default, {\n\t              containerTypesNonPrimary: containerTypesNonPrimary,\n\t              centers: this.state.formOptions.centers,\n\t              containerStati: containerStati,\n\t              refreshParent: this.loadPage,\n\t              saveContainer: loris.BaseURL + '/biobank/ajax/submitData.php?action=saveContainer',\n\t              save: this.save\n\t            })\n\t          )\n\t        );\n\t      }\n\t\n\t      var tabList = [{ id: \"specimens\", label: \"Specimens\" }, { id: \"containers\", label: \"Containers\" }];\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { id: 'biobank-page' },\n\t        React.createElement(\n\t          _Tabs.Tabs,\n\t          { tabs: tabList, defaultTab: 'specimens', updateURL: true },\n\t          React.createElement(\n\t            _Tabs.TabPane,\n\t            { TabId: tabList[0].id },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'row' },\n\t              React.createElement(\n\t                'div',\n\t                { className: 'col-lg-10' },\n\t                React.createElement(\n\t                  _FilterForm2.default,\n\t                  {\n\t                    Module: 'biobank',\n\t                    name: 'specimen_filter',\n\t                    id: 'specimen_filter',\n\t                    ref: 'specimenFilter',\n\t                    columns: 3,\n\t                    formElements: this.state.specimenData.form,\n\t                    onUpdate: this.updateSpecimenFilter,\n\t                    filter: this.state.specimenFilter\n\t                  },\n\t                  React.createElement('br', null),\n\t                  React.createElement(StaticElement, null),\n\t                  React.createElement(StaticElement, null),\n\t                  React.createElement(ButtonElement, { label: 'Clear Filters', type: 'reset', onUserInput: this.resetFilters })\n\t                )\n\t              ),\n\t              React.createElement(\n\t                'div',\n\t                { className: 'col-lg-2' },\n\t                React.createElement(\n\t                  'span',\n\t                  { className: 'action' },\n\t                  addSpecimenButton,\n\t                  React.createElement(\n\t                    'div',\n\t                    { className: 'action-title' },\n\t                    'Add Specimen'\n\t                  )\n\t                ),\n\t                React.createElement('br', null),\n\t                React.createElement('br', null),\n\t                React.createElement(\n\t                  'span',\n\t                  { className: 'action' },\n\t                  poolSpecimenButton,\n\t                  React.createElement(\n\t                    'div',\n\t                    { className: 'action-title' },\n\t                    'Pool Specimens'\n\t                  )\n\t                )\n\t              )\n\t            ),\n\t            React.createElement(StaticDataTable, {\n\t              Data: this.state.specimenData.Data,\n\t              Headers: this.state.specimenData.Headers,\n\t              Filter: this.state.specimenFilter,\n\t              getFormattedCell: this.formatSpecimenColumns\n\t            })\n\t          ),\n\t          React.createElement(\n\t            _Tabs.TabPane,\n\t            { TabId: tabList[1].id },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'row' },\n\t              React.createElement(\n\t                'div',\n\t                { className: 'col-lg-10' },\n\t                React.createElement(\n\t                  _FilterForm2.default,\n\t                  {\n\t                    Module: 'biobank',\n\t                    name: 'container_filter',\n\t                    id: 'container_filter',\n\t                    ref: 'containerFilter',\n\t                    columns: 3,\n\t                    formElements: this.state.containerData.form,\n\t                    onUpdate: this.updateContainerFilter,\n\t                    filter: this.state.containerFilter\n\t                  },\n\t                  React.createElement('br', null),\n\t                  React.createElement(StaticElement, null),\n\t                  React.createElement(StaticElement, null),\n\t                  React.createElement(ButtonElement, { label: 'Clear Filters', type: 'reset', onUserInput: this.resetFilters })\n\t                )\n\t              ),\n\t              React.createElement(\n\t                'div',\n\t                { className: 'col-lg-2' },\n\t                React.createElement(\n\t                  'span',\n\t                  { className: 'action' },\n\t                  addContainerButton,\n\t                  React.createElement(\n\t                    'div',\n\t                    { className: 'action-title' },\n\t                    'New Container'\n\t                  )\n\t                )\n\t              )\n\t            ),\n\t            React.createElement(StaticDataTable, {\n\t              Data: this.state.containerData.Data,\n\t              Headers: this.state.containerData.Headers,\n\t              Filter: this.state.containerFilter,\n\t              getFormattedCell: this.formatContainerColumns\n\t            })\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return BiobankIndex;\n\t}(React.Component);\n\t\n\t$(function () {\n\t  var biobankIndex = React.createElement(\n\t    'div',\n\t    { className: 'page-biobank' },\n\t    React.createElement(BiobankIndex, {\n\t      specimenDataURL: loris.BaseURL + '/biobank/?format=json',\n\t      containerDataURL: loris.BaseURL + '/biobank/ajax/requestData.php?action=getContainerFilterData',\n\t      formOptionsURL: loris.BaseURL + '/biobank/ajax/requestData.php?action=getFormOptions',\n\t      saveBarcodeListURL: loris.BaseURL + '/biobank/ajax/submitData.php?action=saveBarcodeList'\n\t    })\n\t  );\n\t\n\t  ReactDOM.render(biobankIndex, document.getElementById(\"lorisworkspace\"));\n\t});\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains the React component for Loader\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Loader component\n\t */\n\tvar Loader = function (_React$Component) {\n\t  _inherits(Loader, _React$Component);\n\t\n\t  function Loader() {\n\t    _classCallCheck(this, Loader);\n\t\n\t    return _possibleConstructorReturn(this, (Loader.__proto__ || Object.getPrototypeOf(Loader)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Loader, [{\n\t    key: \"render\",\n\t    value: function render() {\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"loader-container\" },\n\t        React.createElement(\"div\", { className: \"loader\" })\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Loader;\n\t}(React.Component);\n\t\n\texports.default = Loader;\n\n/***/ },\n/* 2 */,\n/* 3 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Modal component.\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Modal Component.\n\t * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * =================================================\n\t *\n\t */\n\tvar Modal = function (_React$Component) {\n\t  _inherits(Modal, _React$Component);\n\t\n\t  function Modal() {\n\t    _classCallCheck(this, Modal);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this));\n\t\n\t    _this.closeModal = _this.closeModal.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Modal, [{\n\t    key: \"closeModal\",\n\t    value: function closeModal() {\n\t      var _this2 = this;\n\t\n\t      if (this.props.throwWarning) {\n\t        console.log('not sure...');\n\t        swal({\n\t          title: \"Are You Sure?\",\n\t          text: \"Leaving the form will result in the loss of any information entered.\",\n\t          type: \"warning\",\n\t          showCancelButton: true,\n\t          confirmButtonText: 'Proceed',\n\t          cancelButtonText: 'Cancel'\n\t        }, function () {\n\t          _this2.props.closeModal();\n\t        });\n\t      } else {\n\t        this.props.closeModal();\n\t      }\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      // Black Background with Alpha Channel\n\t      var backdropStyle = {\n\t        position: 'fixed',\n\t        zIndex: 9998,\n\t        top: 0,\n\t        bottom: 0,\n\t        left: 0,\n\t        right: 0,\n\t        backgroundColor: 'rgba(0,0,0,0.3)',\n\t        padding: 50\n\t      };\n\t\n\t      // White Modal Window\n\t      var modalStyle = {\n\t        position: 'relative',\n\t        maxWidth: 850,\n\t        maxHeight: '100%',\n\t        margin: '0 auto',\n\t        backgroundColor: '#fff',\n\t        borderRadius: 10,\n\t        overflowY: 'auto',\n\t        zIndex: 9999\n\t      };\n\t\n\t      var titleStyle = {\n\t        display: 'flex',\n\t        flexDirection: 'row',\n\t        alignItems: 'center',\n\t        background: '#093782',\n\t        height: '70px',\n\t        borderTopRightRadius: '10',\n\t        color: '#FFFFFF',\n\t        fontSize: 24,\n\t        padding: 20\n\t      };\n\t\n\t      var glyphStyle = {\n\t        marginLeft: 'auto',\n\t        cursor: 'pointer'\n\t      };\n\t\n\t      var bodyStyle = {\n\t        padding: 15\n\t      };\n\t\n\t      var modal = void 0;\n\t      if (this.props.show) {\n\t        modal = React.createElement(\n\t          \"div\",\n\t          { style: backdropStyle, onClick: this.closeModal },\n\t          React.createElement(\n\t            \"div\",\n\t            { style: modalStyle, onClick: function onClick(e) {\n\t                e.stopPropagation();\n\t              } },\n\t            React.createElement(\n\t              \"div\",\n\t              { style: titleStyle },\n\t              this.props.title,\n\t              React.createElement(\n\t                \"span\",\n\t                { style: glyphStyle, onClick: this.closeModal },\n\t                \"\\xD7\"\n\t              )\n\t            ),\n\t            React.createElement(\n\t              \"div\",\n\t              { style: bodyStyle },\n\t              this.props.children\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        null,\n\t        modal\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Modal;\n\t}(React.Component);\n\t\n\tModal.propTypes = {\n\t  title: React.PropTypes.string,\n\t  show: React.PropTypes.bool.isRequired,\n\t  closeModal: React.PropTypes.func.isRequired,\n\t  throwWarning: React.PropTypes.bool.isRequired\n\t};\n\t\n\tModal.defaultProps = {\n\t  throwWarning: true\n\t};\n\t\n\texports.default = Modal;\n\n/***/ },\n/* 4 */,\n/* 5 */,\n/* 6 */,\n/* 7 */,\n/* 8 */,\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _containerDisplay = __webpack_require__(10);\n\t\n\tvar _containerDisplay2 = _interopRequireDefault(_containerDisplay);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Biobank Container Parent Form\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Fetches data from Loris backend and displays a form allowing\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * to specimen a biobank file attached to a specific instrument\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Henri Rabalais\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.0.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\tn\t\n\tvar ContainerParentForm = function (_React$Component) {\n\t  _inherits(ContainerParentForm, _React$Component);\n\t\n\t  function ContainerParentForm() {\n\t    _classCallCheck(this, ContainerParentForm);\n\t\n\t    return _possibleConstructorReturn(this, (ContainerParentForm.__proto__ || Object.getPrototypeOf(ContainerParentForm)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(ContainerParentForm, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var containerDisplay = void 0;\n\t      var containerBarcodesNonPrimary = this.props.mapFormOptions(this.props.containersNonPrimary, 'barcode');\n\t      var parentContainerField = React.createElement(SelectElement, {\n\t        name: 'parentContainerId',\n\t        label: 'Parent Container Barcode',\n\t        options: containerBarcodesNonPrimary,\n\t        onUserInput: this.props.setContainer,\n\t        required: true,\n\t        value: this.props.container.parentContainerId\n\t      });\n\t\n\t      if (this.props.container.parentContainerId) {\n\t        var dimensionId = this.props.containersNonPrimary[this.props.container.parentContainerId].dimensionId;\n\t\n\t        if (dimensionId) {\n\t          // This will eventually become unecessary\n\t          var dimensions = this.props.containerDimensions[dimensionId];\n\t\n\t          // Total coordinates is determined by the product of the dimensions\n\t          var coordinatesTotal = 1;\n\t          for (var dimension in dimensions) {\n\t            coordinatesTotal = coordinatesTotal * dimensions[dimension];\n\t          }\n\t\n\t          // Mapping of options for the SelectElement\n\t          var coordinates = {};\n\t          for (var i = 1; i <= coordinatesTotal; i++) {\n\t            // If the coordinate is already taken, skip it.\n\t            // this doubling of if statements seems unnecessary\n\t            if (this.props.containerCoordinates[this.props.container.parentContainerId]) {\n\t              if (this.props.containerCoordinates[this.props.container.parentContainerId][i]) {\n\t                continue;\n\t              }\n\t            }\n\t\n\t            coordinates[i] = i;\n\t          }\n\t\n\t          containerDisplay = React.createElement(_containerDisplay2.default, {\n\t            dimensions: this.props.containerDimensions[this.props.containersNonPrimary[this.props.container.parentContainerId].dimensionId],\n\t            coordinates: this.props.containerCoordinates[this.props.container.parentContainerId],\n\t            containerTypes: this.props.containerTypes,\n\t            containerStati: this.props.containerStati,\n\t            select: true,\n\t            selectedCoordinate: this.props.container.coordinate,\n\t            setContainer: this.props.setContainer\n\t          });\n\t        }\n\t      }\n\t\n\t      var updateButton = void 0;\n\t      if ((this.props.data || {}).container) {\n\t        updateButton = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement('br', null),\n\t          React.createElement(ButtonElement, { label: 'Update' })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          onSubmit: this.props.saveContainer\n\t        },\n\t        parentContainerField,\n\t        containerDisplay,\n\t        updateButton\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return ContainerParentForm;\n\t}(React.Component);\n\t\n\tContainerParentForm.propTypes = {\n\t  mapFormOptions: React.PropTypes.func.isRequired,\n\t  setContainer: React.PropTypes.func.isRequired,\n\t  saveContainer: React.PropTypes.func,\n\t  data: React.PropTypes.object,\n\t  container: React.PropTypes.object.isRequired,\n\t  containersNonPrimary: React.PropTypes.object.isRequired,\n\t  containerDimensions: React.PropTypes.object.isRequired,\n\t  containerCoordinates: React.PropTypes.object.isRequired,\n\t  containerTypes: React.PropTypes.object,\n\t  containerStati: React.PropTypes.object\n\t};\n\t\n\texports.default = ContainerParentForm;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * ContainerDisplay\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar ContainerDisplay = function (_React$Component) {\n\t  _inherits(ContainerDisplay, _React$Component);\n\t\n\t  function ContainerDisplay() {\n\t    _classCallCheck(this, ContainerDisplay);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ContainerDisplay.__proto__ || Object.getPrototypeOf(ContainerDisplay)).call(this));\n\t\n\t    _this.redirectURL = _this.redirectURL.bind(_this);\n\t    _this.drag = _this.drag.bind(_this);\n\t    _this.drop = _this.drop.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ContainerDisplay, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      $('[data-toggle=\"tooltip\"]').tooltip();\n\t    }\n\t  }, {\n\t    key: 'componenDidUpdate',\n\t    value: function componenDidUpdate() {\n\t      $('[data-toggle=\"tooltip\"]').tooltip();\n\t    }\n\t  }, {\n\t    key: 'redirectURL',\n\t    value: function redirectURL(e) {\n\t      var coordinate = e.target.id;\n\t      if (this.props.coordinates[coordinate]) {\n\t        var load = this.props.types[this.props.children[this.props.coordinates[coordinate]].typeId].primary ? this.props.loadSpecimen : this.props.loadContainer;\n\t\n\t        load(this.props.children[this.props.coordinates[coordinate]].barcode);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'allowDrop',\n\t    value: function allowDrop(e) {\n\t      e.preventDefault();\n\t    }\n\t  }, {\n\t    key: 'drag',\n\t    value: function drag(e) {\n\t      var container = JSON.stringify(this.props.children[this.props.coordinates[e.target.id]]);\n\t      e.dataTransfer.setData(\"text/plain\", container);\n\t    }\n\t  }, {\n\t    key: 'drop',\n\t    value: function drop(e) {\n\t      e.preventDefault();\n\t\n\t      var container = JSON.parse(e.dataTransfer.getData(\"text/plain\"));\n\t      var newCoordinate = parseInt(e.target.id);\n\t\n\t      container.coordinate = newCoordinate;\n\t\n\t      this.props.saveChildContainer(container);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      // This is eventually need to be reworked and cleaned up\n\t      var column = [];\n\t      var row = [];\n\t      var display = void 0;\n\t      var coordinate = 1;\n\t      if (this.props.dimensions) {\n\t        for (var y = 0; y < this.props.dimensions.y; y++) {\n\t          column = [];\n\t          for (var x = 1; x <= this.props.dimensions.x; x++) {\n\t\n\t            var nodeWidth = 500 / this.props.dimensions.x - 500 / this.props.dimensions.x * 0.08;\n\t            var nodeStyle = { width: nodeWidth };\n\t            var nodeClass = 'node';\n\t            var tooltipTitle = null;\n\t            var dataHtml = 'false';\n\t            var dataToggle = null;\n\t            var dataPlacement = null;\n\t            var draggable = 'false';\n\t            var onDragStart = null;\n\t            var onDragOver = this.allowDrop;\n\t            var onDrop = this.drop;\n\t            var onClick = null;\n\t\n\t            if (!this.props.select) {\n\t              // This double if statement doesn't sound great\n\t              if (this.props.coordinates) {\n\t                if (this.props.coordinates[coordinate]) {\n\t                  nodeClass = 'node occupied';\n\t                  dataHtml = 'true';\n\t                  dataToggle = 'tooltip';\n\t                  dataPlacement = 'top';\n\t                  tooltipTitle = '<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + '<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + '<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n\t                  draggable = 'true';\n\t                  onDragStart = this.drag;\n\t                  onDragOver = null;\n\t                  onDrop = null;\n\t                  onClick = this.redirectURL;\n\t                }\n\t              }\n\t            }\n\t\n\t            if (this.props.select) {\n\t              if (coordinate == this.props.selectedCoordinate) {\n\t                nodeClass = 'node occupied';\n\t              } else if (!this.props.coordinates) {\n\t                nodeClass = 'node available';\n\t                onClick = function onClick(e) {\n\t                  return _this2.props.setContainer('coordinate', e.target.id);\n\t                };\n\t              } else if (this.props.coordinates) {\n\t                if (!this.props.coordinates[coordinate]) {\n\t                  nodeClass = 'node available';\n\t                  onClick = function onClick(e) {\n\t                    return _this2.props.setContainer('coordinate', e.target.id);\n\t                  };\n\t                } else if (this.props.coordinates[coordinate]) {\n\t                  // TODO: --- This is currently not working ---\n\t                  //  dataHtml = 'true';\n\t                  //  dataToggle = 'tooltip';\n\t                  //  dataPlacement = 'top';\n\t                  //  tooltipTitle = \n\t                  //'<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + \n\t                  //'<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + \n\t                  //'<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n\t                }\n\t              }\n\t            }\n\t\n\t            var coordinateDisplay = void 0;\n\t            if (true) {\n\t              coordinateDisplay = x + this.props.dimensions.x * y;\n\t            } else if (false) {\n\t              coordinateDisplay = String.fromCharCode(65 + y) + '' + x;\n\t            }\n\t\n\t            column.push(React.createElement(\n\t              'div',\n\t              {\n\t                id: coordinate,\n\t                className: nodeClass,\n\t                'data-html': dataHtml,\n\t                'data-toggle': dataToggle,\n\t                'data-placement': dataPlacement,\n\t                'data-original-title': tooltipTitle,\n\t                style: nodeStyle,\n\t                onClick: onClick,\n\t                draggable: draggable,\n\t                onDragStart: onDragStart,\n\t                onDragOver: onDragOver,\n\t                onDrop: onDrop\n\t              },\n\t              coordinateDisplay\n\t            ));\n\t\n\t            coordinate++;\n\t          }\n\t\n\t          var rowHeight = 500 / this.props.dimensions.y - 500 / this.props.dimensions.y * 0.08;\n\t          var rowMargin = 500 / this.props.dimensions.y * 0.04;\n\t          var rowStyle = {\n\t            height: rowHeight\n\t          };\n\t\n\t          row.push(React.createElement(\n\t            'div',\n\t            {\n\t              className: 'row',\n\t              style: rowStyle\n\t            },\n\t            column\n\t          ));\n\t        }\n\t\n\t        display = row;\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { className: 'display' },\n\t        display\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return ContainerDisplay;\n\t}(React.Component);\n\t\n\tContainerDisplay.propTypes = {};\n\t\n\texports.default = ContainerDisplay;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _customFields = __webpack_require__(12);\n\t\n\tvar _customFields2 = _interopRequireDefault(_customFields);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenCollectionForm = function (_React$Component) {\n\t  _inherits(SpecimenCollectionForm, _React$Component);\n\t\n\t  function SpecimenCollectionForm() {\n\t    _classCallCheck(this, SpecimenCollectionForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenCollectionForm.__proto__ || Object.getPrototypeOf(SpecimenCollectionForm)).call(this));\n\t\n\t    _this.setCollection = _this.setCollection.bind(_this);\n\t    _this.addData = _this.addData.bind(_this);\n\t    _this.setData = _this.setData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenCollectionForm, [{\n\t    key: 'setCollection',\n\t    value: function setCollection(name, value) {\n\t      var collection = this.props.specimen.collection;\n\t      collection[name] = value;\n\t      this.props.setSpecimen('collection', collection);\n\t    }\n\t\n\t    //TODO: this function may not be necessary\n\t\n\t  }, {\n\t    key: 'addData',\n\t    value: function addData() {\n\t      var collection = this.props.specimen.collection;\n\t      collection.data = {};\n\t      this.props.setSpecimen('collection', collection);\n\t    }\n\t  }, {\n\t    key: 'setData',\n\t    value: function setData(name, value) {\n\t      var data = this.props.specimen.collection.data;\n\t      data[name] = value;\n\t      this.setCollection('data', data);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var updateButton = void 0;\n\t      if (((this.props.data || {}).specimen || {}).collection) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      }\n\t\n\t      var specimenTypeUnits = {};\n\t      var specimenTypeFields = void 0;\n\t      if (this.props.specimen.typeId) {\n\t\n\t        //This modifies the selections for unit drop down based on the chosen\n\t        //specimen type \n\t        for (var id in this.props.specimenTypeUnits[this.props.specimen.typeId]) {\n\t          specimenTypeUnits[id] = this.props.specimenTypeUnits[this.props.specimen.typeId][id].unit;\n\t        }\n\t\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.props.specimen.typeId];\n\t        if (specimenTypeFieldsObject) {\n\t          if (((this.props.specimen || {}).collection || {}).data) {\n\t            specimenTypeFields = React.createElement(_customFields2.default, {\n\t              fields: specimenTypeFieldsObject,\n\t              attributeDatatypes: this.props.attributeDatatypes,\n\t              attributeOptions: this.props.attributeOptions,\n\t              object: this.props.specimen.collection.data,\n\t              setData: this.setData\n\t            });\n\t          } else {\n\t            this.addData();\n\t          }\n\t        }\n\t      }\n\t\n\t      var specimenFields = void 0;\n\t      if (this.props.specimen.typeId) {\n\t        specimenFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Quantity',\n\t            onUserInput: this.setCollection,\n\t            required: true,\n\t            value: this.props.specimen.collection.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: specimenTypeUnits,\n\t            onUserInput: this.setCollection,\n\t            required: true,\n\t            value: this.props.specimen.collection.unitId\n\t          }),\n\t          specimenTypeFields,\n\t          React.createElement(DateElement, {\n\t            name: 'date',\n\t            label: 'Date',\n\t            minYear: '2000',\n\t            maxYear: '2018',\n\t            onUserInput: this.setCollection,\n\t            required: true,\n\t            value: this.props.specimen.collection.date\n\t          }),\n\t          React.createElement(TimeElement, {\n\t            name: 'time',\n\t            label: 'Time',\n\t            onUserInput: this.setCollection,\n\t            required: true,\n\t            value: this.props.specimen.collection.time\n\t          }),\n\t          React.createElement(TextareaElement, {\n\t            name: 'comments',\n\t            label: 'Comments',\n\t            onUserInput: this.setCollection,\n\t            ref: 'comments',\n\t            value: this.props.specimen.collection.comments\n\t          })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankSpecimen',\n\t          onSubmit: this.props.saveSpecimen,\n\t          ref: 'form'\n\t        },\n\t        specimenFields,\n\t        updateButton\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return SpecimenCollectionForm;\n\t}(React.Component);\n\t\n\tSpecimenCollectionForm.propTypes = {\n\t  setSpecimen: React.PropTypes.func.isRequired,\n\t  saveSpecimen: React.PropTypes.func,\n\t  specimen: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  attributeOptions: React.PropTypes.object.isRequired,\n\t  specimenTypeUnits: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = SpecimenCollectionForm;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Custom Attribute Fields\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\tvar CustomFields = function (_React$Component) {\n\t  _inherits(CustomFields, _React$Component);\n\t\n\t  function CustomFields() {\n\t    _classCallCheck(this, CustomFields);\n\t\n\t    return _possibleConstructorReturn(this, (CustomFields.__proto__ || Object.getPrototypeOf(CustomFields)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(CustomFields, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      var fields = this.props.fields;\n\t      var attributeFields = Object.keys(fields).map(function (attribute) {\n\t\n\t        var datatype = _this2.props.attributeDatatypes[fields[attribute]['datatypeId']].datatype;\n\t        if (datatype === 'text' || datatype === 'number') {\n\t          if (fields[attribute]['refTableId'] === null) {\n\t            return React.createElement(TextboxElement, {\n\t              name: attribute,\n\t              label: fields[attribute]['name'],\n\t              onUserInput: _this2.props.setData,\n\t              required: fields[attribute]['required'],\n\t              value: _this2.props.object[attribute]\n\t            });\n\t          }\n\t\n\t          if (fields[attribute]['refTableId'] !== null) {\n\t            return React.createElement(SelectElement, {\n\t              name: attribute,\n\t              label: fields[attribute]['name'],\n\t              options: _this2.props.attributeOptions[fields[attribute]['refTableId']],\n\t              onUserInput: _this2.props.setData,\n\t              required: fields[attribute]['required'],\n\t              value: _this2.props.object[attribute]\n\t            });\n\t          }\n\t        }\n\t\n\t        if (datatype === 'datetime') {\n\t          return React.createElement(DataElement, {\n\t            name: attribute,\n\t            label: fields[attribute]['name'],\n\t            onUserInput: _this2.props.setData,\n\t            required: fields[attribute]['required'],\n\t            value: _this2.props.object[attribute]\n\t          });\n\t        }\n\t\n\t        // Do not present the possibility of uploading if file is already set\n\t        // File must instead be deleted or overwritten.\n\t        if (datatype === 'file' && !(_this2.props.data || {})[attribute]) {\n\t          return React.createElement(FileElement, {\n\t            name: attribute,\n\t            label: fields[attribute]['name'],\n\t            onUserInput: _this2.props.setData,\n\t            required: fields[attribute]['required'],\n\t            value: _this2.props.files[_this2.props.object[attribute]]\n\t          });\n\t        }\n\t      });\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        attributeFields\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return CustomFields;\n\t}(React.Component);\n\t\n\tCustomFields.propTypes = {\n\t  fields: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  attributeOptions: React.PropTypes.object.isRequired,\n\t  object: React.PropTypes.object.isRequired,\n\t  setData: React.PropTypes.func.isRequired\n\t};\n\t\n\texports.default = CustomFields;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _customFields = __webpack_require__(12);\n\t\n\tvar _customFields2 = _interopRequireDefault(_customFields);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenPreparationForm = function (_React$Component) {\n\t  _inherits(SpecimenPreparationForm, _React$Component);\n\t\n\t  function SpecimenPreparationForm() {\n\t    _classCallCheck(this, SpecimenPreparationForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenPreparationForm.__proto__ || Object.getPrototypeOf(SpecimenPreparationForm)).call(this));\n\t\n\t    _this.setPreparation = _this.setPreparation.bind(_this);\n\t    _this.addData = _this.addData.bind(_this);\n\t    _this.setData = _this.setData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenPreparationForm, [{\n\t    key: 'setPreparation',\n\t    value: function setPreparation(name, value) {\n\t      var preparation = this.props.specimen.preparation;\n\t      preparation[name] = value;\n\t      this.props.setSpecimen('preparation', preparation);\n\t    }\n\t  }, {\n\t    key: 'addData',\n\t    value: function addData() {\n\t      var preparation = this.props.specimen.preparation;\n\t      preparation.data = {};\n\t      this.props.setSpecimen('preparation', preparation);\n\t    }\n\t  }, {\n\t    key: 'setData',\n\t    value: function setData(name, value) {\n\t      var data = this.props.specimen.preparation.data;\n\t      data[name] = value;\n\t      this.setPreparation('data', data);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      var submitButton = void 0;\n\t      if (this.props.data.specimen.preparation) {\n\t        submitButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      } else {\n\t        submitButton = React.createElement(ButtonElement, { label: 'Submit' });\n\t      }\n\t\n\t      var specimenProtocolFields = void 0;\n\t      if (this.props.specimen.preparation.protocolId) {\n\t        var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.props.specimen.preparation.protocolId];\n\t\n\t        if (specimenProtocolFieldsObject) {\n\t          if (this.props.specimen.preparation.data) {\n\t            specimenProtocolFields = React.createElement(_customFields2.default, {\n\t              fields: specimenProtocolFieldsObject,\n\t              attributeDatatypes: this.props.attributeDatatypes,\n\t              attributeOptions: this.props.attributeOptions,\n\t              object: this.props.specimen.preparation.data,\n\t              setData: this.setData\n\t            });\n\t          } else {\n\t            this.addData();\n\t          }\n\t        }\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenPreparation',\n\t          onSubmit: this.props.saveSpecimen,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(SelectElement, {\n\t          name: 'protocolId',\n\t          label: 'Protocol',\n\t          options: this.props.specimenProtocols,\n\t          onUserInput: this.setPreparation,\n\t          required: true,\n\t          value: this.props.specimen.preparation.protocolId\n\t        }),\n\t        specimenProtocolFields,\n\t        React.createElement(DateElement, {\n\t          name: 'date',\n\t          label: 'Date',\n\t          onUserInput: this.setPreparation,\n\t          required: true,\n\t          value: this.props.specimen.preparation.date\n\t        }),\n\t        React.createElement(TimeElement, {\n\t          name: 'time',\n\t          label: 'Time',\n\t          onUserInput: this.setPreparation,\n\t          required: true,\n\t          value: this.props.specimen.preparation.time\n\t        }),\n\t        React.createElement(TextareaElement, {\n\t          name: 'comments',\n\t          label: 'Comments',\n\t          onUserInput: this.setPreparation,\n\t          value: this.props.specimen.preparation.comments\n\t        }),\n\t        submitButton\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return SpecimenPreparationForm;\n\t}(React.Component);\n\t\n\tSpecimenPreparationForm.propTypes = {};\n\t\n\texports.default = SpecimenPreparationForm;\n\n/***/ },\n/* 14 */,\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _barcodeForm = __webpack_require__(16);\n\t\n\tvar _barcodeForm2 = _interopRequireDefault(_barcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankSpecimenForm = function (_React$Component) {\n\t  _inherits(BiobankSpecimenForm, _React$Component);\n\t\n\t  function BiobankSpecimenForm() {\n\t    _classCallCheck(this, BiobankSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimenForm.__proto__ || Object.getPrototypeOf(BiobankSpecimenForm)).call(this));\n\t\n\t    _this.state = {\n\t      formErrors: {},\n\t      candidateId: null,\n\t      sessionId: null,\n\t      centerId: null,\n\t      barcodeList: { 1: { specimen: { collection: {} }, container: {} } },\n\t      count: 1,\n\t      collapsed: { 1: true },\n\t      copyMultiplier: 1\n\t    };\n\t\n\t    _this.toggleCollapse = _this.toggleCollapse.bind(_this);\n\t    _this.setSpecimen = _this.setSpecimen.bind(_this);\n\t    _this.setContainer = _this.setContainer.bind(_this);\n\t    _this.addBarcode = _this.addBarcode.bind(_this);\n\t    _this.setCopyMultiplier = _this.setCopyMultiplier.bind(_this);\n\t    _this.copyBarcode = _this.copyBarcode.bind(_this);\n\t    _this.removeBarcode = _this.removeBarcode.bind(_this);\n\t    _this.saveBarcodeList = _this.saveBarcodeList.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimenForm, [{\n\t    key: 'toggleCollapse',\n\t    value: function toggleCollapse(key) {\n\t      var collapsed = this.state.collapsed;\n\t      collapsed[key] = !collapsed[key];\n\t      this.setState({ collapsed: collapsed });\n\t    }\n\t  }, {\n\t    key: 'saveBarcodeList',\n\t    value: function saveBarcodeList() {\n\t      var _this2 = this;\n\t\n\t      var barcodeList = JSON.parse(JSON.stringify(this.state.barcodeList));\n\t      var availableId = Object.keys(this.props.containerStati).find(function (key) {\n\t        return _this2.props.containerStati[key] === 'Available';\n\t      });\n\t\n\t      for (var barcode in barcodeList) {\n\t        //set container values\n\t        var container = barcodeList[barcode].container;\n\t        container.statusId = availableId;\n\t        container.temperature = 20;\n\t        container.locationId = this.state.centerId;\n\t        container.originId = this.state.centerId;\n\t\n\t        //set specimen values\n\t        var specimen = barcodeList[barcode].specimen;\n\t        specimen.candidateId = this.state.candidateId;\n\t        specimen.sessionId = this.state.sessionId;\n\t        specimen.quantity = specimen.collection.quantity;\n\t        specimen.unitId = specimen.collection.unitId;\n\t        specimen.collection.locationId = this.state.centerId;\n\t        if (this.props.specimenTypes[specimen.typeId].freezeThaw === 1) {\n\t          specimen.fTCycle = 0;\n\t        }\n\t\n\t        //if this is an aliquot form, reset some of the values.\n\t        //TODO: these will eventually be higher level states.\n\t        if (this.props.data) {\n\t          specimen.candidateId = this.props.data.candidate.CandID;\n\t          specimen.sessionId = this.props.data.session.ID;\n\t          specimen.parentSpecimenId = this.props.data.specimen.id;\n\t          specimen.collection.locationId = this.props.data.container.locationId;\n\t          container.locationId = this.props.data.container.locationId;\n\t          container.originId = this.props.data.container.locationId;\n\t        }\n\t\n\t        barcodeList[barcode].container = container;\n\t        barcodeList[barcode].specimen = specimen;\n\t      }\n\t\n\t      this.props.save(barcodeList, this.props.saveBarcodeListURL, 'Save Successful!').then(function () {\n\t        _this2.props.refreshParent();\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setSpecimen',\n\t    value: function setSpecimen(name, value, key) {\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t      var centerId = this.state.centerId;\n\t      var candidateId = this.state.candidateId;\n\t      var sessionId = this.state.sessionId;\n\t      var barcodeList = this.state.barcodeList;\n\t\n\t      if (name === 'candidateId') {\n\t        candidateId = value;\n\t      } else if (name === 'sessionId') {\n\t        sessionId = value;\n\t        centerId = this.props.sessionCenters[sessionId].centerId;\n\t      } else {\n\t        //this is eliminate values if specimen type is changed\n\t        if (name === 'typeId') {\n\t          barcodeList[key].specimen = { collection: {} };\n\t        }\n\t        barcodeList[key].specimen[name] = value;\n\t      }\n\t\n\t      this.setState({ barcodeList: barcodeList, centerId: centerId, candidateId: candidateId, sessionId: sessionId });\n\t    }\n\t  }, {\n\t    key: 'setContainer',\n\t    value: function setContainer(name, value, key) {\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t      var barcodeList = this.state.barcodeList;\n\t      barcodeList[key].container[name] = value;\n\t      this.setState({ barcodeList: barcodeList });\n\t    }\n\t  }, {\n\t    key: 'addBarcode',\n\t    value: function addBarcode() {\n\t      var barcodeList = this.state.barcodeList;\n\t      var count = this.state.count;\n\t      var collapsed = this.state.collapsed;\n\t\n\t      barcodeList[count + 1] = { specimen: {}, container: { collection: {} } };\n\t      collapsed[count + 1] = true;\n\t      count = count + 1;\n\t\n\t      this.setState({ barcodeList: barcodeList, collapsed: collapsed, count: count });\n\t    }\n\t  }, {\n\t    key: 'setCopyMultiplier',\n\t    value: function setCopyMultiplier(e) {\n\t      var copyMultiplier = e.target.value;\n\t      this.setState({ copyMultiplier: copyMultiplier });\n\t    }\n\t  }, {\n\t    key: 'copyBarcode',\n\t    value: function copyBarcode(key) {\n\t      var count = this.state.count;\n\t      var collapsed = this.state.collapsed;\n\t      var nextKey = count + 1;\n\t      var barcodeList = this.state.barcodeList;\n\t      var multiplier = this.state.copyMultiplier;\n\t\n\t      for (var i = 1; i <= multiplier; i++) {\n\t        barcodeList[nextKey] = JSON.parse(JSON.stringify(barcodeList[key]));\n\t        delete barcodeList[nextKey].container.barcode;\n\t        collapsed[nextKey] = true;\n\t        nextKey++;\n\t      }\n\t\n\t      this.setState({\n\t        barcodeList: barcodeList,\n\t        count: nextKey,\n\t        collapsed: collapsed\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removeBarcode',\n\t    value: function removeBarcode(key) {\n\t      var barcodeList = this.state.barcodeList;\n\t      delete barcodeList[key];\n\t      this.setState({ barcodeList: barcodeList });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this3 = this;\n\t\n\t      //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n\t      var barcodeListArray = Object.keys(this.state.barcodeList);\n\t      var barcodes = [];\n\t      var i = 1;\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        var _loop = function _loop() {\n\t          var key = _step.value;\n\t\n\t          barcodes.push(React.createElement(_barcodeForm2.default, {\n\t            data: _this3.props.data || null,\n\t            key: key,\n\t            barcodeKey: key,\n\t            id: i,\n\t            collapsed: _this3.state.collapsed[key],\n\t            toggleCollapse: _this3.toggleCollapse,\n\t            mapFormOptions: _this3.props.mapFormOptions,\n\t            container: _this3.state.barcodeList[key].container || null,\n\t            specimen: _this3.state.barcodeList[key].specimen || null,\n\t            removeBarcode: barcodeListArray.length !== 1 ? function () {\n\t              return _this3.removeBarcode(key);\n\t            } : null,\n\t            addBarcode: i == barcodeListArray.length ? _this3.addBarcode : null,\n\t            setCopyMultiplier: _this3.setCopyMultiplier,\n\t            copyMultiplier: _this3.state.copyMultiplier,\n\t            copyBarcode: i == barcodeListArray.length && _this3.state.barcodeList[key] ? _this3.copyBarcode : null,\n\t            setContainer: _this3.setContainer,\n\t            setSpecimen: _this3.setSpecimen,\n\t            onChange: _this3.props.onChange,\n\t            specimenTypes: _this3.props.specimenTypes,\n\t            containerTypesPrimary: _this3.props.containerTypesPrimary,\n\t            containersNonPrimary: _this3.props.containersNonPrimary,\n\t            specimenTypeAttributes: _this3.props.specimenTypeAttributes,\n\t            attributeDatatypes: _this3.props.attributeDatatypes,\n\t            attributeOptions: _this3.props.attributeOptions,\n\t            capacities: _this3.props.capacities,\n\t            containerDimensions: _this3.props.containerDimensions,\n\t            containerCoordinates: _this3.props.containerCoordinates,\n\t            specimenTypeUnits: _this3.props.specimenTypeUnits,\n\t            units: _this3.props.units\n\t          }));\n\t\n\t          i++;\n\t        };\n\t\n\t        for (var _iterator = barcodeListArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          _loop();\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t\n\t      var globalFields = void 0;\n\t      var remainingQuantityFields = void 0;\n\t      if (this.props.data) {\n\t        globalFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(StaticElement, {\n\t            label: 'Parent Specimen',\n\t            text: this.props.data.container.barcode\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'PSCID',\n\t            text: this.props.data.candidate.PSCID\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Visit Label',\n\t            text: this.props.data.session.Visit_label\n\t          })\n\t        );\n\t\n\t        remainingQuantityFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Remaining Quantity',\n\t            onUserInput: this.props.setSpecimenData,\n\t            required: true,\n\t            value: this.props.specimen.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: this.props.specimenUnits,\n\t            onUserInput: this.props.setSpecimenData,\n\t            emptyOption: false,\n\t            required: true,\n\t            value: this.props.specimen.unitId\n\t          })\n\t        );\n\t      } else {\n\t        var sessions = {};\n\t        if (this.state.candidateId) {\n\t          sessions = this.props.mapFormOptions(this.props.candidateSessions[this.state.candidateId], 'label');\n\t        }\n\t        //TODO: not sure why, but I'm now having trouble with the SearchableDropdown\n\t        globalFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'candidateId',\n\t            label: 'PSCID',\n\t            options: this.props.candidates,\n\t            onUserInput: this.setSpecimen,\n\t            required: true,\n\t            value: this.state.candidateId,\n\t            placeHolder: 'Search for a PSCID'\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'sessionId',\n\t            label: 'Visit Label',\n\t            options: sessions,\n\t            onUserInput: this.setSpecimen,\n\t            required: true,\n\t            value: this.state.sessionId,\n\t            disabled: this.state.candidateId ? false : true\n\t          })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenForm',\n\t          id: 'specimenForm',\n\t          onSubmit: function onSubmit() {\n\t            _this3.saveBarcodeList();\n\t            _this3.props.saveSpecimen instanceof Function && _this3.props.saveSpecimen();\n\t          },\n\t          ref: 'form'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-9 col-xs-offset-1' },\n\t            globalFields,\n\t            remainingQuantityFields\n\t          )\n\t        ),\n\t        barcodes,\n\t        React.createElement(ButtonElement, {\n\t          label: 'Submit',\n\t          columnSize: 'col-sm-2 col-sm-offset-10'\n\t        })\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimenForm;\n\t}(React.Component);\n\t\n\tBiobankSpecimenForm.propTypes = {};\n\t\n\texports.default = BiobankSpecimenForm;\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _collectionForm = __webpack_require__(11);\n\t\n\tvar _collectionForm2 = _interopRequireDefault(_collectionForm);\n\t\n\tvar _containerParentForm = __webpack_require__(9);\n\t\n\tvar _containerParentForm2 = _interopRequireDefault(_containerParentForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Barcode Form\n\t *\n\t * Acts a subform for BiobankSpecimenForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenBarcodeForm = function (_React$Component) {\n\t  _inherits(SpecimenBarcodeForm, _React$Component);\n\t\n\t  function SpecimenBarcodeForm() {\n\t    _classCallCheck(this, SpecimenBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenBarcodeForm.__proto__ || Object.getPrototypeOf(SpecimenBarcodeForm)).call(this));\n\t\n\t    _this.setContainer = _this.setContainer.bind(_this);\n\t    _this.setSpecimen = _this.setSpecimen.bind(_this);\n\t    _this.copy = _this.copy.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenBarcodeForm, [{\n\t    key: 'setContainer',\n\t    value: function setContainer(name, value) {\n\t      this.props.setContainer(name, value, this.props.barcodeKey);\n\t    }\n\t  }, {\n\t    key: 'setSpecimen',\n\t    value: function setSpecimen(name, value) {\n\t      this.props.setSpecimen(name, value, this.props.barcodeKey);\n\t    }\n\t  }, {\n\t    key: 'copy',\n\t    value: function copy() {\n\t      this.props.copyBarcode(this.props.copyMultiplier);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      var addBarcodeButton = void 0;\n\t      var addBarcodeText = void 0;\n\t      var copyBarcodeButton = void 0;\n\t      var copyBarcodeText = void 0;\n\t      if (this.props.addBarcode) {\n\t        addBarcodeButton = React.createElement(\n\t          'span',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: this.props.addBarcode\n\t            },\n\t            '+'\n\t          )\n\t        );\n\t\n\t        addBarcodeText = React.createElement(\n\t          'span',\n\t          { className: 'action-title' },\n\t          'New Entry'\n\t        );\n\t      }\n\t\n\t      if (this.props.copyBarcode) {\n\t        copyBarcodeButton = React.createElement(\n\t          'span',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: this.copy\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-duplicate' })\n\t          )\n\t        );\n\t        copyBarcodeText = React.createElement(\n\t          'span',\n\t          { className: 'action-title' },\n\t          React.createElement('input', {\n\t            className: 'form-control input-sm',\n\t            type: 'number',\n\t            min: '1',\n\t            max: '50',\n\t            style: { width: 50, display: 'inline' },\n\t            onChange: this.props.setCopyMultiplier,\n\t            value: this.props.copyMultiplier\n\t          }),\n\t          'Copies'\n\t        );\n\t      }\n\t\n\t      var removeBarcodeButton = void 0;\n\t      if (this.props.removeBarcode) {\n\t        var glyphStyle = {\n\t          color: '#DDDDDD',\n\t          marginLeft: 10,\n\t          cursor: 'pointer',\n\t          fontSize: 15\n\t        };\n\t\n\t        removeBarcodeButton = React.createElement('span', {\n\t          className: 'glyphicon glyphicon-remove',\n\t          onClick: this.props.removeBarcode,\n\t          style: glyphStyle\n\t        });\n\t      }\n\t\n\t      var specimenTypes = {};\n\t      if (this.props.data) {\n\t        for (var id in this.props.specimenTypes) {\n\t          if (this.props.specimenTypes[id].parentTypeId == this.props.data.specimen.typeId || id == this.props.data.specimen.typeId) {\n\t            specimenTypes[id] = this.props.specimenTypes[id]['type'];\n\t          }\n\t        }\n\t      } else {\n\t        specimenTypes = this.props.mapFormOptions(this.props.specimenTypes, 'type');\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankBarcode'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-9 col-xs-offset-1' },\n\t            React.createElement(\n\t              'div',\n\t              null,\n\t              React.createElement(TextboxElement, {\n\t                name: 'barcode',\n\t                label: 'Barcode ' + this.props.id,\n\t                onUserInput: this.setContainer,\n\t                required: true,\n\t                value: this.props.container.barcode\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-1', style: { paddingLeft: 0, marginTop: 10 } },\n\t            React.createElement('span', {\n\t              className: this.props.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up',\n\t              style: { cursor: 'pointer', fontSize: 15, position: 'relative', right: 40 },\n\t              'data-toggle': 'collapse',\n\t              'data-target': '#item-' + this.props.barcodeKey,\n\t              onClick: function onClick() {\n\t                return _this2.props.toggleCollapse(_this2.props.barcodeKey);\n\t              }\n\t            }),\n\t            removeBarcodeButton\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement('div', { className: 'col-xs-2' }),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-8' },\n\t            React.createElement(\n\t              'div',\n\t              { id: 'item-' + this.props.barcodeKey, className: 'collapse' },\n\t              React.createElement(SelectElement, {\n\t                name: 'typeId',\n\t                label: 'Specimen Type',\n\t                options: specimenTypes,\n\t                onUserInput: this.setSpecimen,\n\t                required: true,\n\t                value: this.props.specimen.typeId\n\t              }),\n\t              React.createElement(SelectElement, {\n\t                name: 'typeId',\n\t                label: 'Container Type',\n\t                options: this.props.containerTypesPrimary,\n\t                onUserInput: this.setContainer,\n\t                ref: 'containerType',\n\t                required: true,\n\t                value: this.props.container.typeId\n\t              }),\n\t              React.createElement(_collectionForm2.default, {\n\t                specimen: this.props.specimen,\n\t                setSpecimenData: this.setSpecimen,\n\t                specimenTypeUnits: this.props.specimenTypeUnits,\n\t                specimenTypeAttributes: this.props.specimenTypeAttributes,\n\t                attributeDatatypes: this.props.attributeDatatypes,\n\t                attributeOptions: this.props.attributeOptions\n\t              }),\n\t              React.createElement(_containerParentForm2.default, {\n\t                setContainerData: this.setContainer,\n\t                mapFormOptions: this.props.mapFormOptions,\n\t                container: this.props.container,\n\t                containersNonPrimary: this.props.containersNonPrimary,\n\t                containerDimensions: this.props.containerDimensions,\n\t                containerCoordinates: this.props.containerCoordinates\n\t              })\n\t            )\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement('div', { className: 'col-xs-4' }),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-3 action' },\n\t              addBarcodeButton,\n\t              addBarcodeText\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-3 action' },\n\t              copyBarcodeButton,\n\t              copyBarcodeText\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return SpecimenBarcodeForm;\n\t}(React.Component);\n\t\n\tSpecimenBarcodeForm.propTypes = {};\n\t\n\texports.default = SpecimenBarcodeForm;\n\n/***/ },\n/* 17 */,\n/* 18 */,\n/* 19 */,\n/* 20 */,\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Panel = __webpack_require__(22);\n\t\n\tvar _Panel2 = _interopRequireDefault(_Panel);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file contains React component for FilterForm\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Loris Team\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.1.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/**\n\t * FilterForm component.\n\t * A wrapper for form elements inside a selection filter.\n\t *\n\t * Adds necessary filter callbacks to all children and passes them to FormElement\n\t * for proper rendering.\n\t *\n\t * Keeps track of filter object and sends it to parent on every update.\n\t *\n\t * //HACK/NOTE: Loris has special behaviour for `candID` attribute in the query string,\n\t * making it impossible to use it for selection filters. This components renames\n\t * all `candID` fields to `candidateID` automatically before appending them to URL.\n\t *\n\t */\n\tvar FilterForm = function (_React$Component) {\n\t  _inherits(FilterForm, _React$Component);\n\t\n\t  function FilterForm(props) {\n\t    _classCallCheck(this, FilterForm);\n\t\n\t    // Bind component instance to custom methods\n\t    var _this = _possibleConstructorReturn(this, (FilterForm.__proto__ || Object.getPrototypeOf(FilterForm)).call(this, props));\n\t\n\t    _this.clearFilter = _this.clearFilter.bind(_this);\n\t    _this.getFormChildren = _this.getFormChildren.bind(_this);\n\t    _this.setFilter = _this.setFilter.bind(_this);\n\t    _this.onElementUpdate = _this.onElementUpdate.bind(_this);\n\t\n\t    // Keeps track of querystring values\n\t    // Saved as class variable instead of keeping in state\n\t    _this.queryString = QueryString.get();\n\t    return _this;\n\t  }\n\t\n\t  _createClass(FilterForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var filter = {};\n\t      var queryString = this.queryString;\n\t\n\t      // Initiaze filter using querystring value\n\t      Object.keys(queryString).forEach(function (key) {\n\t        var filterKey = key === 'candidateID' ? 'candID' : key;\n\t        filter[filterKey] = {\n\t          value: queryString[key],\n\t          exactMatch: false\n\t        };\n\t      });\n\t\n\t      // Update parent component\n\t      this.props.onUpdate(filter);\n\t    }\n\t\n\t    /**\n\t     * Clear the filter object, querystring and input fields\n\t     */\n\t\n\t  }, {\n\t    key: 'clearFilter',\n\t    value: function clearFilter() {\n\t      this.queryString = QueryString.clear(this.props.Module);\n\t      this.props.onUpdate({});\n\t    }\n\t\n\t    /**\n\t     * Itterates through FilterForm children, sets necessary callback functions\n\t     * and initializes filterTable\n\t     *\n\t     * @return {Array} formChildren - array of children with necessary props\n\t     */\n\t\n\t  }, {\n\t    key: 'getFormChildren',\n\t    value: function getFormChildren() {\n\t      var formChildren = [];\n\t      React.Children.forEach(this.props.children, function (child, key) {\n\t        // If child is a React component (i.e not a simple DOM element)\n\t        if (React.isValidElement(child) && typeof child.type === \"function\" && child.props.onUserInput) {\n\t          var callbackFunc = child.props.onUserInput;\n\t          var callbackName = callbackFunc.name;\n\t          var elementName = child.type.displayName;\n\t          var queryFieldName = child.props.name === 'candID' ? 'candidateID' : child.props.name;\n\t          var filterValue = this.queryString[queryFieldName];\n\t          // If callback function was not set, set it to onElementUpdate() for form\n\t          // elements and to clearFilter() for <ButtonElement type='reset'/>.\n\t          if (callbackName === \"onUserInput\") {\n\t            if (elementName === \"ButtonElement\" && child.props.type === \"reset\") {\n\t              callbackFunc = this.clearFilter;\n\t            } else {\n\t              callbackFunc = this.onElementUpdate.bind(null, elementName);\n\t            }\n\t          }\n\t          // Pass onUserInput and value props to all children\n\t          formChildren.push(React.cloneElement(child, {\n\t            onUserInput: callbackFunc,\n\t            value: filterValue ? filterValue : '',\n\t            key: key\n\t          }));\n\t          // Initialize filter for StaticDataTable\n\t          this.setFilter(elementName, child.props.name, filterValue);\n\t        } else {\n\t          formChildren.push(React.cloneElement(child, { key: key }));\n\t        }\n\t      }.bind(this));\n\t\n\t      return formChildren;\n\t    }\n\t\n\t    /**\n\t     * Appends entry to filter object or deletes it if value is\n\t     * empty.\n\t     *\n\t     * Sets exactMatch to true for all SelectElements (i.e dropdowns)\n\t     * in order to force StaticDataTable to do exact comparaison\n\t     *\n\t     * @param {string} type - form element type (i.e component name)\n\t     * @param {string} key - the name of the form element\n\t     * @param {string} value - the value of the form element\n\t     *\n\t     * @return {{}} filter - filterData\n\t     */\n\t\n\t  }, {\n\t    key: 'setFilter',\n\t    value: function setFilter(type, key, value) {\n\t      var filter = {};\n\t      if (this.props.filter) {\n\t        filter = JSON.parse(JSON.stringify(this.props.filter));\n\t      }\n\t      if (key) {\n\t        filter[key] = {};\n\t        if (value) {\n\t          // all defined/non-null values must have some length, else empty string\n\t          filter[key].value = Object.keys(value).length > 0 ? value : '';\n\t        } else {\n\t          // null and undefined handled here\n\t          filter[key].value = '';\n\t        }\n\t        filter[key].exactMatch = type === \"SelectElement\";\n\t      } else if (filter && key && value === '') {\n\t        delete filter[key];\n\t      }\n\t      return filter;\n\t    }\n\t\n\t    /**\n\t     * Sets filter object and querystring to reflect values of input fields\n\t     *\n\t     * @param {string} type - form element type (i.e component name)\n\t     * @param {string} fieldName - the name of the form element\n\t     * @param {string} fieldValue - the value of the form element\n\t     */\n\t\n\t  }, {\n\t    key: 'onElementUpdate',\n\t    value: function onElementUpdate(type, fieldName, fieldValue) {\n\t      // Make sure key is of string type and value is of string or object type\n\t      // before sending them to querystring\n\t      if (typeof fieldName !== 'string' || typeof fieldValue !== 'string' && (typeof fieldValue === 'undefined' ? 'undefined' : _typeof(fieldValue)) !== 'object') {\n\t        return;\n\t      }\n\t\n\t      // Update query string\n\t      var queryFieldName = fieldName === 'candID' ? 'candidateID' : fieldName;\n\t      this.queryString = QueryString.set(this.queryString, queryFieldName, fieldValue);\n\t\n\t      // Update filter and get new filter object\n\t      var filter = this.setFilter(type, fieldName, fieldValue);\n\t      this.props.onUpdate(filter);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Get formatted children\n\t      var formChildren = this.getFormChildren();\n\t      var formElements = this.props.formElements;\n\t\n\t      if (formElements) {\n\t        Object.keys(formElements).forEach(function (fieldName) {\n\t          var queryFieldName = fieldName === 'candID' ? 'candidateID' : fieldName;\n\t          formElements[fieldName].onUserInput = this.onElementUpdate.bind(null, fieldName);\n\t          formElements[fieldName].value = this.queryString[queryFieldName];\n\t        }.bind(this));\n\t      }\n\t\n\t      return React.createElement(\n\t        _Panel2.default,\n\t        {\n\t          id: this.props.id,\n\t          height: this.props.height,\n\t          title: this.props.title\n\t        },\n\t        React.createElement(\n\t          FormElement,\n\t          this.props,\n\t          formChildren\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return FilterForm;\n\t}(React.Component);\n\t\n\tFilterForm.defaultProps = {\n\t  id: 'selection-filter',\n\t  height: '100%',\n\t  title: 'Selection Filter',\n\t  onUpdate: function onUpdate() {\n\t    console.warn('onUpdate() callback is not set!');\n\t  }\n\t};\n\tFilterForm.propTypes = {\n\t  Module: React.PropTypes.string.isRequired,\n\t  filter: React.PropTypes.object.isRequired,\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  onUpdate: React.PropTypes.func\n\t};\n\t\n\texports.default = FilterForm;\n\n/***/ },\n/* 22 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Panel\n\t *\n\t * @author Alex I.\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Panel component\n\t * Wraps children in a collapsible bootstrap panel\n\t */\n\tvar Panel = function (_React$Component) {\n\t  _inherits(Panel, _React$Component);\n\t\n\t  function Panel(props) {\n\t    _classCallCheck(this, Panel);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).call(this, props));\n\t\n\t    _this.state = {\n\t      collapsed: _this.props.initCollapsed\n\t    };\n\t\n\t    // Initialize panel class based on collapsed status\n\t    _this.panelClass = _this.props.initCollapsed ? \"panel-collapse collapse\" : \"panel-collapse collapse in\";\n\t\n\t    _this.toggleCollapsed = _this.toggleCollapsed.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Panel, [{\n\t    key: \"toggleCollapsed\",\n\t    value: function toggleCollapsed() {\n\t      this.setState({ collapsed: !this.state.collapsed });\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      // Change arrow direction based on collapse status\n\t      var glyphClass = this.state.collapsed ? \"glyphicon pull-right glyphicon-chevron-down\" : \"glyphicon pull-right glyphicon-chevron-up\";\n\t\n\t      var pencilGlyph = void 0;\n\t      if (this.props.edit) {\n\t        pencilGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-pencil\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.edit\n\t        });\n\t      }\n\t\n\t      var plusGlyph = void 0;\n\t      if (this.props.add) {\n\t        plusGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-plus\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.add\n\t        });\n\t      }\n\t\n\t      var removeGlyph = void 0;\n\t      if (this.props.cancel) {\n\t        removeGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-remove\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.cancel\n\t        });\n\t      }\n\t\n\t      // Add panel header, if title is set\n\t      var panelHeading = this.props.title ? React.createElement(\n\t        \"div\",\n\t        {\n\t          className: \"panel-heading\"\n\t        },\n\t        React.createElement(\"span\", {\n\t          className: glyphClass,\n\t          onClick: this.toggleCollapsed,\n\t          \"data-toggle\": \"collapse\",\n\t          \"data-target\": '#' + this.props.id,\n\t          style: { cursor: 'pointer' }\n\t        }),\n\t        pencilGlyph,\n\t        plusGlyph,\n\t        removeGlyph,\n\t        this.props.title\n\t      ) : '';\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"panel panel-primary\" },\n\t        panelHeading,\n\t        React.createElement(\n\t          \"div\",\n\t          { id: this.props.id, className: this.panelClass, role: \"tabpanel\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"panel-body\", style: { height: this.props.height } },\n\t            this.props.children\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Panel;\n\t}(React.Component);\n\t\n\tPanel.propTypes = {\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  edit: React.PropTypes.func,\n\t  add: React.PropTypes.func\n\t};\n\tPanel.defaultProps = {\n\t  initCollapsed: false,\n\t  id: 'default-panel',\n\t  height: '100%'\n\t};\n\t\n\texports.default = Panel;\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _barcodeForm = __webpack_require__(16);\n\t\n\tvar _barcodeForm2 = _interopRequireDefault(_barcodeForm);\n\t\n\tvar _specimenForm = __webpack_require__(15);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tvar _preparationForm = __webpack_require__(13);\n\t\n\tvar _preparationForm2 = _interopRequireDefault(_preparationForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Pool Specimen Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\tvar PoolSpecimenForm = function (_React$Component) {\n\t  _inherits(PoolSpecimenForm, _React$Component);\n\t\n\t  function PoolSpecimenForm(props) {\n\t    _classCallCheck(this, PoolSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (PoolSpecimenForm.__proto__ || Object.getPrototypeOf(PoolSpecimenForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      barcodeList: {},\n\t      errorMessage: null,\n\t      formErrors: {},\n\t      barcodeCount: 2,\n\t      preparation: false,\n\t      step: 1\n\t    };\n\t\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    _this.validateForm = _this.validateForm.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setPreparationFormData = _this.setPreparationFormData.bind(_this);\n\t    _this.setSpecimenFormData = _this.setSpecimenFormData.bind(_this);\n\t    _this.submitForm = _this.submitForm.bind(_this);\n\t    _this.setBarcodeCount = _this.setBarcodeCount.bind(_this);\n\t    _this.next = _this.next.bind(_this);\n\t    _this.previous = _this.previous.bind(_this);\n\t    _this.addPreparation = _this.addPreparation.bind(_this);\n\t    _this.removePreparation = _this.removePreparation.bind(_this);\n\t    _this.validate = _this.validate.bind(_this);\n\t    _this.formSwitch = _this.formSwitch.bind(_this);\n\t    _this.preparationSwitch = _this.preparationSwitch.bind(_this);\n\t    _this.runAjax = _this.runAjax.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(PoolSpecimenForm, [{\n\t    key: 'next',\n\t    value: function next() {\n\t      var _this2 = this;\n\t\n\t      this.validate().then(function (data) {\n\t        _this2.setState({\n\t          poolData: data,\n\t          step: _this2.state.step + 1\n\t        });\n\t      }, function (error) {\n\t        swal(\"Oops!\", error.responseText, \"error\");\n\t      });\n\t    }\n\t  }, {\n\t    key: 'previous',\n\t    value: function previous() {\n\t      this.setState({\n\t        step: this.state.step - 1\n\t      });\n\t    }\n\t  }, {\n\t    key: 'validate',\n\t    value: function validate() {\n\t      return this.runAjax(this.props.specimenRequest, { barcodeList: this.state.barcodeList });\n\t    }\n\t  }, {\n\t    key: 'runAjax',\n\t    value: function runAjax(url, inputData) {\n\t      var _this3 = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        $.ajax(url, {\n\t          method: \"GET\",\n\t          dataType: 'json',\n\t          data: inputData,\n\t          success: function (data) {\n\t            resolve(data);\n\t          }.bind(_this3),\n\t          error: function error(_error, textStatus, errorThrown) {\n\t            reject(_error);\n\t            console.error(_error);\n\t          }\n\t        });\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setBarcodeCount',\n\t    value: function setBarcodeCount(field, value) {\n\t      var barcodeCount = value;\n\t      var barcodeList = this.state.barcodeList;\n\t      for (var barcode in barcodeList) {\n\t        if (barcode > barcodeCount) {\n\t          delete barcodeList[barcode];\n\t        }\n\t      }\n\t\n\t      this.setState({ barcodeCount: barcodeCount, barcodeList: barcodeList });\n\t    }\n\t  }, {\n\t    key: 'formSwitch',\n\t    value: function formSwitch(inputForm, specimenForm) {\n\t      switch (this.state.step) {\n\t        case 1:\n\t          return inputForm;\n\t        case 2:\n\t          return specimenForm;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'preparationSwitch',\n\t    value: function preparationSwitch(preparationButton, preparationForm) {\n\t      switch (this.state.preparation) {\n\t        case false:\n\t          return preparationButton;\n\t        case true:\n\t          return preparationForm;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'addPreparation',\n\t    value: function addPreparation() {\n\t      var _this4 = this;\n\t\n\t      this.validate().then(function (data) {\n\t        _this4.setState({\n\t          poolData: data,\n\t          preparation: true\n\t        });\n\t      }, function (error) {\n\t        swal('Oh no!', error.responseText, 'error');\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removePreparation',\n\t    value: function removePreparation() {\n\t      var formData = this.state.formData;\n\t      //TODO: is it better to set it to empty, or delete it?\n\t      formData.preparationForm = {};\n\t      this.setState({\n\t        preparation: false,\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      //Generates barcodes\n\t      var barcodes = [];\n\t      for (var i = 1; i <= this.state.barcodeCount; i++) {\n\t        barcodes.push(React.createElement(TextboxElement, {\n\t          name: i,\n\t          label: 'Barcode ' + i,\n\t          onUserInput: this.setFormData,\n\t          required: true,\n\t          value: this.state.barcodeList[i],\n\t          errorMessage: this.state.formErrors[i]\n\t        }));\n\t      }\n\t\n\t      var preparationButton = React.createElement(\n\t        'div',\n\t        { className: 'row' },\n\t        React.createElement('div', { className: 'col-xs-4' }),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-xs 4 action' },\n\t          React.createElement(\n\t            'span',\n\t            { className: 'action' },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                className: 'action-button add',\n\t                onClick: this.addPreparation\n\t              },\n\t              '+'\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'action-title' },\n\t            'Add Preparation'\n\t          )\n\t        )\n\t      );\n\t\n\t      var preparationForm = void 0;\n\t      if (this.state.poolData) {\n\t\n\t        var specimenProtocolAttributes = this.props.specimenProtocolAttributes[this.state.poolData.typeId];\n\t\n\t        var specimenProtocols = {};\n\t        for (var id in specimenProtocolAttributes) {\n\t          specimenProtocols[id] = this.props.specimenProtocols[id];\n\t        }\n\t        specimenProtocols = this.props.mapFormOptions(specimenProtocols, 'protocol');\n\t\n\t        preparationForm = React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-sm-9 col-sm-offset-1' },\n\t            React.createElement(_preparationForm2.default, {\n\t              formData: this.state.formData.preparationForm,\n\t              specimenProtocols: specimenProtocols,\n\t              specimenProtocolAttributes: specimenProtocolAttributes,\n\t              attributeDatatypes: this.props.attributeDatatypes,\n\t              attributeOptions: this.props.attributeOptions,\n\t              setParentFormData: this.setPreparationFormData,\n\t              insertAction: loris.BaseURL + '/biobank/ajax/submitData.php?action=insertSpecimenPreparation'\n\t            }),\n\t            React.createElement(\n\t              'a',\n\t              { className: 'pull-right', style: { cursor: 'pointer' }, onClick: this.removePreparation },\n\t              'Cancel Preparation'\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      var inputForm = React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-sm-9 col-sm-offset-1' },\n\t            React.createElement(StaticElement, {\n\t              label: 'Pooling Note',\n\t              text: 'Select or Scan the specimens to be pooled. Please ensure that they are the same type, and share the same PSCID and Visit Label'\n\t            }),\n\t            React.createElement(NumericElement, {\n\t              label: '\\u2116 of Specimens',\n\t              min: '2',\n\t              max: '100',\n\t              value: this.state.barcodeCount,\n\t              onUserInput: this.setBarcodeCount\n\t            }),\n\t            barcodes\n\t          )\n\t        ),\n\t        this.preparationSwitch(preparationButton, preparationForm),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-sm-3 col-xs-offset-9 action' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'action-title' },\n\t            'Next'\n\t          ),\n\t          React.createElement(\n\t            'span',\n\t            { className: 'action' },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                className: 'action-button update',\n\t                onClick: this.next\n\t              },\n\t              React.createElement('span', { className: 'glyphicon glyphicon-chevron-right' })\n\t            )\n\t          )\n\t        )\n\t      );\n\t\n\t      //TODO: Things here need to be in the proper order!!!\n\t      var specimenForm = void 0;\n\t      if (this.state.poolData) {\n\t\n\t        // This is to provide the options for the output specimens\n\t        var specimenTypes = {};\n\t        if (this.state.poolData.typeId) {\n\t          specimenTypes[this.state.poolData.typeId] = this.props.specimenTypes[this.state.poolData.typeId];\n\t        }\n\t\n\t        var pscid = this.props.pSCIDs[this.state.poolData.candidateId];\n\t        var visit = this.props.sessionData[pscid].visits[this.state.poolData.sessionId];\n\t\n\t        var barcodesArray = Object.values(this.state.barcodeList);\n\t        var barcodesString = barcodesArray.join(', ');\n\t\n\t        // TODO: rather than all specimen units this should really be specific to the\n\t        // type\n\t        var specimenUnits = this.props.mapFormOptions(this.props.specimenUnits, 'unit');\n\t\n\t        specimenForm = React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-12' },\n\t            React.createElement(_specimenForm2.default, {\n\t              formData: this.state.formData.specimenForm,\n\t              candidateId: this.state.poolData.candidateId,\n\t              pscid: pscid,\n\t              sessionId: this.state.poolData.sessionId,\n\t              visit: visit,\n\t              parentSpecimenBarcodes: barcodesString,\n\t              parentSpecimenIds: this.state.poolData.specimenIds,\n\t              specimenTypes: specimenTypes,\n\t              specimenTypeUnits: this.props.specimenTypeUnits,\n\t              specimenUnits: specimenUnits,\n\t              containerTypesPrimary: this.props.containerTypesPrimary,\n\t              containersNonPrimary: this.props.containersNonPrimary,\n\t              specimenTypeAttributes: this.props.specimenTypeAttributes,\n\t              attributeDatatypes: this.props.attributeDatatypes,\n\t              attributeOptions: this.props.attributeOptions,\n\t              capacities: this.props.capacities,\n\t              containerDimensions: this.props.containerDimensions,\n\t              containerCoordinates: this.props.containerCoordinates,\n\t              setParentFormData: this.setSpecimenFormData,\n\t              action: loris.BaseURL + '/biobank/ajax/submitData.php?action=submitSpecimen',\n\t              refreshParent: this.props.refreshParent\n\t            }),\n\t            React.createElement(ButtonElement, {\n\t              label: 'Submit'\n\t            })\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-sm-3 col-xs-offset-2 action' },\n\t            React.createElement(\n\t              'span',\n\t              { className: 'action' },\n\t              React.createElement(\n\t                'div',\n\t                {\n\t                  className: 'action-button update',\n\t                  onClick: this.previous\n\t                },\n\t                React.createElement('span', { className: 'glyphicon glyphicon-chevron-left' })\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'action-title' },\n\t              'Previous'\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'poolSpecimenForm',\n\t          id: 'poolSpecimenForm',\n\t          onSubmit: this.handleSubmit,\n\t          ref: 'form'\n\t        },\n\t        this.formSwitch(inputForm, specimenForm)\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t  }, {\n\t    key: 'validateForm',\n\t    value: function validateForm(formElement, value) {\n\t      var _this5 = this;\n\t\n\t      var formErrors = this.state.formErrors;\n\t\n\t      //validate barcode regex\n\t      if (formElement === \"barcode\" && value !== \"\") {\n\t        if (!/^hello/.test(this.state.formData.barcode)) {\n\t          formErrors.barcode = true;\n\t        } else {\n\t          formErrors.barcode = false;\n\t        }\n\t      }\n\t\n\t      //validate that quantity is a number and less than capacity\n\t      if (formElement === \"quantity\" && value !== \"\") {\n\t        if (isNaN(value) || value > this.props.capacities[this.state.currentContainerType]) {\n\t          formErrors.quantity = true;\n\t        } else {\n\t          formErrors.quantity = false;\n\t        }\n\t      }\n\t\n\t      //validate datatypes and regex of generated type attributes\n\t      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t      var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t\n\t        var datatype = _this5.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"number\") {\n\t          if (formElement === attribute) {\n\t            if (isNaN(value) && value !== \"\") {\n\t              formErrors[attribute] = true;\n\t            } else {\n\t              formErrors[attribute] = false;\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      this.setState({\n\t        formErrors: formErrors\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Handle form submission\n\t     * @param {object} e - Form submission event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      this.submitForm();\n\t    }\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'submitForm',\n\t    value: function submitForm() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var preparationForm = this.state.formData.preparationForm;\n\t      var specimenForm = this.state.formData.specimenForm;\n\t      formData['preparationForm'] = JSON.stringify(preparationForm);\n\t      formData['specimenForm'] = JSON.stringify(specimenForm);\n\t\n\t      console.log(formData.specimenForm);\n\t      console.log(formData.preparationForm);\n\t\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          //this.props.refreshParent();\n\t          swal(\"Specimens Pooled Successful!\", \"\", \"success\");\n\t          this.props.onSuccess();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Checks if the inputted file name is valid\n\t     *\n\t     * @param {string} requiredFileName - Required file name\n\t     * @param {string} fileName - Provided file name\n\t     * @return {boolean} - true if fileName starts with requiredFileName, false\n\t     *   otherwise\n\t     */\n\t    //  isValidFileName(requiredFileName, fileName) {\n\t    //    if (fileName === null || requiredFileName === null) {\n\t    //      return false;\n\t    //    }\n\t    //\n\t    //    return (fileName.indexOf(requiredFileName) === 0);\n\t    //  }\n\t\n\t    /**\n\t     * Validate the form\n\t     *\n\t     * @param {object} formRefs - Object containing references to React form elements\n\t     * @param {object} formData - Object containing form data inputed by user\n\t     * @return {boolean} - true if all required fields are filled, false otherwise\n\t     */\n\t\n\t  }, {\n\t    key: 'isValidForm',\n\t    value: function isValidForm(formRefs, formData) {\n\t      var isValidForm = true;\n\t\n\t      var requiredFields = {\n\t        pscid: null,\n\t        visitLabel: null\n\t      };\n\t\n\t      Object.keys(requiredFields).map(function (field) {\n\t        if (formData[field]) {\n\t          requiredFields[field] = formData[field];\n\t        } else if (formRefs[field]) {\n\t          formRefs[field].props.hasError = true;\n\t          isValidForm = false;\n\t        }\n\t      });\n\t      this.forceUpdate();\n\t\n\t      return isValidForm;\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      // This lets the modal window know that there is formData\n\t      // and will cause a warning to be thrown of the modal window\n\t      // is exited\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t\n\t      if (formElement === \"pscid\" && value !== \"\" && value !== undefined) {\n\t        this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n\t      }\n\t\n\t      var formData = this.state.formData;\n\t      var barcodeList = this.state.barcodeList;\n\t\n\t      //TODO: there must be a better way to do this\n\t      if (isNaN(formElement)) {\n\t        formData[formElement] = value;\n\t      } else {\n\t        barcodeList[formElement] = value;\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData,\n\t        barcodeList: barcodeList\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setPreparationFormData',\n\t    value: function setPreparationFormData(preparationFormData) {\n\t      var formData = this.state.formData;\n\t      formData.preparationForm = preparationFormData;\n\t\n\t      this.setState({ formData: formData });\n\t    }\n\t  }, {\n\t    key: 'setSpecimenFormData',\n\t    value: function setSpecimenFormData(specimenFormData) {\n\t      var formData = this.state.formData;\n\t      formData.specimenForm = specimenFormData;\n\t\n\t      this.setState({ formData: formData });\n\t    }\n\t  }]);\n\t\n\t  return PoolSpecimenForm;\n\t}(React.Component);\n\t\n\tPoolSpecimenForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired,\n\t  refreshTable: React.PropTypes.func\n\t};\n\t\n\texports.default = PoolSpecimenForm;\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _containerBarcodeForm = __webpack_require__(25);\n\t\n\tvar _containerBarcodeForm2 = _interopRequireDefault(_containerBarcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankContainerForm = function (_React$Component) {\n\t  _inherits(BiobankContainerForm, _React$Component);\n\t\n\t  function BiobankContainerForm(props) {\n\t    _classCallCheck(this, BiobankContainerForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankContainerForm.__proto__ || Object.getPrototypeOf(BiobankContainerForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formErrors: {},\n\t      errorMessage: null,\n\t      containerList: { 1: {} },\n\t      countContainers: 1,\n\t      collapsed: { 1: true },\n\t      copyMultiplier: 1\n\t    };\n\t\n\t    _this.toggleCollapse = _this.toggleCollapse.bind(_this);\n\t    _this.addContainer = _this.addContainer.bind(_this);\n\t    _this.setContainer = _this.setContainer.bind(_this);\n\t    _this.setCopyMultiplier = _this.setCopyMultiplier.bind(_this);\n\t    _this.copyContainer = _this.copyContainer.bind(_this);\n\t    _this.removeContainer = _this.removeContainer.bind(_this);\n\t    _this.saveContainerList = _this.saveContainerList.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankContainerForm, [{\n\t    key: 'toggleCollapse',\n\t    value: function toggleCollapse(key) {\n\t      var collapsed = this.state.collapsed;\n\t      collapsed[key] = !collapsed[key];\n\t      this.setState({ collapsed: collapsed });\n\t    }\n\t  }, {\n\t    key: 'saveContainerList',\n\t    value: function saveContainerList() {\n\t      var _this2 = this;\n\t\n\t      var containerList = this.state.containerList;\n\t      var availableId = Object.keys(this.props.containerStati).find(function (key) {\n\t        return _this2.props.containerStati[key] === 'Available';\n\t      });\n\t\n\t      for (var container in containerList) {\n\t        containerList[container].statusId = availableId;\n\t        containerList[container].temperature = 20;\n\t        this.props.save(containerList[container], this.props.saveContainer).then(function () {\n\t          _this2.props.refreshParent();\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'setContainer',\n\t    value: function setContainer(name, value, key) {\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t      var siteId = this.state.siteId;\n\t      var containerList = this.state.containerList;\n\t      if (name === 'siteId') {\n\t        siteId = value;\n\t        for (var container in containerList) {\n\t          containerList[container].originId = siteId;\n\t          containerList[container].locationId = siteId;\n\t        }\n\t      } else {\n\t        containerList[key][name] = value;\n\t      }\n\t      this.setState({ containerList: containerList, siteId: siteId });\n\t    }\n\t  }, {\n\t    key: 'addContainer',\n\t    value: function addContainer() {\n\t      var _this3 = this;\n\t\n\t      var containerList = this.state.containerList;\n\t      var count = this.state.countContainers;\n\t      var collapsed = this.state.collapsed;\n\t      var siteId = this.state.siteId;\n\t      var temperature = 20;\n\t\n\t      // get Id of available status\n\t      var statusId = Object.keys(this.props.containerStati).find(function (key) {\n\t        return _this3.props.containerStati[key] === 'Available';\n\t      });\n\t\n\t      containerList[count + 1] = {\n\t        statusId: statusId,\n\t        originId: siteId,\n\t        locationId: siteId,\n\t        temperature: temperature\n\t      };\n\t\n\t      collapsed[count + 1] = true;\n\t\n\t      this.setState({\n\t        containerList: containerList,\n\t        countContainers: count + 1,\n\t        collapsed: collapsed\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setCopyMultiplier',\n\t    value: function setCopyMultiplier(e) {\n\t      var copyMultiplier = e.target.value;\n\t      this.setState({ copyMultiplier: copyMultiplier });\n\t    }\n\t  }, {\n\t    key: 'copyContainer',\n\t    value: function copyContainer(key) {\n\t      var count = this.state.countContainers;\n\t      var collapsed = this.state.collapsed;\n\t      var nextKey = count + 1;\n\t      var containerList = this.state.containerList;\n\t      var multiplier = this.state.copyMultiplier;\n\t\n\t      for (var i = 1; i <= multiplier; i++) {\n\t        containerList[nextKey] = JSON.parse(JSON.stringify(containerList[key]));\n\t        delete containerList[nextKey].barcode;\n\t        collapsed[nextKey] = true;\n\t        nextKey++;\n\t      }\n\t\n\t      this.setState({\n\t        containerList: containerList,\n\t        countContainers: nextKey,\n\t        collapsed: collapsed\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removeContainer',\n\t    value: function removeContainer(key) {\n\t      var containerList = this.state.containerList;\n\t      delete containerList[key];\n\t      this.setState({ containerList: containerList });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this4 = this;\n\t\n\t      //Generates new Barcode Form everytime the addContainer button is pressed\n\t      var containerListArray = Object.keys(this.state.containerList);\n\t      var containers = [];\n\t      var i = 1;\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        var _loop = function _loop() {\n\t          var key = _step.value;\n\t\n\t          containers.push(React.createElement(_containerBarcodeForm2.default, {\n\t            key: key,\n\t            containerKey: key,\n\t            id: i,\n\t            collapsed: _this4.state.collapsed[key],\n\t            toggleCollapse: _this4.toggleCollapse,\n\t            container: _this4.state.containerList[key] || null,\n\t            removeContainer: containerListArray.length !== 1 ? function () {\n\t              return _this4.removeContainer(key);\n\t            } : null,\n\t            addContainer: i == containerListArray.length ? _this4.addContainer : null,\n\t            setCopyMultiplier: _this4.setCopyMultiplier,\n\t            copyMultiplier: _this4.state.copyMultiplier,\n\t            copyContainer: i == containerListArray.length && _this4.state.containerList[key] ? _this4.copyContainer : null,\n\t            setContainer: _this4.setContainer,\n\t            onChange: _this4.props.onChange,\n\t            containerTypesNonPrimary: _this4.props.containerTypesNonPrimary,\n\t            containerBarcodesNonPrimary: _this4.props.containerBarcodesNonPrimary\n\t          }));\n\t\n\t          i++;\n\t        };\n\t\n\t        for (var _iterator = containerListArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          _loop();\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'containerForm',\n\t          onSubmit: this.saveContainerList,\n\t          ref: 'form'\n\t        },\n\t        React.createElement('br', null),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement(SelectElement, {\n\t              name: 'siteId',\n\t              label: 'Site',\n\t              options: this.props.centers,\n\t              onUserInput: this.setContainer,\n\t              required: true,\n\t              value: this.state.siteId\n\t            })\n\t          )\n\t        ),\n\t        containers,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-xs-3 col-xs-offset-9' },\n\t          React.createElement(ButtonElement, { label: 'Submit' })\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return BiobankContainerForm;\n\t}(React.Component);\n\t\n\tBiobankContainerForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  barcode: React.PropTypes.string,\n\t  refreshTable: React.PropTypes.func\n\t};\n\t\n\texports.default = BiobankContainerForm;\n\n/***/ },\n/* 25 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Container Barcode Form\n\t *\n\t * Acts a subform for ContainerForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar ContainerBarcodeForm = function (_React$Component) {\n\t  _inherits(ContainerBarcodeForm, _React$Component);\n\t\n\t  function ContainerBarcodeForm() {\n\t    _classCallCheck(this, ContainerBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ContainerBarcodeForm.__proto__ || Object.getPrototypeOf(ContainerBarcodeForm)).call(this));\n\t\n\t    _this.setContainer = _this.setContainer.bind(_this);\n\t    _this.copy = _this.copy.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ContainerBarcodeForm, [{\n\t    key: 'copy',\n\t    value: function copy() {\n\t      this.props.copyContainer(this.props.containerKey);\n\t    }\n\t\n\t    //TODO: change form.js so this isn't necessary\n\t\n\t  }, {\n\t    key: 'setContainer',\n\t    value: function setContainer(name, value) {\n\t      this.props.setContainer(name, value, this.props.containerKey);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      // HR TODO: All this CSS should eventually be moved\n\t      var addContainerButton = void 0;\n\t      var addContainerText = void 0;\n\t      var copyContainerButton = void 0;\n\t      var copyContainerText = void 0;\n\t      if (this.props.addContainer) {\n\t        addContainerButton = React.createElement(\n\t          'span',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: this.props.addContainer\n\t            },\n\t            '+'\n\t          )\n\t        );\n\t\n\t        addContainerText = React.createElement(\n\t          'span',\n\t          { className: 'action-title' },\n\t          'New Entry'\n\t        );\n\t      }\n\t\n\t      if (this.props.copyContainer) {\n\t        copyContainerButton = React.createElement(\n\t          'span',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: this.copy\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-duplicate' })\n\t          )\n\t        );\n\t        copyContainerText = React.createElement(\n\t          'span',\n\t          { className: 'action-title' },\n\t          React.createElement('input', {\n\t            className: 'form-control input-sm',\n\t            type: 'number',\n\t            min: '1',\n\t            max: '50',\n\t            style: { width: 50, display: 'inline' },\n\t            onChange: this.props.setCopyMultiplier,\n\t            value: this.props.copyMultiplier\n\t          }),\n\t          'Copies'\n\t        );\n\t      }\n\t\n\t      var removeContainerButton = void 0;\n\t      if (this.props.removeContainer) {\n\t        var glyphStyle = {\n\t          color: '#DDDDDD',\n\t          marginLeft: 10,\n\t          cursor: 'pointer',\n\t          fontSize: 15\n\t        };\n\t\n\t        removeContainerButton = React.createElement('span', {\n\t          className: 'glyphicon glyphicon-remove',\n\t          onClick: this.props.removeContainer,\n\t          style: glyphStyle\n\t        });\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'container'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement(\n\t              'div',\n\t              null,\n\t              React.createElement(TextboxElement, {\n\t                name: 'barcode',\n\t                label: 'Barcode ' + this.props.id,\n\t                onUserInput: this.setContainer,\n\t                ref: 'barcode',\n\t                required: true,\n\t                value: this.props.container.barcode\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-1', style: { paddingLeft: 0, marginTop: 10 } },\n\t            React.createElement('span', {\n\t              className: this.props.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up',\n\t              style: { cursor: 'pointer', fontSize: 15, position: 'relative', right: 40 },\n\t              'data-toggle': 'collapse',\n\t              'data-target': '#item-' + this.props.containerKey,\n\t              onClick: function onClick() {\n\t                return _this2.props.toggleCollapse(_this2.props.containerKey);\n\t              }\n\t            }),\n\t            removeContainerButton\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement('div', { className: 'col-xs-2' }),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-9' },\n\t            React.createElement(\n\t              'div',\n\t              { id: 'item-' + this.props.containerKey, className: 'collapse' },\n\t              React.createElement(SelectElement, {\n\t                name: 'typeId',\n\t                label: 'Container Type',\n\t                options: this.props.containerTypesNonPrimary,\n\t                onUserInput: this.setContainer,\n\t                required: true,\n\t                value: this.props.container.typeId\n\t              })\n\t            )\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement('div', { className: 'col-xs-3' }),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-4 action' },\n\t              addContainerButton,\n\t              addContainerText\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-4 action' },\n\t              copyContainerButton,\n\t              copyContainerText\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return ContainerBarcodeForm;\n\t}(React.Component);\n\t\n\tContainerBarcodeForm.propTypes = {};\n\t\n\texports.default = ContainerBarcodeForm;\n\n/***/ },\n/* 26 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Tabs component.\n\t *\n\t * @author Loris Team\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Tabs Component.\n\t * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n\t * and corresponding tab panes.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * 1. Define an array of tabs with IDs and labels\n\t *\n\t * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n\t *\n\t * 2. Pass tabList as <Tab> property and <TabPane> as child\n\t *  ```\n\t * <Tabs tabs={tabList} defaultTab=\"tab1\">\n\t *   <TabPane TabId={tabList[0].id}>\n\t *     // Tab content goes here\n\t *   </TabPane>\n\t * </Tabs>\n\t * ```\n\t * =================================================\n\t *\n\t */\n\tvar Tabs = function (_React$Component) {\n\t  _inherits(Tabs, _React$Component);\n\t\n\t  function Tabs(props) {\n\t    _classCallCheck(this, Tabs);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call(this, props));\n\t\n\t    var hash = window.location.hash;\n\t    var activeTab = \"\";\n\t\n\t    /**\n\t     * Determine the initial active tab in this order\n\t     * 1. Try to infer from the URL, otherwise\n\t     * 2. Try to infer from the defaultTab prop, otherwise\n\t     * 3. Set to be the first tab of the list\n\t     */\n\t    if (_this.props.updateURL && hash) {\n\t      activeTab = hash.substr(1);\n\t    } else if (_this.props.defaultTab) {\n\t      activeTab = _this.props.defaultTab;\n\t    } else if (_this.props.tabs.length > 0) {\n\t      activeTab = _this.props.tabs[0].id;\n\t    }\n\t\n\t    _this.state = {\n\t      activeTab: activeTab\n\t    };\n\t\n\t    _this.handleClick = _this.handleClick.bind(_this);\n\t    _this.getTabs = _this.getTabs.bind(_this);\n\t    _this.getTabPanes = _this.getTabPanes.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Tabs, [{\n\t    key: 'handleClick',\n\t    value: function handleClick(tabId, e) {\n\t      this.setState({ activeTab: tabId });\n\t      this.props.onTabChange(tabId);\n\t\n\t      // Add tab href to URL querystring and scroll the page to top\n\t      if (this.props.updateURL) {\n\t        var scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n\t        window.location.hash = e.target.hash;\n\t        $('html,body').scrollTop(scrollDistance);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getTabs',\n\t    value: function getTabs() {\n\t      var tabs = this.props.tabs.map(function (tab) {\n\t        var tabClass = this.state.activeTab === tab.id ? 'active' : null;\n\t        var href = \"#\" + tab.id;\n\t        var tabID = \"tab-\" + tab.id;\n\t        return React.createElement(\n\t          'li',\n\t          {\n\t            role: 'presentation',\n\t            className: tabClass,\n\t            key: tab.id\n\t          },\n\t          React.createElement(\n\t            'a',\n\t            { id: tabID,\n\t              href: href,\n\t              role: 'tab',\n\t              'data-toggle': 'tab',\n\t              onClick: this.handleClick.bind(null, tab.id)\n\t            },\n\t            tab.label\n\t          )\n\t        );\n\t      }.bind(this));\n\t\n\t      return tabs;\n\t    }\n\t  }, {\n\t    key: 'getTabPanes',\n\t    value: function getTabPanes() {\n\t      var tabPanes = React.Children.map(this.props.children, function (child, key) {\n\t        if (child) {\n\t          return React.cloneElement(child, {\n\t            activeTab: this.state.activeTab,\n\t            key: key\n\t          });\n\t        }\n\t      }.bind(this));\n\t\n\t      return tabPanes;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var tabs = this.getTabs();\n\t      var tabPanes = this.getTabPanes();\n\t      var tabStyle = {\n\t        marginLeft: 0,\n\t        marginBottom: '5px'\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'ul',\n\t          { className: 'nav nav-tabs', role: 'tablist', style: tabStyle },\n\t          tabs\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tab-content' },\n\t          tabPanes\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Tabs;\n\t}(React.Component);\n\t\n\tTabs.propTypes = {\n\t  tabs: React.PropTypes.array.isRequired,\n\t  defaultTab: React.PropTypes.string,\n\t  updateURL: React.PropTypes.bool\n\t};\n\tTabs.defaultProps = {\n\t  onTabChange: function onTabChange() {},\n\t  // Set updateURL to default to true but allow for change\n\t  // Nested tabs should set this variable to false\n\t  updateURL: true\n\t};\n\t\n\t/**\n\t * Allows to dynamically render vertical tabs corresponding to tab panes.\n\t */\n\t\n\tvar VerticalTabs = function (_React$Component2) {\n\t  _inherits(VerticalTabs, _React$Component2);\n\t\n\t  function VerticalTabs(props) {\n\t    _classCallCheck(this, VerticalTabs);\n\t\n\t    var _this2 = _possibleConstructorReturn(this, (VerticalTabs.__proto__ || Object.getPrototypeOf(VerticalTabs)).call(this, props));\n\t\n\t    var hash = window.location.hash;\n\t    var activeTab = \"\";\n\t\n\t    /**\n\t     * Determine the initial active tab in this order\n\t     * 1. Try to infer from the URL, otherwise\n\t     * 2. Try to infer from the defaultTab prop, otherwise\n\t     * 3. Set to be the first tab of the list\n\t     */\n\t    if (_this2.props.updateURL && hash) {\n\t      activeTab = hash.substr(1);\n\t    } else if (_this2.props.defaultTab) {\n\t      activeTab = _this2.props.defaultTab;\n\t    } else if (_this2.props.tabs.length > 0) {\n\t      activeTab = _this2.props.tabs[0].id;\n\t    }\n\t\n\t    _this2.state = {\n\t      activeTab: activeTab\n\t    };\n\t\n\t    _this2.handleClick = _this2.handleClick.bind(_this2);\n\t    _this2.getTabs = _this2.getTabs.bind(_this2);\n\t    _this2.getTabPanes = _this2.getTabPanes.bind(_this2);\n\t    return _this2;\n\t  }\n\t\n\t  _createClass(VerticalTabs, [{\n\t    key: 'handleClick',\n\t    value: function handleClick(tabId, e) {\n\t      this.setState({ activeTab: tabId });\n\t      this.props.onTabChange(tabId);\n\t\n\t      // Add tab href to URL querystring and scroll the page to top\n\t      if (this.props.updateURL) {\n\t        var scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n\t        window.location.hash = e.target.hash;\n\t        $('html,body').scrollTop(scrollDistance);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getTabs',\n\t    value: function getTabs() {\n\t      var tabs = this.props.tabs.map(function (tab) {\n\t        var tabClass = this.state.activeTab === tab.id ? 'active' : null;\n\t        var href = \"#\" + tab.id;\n\t        var tabID = \"tab-\" + tab.id;\n\t        return React.createElement(\n\t          'li',\n\t          {\n\t            role: 'presentation',\n\t            className: tabClass,\n\t            key: tab.id\n\t          },\n\t          React.createElement(\n\t            'a',\n\t            { id: tabID,\n\t              href: href,\n\t              role: 'tab',\n\t              'data-toggle': 'tab',\n\t              onClick: this.handleClick.bind(null, tab.id)\n\t            },\n\t            tab.label\n\t          )\n\t        );\n\t      }.bind(this));\n\t\n\t      return tabs;\n\t    }\n\t  }, {\n\t    key: 'getTabPanes',\n\t    value: function getTabPanes() {\n\t      var tabPanes = React.Children.map(this.props.children, function (child, key) {\n\t        if (child) {\n\t          return React.cloneElement(child, {\n\t            activeTab: this.state.activeTab,\n\t            key: key\n\t          });\n\t        }\n\t      }.bind(this));\n\t\n\t      return tabPanes;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var tabs = this.getTabs();\n\t      var tabPanes = this.getTabPanes();\n\t      var tabStyle = {\n\t        marginLeft: 0,\n\t        marginBottom: '5px'\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tabbable col-md-3 col-sm-3' },\n\t          React.createElement(\n\t            'ul',\n\t            { className: 'nav nav-pills nav-stacked', role: 'tablist', style: tabStyle },\n\t            tabs\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tab-content col-md-9 col-sm-9' },\n\t          tabPanes\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return VerticalTabs;\n\t}(React.Component);\n\t\n\tVerticalTabs.propTypes = {\n\t  tabs: React.PropTypes.array.isRequired,\n\t  defaultTab: React.PropTypes.string,\n\t  updateURL: React.PropTypes.bool\n\t};\n\tVerticalTabs.defaultProps = {\n\t  onTabChange: function onTabChange() {},\n\t  // Set updateURL to default to true but allow for change\n\t  // Nested tabs should set this variable to false\n\t  updateURL: true\n\t};\n\t\n\t/*\n\t * TabPane component.\n\t * Used to wrap content for every tab.\n\t */\n\t\n\tvar TabPane = function (_React$Component3) {\n\t  _inherits(TabPane, _React$Component3);\n\t\n\t  function TabPane() {\n\t    _classCallCheck(this, TabPane);\n\t\n\t    return _possibleConstructorReturn(this, (TabPane.__proto__ || Object.getPrototypeOf(TabPane)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(TabPane, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var classList = \"tab-pane\";\n\t      var title = void 0;\n\t\n\t      if (this.props.TabId === this.props.activeTab) {\n\t        classList += \" active\";\n\t      }\n\t      if (this.props.Title) {\n\t        title = React.createElement(\n\t          'h1',\n\t          null,\n\t          this.props.Title\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { role: 'tabpanel', className: classList, id: this.props.TabId },\n\t        title,\n\t        this.props.children\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return TabPane;\n\t}(React.Component);\n\t\n\tTabPane.propTypes = {\n\t  TabId: React.PropTypes.string.isRequired,\n\t  Title: React.PropTypes.string,\n\t  activeTab: React.PropTypes.string\n\t};\n\t\n\texports.Tabs = Tabs;\n\texports.VerticalTabs = VerticalTabs;\n\texports.TabPane = TabPane;\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// modules/biobank/js/biobankIndex.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 74e54207929018b338c6","import FilterForm from 'FilterForm';\nimport BiobankSpecimenForm from './specimenForm';\nimport PoolSpecimenForm from './poolSpecimenForm';\nimport BiobankContainerForm from './containerForm';\nimport {Tabs, TabPane} from 'Tabs';\nimport Modal from 'Modal';\nimport Loader from 'Loader';\n\nclass BiobankIndex extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      isLoaded: false,\n      specimenFilter: {},\n      containerFilter: {},\n      isOpen: false,\n      formOptions: {},\n      show: {\n        specimenForm: false,\n        containerForm: false,\n      },\n    };\n\n    this.loadPage = this.loadPage.bind(this);\n    this.fetch = this.fetch.bind(this);\n    this.updateSpecimenFilter = this.updateSpecimenFilter.bind(this);\n    this.updateContainerFilter = this.updateContainerFilter.bind(this);\n    this.resetFilters = this.resetFilters.bind(this);\n    this.mapFormOptions = this.mapFormOptions.bind(this);\n    this.showModal = this.showModal.bind(this);\n    this.closeAll = this.closeAll.bind(this);\n    this.formatSpecimenColumns = this.formatSpecimenColumns.bind(this);\n    this.formatContainerColumns = this.formatContainerColumns.bind(this);\n    this.save = this.save.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadPage();\n  }\n\n  loadPage() {\n    this.fetch('specimenData', this.props.specimenDataURL);\n    this.fetch('containerData', this.props.containerDataURL);\n    this.fetch('formOptions', this.props.formOptionsURL);\n    this.setState({isLoaded: true});\n  }\n\n  /**\n   * Retrieve data from the provided URL and save it in state\n   */\n  fetch(request, url) {\n    $.ajax(url, {\n      method: \"GET\",\n      dataType: 'json',\n      success: function(data) {\n        this.setState({\n          [request]: data,\n        });\n      }.bind(this),\n      error: function(error) {\n        console.error(error);\n      }\n    });\n  }\n\n  updateSpecimenFilter(specimenFilter) {\n    this.setState({specimenFilter});\n  }\n\n  updateContainerFilter(containerFilter) {\n    this.setState({containerFilter});\n  }\n\n  resetFilters() {\n    this.refs.biobankFilter.clearFilter();\n  }\n\n //map options for forms\n  mapFormOptions(rawObject, targetAttribute) {\n    let data = {}; \n    for (let id in rawObject) {\n      data[id] = rawObject[id][targetAttribute];\n    }   \n\n    return data;\n  }\n\n  showModal(stateKey) {\n    let show = this.state.show;\n    show[stateKey] = true;\n    this.setState({show});\n  }\n\n  closeAll() {\n    let show = this.state.show;\n    for (let key in show) {\n      show[key] = false;\n    }\n    this.setState({show});\n  }\n\n  formatSpecimenColumns(column, cell, rowData, rowHeaders) {\n    // Create the mapping between rowHeaders and rowData in a row object.\n    let row = {};\n    rowHeaders.forEach((header, index) => {\n      row[header] = rowData[index];\n    });\n\n    let barcodeURL = loris.BaseURL + '/biobank/barcode/?barcode=';\n    switch (column) {\n      case 'Barcode':\n        let URL = barcodeURL+row['Barcode'];\n        return <td><a href={URL}>{cell}</a></td>;\n      case 'Parent Barcode':\n        URL = barcodeURL+row['Parent Barcode'];\n        return <td><a href={URL}>{cell}</a></td>; \n      case 'Container Barcode':\n        URL = barcodeURL+row['Container Barcode'];\n        return <td><a href={URL}>{cell}</a></td>;\n      case 'PSCID':\n        let pscidURL = loris.BaseURL + '/' + row['PSCID'];\n        return <td><a href={pscidURL}>{cell}</a></td>;\n      case 'Visit Label':\n        let visitLabelURL = loris.BaseURL + '/instrument_list/?candID=' + row['PSCID'] +\n          '&sessionID='+row['Visit Label'];\n        return <td><a href={visitLabelURL}>{cell}</a></td>;\n      case 'Status':\n        switch (cell) {\n          case 'Available':\n            return <td style={{color: 'green'}}>{cell}</td>;\n          case 'Reserved':\n            return <td style={{color: 'orange'}}>{cell}</td>\n          case 'Dispensed':\n            return <td style={{color: 'red'}}>{cell}</td>\n        }\n      default:\n        return <td>{cell}</td>;\n     }\n  }\n\n  formatContainerColumns(column, cell, rowData, rowHeaders) {\n    // Create the mapping between rowHeaders and rowData in a row object.\n    let row = {};\n    rowHeaders.forEach((header, index) => {\n      row[header] = rowData[index];\n    });\n\n    let barcodeURL = loris.BaseURL + '/biobank/barcode/?barcode=' \n    switch (column) {\n      case 'Barcode':\n        let URL = barcodeURL+row['Barcode'];\n        return <td><a href={URL}>{cell}</a></td>;\n      case 'Parent Barcode':\n        URL = barcodeURL+row['Parent Barcode'];\n        return <td><a href={URL}>{cell}</a></td>; \n      default:\n        return <td>{cell}</td>;\n     }\n  }\n\n  save(data, url, message) {\n    return new Promise(resolve => {\n      $.ajax({\n        type: 'POST',\n        url: url,\n        data: {data: JSON.stringify(data)},\n        cache: false,\n        success: () => {\n          resolve();\n          message ? swal(message, '', 'success') : swal('Save Successful!', '', 'success');\n          this.closeAll();\n        },\n        error: (error, textStatus, errorThrown) => {\n          let message = (error.responseJSON||{}).message || 'Submission error!';\n          swal(message, '', 'error');\n          console.error(error, textStatus, errorThrown);\n        }\n      });\n    });\n  }\n\n  render() {\n    // Waiting for async data to load\n    if (!this.state.isLoaded) {\n      return (\n        <Loader/>\n      );\n    }\n\n    let addSpecimenButton;\n    let poolSpecimenButton;\n    let addContainerButton;\n    if (loris.userHasPermission('biobank_write')) {\n\n       /**\n        * Map Options for Form Select Elements of Specimen Form\n        */\n       let containerTypesPrimary = this.mapFormOptions(this.state.formOptions.containerTypesPrimary, 'label');\n       let containerStati = this.mapFormOptions(this.state.formOptions.containerStati, 'status');\n       let candidates = this.mapFormOptions(this.state.formOptions.candidates, 'pscid');\n       let sessions = this.mapFormOptions(this.state.formOptions.sessions, 'label');\n        \n       addSpecimenButton = (\n         <div\n           className='action'\n           title='Add Specimen'\n         >\n           <div\n             className='action-button add'\n             onClick={()=>{this.showModal('specimenForm')}}\n           >\n             <span>+</span>\n           </div>\n           <Modal\n             title='Add New Specimen'\n             show={this.state.show.specimenForm}\n             closeModal={this.closeAll}\n           >\n             <BiobankSpecimenForm\n               candidates={candidates}\n               sessions={sessions}\n               candidateSessions={this.state.formOptions.candidateSessions}\n               sessionCenters={this.state.formOptions.sessionCenters}\n               specimenTypes={this.state.formOptions.specimenTypes}\n               specimenTypeUnits={this.state.formOptions.specimenTypeUnits}\n               specimenTypeAttributes={this.state.formOptions.specimenTypeAttributes}\n               attributeOptions={this.state.formOptions.attributeOptions}\n               attributeDatatypes={this.state.formOptions.attributeDatatypes}\n               containerTypesPrimary={containerTypesPrimary}\n               containersNonPrimary={this.state.formOptions.containersNonPrimary}\n               containerDimensions={this.state.formOptions.containerDimensions}\n               containerCoordinates={this.state.formOptions.containerCoordinates}\n               containerStati={containerStati}\n               refreshParent={this.loadPage}\n               mapFormOptions={this.mapFormOptions}\n               saveBarcodeListURL={this.props.saveBarcodeListURL}\n               save={this.save}\n             />\n           </Modal>\n         </div>\n       );\n\n       let poolSpecimenButtonContent = (\n         <span className='glyphicon glyphicon-resize-small'/>\n       )\n\n       poolSpecimenButton = (\n         <Modal\n           title='Pool Specimens'\n           buttonClass='action-button pool'\n           buttonContent={poolSpecimenButtonContent}\n           style={{display:'inline-block'}}\n         >\n           <PoolSpecimenForm\n             specimenTypes={this.state.formOptions.specimenTypes}\n             containerTypesPrimary={containerTypesPrimary}\n             containersNonPrimary={this.state.formOptions.containersNonPrimary}\n             specimenTypeAttributes={this.state.formOptions.specimenTypeAttributes}\n             specimenProtocols={this.state.formOptions.specimenProtocols}\n             specimenProtocolAttributes={this.state.formOptions.specimenProtocolAttributes}\n             attributeDatatypes={this.state.formOptions.attributeDatatypes}\n             attributeOptions={this.state.formOptions.attributeOptions}\n             capacities={this.state.formOptions.capacities}\n             containerDimensions={this.state.formOptions.containerDimensions}\n             containerCoordinates={this.state.formOptions.containerCoordinates}\n             specimenTypeUnits={this.state.formOptions.specimenTypeUnits}\n             specimenUnits={this.state.formOptions.specimenUnits}\n             candidates={candidates}\n             candidateSessions={this.state.formOptions.candidateSessions}\n             sessionCenters={this.state.formOptions.sessionCenters}\n             specimenRequest={`${loris.BaseURL}/biobank/ajax/requestData.php?action=getSpecimenDataFromBarcode`}\n             refreshParent={this.loadPage}\n             mapFormOptions={this.mapFormOptions}\n             saveSpecimen={`${loris.BaseURL}/biobank/ajax/submitData.php?action=saveSpecimen`}\n             saveContainer={`${loris.BaseURL}/biobank/ajax/submitData.php?action=saveContainer`}\n           />\n         </Modal>\n       );\n\n       let containerTypesNonPrimary = this.mapFormOptions(this.state.formOptions.containerTypesNonPrimary, 'label');\n\n       addContainerButton = (\n         <div\n           className='action'\n           title='Add Container'\n         >\n           <div\n             className='action-button add'\n             onClick={()=>{this.showModal('containerForm')}}\n           >\n             <span>+</span>\n           </div>\n           <Modal\n             title='Add New Container'\n             show={this.state.show.containerForm}\n             closeModal={this.closeAll}\n           >\n             <BiobankContainerForm\n               containerTypesNonPrimary={containerTypesNonPrimary}\n               centers={this.state.formOptions.centers}\n               containerStati={containerStati}\n               refreshParent={this.loadPage}\n               saveContainer={`${loris.BaseURL}/biobank/ajax/submitData.php?action=saveContainer`}\n               save={this.save}\n             />\n           </Modal>\n         </div>\n       ); \n    }\n\n    var tabList = [\n      {id: \"specimens\", label: \"Specimens\"},\n      {id: \"containers\", label: \"Containers\"}\n    ];\n\n    return (\n    <div id='biobank-page'>\n      <Tabs tabs={tabList} defaultTab=\"specimens\" updateURL={true}>\n        <TabPane TabId={tabList[0].id}>\n          <div className='row'>\n            <div className='col-lg-10'>\n              <FilterForm\n                Module=\"biobank\"\n                name=\"specimen_filter\"\n                id=\"specimen_filter\"\n                ref=\"specimenFilter\"\n                columns={3}\n                formElements={this.state.specimenData.form}\n                onUpdate={this.updateSpecimenFilter}\n                filter={this.state.specimenFilter}\n              >\n                <br/>\n                <StaticElement/>\n                <StaticElement/>\n                <ButtonElement label=\"Clear Filters\" type=\"reset\" onUserInput={this.resetFilters}/>\n              </FilterForm>\n            </div>\n            <div className='col-lg-2'>\n              <span className='action'>\n                {addSpecimenButton}\n                <div className='action-title'>\n                  Add Specimen\n                </div>\n              </span>\n              <br/><br/>\n              <span className='action'>\n                {poolSpecimenButton}\n                <div className='action-title'>\n                  Pool Specimens\n                </div>\n              </span>\n            </div>\n          </div>\n          <StaticDataTable\n            Data={this.state.specimenData.Data}\n            Headers={this.state.specimenData.Headers}\n            Filter={this.state.specimenFilter}\n            getFormattedCell={this.formatSpecimenColumns}\n          />\n        </TabPane>\n        <TabPane TabId={tabList[1].id}>\n          <div className='row'>\n            <div className='col-lg-10'>\n              <FilterForm\n                Module=\"biobank\"\n                name=\"container_filter\"\n                id=\"container_filter\"\n                ref=\"containerFilter\"\n                columns={3}\n                formElements={this.state.containerData.form}\n                onUpdate={this.updateContainerFilter}\n                filter={this.state.containerFilter}\n\t\t          >\n                <br/>\n                <StaticElement/>\n                <StaticElement/>\n                <ButtonElement label=\"Clear Filters\" type=\"reset\" onUserInput={this.resetFilters}/>\n              </FilterForm>\t\t\t\n            </div>\n            <div className='col-lg-2'>\n              <span className='action'>\n                {addContainerButton}\n                <div className='action-title'>\n                  New Container\n                </div>\n              </span>\n            </div>\n          </div>\n          <StaticDataTable\n            Data={this.state.containerData.Data}\n            Headers={this.state.containerData.Headers}\n            Filter={this.state.containerFilter}\n            getFormattedCell={this.formatContainerColumns}\n          />\n        </TabPane>\n      </Tabs>\n      </div>\n    );\n  }\n}\n\n$(function() {\n  const biobankIndex = (\n    <div className=\"page-biobank\">\n      <BiobankIndex \n        specimenDataURL={`${loris.BaseURL}/biobank/?format=json`} \n        containerDataURL={`${loris.BaseURL}/biobank/ajax/requestData.php?action=getContainerFilterData`} \n        formOptionsURL={`${loris.BaseURL}/biobank/ajax/requestData.php?action=getFormOptions`}\n        saveBarcodeListURL={`${loris.BaseURL}/biobank/ajax/submitData.php?action=saveBarcodeList`}\n      />\n    </div>\n  );\n\n  ReactDOM.render(biobankIndex, document.getElementById(\"lorisworkspace\"));\n});\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/biobankIndex.js","/**\n * This file contains the React component for Loader\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n */\n\n/**\n * Loader component\n */\nclass Loader extends React.Component {\n\n  render() {\n    return (\n      <div className='loader-container'>\n        <div className=\"loader\"/>\n      </div>\n    );\n  }\n}\n\nexport default Loader;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Loader.js","/**\n * This file contains React components for Modal component.\n *\n * @author Henri Rabalais\n * @version 1.1.0\n *\n */\n\n/**\n * Modal Component.\n * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n *\n * ================================================\n * Usage:\n *\n * =================================================\n *\n */\nclass Modal extends React.Component {\n  constructor() {\n    super();\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  closeModal() {\n    if (this.props.throwWarning) {                                              \n      console.log('not sure...');\n      swal({                                                                    \n        title: \"Are You Sure?\",                                                 \n        text: \"Leaving the form will result in the loss of any information entered.\",\n        type: \"warning\",                                                        \n        showCancelButton: true,                                                 \n        confirmButtonText: 'Proceed',                                           \n        cancelButtonText: 'Cancel',                                             \n      },                                                                        \n      () => {                                                              \n        this.props.closeModal();                                                        \n      });                                                            \n    } else {                                                                    \n      this.props.closeModal();\n    }                                                                           \n  }   \n\n  render() {\n    // Black Background with Alpha Channel\n    const backdropStyle = {\n      position: 'fixed',\n      zIndex: 9998,\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundColor: 'rgba(0,0,0,0.3)',\n      padding: 50\n    };\n\n    // White Modal Window\n    const modalStyle = {\n      position: 'relative',\n      maxWidth: 850,\n      maxHeight: '100%',\n      margin: '0 auto',\n      backgroundColor: '#fff',\n      borderRadius: 10,\n      overflowY: 'auto',\n      zIndex: 9999\n    };\n\n    const titleStyle = {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      background: '#093782',\n      height: '70px',\n      borderTopRightRadius: '10',\n      color: '#FFFFFF',\n      fontSize: 24,\n      padding: 20,\n    }\n\n    const glyphStyle = {\n      marginLeft: 'auto',\n      cursor: 'pointer'\n    }\n\n    const bodyStyle = {\n      padding: 15\n    }\n  \n    let modal;\n    if (this.props.show) {\n      modal = (\n        <div style={backdropStyle} onClick={this.closeModal}>\n          <div style={modalStyle} onClick={e => {e.stopPropagation()}}>\n            <div style={titleStyle}>\n              {this.props.title}\n              <span style={glyphStyle} onClick={this.closeModal}>\n                ×\n              </span>\n            </div>\n            <div style={bodyStyle}>\n              {this.props.children}\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {modal}\n      </div>\n    );\n  }\n}\n\nModal.propTypes = {\n  title: React.PropTypes.string,\n  show: React.PropTypes.bool.isRequired,\n  closeModal: React.PropTypes.func.isRequired,\n  throwWarning: React.PropTypes.bool.isRequired,\n};\n\nModal.defaultProps = {\n  throwWarning: true,\n};\n\nexport default Modal;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Modal.js","/**\n * Biobank Container Parent Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\n\nimport ContainerDisplay from './containerDisplay.js';\n\nclass ContainerParentForm extends React.Component {\n\n  render() {\n    let containerDisplay;\n    let containerBarcodesNonPrimary = this.props.mapFormOptions(\n      this.props.containersNonPrimary, 'barcode'\n    );\n    let parentContainerField = ( \n      <SelectElement\n        name=\"parentContainerId\"\n        label=\"Parent Container Barcode\"\n        options={containerBarcodesNonPrimary}\n        onUserInput={this.props.setContainer}\n        required={true}\n        value={this.props.container.parentContainerId}\n      />  \n    );  \n\n    if (this.props.container.parentContainerId) {\n      let dimensionId = this.props.containersNonPrimary[\n        this.props.container.parentContainerId\n      ].dimensionId;\n\n      if (dimensionId) {\n        // This will eventually become unecessary\n        let dimensions = this.props.containerDimensions[dimensionId];\n\n        // Total coordinates is determined by the product of the dimensions\n        let coordinatesTotal = 1;\n        for (let dimension in dimensions) {\n          coordinatesTotal = coordinatesTotal * dimensions[dimension];\n        }\n\n        // Mapping of options for the SelectElement\n        let coordinates = {}; \n        for (let i = 1; i <= coordinatesTotal; i++) {\n          // If the coordinate is already taken, skip it.\n          // this doubling of if statements seems unnecessary\n          if (this.props.containerCoordinates[this.props.container.parentContainerId]) {\n            if (this.props.containerCoordinates[this.props.container.parentContainerId][i]) {\n              continue; \n            }\n          }\n\n          coordinates[i] = i;\n        }   \n\n        containerDisplay = (\n          <ContainerDisplay\n            dimensions = {\n              this.props.containerDimensions[\n                this.props.containersNonPrimary[\n                  this.props.container.parentContainerId\n                ].dimensionId\n              ]\n            }\n            coordinates = {\n              this.props.containerCoordinates[this.props.container.parentContainerId]\n            }\n            containerTypes = {this.props.containerTypes}\n            containerStati = {this.props.containerStati} \n            select = {true}\n            selectedCoordinate = {this.props.container.coordinate}\n            setContainer = {this.props.setContainer}\n          />\n        );\n      }\n    }   \n\n    let updateButton;\n    if ((this.props.data||{}).container) {\n      updateButton = (\n        <div>\n          <br/>\n          <ButtonElement label='Update'/>\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        onSubmit={this.props.saveContainer}\n      >\n        {parentContainerField}\n        {containerDisplay}\n        {updateButton}\n      </FormElement>\n    );\n  }\n}\n\nContainerParentForm.propTypes = {\n  mapFormOptions: React.PropTypes.func.isRequired,\n  setContainer: React.PropTypes.func.isRequired,\n  saveContainer: React.PropTypes.func,\n  data: React.PropTypes.object,\n  container: React.PropTypes.object.isRequired,\n  containersNonPrimary: React.PropTypes.object.isRequired,\n  containerDimensions: React.PropTypes.object.isRequired,\n  containerCoordinates: React.PropTypes.object.isRequired,\n  containerTypes: React.PropTypes.object,\n  containerStati: React.PropTypes.object,\n};\n\nexport default ContainerParentForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerParentForm.js","/**\n * ContainerDisplay\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass ContainerDisplay extends React.Component {\n  constructor() {\n    super();\n   \n    this.redirectURL = this.redirectURL.bind(this);\n    this.drag = this.drag.bind(this);\n    this.drop = this.drop.bind(this);\n  }\n\n  componentDidMount() {\n    $('[data-toggle=\"tooltip\"]').tooltip();\n  }\n\n  componenDidUpdate() {\n    $('[data-toggle=\"tooltip\"]').tooltip();\n  }\n\n  redirectURL(e) {\n    let coordinate = e.target.id;\n    if (this.props.coordinates[coordinate]) {\n      let load = this.props.types[\n        this.props.children[this.props.coordinates[coordinate]].typeId\n      ].primary ? this.props.loadSpecimen : this.props.loadContainer;\n\n      load(this.props.children[this.props.coordinates[coordinate]].barcode);\n    }\n  }\n\n  allowDrop(e) {\n      e.preventDefault();\n  }\n  \n  drag(e) {\n      let container = JSON.stringify(\n        this.props.children[this.props.coordinates[e.target.id]]\n      );\n      e.dataTransfer.setData(\"text/plain\", container);\n  }\n  \n  drop(e) {\n    e.preventDefault();\n\n    let container = JSON.parse(e.dataTransfer.getData(\"text/plain\"));\n    let newCoordinate = parseInt(e.target.id);\n   \n    container.coordinate = newCoordinate;\n\n    this.props.saveChildContainer(container);\n  }\n\n  render() {\n  // This is eventually need to be reworked and cleaned up\n  let column = [];\n  let row = [];\n  let display;\n  var coordinate = 1;\n  if (this.props.dimensions) {\n    for (let y=0; y < this.props.dimensions.y; y++) {\n      column = [];\n      for (let x=1; x <= this.props.dimensions.x; x++) {\n        \n        let nodeWidth = (500/this.props.dimensions.x) - (500/this.props.dimensions.x * 0.08);\n        let nodeStyle = {width: nodeWidth}\n        let nodeClass = 'node';\n        let tooltipTitle = null;\n        let dataHtml = 'false';\n        let dataToggle = null;\n        let dataPlacement = null;\n        let draggable = 'false';\n        let onDragStart = null;\n        let onDragOver = this.allowDrop;\n        let onDrop = this.drop;\n        let onClick = null;\n\n        if (!this.props.select) {\n          // This double if statement doesn't sound great\n          if (this.props.coordinates) {\n            if (this.props.coordinates[coordinate]) {\n              nodeClass = 'node occupied';\n              dataHtml = 'true';\n              dataToggle = 'tooltip';\n              dataPlacement = 'top';\n              tooltipTitle = \n            '<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + \n            '<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + \n            '<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n              draggable = 'true';\n              onDragStart = this.drag;\n              onDragOver = null;\n              onDrop = null;\n              onClick = this.redirectURL;\n            }\n          }\n        }\n      \n        if (this.props.select) {\n          if (coordinate == this.props.selectedCoordinate) {\n            nodeClass = 'node occupied';\n          }\n          else if (!this.props.coordinates) {\n            nodeClass = 'node available';\n            onClick = (e) => this.props.setContainer('coordinate', e.target.id);\n          } \n          else if (this.props.coordinates) {\n            if (!this.props.coordinates[coordinate]) {\n              nodeClass = 'node available';\n\t\t\t  onClick = (e) => this.props.setContainer('coordinate', e.target.id);\n            }\n            else if (this.props.coordinates[coordinate]){\n            // TODO: --- This is currently not working ---\n            //  dataHtml = 'true';\n            //  dataToggle = 'tooltip';\n            //  dataPlacement = 'top';\n            //  tooltipTitle = \n            //'<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + \n            //'<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + \n            //'<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n            }\n          }\n        }\n\n        let coordinateDisplay;\n        if (true) {\n          coordinateDisplay = x + (this.props.dimensions.x * y);\n        } else if (false) {\n          coordinateDisplay = String.fromCharCode(65+y)+''+x;\n        }\n\n        column.push(\n          <div\n            id={coordinate}\n            className={nodeClass}\n            data-html={dataHtml}\n            data-toggle={dataToggle}\n            data-placement={dataPlacement}\n            data-original-title={tooltipTitle}\n            style={nodeStyle}\n            onClick={onClick}\n            draggable={draggable}\n            onDragStart={onDragStart}\n            onDragOver={onDragOver}\n            onDrop={onDrop}\n          >\n            {coordinateDisplay}\n          </div>\n        );\n\n        coordinate++;\n      }\n\n      let rowHeight = (500/this.props.dimensions.y) - (500/this.props.dimensions.y * 0.08);\n      let rowMargin = (500/this.props.dimensions.y * 0.04);\n      let rowStyle = {\n        height: rowHeight,\n      }\n      \n      row.push(\n        <div\n          className='row'\n          style={rowStyle} \n        >\n          {column}\n        </div>\n      )\n    }\n    \n    display = row;\n  }\n \n    return (\n      <div className='display'>\n        {display}\n      </div>\n    );\n  }\n}\n\nContainerDisplay.propTypes = {\n}\n\nexport default ContainerDisplay;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerDisplay.js","import CustomFields from './customFields'\n\n/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenCollectionForm extends React.Component {\n  constructor() {\n    super();\n    \n    this.setCollection = this.setCollection.bind(this);\n    this.addData = this.addData.bind(this);\n    this.setData = this.setData.bind(this);\n  }\n\n  setCollection(name, value) {\n    let collection = this.props.specimen.collection;\n    collection[name] = value;\n    this.props.setSpecimen('collection', collection);\n  }\n\n  //TODO: this function may not be necessary\n  addData() {\n    let collection = this.props.specimen.collection;\n    collection.data = {};\n    this.props.setSpecimen('collection', collection)\n  }\n\n  setData(name, value) {\n    let data = this.props.specimen.collection.data;\n    data[name] = value;\n    this.setCollection('data', data);\n  }\n\n  render() {\n    let updateButton;\n    if (((this.props.data||{}).specimen||{}).collection) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    }\n\n    let specimenTypeUnits = {};\n    let specimenTypeFields;\n    if (this.props.specimen.typeId) {\n      \n      //This modifies the selections for unit drop down based on the chosen\n      //specimen type \n      for (let id in this.props.specimenTypeUnits[this.props.specimen.typeId]) {\n        specimenTypeUnits[id] = this.props.specimenTypeUnits[this.props.specimen.typeId][id].unit;\n      }\n\n      let specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.props.specimen.typeId];\n      if (specimenTypeFieldsObject) {\n        if (((this.props.specimen||{}).collection||{}).data) {\n          specimenTypeFields = (\n            <CustomFields\n              fields={specimenTypeFieldsObject}\n              attributeDatatypes={this.props.attributeDatatypes}\n              attributeOptions={this.props.attributeOptions}\n              object={this.props.specimen.collection.data}\n              setData={this.setData}\n            />\n          );\n        } else {\n          this.addData();\n        }\n      }\n    }\n\n    let specimenFields;\n    if (this.props.specimen.typeId) {\n      specimenFields = (\n        <div>\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Quantity\"\n            onUserInput={this.setCollection}\n            required={true}\n            value={this.props.specimen.collection.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={specimenTypeUnits}\n            onUserInput={this.setCollection}\n            required={true}\n            value={this.props.specimen.collection.unitId}\n          />\n          {specimenTypeFields}\n          <DateElement\n            name=\"date\"\n            label=\"Date\"\n            minYear=\"2000\"\n            maxYear=\"2018\"\n            onUserInput={this.setCollection}\n            required={true}\n            value={this.props.specimen.collection.date}\n          />\n          <TimeElement\n            name=\"time\"\n            label=\"Time\"\n            onUserInput={this.setCollection}\n            required={true}\n            value={this.props.specimen.collection.time}\n          />\n          <TextareaElement\n            name=\"comments\"\n            label=\"Comments\"\n            onUserInput={this.setCollection}\n            ref=\"comments\"\n            value={this.props.specimen.collection.comments}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"biobankSpecimen\"\n        onSubmit={this.props.saveSpecimen}\n        ref=\"form\"\n      >\n        {specimenFields}\n        {updateButton}\n      </FormElement>\n    );\n  }\n}\n\n\nSpecimenCollectionForm.propTypes = {\n  setSpecimen: React.PropTypes.func.isRequired,\n  saveSpecimen: React.PropTypes.func,\n  specimen: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  attributeOptions: React.PropTypes.object.isRequired,\n  specimenTypeUnits: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n}\n\nexport default SpecimenCollectionForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/collectionForm.js","/**\n * Biobank Custom Attribute Fields\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n */\n\nclass CustomFields extends React.Component {\n  render() {\n    let fields = this.props.fields;\n    let attributeFields = Object.keys(fields).map(attribute => {\n\n      let datatype = this.props.attributeDatatypes[fields[attribute]['datatypeId']].datatype;\n      if (datatype === 'text' || datatype === 'number') {\n        if (fields[attribute]['refTableId'] === null) {\n          return (\n            <TextboxElement\n              name={attribute}\n              label={fields[attribute]['name']}\n              onUserInput={this.props.setData}\n              required={fields[attribute]['required']}\n              value={this.props.object[attribute]}\n            />\n          );\n        }\n\n        if (fields[attribute]['refTableId'] !== null) {\n          return (\n            <SelectElement\n              name={attribute}\n              label={fields[attribute]['name']}\n              options={this.props.attributeOptions[fields[attribute]['refTableId']]}\n              onUserInput={this.props.setData}\n              required={fields[attribute]['required']}\n              value={this.props.object[attribute]}\n            />\n          );\n        }\n      }\n\n      if (datatype === 'datetime') {\n        return (\n          <DataElement\n            name={attribute}\n            label={fields[attribute]['name']}\n            onUserInput={this.props.setData}\n            required={fields[attribute]['required']}\n            value={this.props.object[attribute]}\n          />\n        );\n      }\n\n      // Do not present the possibility of uploading if file is already set\n      // File must instead be deleted or overwritten.\n      if (datatype === 'file' && !(this.props.data||{})[attribute]) {\n        return (\n          <FileElement\n            name={attribute}\n            label={fields[attribute]['name']}\n            onUserInput={this.props.setData}\n            required={fields[attribute]['required']}\n            value={this.props.files[this.props.object[attribute]]}\n          />\n        );\n      }\n    });\n\n    return (\n      <div>\n        {attributeFields}\n      </div>\n    );\n  }\n}\n\nCustomFields.propTypes = {\n  fields: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  attributeOptions: React.PropTypes.object.isRequired,\n  object: React.PropTypes.object.isRequired,\n  setData: React.PropTypes.func.isRequired,\n}\n\nexport default CustomFields;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/customFields.js","import CustomFields from './customFields';\n\n/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenPreparationForm extends React.Component {\n  constructor() {\n    super();\n\n    this.setPreparation = this.setPreparation.bind(this);\n    this.addData = this.addData.bind(this);\n    this.setData = this.setData.bind(this);\n  }\n\n  setPreparation(name, value) {\n    let preparation = this.props.specimen.preparation;\n    preparation[name] = value;\n    this.props.setSpecimen('preparation', preparation);\n  }\n\n  addData() {\n    let preparation = this.props.specimen.preparation;\n    preparation.data = {};\n    this.props.setSpecimen('preparation', preparation);\n  }\n\n  setData(name, value) {\n    let data = this.props.specimen.preparation.data;\n    data[name] = value;\n    this.setPreparation('data', data);\n  }\n\n  render() {\n\n    let submitButton;\n    if (this.props.data.specimen.preparation) {\n      submitButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    } else {\n      submitButton = (\n        <ButtonElement label=\"Submit\"/>\n      );\n    }\n\n    let specimenProtocolFields;\n    if (this.props.specimen.preparation.protocolId) {\n      let specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.props.specimen.preparation.protocolId];\n\n      if (specimenProtocolFieldsObject) {\n        if (this.props.specimen.preparation.data) {\n          specimenProtocolFields = (\n            <CustomFields\n              fields={specimenProtocolFieldsObject}\n              attributeDatatypes={this.props.attributeDatatypes}\n              attributeOptions={this.props.attributeOptions}\n              object={this.props.specimen.preparation.data}\n              setData={this.setData}\n            />\n          );\n        } else {\n          this.addData();\n        }\n      }\n    }\n\n    return (\n      <FormElement\n        name=\"specimenPreparation\"\n        onSubmit={this.props.saveSpecimen}\n        ref=\"form\"\n      >\n        <SelectElement\n          name=\"protocolId\"\n          label=\"Protocol\"\n          options={this.props.specimenProtocols}\n          onUserInput={this.setPreparation}\n          required={true}\n          value={this.props.specimen.preparation.protocolId}\n        />\n        {specimenProtocolFields}\n        <DateElement\n          name=\"date\"\n          label=\"Date\"\n          onUserInput={this.setPreparation}\n          required={true}\n          value={this.props.specimen.preparation.date}\n        />\n        <TimeElement\n          name=\"time\"\n          label=\"Time\"\n          onUserInput={this.setPreparation}\n          required={true}\n          value={this.props.specimen.preparation.time}\n        />\n        <TextareaElement\n          name=\"comments\"\n          label=\"Comments\"\n          onUserInput={this.setPreparation}\n          value={this.props.specimen.preparation.comments}\n        />\n        {submitButton} \n      </FormElement>\n    );\n  }\n\n}\n\nSpecimenPreparationForm.propTypes = {\n}\n\nexport default SpecimenPreparationForm;\n\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/preparationForm.js","import SpecimenBarcodeForm from './barcodeForm.js';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankSpecimenForm extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      formErrors: {},\n      candidateId: null,\n      sessionId: null,\n      centerId: null,\n      barcodeList: {1: {specimen: {collection: {}}, container: {}}},\n      count: 1,\n      collapsed: {1: true},\n      copyMultiplier: 1,\n    };\n\n    this.toggleCollapse = this.toggleCollapse.bind(this);\n    this.setSpecimen = this.setSpecimen.bind(this);\n    this.setContainer = this.setContainer.bind(this);\n    this.addBarcode = this.addBarcode.bind(this);\n    this.setCopyMultiplier = this.setCopyMultiplier.bind(this);\n    this.copyBarcode = this.copyBarcode.bind(this);\n    this.removeBarcode = this.removeBarcode.bind(this);\n    this.saveBarcodeList = this.saveBarcodeList.bind(this);\n  }\n\n  toggleCollapse(key) {\n    let collapsed = this.state.collapsed;\n    collapsed[key] = !collapsed[key];\n    this.setState({collapsed});\n  }\n\n  saveBarcodeList() {\n    let barcodeList = JSON.parse(JSON.stringify(this.state.barcodeList));\n    let availableId = Object.keys(this.props.containerStati).find(\n      key => this.props.containerStati[key] === 'Available'\n    );\n\n    for (let barcode in barcodeList) {\n      //set container values\n      let container = barcodeList[barcode].container;\n      container.statusId = availableId;\n      container.temperature = 20;\n      container.locationId = this.state.centerId;\n      container.originId = this.state.centerId;\n\n      //set specimen values\n      let specimen = barcodeList[barcode].specimen;\n      specimen.candidateId = this.state.candidateId;\n      specimen.sessionId = this.state.sessionId;\n      specimen.quantity = specimen.collection.quantity;\n      specimen.unitId = specimen.collection.unitId;\n      specimen.collection.locationId = this.state.centerId;\n      if (this.props.specimenTypes[specimen.typeId].freezeThaw === 1) {\n        specimen.fTCycle = 0;\n      }\n\n      //if this is an aliquot form, reset some of the values.\n      //TODO: these will eventually be higher level states.\n      if (this.props.data) {\n        specimen.candidateId = this.props.data.candidate.CandID;\n        specimen.sessionId = this.props.data.session.ID;\n        specimen.parentSpecimenId = this.props.data.specimen.id;\n        specimen.collection.locationId = this.props.data.container.locationId;\n        container.locationId = this.props.data.container.locationId;\n        container.originId = this.props.data.container.locationId;\n      }\n    \n      barcodeList[barcode].container = container;\n      barcodeList[barcode].specimen = specimen;\n    }\n\n    this.props.save(barcodeList, this.props.saveBarcodeListURL, 'Save Successful!').then(\n      () => {this.props.refreshParent();}\n    );\n  }\n\n  setSpecimen(name, value, key) {\n    this.props.onChange instanceof Function && this.props.onChange();\n    let centerId = this.state.centerId;\n    let candidateId = this.state.candidateId;\n    let sessionId = this.state.sessionId;\n    let barcodeList = this.state.barcodeList;\n\n    if (name === 'candidateId') {\n      candidateId = value;\n    } else if (name === 'sessionId') {\n      sessionId = value;\n      centerId = this.props.sessionCenters[sessionId].centerId;\n    } else {\n      //this is eliminate values if specimen type is changed\n      if (name === 'typeId') {\n        barcodeList[key].specimen = {collection:{}};\n      }\n      barcodeList[key].specimen[name] = value;\n    }\n\n    this.setState({barcodeList, centerId, candidateId, sessionId})\n  }\n\n  setContainer(name, value, key) {\n    this.props.onChange instanceof Function && this.props.onChange();\n    let barcodeList = this.state.barcodeList;\n    barcodeList[key].container[name] = value;\n    this.setState({barcodeList});\n  }\n\n  addBarcode() {\n    let barcodeList = this.state.barcodeList;\n    let count = this.state.count;\n    let collapsed = this.state.collapsed;\n\n    barcodeList[count+1] = {specimen: {}, container: {collection:{}}}; \n    collapsed[count+1] = true;\n    count = count+1\n\n    this.setState({barcodeList, collapsed, count});\n  }\n\n  setCopyMultiplier(e) {\n    let copyMultiplier = e.target.value;\n    this.setState({copyMultiplier});\n  }\n\n  copyBarcode(key) {\n    let count = this.state.count;\n    let collapsed = this.state.collapsed;\n    let nextKey = count+1;\n    let barcodeList = this.state.barcodeList;\n    let multiplier = this.state.copyMultiplier\n\n    for (let i=1; i<=multiplier; i++) {\n      barcodeList[nextKey] = JSON.parse(JSON.stringify(barcodeList[key])); \n      delete barcodeList[nextKey].container.barcode;\n      collapsed[nextKey] = true;\n      nextKey++;\n    }\n\n    this.setState({\n      barcodeList: barcodeList,\n      count: nextKey,\n      collapsed: collapsed,\n    });\n  }\n\n  removeBarcode(key) {\n    let barcodeList = this.state.barcodeList;\n    delete barcodeList[key];\n    this.setState({barcodeList: barcodeList});\n  }\n\n  render() {\n    //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n    let barcodeListArray = Object.keys(this.state.barcodeList);\n    let barcodes = [];\n    let i = 1;\n    for (let key of barcodeListArray) {\n      barcodes.push(\n        <SpecimenBarcodeForm\n          data={this.props.data || null}\n          key={key}\n          barcodeKey={key}\n          id={i} \n          collapsed={this.state.collapsed[key]}\n          toggleCollapse={this.toggleCollapse}\n          mapFormOptions={this.props.mapFormOptions}\n          container={this.state.barcodeList[key].container || null}\n          specimen={this.state.barcodeList[key].specimen || null}\n          removeBarcode={barcodeListArray.length !== 1 ?\n            () => this.removeBarcode(key) : null}\n          addBarcode={i == barcodeListArray.length ? this.addBarcode : null}\n          setCopyMultiplier={this.setCopyMultiplier}\n          copyMultiplier={this.state.copyMultiplier}\n          copyBarcode={i == barcodeListArray.length && this.state.barcodeList[key] ? \n            this.copyBarcode : null}\n          setContainer={this.setContainer}\n          setSpecimen={this.setSpecimen}\n          onChange={this.props.onChange}\n          specimenTypes={this.props.specimenTypes}\n          containerTypesPrimary={this.props.containerTypesPrimary}\n          containersNonPrimary={this.props.containersNonPrimary}\n          specimenTypeAttributes={this.props.specimenTypeAttributes}\n          attributeDatatypes={this.props.attributeDatatypes}\n          attributeOptions={this.props.attributeOptions}\n          capacities={this.props.capacities}\n          containerDimensions={this.props.containerDimensions}\n          containerCoordinates={this.props.containerCoordinates}\n          specimenTypeUnits={this.props.specimenTypeUnits}\n          units={this.props.units}\n        />\n      )\n      \n      i++;\n    }\n\n    let globalFields;\n    let remainingQuantityFields;\n    if (this.props.data) {\n      globalFields = (\n        <div>\n          <StaticElement\n            label=\"Parent Specimen\"\n            text={this.props.data.container.barcode}\n          />\n          <StaticElement\n            label=\"PSCID\"\n            text={this.props.data.candidate.PSCID}\n          />\n          <StaticElement\n            label=\"Visit Label\"\n            text={this.props.data.session.Visit_label}\n          />\n        </div>\n      );\n\n      remainingQuantityFields = (\n        <div>\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Remaining Quantity\"\n            onUserInput={this.props.setSpecimenData}\n            required={true}\n            value={this.props.specimen.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={this.props.specimenUnits}\n            onUserInput={this.props.setSpecimenData}\n            emptyOption={false}\n            required={true}\n            value={this.props.specimen.unitId}\n          />\n        </div>\n      );\n    } else {\n     let sessions = {};\n     if (this.state.candidateId) {\n       sessions = this.props.mapFormOptions(this.props.candidateSessions[this.state.candidateId], 'label'); \n     }\n      //TODO: not sure why, but I'm now having trouble with the SearchableDropdown\n      globalFields = (\n        <div>\n          <SelectElement\n            name=\"candidateId\"\n            label=\"PSCID\"\n            options={this.props.candidates}\n            onUserInput={this.setSpecimen}\n            required={true}\n            value={this.state.candidateId}\n            placeHolder='Search for a PSCID'\n          />\n          <SelectElement\n            name='sessionId'\n            label='Visit Label'\n            options={sessions}\n            onUserInput={this.setSpecimen}\n            required={true}\n            value={this.state.sessionId}\n            disabled={this.state.candidateId ? false : true}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"specimenForm\"\n        id='specimenForm'\n        onSubmit={() => {\n          this.saveBarcodeList();\n          this.props.saveSpecimen instanceof Function && this.props.saveSpecimen()}}\n        ref=\"form\"\n      >\n        <div className='row'>\n          <div className=\"col-xs-9 col-xs-offset-1\">\n            {globalFields}\n            {remainingQuantityFields}\n          </div>\n        </div>\n        {barcodes}\n        <ButtonElement\n          label='Submit'\n          columnSize='col-sm-2 col-sm-offset-10'\n        />\n      </FormElement>\n    );\n  }\n}\n\nBiobankSpecimenForm.propTypes = {\n};\n\nexport default BiobankSpecimenForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenForm.js","import SpecimenCollectionForm from './collectionForm'\nimport ContainerParentForm from './containerParentForm'\n\n/**\n * Biobank Barcode Form\n *\n * Acts a subform for BiobankSpecimenForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenBarcodeForm extends React.Component {\n  constructor() {\n    super();\n    this.setContainer = this.setContainer.bind(this);\n    this.setSpecimen = this.setSpecimen.bind(this);\n    this.copy = this.copy.bind(this);\n  }\n\n  setContainer(name, value) {\n    this.props.setContainer(name, value, this.props.barcodeKey);\n  }\n\n  setSpecimen(name, value) {\n    this.props.setSpecimen(name, value, this.props.barcodeKey);\n  }\n\n  copy() {\n    this.props.copyBarcode(this.props.copyMultiplier);\n  }\n\n  render() {\n    let addBarcodeButton;\n    let addBarcodeText;\n    let copyBarcodeButton;\n    let copyBarcodeText;\n    if (this.props.addBarcode) {\n      addBarcodeButton = (\n        <span className='action'>\n          <div\n            className='action-button add'\n            onClick={this.props.addBarcode}\n          >\n          +\n          </div>\n        </span>\n      );\n\n      addBarcodeText = (\n        <span className='action-title'>\n          New Entry\n        </span>\n      );\n    }\n\t\n    if (this.props.copyBarcode) {\n      copyBarcodeButton = (\n        <span className='action'>\n          <div\n            className='action-button add'\n            onClick={this.copy}\n          >\n            <span className='glyphicon glyphicon-duplicate'/>\n          </div>\n        </span>\n      );\n      copyBarcodeText = (\n        <span className='action-title'>\n          <input \n            className='form-control input-sm'\n            type='number'\n            min='1'\n            max='50'\n            style={{width: 50, display: 'inline'}}\n            onChange={this.props.setCopyMultiplier}\n            value={this.props.copyMultiplier}\n          />\n          Copies\n        </span>\n      );\n    }\n\n    let removeBarcodeButton;\n    if (this.props.removeBarcode) {\n      const glyphStyle = {\n        color: '#DDDDDD',\n        marginLeft: 10,\n        cursor: 'pointer',\n        fontSize: 15\n      }\n\n      removeBarcodeButton = (\n        <span \n          className='glyphicon glyphicon-remove' \n          onClick={this.props.removeBarcode}\n          style={glyphStyle}\n        />\n      );\n    }\n\n    let specimenTypes = {};\n    if (this.props.data) {\n      for (let id in this.props.specimenTypes) {\n        if (\n             (this.props.specimenTypes[id].parentTypeId ==\n             this.props.data.specimen.typeId) ||\n             (id == this.props.data.specimen.typeId)\n        ) {\n          specimenTypes[id] = this.props.specimenTypes[id]['type'];\n        }\n      }\n    } else {\n      specimenTypes = this.props.mapFormOptions(this.props.specimenTypes, 'type');\n    }\n\n    return (\n      <FormElement\n        name='biobankBarcode'\n      >\n        <div className='row'>\n          <div className='col-xs-9 col-xs-offset-1'>\n            <div>   \n              <TextboxElement\n                name='barcode'\n                label={'Barcode ' + this.props.id}\n                onUserInput={this.setContainer}\n                required={true}\n                value={this.props.container.barcode}\n              />\n            </div>\n          </div>\n          <div className='col-xs-1' style={{paddingLeft:0, marginTop:10}}>\n            <span \n              className= {this.props.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up'}\n              style={{cursor: 'pointer', fontSize:15, position:'relative', right:40}}\n              data-toggle='collapse' \n              data-target={'#item-' + this.props.barcodeKey}\n              onClick={() => this.props.toggleCollapse(this.props.barcodeKey)}\n            />\n            {removeBarcodeButton}\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xs-2'/>\n          <div className='col-xs-8'>\n            <div id={'item-' + this.props.barcodeKey} className='collapse'>\n              <SelectElement\n                name=\"typeId\"\n                label=\"Specimen Type\"\n                options={specimenTypes}\n                onUserInput={this.setSpecimen}\n                required={true}\n                value={this.props.specimen.typeId}\n              />\n              <SelectElement\n                name=\"typeId\"\n                label=\"Container Type\"                                              \n                options={this.props.containerTypesPrimary}                          \n                onUserInput={this.setContainer}\n                ref=\"containerType\"                                                 \n                required={true}                                                     \n                value={this.props.container.typeId}                           \n              />            \n              <SpecimenCollectionForm\n                specimen={this.props.specimen}\n                setSpecimenData={this.setSpecimen}\n                specimenTypeUnits={this.props.specimenTypeUnits}\n                specimenTypeAttributes={this.props.specimenTypeAttributes}\n                attributeDatatypes={this.props.attributeDatatypes}\n                attributeOptions={this.props.attributeOptions}\n              />\n              <ContainerParentForm                                                    \n                setContainerData={this.setContainer}\n                mapFormOptions={this.props.mapFormOptions}\n                container={this.props.container}\n                containersNonPrimary={this.props.containersNonPrimary}\n                containerDimensions={this.props.containerDimensions}\n                containerCoordinates={this.props.containerCoordinates}\n              />\n            </div>\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xs-11'>\n            <div className='col-xs-4'/>\n            <div className='col-xs-3 action'>\n              {addBarcodeButton}\n              {addBarcodeText}\n            </div>\n            <div className='col-xs-3 action'>\n              {copyBarcodeButton}\n              {copyBarcodeText}\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n}\n\nSpecimenBarcodeForm.propTypes = {\n}\n\nexport default SpecimenBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/barcodeForm.js","/**\n * This file contains React component for FilterForm\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\nimport Panel from 'Panel';\n\n/**\n * FilterForm component.\n * A wrapper for form elements inside a selection filter.\n *\n * Adds necessary filter callbacks to all children and passes them to FormElement\n * for proper rendering.\n *\n * Keeps track of filter object and sends it to parent on every update.\n *\n * //HACK/NOTE: Loris has special behaviour for `candID` attribute in the query string,\n * making it impossible to use it for selection filters. This components renames\n * all `candID` fields to `candidateID` automatically before appending them to URL.\n *\n */\nclass FilterForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    // Bind component instance to custom methods\n    this.clearFilter = this.clearFilter.bind(this);\n    this.getFormChildren = this.getFormChildren.bind(this);\n    this.setFilter = this.setFilter.bind(this);\n    this.onElementUpdate = this.onElementUpdate.bind(this);\n\n    // Keeps track of querystring values\n    // Saved as class variable instead of keeping in state\n    this.queryString = QueryString.get();\n  }\n\n  componentDidMount() {\n    let filter = {};\n    let queryString = this.queryString;\n\n    // Initiaze filter using querystring value\n    Object.keys(queryString).forEach(function(key) {\n      let filterKey = (key === 'candidateID') ? 'candID' : key;\n      filter[filterKey] = {\n        value: queryString[key],\n        exactMatch: false\n      };\n    });\n\n    // Update parent component\n    this.props.onUpdate(filter);\n  }\n\n  /**\n   * Clear the filter object, querystring and input fields\n   */\n  clearFilter() {\n    this.queryString = QueryString.clear(this.props.Module);\n    this.props.onUpdate({});\n  }\n\n  /**\n   * Itterates through FilterForm children, sets necessary callback functions\n   * and initializes filterTable\n   *\n   * @return {Array} formChildren - array of children with necessary props\n   */\n  getFormChildren() {\n    let formChildren = [];\n    React.Children.forEach(this.props.children, function(child, key) {\n      // If child is a React component (i.e not a simple DOM element)\n      if (React.isValidElement(child) &&\n        typeof child.type === \"function\" &&\n        child.props.onUserInput\n      ) {\n        let callbackFunc = child.props.onUserInput;\n        let callbackName = callbackFunc.name;\n        let elementName = child.type.displayName;\n        let queryFieldName = (child.props.name === 'candID') ? 'candidateID' : child.props.name;\n        let filterValue = this.queryString[queryFieldName];\n        // If callback function was not set, set it to onElementUpdate() for form\n        // elements and to clearFilter() for <ButtonElement type='reset'/>.\n        if (callbackName === \"onUserInput\") {\n          if (elementName === \"ButtonElement\" && child.props.type === \"reset\") {\n            callbackFunc = this.clearFilter;\n          } else {\n            callbackFunc = this.onElementUpdate.bind(null, elementName);\n          }\n        }\n        // Pass onUserInput and value props to all children\n        formChildren.push(React.cloneElement(child, {\n          onUserInput: callbackFunc,\n          value: filterValue ? filterValue : '',\n          key: key\n        }));\n        // Initialize filter for StaticDataTable\n        this.setFilter(elementName, child.props.name, filterValue);\n      } else {\n        formChildren.push(React.cloneElement(child, {key: key}));\n      }\n    }.bind(this));\n\n    return formChildren;\n  }\n\n  /**\n   * Appends entry to filter object or deletes it if value is\n   * empty.\n   *\n   * Sets exactMatch to true for all SelectElements (i.e dropdowns)\n   * in order to force StaticDataTable to do exact comparaison\n   *\n   * @param {string} type - form element type (i.e component name)\n   * @param {string} key - the name of the form element\n   * @param {string} value - the value of the form element\n   *\n   * @return {{}} filter - filterData\n   */\n  setFilter(type, key, value) {\n    let filter = {};\n    if (this.props.filter) {\n      filter = JSON.parse(JSON.stringify(this.props.filter));\n    }\n    if (key) {\n      filter[key] = {};\n      if (value) {     // all defined/non-null values must have some length, else empty string\n        filter[key].value = Object.keys(value).length > 0 ? value : '';\n      } else {         // null and undefined handled here\n        filter[key].value = '';\n      }\n      filter[key].exactMatch = (type === \"SelectElement\");\n    } else if (filter && key && value === '') {\n      delete filter[key];\n    }\n    return filter;\n  }\n\n  /**\n   * Sets filter object and querystring to reflect values of input fields\n   *\n   * @param {string} type - form element type (i.e component name)\n   * @param {string} fieldName - the name of the form element\n   * @param {string} fieldValue - the value of the form element\n   */\n  onElementUpdate(type, fieldName, fieldValue) {\n    // Make sure key is of string type and value is of string or object type\n    // before sending them to querystring\n    if (typeof fieldName !== 'string' ||\n        (typeof fieldValue !== 'string' && typeof fieldValue !== 'object')) {\n      return;\n    }\n\n    // Update query string\n    let queryFieldName = (fieldName === 'candID') ? 'candidateID' : fieldName;\n    this.queryString = QueryString.set(this.queryString, queryFieldName, fieldValue);\n\n    // Update filter and get new filter object\n    let filter = this.setFilter(type, fieldName, fieldValue);\n    this.props.onUpdate(filter);\n  }\n\n  render() {\n    // Get formatted children\n    let formChildren = this.getFormChildren();\n    let formElements = this.props.formElements;\n\n    if (formElements) {\n      Object.keys(formElements).forEach(function(fieldName) {\n        let queryFieldName = (fieldName === 'candID') ? 'candidateID' : fieldName;\n        formElements[fieldName].onUserInput = this.onElementUpdate.bind(null, fieldName);\n        formElements[fieldName].value = this.queryString[queryFieldName];\n      }.bind(this));\n    }\n\n    return (\n      <Panel\n        id={this.props.id}\n        height={this.props.height}\n        title={this.props.title}\n      >\n        <FormElement {...this.props}>\n          {formChildren}\n        </FormElement>\n      </Panel>\n    );\n  }\n}\n\nFilterForm.defaultProps = {\n  id: 'selection-filter',\n  height: '100%',\n  title: 'Selection Filter',\n  onUpdate: function() {\n    console.warn('onUpdate() callback is not set!');\n  }\n};\nFilterForm.propTypes = {\n  Module: React.PropTypes.string.isRequired,\n  filter: React.PropTypes.object.isRequired,\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  onUpdate: React.PropTypes.func\n};\n\nexport default FilterForm;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/FilterForm.js","/**\n * This file contains React component for Panel\n *\n * @author Alex I.\n * @version 1.0.0\n *\n */\n\n/**\n * Panel component\n * Wraps children in a collapsible bootstrap panel\n */\nclass Panel extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsed: this.props.initCollapsed\n    };\n\n    // Initialize panel class based on collapsed status\n    this.panelClass = (\n      this.props.initCollapsed ?\n        \"panel-collapse collapse\" :\n        \"panel-collapse collapse in\"\n    );\n\n    this.toggleCollapsed = this.toggleCollapsed.bind(this);\n  }\n\n  toggleCollapsed() {\n    this.setState({collapsed: !this.state.collapsed});\n  }\n\n  render() {\n    // Change arrow direction based on collapse status\n    let glyphClass = (\n      this.state.collapsed ?\n        \"glyphicon pull-right glyphicon-chevron-down\" :\n        \"glyphicon pull-right glyphicon-chevron-up\"\n    );\n\n    let pencilGlyph;\n    if (this.props.edit) {\n      pencilGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-pencil\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.edit}\n        /> \n      );\n    } \n\n    let plusGlyph;\n    if (this.props.add) {\n      plusGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-plus\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.add}\n        />\n      );\n    }\n\n    let removeGlyph;\n    if (this.props.cancel) {\n      removeGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-remove\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.cancel}\n        />\n      );\n    }\n\n    // Add panel header, if title is set\n    const panelHeading = this.props.title ? (\n      <div\n        className=\"panel-heading\"\n      >\n        <span \n          className={glyphClass}\n          onClick={this.toggleCollapsed}\n          data-toggle=\"collapse\"\n          data-target={'#' + this.props.id}\n          style={{cursor: 'pointer'}}\n        />\n        {pencilGlyph}\n        {plusGlyph}\n        {removeGlyph}\n        {this.props.title}\n      </div>\n    ) : '';\n\n    return (\n      <div className=\"panel panel-primary\">\n        {panelHeading}\n        <div id={this.props.id} className={this.panelClass} role=\"tabpanel\">\n          <div className=\"panel-body\" style={{height: this.props.height}}>\n            {this.props.children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPanel.propTypes = {\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  edit: React.PropTypes.func,\n  add: React.PropTypes.func\n};\nPanel.defaultProps = {\n  initCollapsed: false,\n  id: 'default-panel',\n  height: '100%'\n};\n\nexport default Panel;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Panel.js","import SpecimenBarcodeForm from './barcodeForm';\nimport BiobankSpecimenForm from './specimenForm';\nimport SpecimenPreparationForm from './preparationForm';\n\n/**\n * Biobank Pool Specimen Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\nclass PoolSpecimenForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      barcodeList: {},\n      errorMessage: null,\n      formErrors: {},\n      barcodeCount: 2,\n      preparation: false,\n      step: 1\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.setPreparationFormData = this.setPreparationFormData.bind(this);\n    this.setSpecimenFormData = this.setSpecimenFormData.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n    this.setBarcodeCount = this.setBarcodeCount.bind(this);\n    this.next = this.next.bind(this);\n    this.previous = this.previous.bind(this);\n    this.addPreparation = this.addPreparation.bind(this);\n    this.removePreparation = this.removePreparation.bind(this);\n    this.validate = this.validate.bind(this);\n    this.formSwitch = this.formSwitch.bind(this);\n    this.preparationSwitch = this.preparationSwitch.bind(this);\n    this.runAjax = this.runAjax.bind(this);\n  }\n\n  next() {\n    this.validate().then(\n      data => {\n        this.setState({\n          poolData: data,\n          step: this.state.step+1\n        });\n      }, \n      error => {\n        swal(\"Oops!\", error.responseText, \"error\");\n      }\n    );\n  }\n\n  previous() {\n    this.setState({\n      step: this.state.step-1\n    });\n  }\n\n  validate() {\n    return this.runAjax(this.props.specimenRequest, {barcodeList: this.state.barcodeList});\n  }\n\n  runAjax(url, inputData) {\n    return new Promise((resolve, reject) => {\n      $.ajax(url, {\n        method: \"GET\",\n        dataType: 'json',\n        data: inputData,\n        success: function(data) {\n          resolve(data);\n        }.bind(this),\n        error: function(error, textStatus, errorThrown) {\n          reject(error);\n          console.error(error);\n        }\n      });  \n    })\n  }\n\n  setBarcodeCount(field, value) {\n    let barcodeCount = value;\n    let barcodeList = this.state.barcodeList;\n    for (let barcode in barcodeList) {\n      if (barcode > barcodeCount) {\n        delete barcodeList[barcode];\n      }\n    }\n\n    this.setState({barcodeCount, barcodeList});\n  }\n\n  formSwitch(inputForm, specimenForm) {\n    switch(this.state.step) {\n      case 1:\n        return inputForm;\n      case 2:\n        return specimenForm;\n    }\n  }\n\n  preparationSwitch(preparationButton, preparationForm) {\n    switch(this.state.preparation) {\n      case false:\n        return preparationButton;\n      case true:\n        return preparationForm;\n    }\n  }\n\n  addPreparation() {\n    this.validate().then(\n      data => {\n        this.setState({\n          poolData: data,\n          preparation: true\n        });\n      },\n      error => {\n        swal('Oh no!', error.responseText, 'error');\n      }\n    );\n  }\n\n  removePreparation() {\n    let formData = this.state.formData;\n    //TODO: is it better to set it to empty, or delete it?\n    formData.preparationForm = {};\n    this.setState({\n      preparation: false,\n      formData\n    });\n  }\n\n  render() {\n    //Generates barcodes\n    let barcodes = [];\n    for (let i=1; i<=this.state.barcodeCount; i++) {\n      barcodes.push(\n        <TextboxElement\n          name={i}\n          label={'Barcode ' + i}\n          onUserInput={this.setFormData}\n          required={true}\n          value={this.state.barcodeList[i]}\n          errorMessage={this.state.formErrors[i]}\n        />\n      )\n    }\n    \n    let preparationButton = ( \n      <div className='row'>\n        <div className='col-xs-4'/>\n        <div className='col-xs 4 action'>\n            <span className='action'>\n            <div \n              className='action-button add'\n              onClick={this.addPreparation}\n            >\n              +\n            </div>\n            </span>\n            <div className='action-title'>\n              Add Preparation\n            </div>\n        </div>\n      </div>\n    );\n\n    let preparationForm;\n    if (this.state.poolData) {\n\n      const specimenProtocolAttributes = this.props.specimenProtocolAttributes[this.state.poolData.typeId]\n \n      let specimenProtocols = {};\n      for (let id in specimenProtocolAttributes) {\n        specimenProtocols[id] = this.props.specimenProtocols[id];\n      }\n      specimenProtocols = this.props.mapFormOptions(specimenProtocols, 'protocol');\n\n      preparationForm = (\n        <div className='row'>\n          <div className='col-sm-9 col-sm-offset-1'>\n            <SpecimenPreparationForm\n              formData={this.state.formData.preparationForm}\n              specimenProtocols={specimenProtocols}\n              specimenProtocolAttributes={specimenProtocolAttributes}\n              attributeDatatypes={this.props.attributeDatatypes}\n              attributeOptions={this.props.attributeOptions}\n              setParentFormData={this.setPreparationFormData}\n              insertAction={`${loris.BaseURL}/biobank/ajax/submitData.php?action=insertSpecimenPreparation`}\n            />\n            <a className='pull-right' style={{cursor:'pointer'}} onClick={this.removePreparation}>Cancel Preparation</a>\n          </div>\n        </div>\n      );\n    }\n\n    let inputForm = (\n      <div>\n        <div className='row'>\n          <div className='col-sm-9 col-sm-offset-1'>\n            <StaticElement\n              label='Pooling Note'\n              text='Select or Scan the specimens to be pooled. Please ensure that they\n                    are the same type, and share the same PSCID and Visit Label'\n            />\n            <NumericElement\n              label='№ of Specimens'\n              min='2'\n              max='100'\n              value={this.state.barcodeCount}\n              onUserInput={this.setBarcodeCount}\n            />\n            {barcodes}\n          </div>\n        </div>\n        {this.preparationSwitch(preparationButton, preparationForm)}\n        <div className='col-sm-3 col-xs-offset-9 action'>\n          <div className='action-title'>\n            Next\n          </div>\n          <span className='action'>\n            <div \n              className='action-button update'\n              onClick={this.next}\n            >\n              <span className='glyphicon glyphicon-chevron-right'/>\n            </div>\n          </span>\n        </div>\n      </div>\n    );\n\n    //TODO: Things here need to be in the proper order!!!\n    let specimenForm;\n    if (this.state.poolData) {\n\n      // This is to provide the options for the output specimens\n      let specimenTypes = {};\n      if (this.state.poolData.typeId) {\n        specimenTypes[this.state.poolData.typeId] = this.props.specimenTypes[this.state.poolData.typeId];\n      }\n  \n      let pscid = this.props.pSCIDs[this.state.poolData.candidateId];\n      let visit = this.props.sessionData[pscid].visits[this.state.poolData.sessionId];\n\n      let barcodesArray = Object.values(this.state.barcodeList); \n      let barcodesString = barcodesArray.join(', ');  \n\n      // TODO: rather than all specimen units this should really be specific to the\n      // type\n      let specimenUnits = this.props.mapFormOptions(this.props.specimenUnits, 'unit');\n\n      specimenForm = (\n        <div className='row'>\n          <div className='col-xs-12'>\n            <BiobankSpecimenForm\n              formData={this.state.formData.specimenForm}\n              candidateId={this.state.poolData.candidateId}\n              pscid={pscid}\n              sessionId={this.state.poolData.sessionId}\n              visit={visit}\n              parentSpecimenBarcodes={barcodesString}\n              parentSpecimenIds={this.state.poolData.specimenIds}\n              specimenTypes={specimenTypes}\n              specimenTypeUnits={this.props.specimenTypeUnits}\n              specimenUnits={specimenUnits}\n              containerTypesPrimary={this.props.containerTypesPrimary}\n              containersNonPrimary={this.props.containersNonPrimary}\n              specimenTypeAttributes={this.props.specimenTypeAttributes}\n              attributeDatatypes={this.props.attributeDatatypes}\n              attributeOptions={this.props.attributeOptions}\n              capacities={this.props.capacities}\n              containerDimensions={this.props.containerDimensions}\n              containerCoordinates={this.props.containerCoordinates}\n              setParentFormData={this.setSpecimenFormData}\n              action={`${loris.BaseURL}/biobank/ajax/submitData.php?action=submitSpecimen`}\n              refreshParent={this.props.refreshParent}\n            />\n            <ButtonElement\n              label='Submit'\n            />\n          </div>\n          <div className='col-sm-3 col-xs-offset-2 action'>\n            <span className='action'>\n              <div \n                className='action-button update'\n                onClick={this.previous}\n              >\n                <span className='glyphicon glyphicon-chevron-left'/>\n              </div>\n            </span>\n            <div className='action-title'>\n              Previous\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"poolSpecimenForm\"\n        id='poolSpecimenForm'\n        onSubmit={this.handleSubmit}\n        ref=\"form\"\n      >\n        {this.formSwitch(inputForm, specimenForm)}\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n\n  validateForm(formElement, value) {\n    let formErrors = this.state.formErrors;\n\n    //validate barcode regex\n    if (formElement === \"barcode\" && value !== \"\") {\n      if (!(/^hello/.test(this.state.formData.barcode))) {\n        formErrors.barcode = true;\n      } else {\n        formErrors.barcode = false;\n      }\n    }\n\n    //validate that quantity is a number and less than capacity\n    if (formElement === \"quantity\" && value !== \"\") {\n      if (isNaN(value) || (value > this.props.capacities[this.state.currentContainerType])) {\n        formErrors.quantity = true;\n      } else {\n        formErrors.quantity = false;\n      }\n    }\n\n    //validate datatypes and regex of generated type attributes\n    let specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n    let specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n\n      let datatype = this.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"number\") {\n        if (formElement === attribute) {\n          if (isNaN(value) && value !== \"\") {\n            formErrors[attribute] = true;\n          } else {\n            formErrors[attribute] = false;\n          }\n        }\n      }\n    })\n\n    this.setState({\n      formErrors: formErrors\n    });\n  }\n\n\n  /**\n   * Handle form submission\n   * @param {object} e - Form submission event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    this.submitForm();\n  }\n\n  /*\n   * Uploads the file to the server\n   */\n  submitForm() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let preparationForm = this.state.formData.preparationForm;\n    let specimenForm = this.state.formData.specimenForm;\n    formData['preparationForm'] = JSON.stringify(preparationForm);\n    formData['specimenForm'] = JSON.stringify(specimenForm);\n\n    console.log(formData.specimenForm);\n    console.log(formData.preparationForm);\n\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        //this.props.refreshParent();\n        swal(\"Specimens Pooled Successful!\", \"\", \"success\");\n        this.props.onSuccess();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Checks if the inputted file name is valid\n   *\n   * @param {string} requiredFileName - Required file name\n   * @param {string} fileName - Provided file name\n   * @return {boolean} - true if fileName starts with requiredFileName, false\n   *   otherwise\n   */\n//  isValidFileName(requiredFileName, fileName) {\n//    if (fileName === null || requiredFileName === null) {\n//      return false;\n//    }\n//\n//    return (fileName.indexOf(requiredFileName) === 0);\n//  }\n\n  /**\n   * Validate the form\n   *\n   * @param {object} formRefs - Object containing references to React form elements\n   * @param {object} formData - Object containing form data inputed by user\n   * @return {boolean} - true if all required fields are filled, false otherwise\n   */\n  isValidForm(formRefs, formData) {\n    let isValidForm = true;\n\n    let requiredFields = {\n      pscid: null,\n      visitLabel: null,\n    };\n\n    Object.keys(requiredFields).map(function(field) {\n      if (formData[field]) {\n        requiredFields[field] = formData[field];\n      } else if (formRefs[field]) {\n        formRefs[field].props.hasError = true;\n        isValidForm = false;\n      }\n    });\n    this.forceUpdate();\n\n    return isValidForm;\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    // This lets the modal window know that there is formData\n    // and will cause a warning to be thrown of the modal window\n    // is exited\n    this.props.onChange instanceof Function && this.props.onChange();\n  \n    if (formElement === \"pscid\" && value !== \"\" && value !== undefined) {\n      this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n    }\n\n    let formData = this.state.formData;\n    let barcodeList = this.state.barcodeList;\n \n    //TODO: there must be a better way to do this\n    if (isNaN(formElement)) {\n      formData[formElement] = value;\n    } else {\n      barcodeList[formElement] = value;\n    }\n\n    this.setState({\n      formData,\n      barcodeList\n    });\n  }\n\n  setPreparationFormData(preparationFormData) {\n    let formData = this.state.formData;\n    formData.preparationForm = preparationFormData;\n    \n    this.setState({formData});\n  }\n\n  setSpecimenFormData(specimenFormData) {\n    let formData = this.state.formData;\n    formData.specimenForm = specimenFormData;\n  \n    this.setState({formData});\n  }\n}\n\nPoolSpecimenForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired,\n  refreshTable: React.PropTypes.func\n};\n\nexport default PoolSpecimenForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/poolSpecimenForm.js","import ContainerBarcodeForm from './containerBarcodeForm.js';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankContainerForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formErrors: {},\n      errorMessage: null,\n      containerList: {1: {}},\n      countContainers: 1,\n      collapsed: {1: true},\n      copyMultiplier: 1,\n    };\n\n    this.toggleCollapse = this.toggleCollapse.bind(this);\n    this.addContainer = this.addContainer.bind(this);\n    this.setContainer = this.setContainer.bind(this);\n    this.setCopyMultiplier = this.setCopyMultiplier.bind(this);\n    this.copyContainer = this.copyContainer.bind(this);\n    this.removeContainer = this.removeContainer.bind(this);\n    this.saveContainerList = this.saveContainerList.bind(this);\n  }\n\n  toggleCollapse(key) {\n    let collapsed = this.state.collapsed;\n    collapsed[key] = !collapsed[key];\n    this.setState({collapsed});\n  }\n\n  saveContainerList() {\n    let containerList = this.state.containerList;\n    let availableId = Object.keys(this.props.containerStati).find(\n      key => this.props.containerStati[key] === 'Available'\n    );\n\n    for (let container in containerList) {\n      containerList[container].statusId = availableId;\n      containerList[container].temperature = 20;\n      this.props.save(containerList[container], this.props.saveContainer).then(\n        () => {this.props.refreshParent();}\n      );\n    }\n  }\n\n  setContainer(name, value, key) {\n    this.props.onChange instanceof Function && this.props.onChange();\n    let siteId = this.state.siteId;\n    let containerList = this.state.containerList;\n    if (name === 'siteId') {\n       siteId = value;\n       for (let container in containerList) {\n         containerList[container].originId = siteId;\n         containerList[container].locationId = siteId;\n       }\n    } else {\n      containerList[key][name] = value;\n    }\n    this.setState({containerList, siteId});\n  }\n\n  addContainer() {\n    let containerList = this.state.containerList;\n    let count = this.state.countContainers;\n    let collapsed = this.state.collapsed;\n    let siteId = this.state.siteId;\n    let temperature = 20;\n\n    // get Id of available status\n    let statusId = Object.keys(this.props.containerStati).find(\n      key => this.props.containerStati[key] === 'Available'\n    );\n\n    containerList[count+1] = {\n      statusId: statusId,\n      originId: siteId,\n      locationId: siteId,\n      temperature: temperature\n    };\n\n    collapsed[count+1] = true;  \n\n    this.setState({\n      containerList: containerList,\n      countContainers: count + 1,\n      collapsed: collapsed,\n    });\n  }\n\n  setCopyMultiplier(e) {\n    let copyMultiplier = e.target.value;\n    this.setState({copyMultiplier});\n  }\n\n  copyContainer(key) {\n    let count = this.state.countContainers;\n    let collapsed = this.state.collapsed;\n    let nextKey = count+1;\n    let containerList = this.state.containerList;\n    let multiplier = this.state.copyMultiplier\n\n    for (let i=1; i<=multiplier; i++) {\n      containerList[nextKey] = JSON.parse(JSON.stringify(containerList[key]));\n      delete containerList[nextKey].barcode;\n      collapsed[nextKey] = true;\n      nextKey++;\n    }    \n\n    this.setState({\n      containerList: containerList,\n      countContainers: nextKey,\n      collapsed: collapsed\n    });\n  }\n\n  removeContainer(key) {\n    let containerList = this.state.containerList;\n    delete containerList[key];\n    this.setState({containerList});\n  }\n\n  render() {\n    //Generates new Barcode Form everytime the addContainer button is pressed\n    let containerListArray = Object.keys(this.state.containerList);\n    let containers = [];\n    let i = 1;\n    for (let key of containerListArray) {\n      containers.push(\n        <ContainerBarcodeForm\n          key={key}\n          containerKey={key}\n          id={i}\n          collapsed={this.state.collapsed[key]}\n          toggleCollapse={this.toggleCollapse}\n          container={this.state.containerList[key] || null}\n          removeContainer={containerListArray.length !== 1 ? () => this.removeContainer(key) : null}\n          addContainer={i == containerListArray.length ? this.addContainer : null}\n          setCopyMultiplier={this.setCopyMultiplier}\n          copyMultiplier={this.state.copyMultiplier}\n          copyContainer={i == containerListArray.length && this.state.containerList[key] ? this.copyContainer : null}\n          setContainer={this.setContainer}\n          onChange={this.props.onChange}\n          containerTypesNonPrimary={this.props.containerTypesNonPrimary}\n          containerBarcodesNonPrimary={this.props.containerBarcodesNonPrimary}\n        />\n      );\n     \n      i++;\n    }\n\n    return (\n      <FormElement\n        name=\"containerForm\"\n        onSubmit={this.saveContainerList}\n        ref=\"form\"\n      >\n        <br/>\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <SelectElement\n              name=\"siteId\"\n              label=\"Site\"\n              options={this.props.centers}\n              onUserInput={this.setContainer}\n              required={true}\n              value={this.state.siteId}\n            />\n          </div>\n        </div>\n        {containers}\n          <div className=\"col-xs-3 col-xs-offset-9\">\n            <ButtonElement label=\"Submit\"/>\n          </div>\n      </FormElement>\n    );\n  }\n}\n\nBiobankContainerForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  barcode: React.PropTypes.string,\n  refreshTable: React.PropTypes.func\n};\n\nexport default BiobankContainerForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerForm.js","/**\n * Container Barcode Form\n *\n * Acts a subform for ContainerForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass ContainerBarcodeForm extends React.Component {\n  constructor() {\n    super();\n   \n    this.setContainer = this.setContainer.bind(this);\n    this.copy = this.copy.bind(this);\n  }\n\n  copy() {\n    this.props.copyContainer(this.props.containerKey);\n  }\n\n  //TODO: change form.js so this isn't necessary\n  setContainer(name, value) {\n    this.props.setContainer(name, value, this.props.containerKey);\n  }\n\n  render() {\n    // HR TODO: All this CSS should eventually be moved\n    let addContainerButton;\n    let addContainerText;\n    let copyContainerButton;\n    let copyContainerText;\n    if (this.props.addContainer) {\n      addContainerButton = (\n        <span className='action'>\n          <div\n            className='action-button add'\n            onClick={this.props.addContainer}\n          >\n          +\n          </div>\n        </span>\n      );\n\n      addContainerText = (\n        <span className='action-title'>\n          New Entry\n        </span>\n      );\n    }   \n    \n    if (this.props.copyContainer) {\n      copyContainerButton = ( \n        <span className='action'>\n          <div\n            className='action-button add'\n            onClick={this.copy}\n          >   \n            <span className='glyphicon glyphicon-duplicate'/>\n          </div>\n        </span>\n      );  \n      copyContainerText = ( \n        <span className='action-title'>\n          <input \n            className='form-control input-sm'\n            type='number'\n            min='1'\n            max='50'\n            style={{width: 50, display: 'inline'}}\n            onChange={this.props.setCopyMultiplier}\n            value={this.props.copyMultiplier}\n          />  \n          Copies\n        </span>\n      );  \n    }   \n\n    let removeContainerButton;\n    if (this.props.removeContainer) {\n      const glyphStyle = { \n        color: '#DDDDDD',\n        marginLeft: 10, \n        cursor: 'pointer',\n        fontSize: 15\n      }   \n\n      removeContainerButton = ( \n        <span \n          className='glyphicon glyphicon-remove' \n          onClick={this.props.removeContainer}\n          style={glyphStyle}\n        />\n      );  \n    }\n\n    return (\n      <FormElement\n        name='container'\n      >\n        <div className='row'>\n          <div className='col-xs-11'>\n            <div>\n            <TextboxElement\n              name='barcode'\n              label={'Barcode ' + this.props.id}\n              onUserInput={this.setContainer}\n              ref='barcode'\n              required={true}\n              value={this.props.container.barcode}\n            />\n            </div>\n          </div>\n          <div className='col-xs-1' style={{paddingLeft:0, marginTop:10}}>\n            <span\n              className= {this.props.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up'}\n              style={{cursor: 'pointer', fontSize:15, position:'relative', right:40}}\n              data-toggle='collapse'\n              data-target={'#item-' + this.props.containerKey}\n              onClick={() => this.props.toggleCollapse(this.props.containerKey)}\n            />\n            {removeContainerButton}\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xs-2'/>\n          <div className='col-xs-9'>\n            <div id={'item-' + this.props.containerKey} className='collapse'>\n              <SelectElement\n                name='typeId'\n                label='Container Type'\n                options={this.props.containerTypesNonPrimary}\n                onUserInput={this.setContainer}\n                required={true}\n                value={this.props.container.typeId}\n              />\n            </div>\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xs-11'>\n            <div className='col-xs-3'/>\n            <div className='col-xs-4 action'>\n              {addContainerButton}\n              {addContainerText}\n            </div>\n            <div className='col-xs-4 action'>\n              {copyContainerButton}\n              {copyContainerText}\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n}\n\nContainerBarcodeForm.propTypes = {\n}\n\nexport default ContainerBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerBarcodeForm.js","/**\n * This file contains React components for Tabs component.\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\n/**\n * Tabs Component.\n * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n * and corresponding tab panes.\n *\n * ================================================\n * Usage:\n *\n * 1. Define an array of tabs with IDs and labels\n *\n * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n *\n * 2. Pass tabList as <Tab> property and <TabPane> as child\n *  ```\n * <Tabs tabs={tabList} defaultTab=\"tab1\">\n *   <TabPane TabId={tabList[0].id}>\n *     // Tab content goes here\n *   </TabPane>\n * </Tabs>\n * ```\n * =================================================\n *\n */\nclass Tabs extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    const hash = window.location.hash;\n    let activeTab = \"\";\n\n    /**\n     * Determine the initial active tab in this order\n     * 1. Try to infer from the URL, otherwise\n     * 2. Try to infer from the defaultTab prop, otherwise\n     * 3. Set to be the first tab of the list\n     */\n    if (this.props.updateURL && hash) {\n      activeTab = hash.substr(1);\n    } else if (this.props.defaultTab) {\n      activeTab = this.props.defaultTab;\n    } else if (this.props.tabs.length > 0) {\n      activeTab = this.props.tabs[0].id;\n    }\n\n    this.state = {\n      activeTab: activeTab\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.getTabs = this.getTabs.bind(this);\n    this.getTabPanes = this.getTabPanes.bind(this);\n  }\n\n  handleClick(tabId, e) {\n    this.setState({activeTab: tabId});\n    this.props.onTabChange(tabId);\n\n    // Add tab href to URL querystring and scroll the page to top\n    if (this.props.updateURL) {\n      const scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n      window.location.hash = e.target.hash;\n      $('html,body').scrollTop(scrollDistance);\n    }\n  }\n\n  getTabs() {\n    let tabs = (this.props.tabs).map(function(tab) {\n      let tabClass = this.state.activeTab === tab.id ? 'active' : null;\n      let href = \"#\" + tab.id;\n      let tabID = \"tab-\" + tab.id;\n      return (\n        <li\n          role=\"presentation\"\n          className={tabClass}\n          key={tab.id}\n        >\n          <a id={tabID}\n             href={href}\n             role=\"tab\"\n             data-toggle=\"tab\"\n             onClick={this.handleClick.bind(null, tab.id)}\n          >\n            {tab.label}\n          </a>\n        </li>\n      );\n    }.bind(this));\n\n    return tabs;\n  }\n\n  getTabPanes() {\n    let tabPanes = React.Children.map(this.props.children, function(child, key) {\n      if (child) {\n        return React.cloneElement(child, {\n          activeTab: this.state.activeTab,\n          key: key\n        });\n      }\n    }.bind(this));\n\n    return tabPanes;\n  }\n\n  render() {\n    let tabs = this.getTabs();\n    let tabPanes = this.getTabPanes();\n    let tabStyle = {\n      marginLeft: 0,\n      marginBottom: '5px'\n    };\n\n    return (\n      <div>\n        <ul className=\"nav nav-tabs\" role=\"tablist\" style={tabStyle}>\n          {tabs}\n        </ul>\n        <div className=\"tab-content\">\n          {tabPanes}\n        </div>\n      </div>\n    );\n  }\n}\nTabs.propTypes = {\n  tabs: React.PropTypes.array.isRequired,\n  defaultTab: React.PropTypes.string,\n  updateURL: React.PropTypes.bool\n};\nTabs.defaultProps = {\n  onTabChange: function() {},\n  // Set updateURL to default to true but allow for change\n  // Nested tabs should set this variable to false\n  updateURL: true\n};\n\n/**\n * Allows to dynamically render vertical tabs corresponding to tab panes.\n */\n\nclass VerticalTabs extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const hash = window.location.hash;\n    let activeTab = \"\";\n\n    /**\n     * Determine the initial active tab in this order\n     * 1. Try to infer from the URL, otherwise\n     * 2. Try to infer from the defaultTab prop, otherwise\n     * 3. Set to be the first tab of the list\n     */\n    if (this.props.updateURL && hash) {\n      activeTab = hash.substr(1);\n    } else if (this.props.defaultTab) {\n      activeTab = this.props.defaultTab;\n    } else if (this.props.tabs.length > 0) {\n      activeTab = this.props.tabs[0].id;\n    }\n\n    this.state = {\n      activeTab: activeTab\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.getTabs = this.getTabs.bind(this);\n    this.getTabPanes = this.getTabPanes.bind(this);\n  }\n\n  handleClick(tabId, e) {\n    this.setState({activeTab: tabId});\n    this.props.onTabChange(tabId);\n\n    // Add tab href to URL querystring and scroll the page to top\n    if (this.props.updateURL) {\n      const scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n      window.location.hash = e.target.hash;\n      $('html,body').scrollTop(scrollDistance);\n    }\n  }\n\n  getTabs() {\n    let tabs = (this.props.tabs).map(function(tab) {\n      let tabClass = this.state.activeTab === tab.id ? 'active' : null;\n      let href = \"#\" + tab.id;\n      let tabID = \"tab-\" + tab.id;\n      return (\n        <li\n          role=\"presentation\"\n          className={tabClass}\n          key={tab.id}\n        >\n          <a id={tabID}\n             href={href}\n             role=\"tab\"\n             data-toggle=\"tab\"\n             onClick={this.handleClick.bind(null, tab.id)}\n          >\n            {tab.label}\n          </a>\n        </li>\n      );\n    }.bind(this));\n\n    return tabs;\n  }\n\n  getTabPanes() {\n    let tabPanes = React.Children.map(this.props.children, function(child, key) {\n      if (child) {\n        return React.cloneElement(child, {\n          activeTab: this.state.activeTab,\n          key: key\n        });\n      }\n    }.bind(this));\n\n    return tabPanes;\n  }\n\n  render() {\n    let tabs = this.getTabs();\n    let tabPanes = this.getTabPanes();\n    let tabStyle = {\n      marginLeft: 0,\n      marginBottom: '5px'\n    };\n\n    return (\n      <div>\n        <div className=\"tabbable col-md-3 col-sm-3\">\n          <ul className=\"nav nav-pills nav-stacked\" role=\"tablist\" style={tabStyle}>\n            {tabs}\n          </ul>\n        </div>\n        <div className=\"tab-content col-md-9 col-sm-9\">\n          {tabPanes}\n        </div>\n      </div>\n    );\n  }\n}\nVerticalTabs.propTypes = {\n  tabs: React.PropTypes.array.isRequired,\n  defaultTab: React.PropTypes.string,\n  updateURL: React.PropTypes.bool\n};\nVerticalTabs.defaultProps = {\n  onTabChange: function() {},\n  // Set updateURL to default to true but allow for change\n  // Nested tabs should set this variable to false\n  updateURL: true\n};\n\n/*\n * TabPane component.\n * Used to wrap content for every tab.\n */\nclass TabPane extends React.Component {\n  render() {\n    let classList = \"tab-pane\";\n    let title;\n\n    if (this.props.TabId === this.props.activeTab) {\n      classList += \" active\";\n    }\n    if (this.props.Title) {\n      title = <h1>{this.props.Title}</h1>;\n    }\n\n    return (\n      <div role=\"tabpanel\" className={classList} id={this.props.TabId}>\n        {title}\n        {this.props.children}\n      </div>\n    );\n  }\n}\nTabPane.propTypes = {\n  TabId: React.PropTypes.string.isRequired,\n  Title: React.PropTypes.string,\n  activeTab: React.PropTypes.string\n};\n\nexport {\n  Tabs,\n  VerticalTabs,\n  TabPane\n};\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Tabs.js"],"sourceRoot":""}