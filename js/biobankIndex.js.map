{"version":3,"sources":["webpack:///modules/biobank/js/biobankIndex.js","webpack:///webpack/bootstrap 85b5ca1f23def5e48c45?416e*******","webpack:///./modules/biobank/jsx/biobankIndex.js","webpack:///./jsx/FilterForm.js","webpack:///./jsx/Panel.js","webpack:///./modules/biobank/jsx/specimenForm.js","webpack:///./jsx/ProgressBar.js","webpack:///./jsx/Tabs.js","webpack:///./modules/biobank/jsx/columnFormatter.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","_FilterForm","_FilterForm2","_specimenForm","_specimenForm2","_Tabs","_columnFormatter","_columnFormatter2","BiobankIndex","_React$Component","this","_this","getPrototypeOf","state","isLoaded","filter","isOpen","fetchData","bind","updateFilter","resetFilters","toggleModal","$","ajax","DataURL","method","dataType","success","data","setState","Data","error","console","refs","biobankFilter","clearFilter","React","createElement","className","addSpecimenButton","specimenForm","tabList","label","loris","userHasPermission","ButtonElement","onUserInput","type","Modal","show","onClose","BaseURL","action","Tabs","tabs","defaultTab","updateURL","TabPane","TabId","Module","name","ref","columns","formElements","form","onUpdate","StaticDataTable","Headers","Filter","getFormattedCell","Component","biobankIndex","ReactDOM","render","document","getElementById","_Panel","_Panel2","FilterForm","getFormChildren","setFilter","onElementUpdate","queryString","QueryString","get","keys","forEach","filterKey","exactMatch","clear","formChildren","Children","children","child","isValidElement","callbackFunc","callbackName","elementName","displayName","queryFieldName","filterValue","push","cloneElement","JSON","parse","stringify","fieldName","fieldValue","set","height","title","FormElement","defaultProps","warn","propTypes","PropTypes","string","isRequired","object","func","Panel","collapsed","initCollapsed","panelClass","toggleCollapsed","glyphClass","panelHeading","onClick","data-toggle","data-target","style","cursor","role","_ProgressBar","_ProgressBar2","BiobankSpecimenForm","formData","currentSpecimenType","specimenResult","errorMessage","loadedData","specimenProgress","handleSubmit","isValidForm","setFormData","getSpecimenTypeFields","specimenSubmit","errorCode","errorMsg","undefined","specimenTypeFields","fileSpecimen","onSubmit","SelectElement","options","PSCIDs","hasError","required","pscid","visits","visitLabel","sites","forSite","specimenTypes","specimenType","containerTypes","containerType","TextboxElement","barcode","quantity","DateElement","minYear","maxYear","timeCollect","TextareaElement","notes","e","preventDefault","formRefs","formObj","FormData","append","url","cache","contentType","processData","xhr","window","XMLHttpRequest","event","CustomEvent","dispatchEvent","swal","err","msg","responseJSON","message","requiredFields","map","field","forceUpdate","formElement","sessionData","_this2","specimenTypeFieldsObject","specimenTypeAttributes","attribute","ProgressBar","apply","arguments","progressStyle","display","backgroundColor","position","labelStyle","top","left","zIndex","width","color","textAlign","lineHeight","fontWeight","aria-valuemin","aria-valuemax","aria-valuenow","number","hash","location","activeTab","substr","handleClick","getTabs","getTabPanes","tabId","onTabChange","scrollDistance","scrollTop","tab","tabClass","href","tabID","tabPanes","tabStyle","marginLeft","marginBottom","array","bool","_React$Component2","classList","Title","_React$Component3","modalStyle","borderRadius","maxWidth","minHeight","margin","padding","backdropStyle","bottom","right","stopPropagation","node","formatColumn","column","cell","rowData","rowHeaders","row","header","index","classes","join","specimenURL","containerURL"],"mappings":"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","file":"./modules/biobank/js/biobankIndex.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _FilterForm = __webpack_require__(1);\n\t\n\tvar _FilterForm2 = _interopRequireDefault(_FilterForm);\n\t\n\tvar _specimenForm = __webpack_require__(3);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tvar _Tabs = __webpack_require__(5);\n\t\n\tvar _columnFormatter = __webpack_require__(6);\n\t\n\tvar _columnFormatter2 = _interopRequireDefault(_columnFormatter);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t//import Modal from '../../../htdocs/js/components/Modal';\n\t\n\t\n\tvar BiobankIndex = function (_React$Component) {\n\t  _inherits(BiobankIndex, _React$Component);\n\t\n\t  function BiobankIndex(props) {\n\t    _classCallCheck(this, BiobankIndex);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankIndex.__proto__ || Object.getPrototypeOf(BiobankIndex)).call(this, props));\n\t\n\t    _this.state = {\n\t      isLoaded: false,\n\t      filter: {},\n\t      isOpen: false\n\t    };\n\t\n\t    // Bind component instance to custom methods\n\t    _this.fetchData = _this.fetchData.bind(_this);\n\t    _this.updateFilter = _this.updateFilter.bind(_this);\n\t    _this.resetFilters = _this.resetFilters.bind(_this);\n\t    _this.toggleModal = _this.toggleModal.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankIndex, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      this.fetchData();\n\t    }\n\t\n\t    /**\n\t     * Retrieve data from the provided URL and save it in state\n\t     * Additionaly add hiddenHeaders to global loris vairable\n\t     * for easy access by columnFormatter.\n\t     */\n\t\n\t  }, {\n\t    key: 'fetchData',\n\t    value: function fetchData() {\n\t      $.ajax(this.props.DataURL, {\n\t        method: \"GET\",\n\t        dataType: 'json',\n\t        success: function (data) {\n\t          this.setState({\n\t            Data: data,\n\t            isLoaded: true\n\t          });\n\t        }.bind(this),\n\t        error: function error(_error) {\n\t          console.error(_error);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'updateFilter',\n\t    value: function updateFilter(filter) {\n\t      this.setState({ filter: filter });\n\t    }\n\t  }, {\n\t    key: 'resetFilters',\n\t    value: function resetFilters() {\n\t      this.refs.biobankFilter.clearFilter();\n\t    }\n\t  }, {\n\t    key: 'toggleModal',\n\t    value: function toggleModal() {\n\t      this.setState({\n\t        isOpen: !this.state.isOpen\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Waiting for async data to load\n\t      if (!this.state.isLoaded) {\n\t        return React.createElement(\n\t          'button',\n\t          { className: 'btn-info has-spinner' },\n\t          'Loading',\n\t          React.createElement('span', {\n\t            className: 'glyphicon glyphicon-refresh glyphicon-refresh-animate' })\n\t        );\n\t      }\n\t\n\t      var addSpecimenButton = void 0;\n\t      var specimenForm = void 0;\n\t      var tabList = [{ id: \"specimens\", label: \"Specimens\" }, { id: \"containers\", label: \"Containers\" }];\n\t\n\t      if (loris.userHasPermission('biobank_write')) {\n\t        addSpecimenButton = React.createElement(ButtonElement, { onUserInput: this.toggleModal, label: 'Add New Specimen', type: 'button' });\n\t        specimenForm = React.createElement(\n\t          _Tabs.Modal,\n\t          { show: this.state.isOpen, onClose: this.toggleModal },\n\t          React.createElement(_specimenForm2.default, {\n\t            DataURL: loris.BaseURL + '/biobank/ajax/FileUpload.php?action=getFormData',\n\t            action: loris.BaseURL + '/biobank/ajax/FileUpload.php?action=submitSpecimen'\n\t          })\n\t        );\n\t      }\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          _Tabs.Tabs,\n\t          { tabs: tabList, defaultTab: 'specimens', updateURL: true },\n\t          React.createElement(\n\t            _Tabs.TabPane,\n\t            { TabId: tabList[0].id },\n\t            React.createElement(\n\t              _FilterForm2.default,\n\t              {\n\t                Module: 'biobank',\n\t                name: 'specimen_filter',\n\t                id: 'specimen_filter_form',\n\t                ref: 'specimenFilter',\n\t                columns: 3,\n\t                formElements: this.state.Data.form,\n\t                onUpdate: this.updateFilter,\n\t                filter: this.state.filter\n\t              },\n\t              React.createElement('br', null),\n\t              addSpecimenButton,\n\t              React.createElement(ButtonElement, { label: 'Clear Filters', type: 'reset', onUserInput: this.resetFilters })\n\t            ),\n\t            React.createElement(StaticDataTable, {\n\t              Data: this.state.Data.Data,\n\t              Headers: this.state.Data.Headers,\n\t              Filter: this.state.filter,\n\t              getFormattedCell: _columnFormatter2.default\n\t            })\n\t          ),\n\t          React.createElement(\n\t            _Tabs.TabPane,\n\t            { TabId: tabList[1].id },\n\t            React.createElement(\n\t              _FilterForm2.default,\n\t              {\n\t                Module: 'biobank',\n\t                name: 'container_filter',\n\t                id: 'container_filter_form',\n\t                ref: 'containerFilter',\n\t                columns: 3,\n\t                formElements: this.state.Data.form,\n\t                onUpdate: this.updateFilter,\n\t                filter: this.state.filter\n\t              },\n\t              React.createElement('br', null),\n\t              React.createElement(ButtonElement, { label: 'Clear Filters', type: 'reset', onUserInput: this.resetFilters })\n\t            ),\n\t            React.createElement(StaticDataTable, {\n\t              Data: this.state.Data.Data,\n\t              Headers: this.state.Data.Headers,\n\t              Filter: this.state.filter,\n\t              getFormattedCell: _columnFormatter2.default\n\t            })\n\t          )\n\t        ),\n\t        specimenForm\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return BiobankIndex;\n\t}(React.Component);\n\t\n\t$(function () {\n\t  var biobankIndex = React.createElement(\n\t    'div',\n\t    { className: 'page-biobank' },\n\t    React.createElement(BiobankIndex, { DataURL: loris.BaseURL + '/biobank/?format=json' })\n\t  );\n\t\n\t  ReactDOM.render(biobankIndex, document.getElementById(\"lorisworkspace\"));\n\t});\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Panel = __webpack_require__(2);\n\t\n\tvar _Panel2 = _interopRequireDefault(_Panel);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file contains React component for FilterForm\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Loris Team\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.1.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/**\n\t * FilterForm component.\n\t * A wrapper for form elements inside a selection filter.\n\t *\n\t * Adds necessary filter callbacks to all children and passes them to FormElement\n\t * for proper rendering.\n\t *\n\t * Keeps track of filter object and sends it to parent on every update.\n\t *\n\t * //HACK/NOTE: Loris has special behaviour for `candID` attribute in the query string,\n\t * making it impossible to use it for selection filters. This components renames\n\t * all `candID` fields to `candidateID` automatically before appending them to URL.\n\t *\n\t */\n\tvar FilterForm = function (_React$Component) {\n\t  _inherits(FilterForm, _React$Component);\n\t\n\t  function FilterForm(props) {\n\t    _classCallCheck(this, FilterForm);\n\t\n\t    // Bind component instance to custom methods\n\t    var _this = _possibleConstructorReturn(this, (FilterForm.__proto__ || Object.getPrototypeOf(FilterForm)).call(this, props));\n\t\n\t    _this.clearFilter = _this.clearFilter.bind(_this);\n\t    _this.getFormChildren = _this.getFormChildren.bind(_this);\n\t    _this.setFilter = _this.setFilter.bind(_this);\n\t    _this.onElementUpdate = _this.onElementUpdate.bind(_this);\n\t\n\t    // Keeps track of querystring values\n\t    // Saved as class variable instead of keeping in state\n\t    _this.queryString = QueryString.get();\n\t    return _this;\n\t  }\n\t\n\t  _createClass(FilterForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var filter = {};\n\t      var queryString = this.queryString;\n\t\n\t      // Initiaze filter using querystring value\n\t      Object.keys(queryString).forEach(function (key) {\n\t        var filterKey = key === 'candidateID' ? 'candID' : key;\n\t        filter[filterKey] = {\n\t          value: queryString[key],\n\t          exactMatch: false\n\t        };\n\t      });\n\t\n\t      // Update parent component\n\t      this.props.onUpdate(filter);\n\t    }\n\t\n\t    /**\n\t     * Clear the filter object, querystring and input fields\n\t     */\n\t\n\t  }, {\n\t    key: 'clearFilter',\n\t    value: function clearFilter() {\n\t      this.queryString = QueryString.clear(this.props.Module);\n\t      this.props.onUpdate({});\n\t    }\n\t\n\t    /**\n\t     * Itterates through FilterForm children, sets necessary callback functions\n\t     * and initializes filterTable\n\t     *\n\t     * @return {Array} formChildren - array of children with necessary props\n\t     */\n\t\n\t  }, {\n\t    key: 'getFormChildren',\n\t    value: function getFormChildren() {\n\t      var formChildren = [];\n\t      React.Children.forEach(this.props.children, function (child, key) {\n\t        // If child is a React component (i.e not a simple DOM element)\n\t        if (React.isValidElement(child) && typeof child.type === \"function\" && child.props.onUserInput) {\n\t          var callbackFunc = child.props.onUserInput;\n\t          var callbackName = callbackFunc.name;\n\t          var elementName = child.type.displayName;\n\t          var queryFieldName = child.props.name === 'candID' ? 'candidateID' : child.props.name;\n\t          var filterValue = this.queryString[queryFieldName];\n\t          // If callback function was not set, set it to onElementUpdate() for form\n\t          // elements and to clearFilter() for <ButtonElement type='reset'/>.\n\t          if (callbackName === \"onUserInput\") {\n\t            if (elementName === \"ButtonElement\" && child.props.type === \"reset\") {\n\t              callbackFunc = this.clearFilter;\n\t            } else {\n\t              callbackFunc = this.onElementUpdate.bind(null, elementName);\n\t            }\n\t          }\n\t          // Pass onUserInput and value props to all children\n\t          formChildren.push(React.cloneElement(child, {\n\t            onUserInput: callbackFunc,\n\t            value: filterValue ? filterValue : '',\n\t            key: key\n\t          }));\n\t          // Initialize filter for StaticDataTable\n\t          this.setFilter(elementName, child.props.name, filterValue);\n\t        } else {\n\t          formChildren.push(React.cloneElement(child, { key: key }));\n\t        }\n\t      }.bind(this));\n\t\n\t      return formChildren;\n\t    }\n\t\n\t    /**\n\t     * Appends entry to filter object or deletes it if value is\n\t     * empty.\n\t     *\n\t     * Sets exactMatch to true for all SelectElements (i.e dropdowns)\n\t     * in order to force StaticDataTable to do exact comparaison\n\t     *\n\t     * @param {string} type - form element type (i.e component name)\n\t     * @param {string} key - the name of the form element\n\t     * @param {string} value - the value of the form element\n\t     *\n\t     * @return {{}} filter - filterData\n\t     */\n\t\n\t  }, {\n\t    key: 'setFilter',\n\t    value: function setFilter(type, key, value) {\n\t      var filter = {};\n\t      if (this.props.filter) {\n\t        filter = JSON.parse(JSON.stringify(this.props.filter));\n\t      }\n\t\n\t      if (key && value) {\n\t        filter[key] = {};\n\t        filter[key].value = value;\n\t        filter[key].exactMatch = type === \"SelectElement\";\n\t      } else if (filter && key && value === '') {\n\t        delete filter[key];\n\t      }\n\t\n\t      return filter;\n\t    }\n\t\n\t    /**\n\t     * Sets filter object and querystring to reflect values of input fields\n\t     *\n\t     * @param {string} type - form element type (i.e component name)\n\t     * @param {string} fieldName - the name of the form element\n\t     * @param {string} fieldValue - the value of the form element\n\t     */\n\t\n\t  }, {\n\t    key: 'onElementUpdate',\n\t    value: function onElementUpdate(type, fieldName, fieldValue) {\n\t      // Make sure both key/value are string before sending them to querystring\n\t      if (typeof fieldName !== \"string\" || typeof fieldValue !== \"string\") {\n\t        return;\n\t      }\n\t\n\t      // Update query string\n\t      var queryFieldName = fieldName === 'candID' ? 'candidateID' : fieldName;\n\t      this.queryString = QueryString.set(this.queryString, queryFieldName, fieldValue);\n\t\n\t      // Update filter and get new filter object\n\t      var filter = this.setFilter(type, fieldName, fieldValue);\n\t      this.props.onUpdate(filter);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Get formatted children\n\t      var formChildren = this.getFormChildren();\n\t      var formElements = this.props.formElements;\n\t\n\t      if (formElements) {\n\t        Object.keys(formElements).forEach(function (fieldName) {\n\t          var queryFieldName = fieldName === 'candID' ? 'candidateID' : fieldName;\n\t          formElements[fieldName].onUserInput = this.onElementUpdate.bind(null, fieldName);\n\t          formElements[fieldName].value = this.queryString[queryFieldName];\n\t        }.bind(this));\n\t      }\n\t\n\t      return React.createElement(\n\t        _Panel2.default,\n\t        {\n\t          id: this.props.id,\n\t          height: this.props.height,\n\t          title: this.props.title\n\t        },\n\t        React.createElement(\n\t          FormElement,\n\t          this.props,\n\t          formChildren\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return FilterForm;\n\t}(React.Component);\n\t\n\tFilterForm.defaultProps = {\n\t  id: 'selection-filter',\n\t  height: '100%',\n\t  title: 'Selection Filter',\n\t  onUpdate: function onUpdate() {\n\t    console.warn('onUpdate() callback is not set!');\n\t  }\n\t};\n\tFilterForm.propTypes = {\n\t  Module: React.PropTypes.string.isRequired,\n\t  filter: React.PropTypes.object.isRequired,\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  onUpdate: React.PropTypes.func\n\t};\n\t\n\texports.default = FilterForm;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Panel\n\t *\n\t * @author Alex I.\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Panel component\n\t * Wraps children in a collapsible bootstrap panel\n\t */\n\tvar Panel = function (_React$Component) {\n\t  _inherits(Panel, _React$Component);\n\t\n\t  function Panel(props) {\n\t    _classCallCheck(this, Panel);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).call(this, props));\n\t\n\t    _this.state = {\n\t      collapsed: _this.props.initCollapsed\n\t    };\n\t\n\t    // Initialize panel class based on collapsed status\n\t    _this.panelClass = _this.props.initCollapsed ? \"panel-collapse collapse\" : \"panel-collapse collapse in\";\n\t\n\t    _this.toggleCollapsed = _this.toggleCollapsed.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Panel, [{\n\t    key: \"toggleCollapsed\",\n\t    value: function toggleCollapsed() {\n\t      this.setState({ collapsed: !this.state.collapsed });\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      // Change arrow direction based on collapse status\n\t      var glyphClass = this.state.collapsed ? \"glyphicon pull-right glyphicon-chevron-down\" : \"glyphicon pull-right glyphicon-chevron-up\";\n\t\n\t      // Add panel header, if title is set\n\t      var panelHeading = this.props.title ? React.createElement(\n\t        \"div\",\n\t        {\n\t          className: \"panel-heading\",\n\t          onClick: this.toggleCollapsed,\n\t          \"data-toggle\": \"collapse\",\n\t          \"data-target\": '#' + this.props.id,\n\t          style: { cursor: 'pointer' }\n\t        },\n\t        this.props.title,\n\t        React.createElement(\"span\", { className: glyphClass })\n\t      ) : '';\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"panel panel-primary\" },\n\t        panelHeading,\n\t        React.createElement(\n\t          \"div\",\n\t          { id: this.props.id, className: this.panelClass, role: \"tabpanel\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"panel-body\", style: { height: this.props.height } },\n\t            this.props.children\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Panel;\n\t}(React.Component);\n\t\n\tPanel.propTypes = {\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string\n\t};\n\tPanel.defaultProps = {\n\t  initCollapsed: false,\n\t  id: 'default-panel',\n\t  height: '100%'\n\t};\n\t\n\texports.default = Panel;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _ProgressBar = __webpack_require__(4);\n\t\n\tvar _ProgressBar2 = _interopRequireDefault(_ProgressBar);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankSpecimenForm = function (_React$Component) {\n\t  _inherits(BiobankSpecimenForm, _React$Component);\n\t\n\t  function BiobankSpecimenForm(props) {\n\t    _classCallCheck(this, BiobankSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimenForm.__proto__ || Object.getPrototypeOf(BiobankSpecimenForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      Data: {},\n\t      formData: {},\n\t      currentSpecimenType: null,\n\t      specimenResult: null,\n\t      errorMessage: null,\n\t      isLoaded: false,\n\t      loadedData: 0,\n\t      specimenProgress: -1\n\t    };\n\t\n\t    //this.getValidFileName = this.getValidFileName.bind(this);\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    //this.isValidFileName = this.isValidFileName.bind(this);\n\t    _this.isValidForm = _this.isValidForm.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.getSpecimenTypeFields = _this.getSpecimenTypeFields.bind(_this);\n\t    _this.specimenSubmit = _this.specimenSubmit.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimenForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var self = this;\n\t      $.ajax(this.props.DataURL, {\n\t        dataType: 'json',\n\t        success: function success(data) {\n\t          self.setState({\n\t            Data: data,\n\t            isLoaded: true\n\t          });\n\t        },\n\t        error: function error(data, errorCode, errorMsg) {\n\t          console.error(data, errorCode, errorMsg);\n\t          self.setState({\n\t            error: 'An error occurred when loading the form!'\n\t          });\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Data loading error\n\t      if (this.state.error !== undefined) {\n\t        return React.createElement(\n\t          'div',\n\t          { className: 'alert alert-danger text-center' },\n\t          React.createElement(\n\t            'strong',\n\t            null,\n\t            this.state.error\n\t          )\n\t        );\n\t      }\n\t\n\t      // Waiting for data to load\n\t      if (!this.state.isLoaded) {\n\t        return React.createElement(\n\t          'button',\n\t          { className: 'btn-info has-spinner' },\n\t          'Loading',\n\t          React.createElement('span', {\n\t            className: 'glyphicon glyphicon-refresh glyphicon-refresh-animate' })\n\t        );\n\t      }\n\t\n\t      var specimenTypeFields = this.getSpecimenTypeFields();\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankSpecimen',\n\t          fileSpecimen: true,\n\t          onSubmit: this.handleSubmit,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(\n\t          'h3',\n\t          null,\n\t          'Add New Specimen'\n\t        ),\n\t        React.createElement('br', null),\n\t        React.createElement(SelectElement, {\n\t          name: 'pscid',\n\t          label: 'PSCID',\n\t          options: this.state.Data.PSCIDs,\n\t          onUserInput: this.setFormData,\n\t          ref: 'pscid',\n\t          hasError: false,\n\t          required: true,\n\t          value: this.state.formData.pscid\n\t        }),\n\t        React.createElement(SelectElement, {\n\t          name: 'visitLabel',\n\t          label: 'Visit Label',\n\t          options: this.state.Data.visits,\n\t          onUserInput: this.setFormData,\n\t          ref: 'visitLabel',\n\t          required: true,\n\t          value: this.state.formData.visitLabel\n\t        }),\n\t        React.createElement(SelectElement, {\n\t          name: 'forSite',\n\t          label: 'Site',\n\t          options: this.state.Data.sites,\n\t          onUserInput: this.setFormData,\n\t          ref: 'forSite',\n\t          required: true,\n\t          value: this.state.formData.forSite\n\t        }),\n\t        React.createElement(SelectElement, {\n\t          name: 'specimenType',\n\t          label: 'Specimen Type',\n\t          options: this.state.Data.specimenTypes,\n\t          onUserInput: this.setFormData,\n\t          ref: 'specimenType',\n\t          required: true,\n\t          value: this.state.formData.specimenType\n\t        }),\n\t        specimenTypeFields,\n\t        React.createElement(SelectElement, {\n\t          name: 'containerType',\n\t          label: 'Container Type',\n\t          options: this.state.Data.containerTypes,\n\t          onUserInput: this.setFormData,\n\t          ref: 'containerType',\n\t          required: true,\n\t          value: this.state.formData.containerType\n\t        }),\n\t        React.createElement(TextboxElement, {\n\t          name: 'barcode',\n\t          label: 'Barcode',\n\t          onUserInput: this.setFormData,\n\t          ref: 'barcode',\n\t          required: true,\n\t          value: this.state.formData.barcode\n\t        }),\n\t        React.createElement(TextboxElement, {\n\t          name: 'quantity',\n\t          label: 'Quantity',\n\t          onUserInput: this.setFormData,\n\t          ref: 'quantity',\n\t          required: true,\n\t          value: this.state.formData.quantity\n\t        }),\n\t        React.createElement(DateElement, {\n\t          name: 'timeCollect',\n\t          label: 'Collection Time',\n\t          minYear: '2000',\n\t          maxYear: '2017',\n\t          onUserInput: this.setFormData,\n\t          ref: 'timeCollect',\n\t          required: true,\n\t          value: this.state.formData.timeCollect\n\t        }),\n\t        React.createElement(TextareaElement, {\n\t          name: 'notes',\n\t          label: 'Notes',\n\t          onUserInput: this.setFormData,\n\t          ref: 'notes',\n\t          value: this.state.formData.notes\n\t        }),\n\t        React.createElement(ButtonElement, { label: 'Submit' }),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-sm-9 col-sm-offset-3' },\n\t            React.createElement(_ProgressBar2.default, { value: this.state.specimenProgress })\n\t          )\n\t        )\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t    /**\n\t     * Returns a valid name for the file to be specimened\n\t     *\n\t     * @param {string} pscid - PSCID selected from the dropdown\n\t     * @param {string} visitLabel - Visit label selected from the dropdown\n\t     * @param {string} instrument - Instrument selected from the dropdown\n\t     * @return {string} - Generated valid filename for the current selection\n\t     */\n\t    //  getValidFileName(pscid, visitLabel, instrument) {\n\t    //    var fileName = pscid + \"_\" + visitLabel;\n\t    //    if (instrument) fileName += \"_\" + instrument;\n\t    //\n\t    //    return fileName;\n\t    //  }\n\t\n\t    /**\n\t     * Handle form submission\n\t     * @param {object} e - Form submission event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      var formData = this.state.formData;\n\t      var formRefs = this.refs;\n\t      //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\t\n\t      // Validate the form\n\t      if (!this.isValidForm(formRefs, formData)) {\n\t        return;\n\t      }\n\t\n\t      //    // Validate specimened file name\n\t      //    let instrument = formData.instrument ? formData.instrument : null;\n\t      //    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n\t      //    let requiredFileName = this.getValidFileName(\n\t      //      formData.pscid, formData.visitLabel, instrument\n\t      //    );\n\t      //    if (!this.isValidFileName(requiredFileName, fileName)) {\n\t      //      swal(\n\t      //        \"Invalid Specimen name!\",\n\t      //        \"File name should begin with: \" + requiredFileName,\n\t      //        \"error\"\n\t      //      );\n\t      //      return;\n\t      //    }\n\t\n\t      // Check for duplicate file names\n\t      //    let isDuplicate = biobankFiles.indexOf(fileName);\n\t      //    if (isDuplicate >= 0) {\n\t      //      swal({\n\t      //        title: \"Are you sure?\",\n\t      //        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n\t      //        type: \"warning\",\n\t      //        showCancelButton: true,\n\t      //        confirmButtonText: 'Yes, I am sure!',\n\t      //        cancelButtonText: \"No, cancel it!\"\n\t      //      }, function(isConfirm) {\n\t      //        if (isConfirm) {\n\t      //          this.specimenFile();\n\t      //        } else {\n\t      //          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n\t      //        }\n\t      //      }.bind(this));\n\t      //    } else {\n\t      this.specimenSubmit();\n\t      //    }\n\t    }\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'specimenSubmit',\n\t    value: function specimenSubmit() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          //xhr.specimen.addEventListener(\"progress\", function(evt) {\n\t          //  if (evt.lengthComputable) {\n\t          //    let percentage = Math.round((evt.loaded / evt.total) * 100);\n\t          //    this.setState({specimenProgress: percentage});\n\t          //  }\n\t          //}.bind(this), false);\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          // Add git pfile to the list of exiting files\n\t          //let biobankFiles = JSON.parse(JSON.stringify(this.state.Data.biobankFiles));\n\t          //biobankFiles.push(formData.file.name);\n\t\n\t          // Trigger an update event to update all observers (i.e DataTable)\n\t          var event = new CustomEvent('update-datatable');\n\t          window.dispatchEvent(event);\n\t\n\t          this.setState({\n\t            //biobankFiles: biobankFiles,\n\t            formData: {}, // reset form data after successful file specimen\n\t            specimenProgress: -1\n\t          });\n\t          swal(\"Specimen Successful!\", \"\", \"success\");\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg,\n\t            specimenProgress: -1\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Checks if the inputted file name is valid\n\t     *\n\t     * @param {string} requiredFileName - Required file name\n\t     * @param {string} fileName - Provided file name\n\t     * @return {boolean} - true if fileName starts with requiredFileName, false\n\t     *   otherwise\n\t     */\n\t    //  isValidFileName(requiredFileName, fileName) {\n\t    //    if (fileName === null || requiredFileName === null) {\n\t    //      return false;\n\t    //    }\n\t    //\n\t    //    return (fileName.indexOf(requiredFileName) === 0);\n\t    //  }\n\t\n\t    /**\n\t     * Validate the form\n\t     *\n\t     * @param {object} formRefs - Object containing references to React form elements\n\t     * @param {object} formData - Object containing form data inputed by user\n\t     * @return {boolean} - true if all required fields are filled, false otherwise\n\t     */\n\t\n\t  }, {\n\t    key: 'isValidForm',\n\t    value: function isValidForm(formRefs, formData) {\n\t      var isValidForm = true;\n\t\n\t      var requiredFields = {\n\t        pscid: null,\n\t        visitLabel: null\n\t      };\n\t\n\t      Object.keys(requiredFields).map(function (field) {\n\t        if (formData[field]) {\n\t          requiredFields[field] = formData[field];\n\t        } else if (formRefs[field]) {\n\t          formRefs[field].props.hasError = true;\n\t          isValidForm = false;\n\t        }\n\t      });\n\t      this.forceUpdate();\n\t\n\t      return isValidForm;\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      // Only display visits and sites available for the current pscid\n\t      var visitLabel = this.state.formData.visitLabel;\n\t      var pscid = this.state.formData.pscid;\n\t\n\t      if (formElement === \"pscid\" && value !== \"\") {\n\t        this.state.Data.visits = this.state.Data.sessionData[this.state.Data.PSCIDs[value]].visits;\n\t        this.state.Data.sites = this.state.Data.sessionData[this.state.Data.PSCIDs[value]].sites;\n\t      }\n\t\n\t      if (formElement === \"specimenType\" && value !== \"\") {\n\t        this.setState({\n\t          currentSpecimenType: value\n\t        });\n\t      }\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t\n\t    // This generates all the form fields for a given specimen type\n\t\n\t  }, {\n\t    key: 'getSpecimenTypeFields',\n\t    value: function getSpecimenTypeFields() {\n\t      var _this2 = this;\n\t\n\t      if (this.state.currentSpecimenType) {\n\t        var specimenTypeFieldsObject = this.state.Data.specimenTypeAttributes[this.state.currentSpecimenType];\n\t        var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t          return React.createElement(TextboxElement, {\n\t            name: attribute,\n\t            label: attribute,\n\t            onUserInput: _this2.setFormData,\n\t            ref: attribute,\n\t            required: specimenTypeFieldsObject[attribute],\n\t            value: _this2.state.formData[attribute]\n\t          });\n\t        });\n\t\n\t        return specimenTypeFields;\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimenForm;\n\t}(React.Component);\n\t\n\tBiobankSpecimenForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired\n\t};\n\t\n\texports.default = BiobankSpecimenForm;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * React ProgressBar.\n\t *\n\t * Updates UI automatically when passed a progress value between 0 and 100.\n\t * To hide progress bar before/after upload, set value to -1.\n\t *\n\t * Note: This component relies on Bootstrap 3 progress-bar classes\n\t * (http://getbootstrap.com/components/#progress)\n\t */\n\tvar ProgressBar = function (_React$Component) {\n\t  _inherits(ProgressBar, _React$Component);\n\t\n\t  function ProgressBar() {\n\t    _classCallCheck(this, ProgressBar);\n\t\n\t    return _possibleConstructorReturn(this, (ProgressBar.__proto__ || Object.getPrototypeOf(ProgressBar)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(ProgressBar, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var progressStyle = {\n\t        display: this.props.value < 0 ? 'none' : 'block',\n\t        backgroundColor: '#d3d3d3',\n\t        height: '30px',\n\t        position: 'relative'\n\t      };\n\t\n\t      var labelStyle = {\n\t        position: 'absolute',\n\t        top: 0,\n\t        left: 0,\n\t        zIndex: 1000,\n\t        width: '100%',\n\t        color: '#fff',\n\t        textAlign: 'center',\n\t        lineHeight: '30px',\n\t        fontWeight: '600'\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { className: 'progress', style: progressStyle },\n\t        React.createElement('div', {\n\t          className: 'progress-bar progress-bar-striped active',\n\t          role: 'progressbar',\n\t          'aria-valuemin': '0',\n\t          'aria-valuemax': '100',\n\t          'aria-valuenow': this.props.value,\n\t          style: { width: this.props.value + '%' }\n\t        }),\n\t        React.createElement(\n\t          'span',\n\t          { style: labelStyle },\n\t          this.props.value,\n\t          '%'\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return ProgressBar;\n\t}(React.Component);\n\t\n\tProgressBar.propTypes = {\n\t  value: React.PropTypes.number\n\t};\n\tProgressBar.defaultProps = {\n\t  value: 0\n\t};\n\t\n\texports.default = ProgressBar;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Tabs component.\n\t *\n\t * @author Loris Team\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Tabs Component.\n\t * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n\t * and corresponding tab panes.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * 1. Define an array of tabs with IDs and labels\n\t *\n\t * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n\t *\n\t * 2. Pass tabList as <Tab> property and <TabPane> as child\n\t *  ```\n\t * <Tabs tabs={tabList} defaultTab=\"tab1\">\n\t *   <TabPane TabId={tabList[0].id}>\n\t *     // Tab content goes here\n\t *   </TabPane>\n\t * </Tabs>\n\t * ```\n\t * =================================================\n\t *\n\t */\n\tvar Tabs = function (_React$Component) {\n\t  _inherits(Tabs, _React$Component);\n\t\n\t  function Tabs(props) {\n\t    _classCallCheck(this, Tabs);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call(this, props));\n\t\n\t    var hash = window.location.hash;\n\t    var activeTab = \"\";\n\t\n\t    /**\n\t     * Determine the initial active tab in this order\n\t     * 1. Try to infer from the URL, otherwise\n\t     * 2. Try to infer from the defaultTab prop, otherwise\n\t     * 3. Set to be the first tab of the list\n\t     */\n\t    if (_this.props.updateURL && hash) {\n\t      activeTab = hash.substr(1);\n\t    } else if (_this.props.defaultTab) {\n\t      activeTab = _this.props.defaultTab;\n\t    } else if (_this.props.tabs.length > 0) {\n\t      activeTab = _this.props.tabs[0].id;\n\t    }\n\t\n\t    _this.state = {\n\t      activeTab: activeTab\n\t    };\n\t\n\t    _this.handleClick = _this.handleClick.bind(_this);\n\t    _this.getTabs = _this.getTabs.bind(_this);\n\t    _this.getTabPanes = _this.getTabPanes.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Tabs, [{\n\t    key: 'handleClick',\n\t    value: function handleClick(tabId, e) {\n\t      this.setState({ activeTab: tabId });\n\t      this.props.onTabChange(tabId);\n\t\n\t      // Add tab href to URL querystring and scroll the page to top\n\t      if (this.props.updateURL) {\n\t        var scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n\t        window.location.hash = e.target.hash;\n\t        $('html,body').scrollTop(scrollDistance);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getTabs',\n\t    value: function getTabs() {\n\t      var tabs = this.props.tabs.map(function (tab) {\n\t        var tabClass = this.state.activeTab === tab.id ? 'active' : null;\n\t        var href = \"#\" + tab.id;\n\t        var tabID = \"tab-\" + tab.id;\n\t        return React.createElement(\n\t          'li',\n\t          {\n\t            role: 'presentation',\n\t            className: tabClass,\n\t            key: tab.id\n\t          },\n\t          React.createElement(\n\t            'a',\n\t            { id: tabID,\n\t              href: href,\n\t              role: 'tab',\n\t              'data-toggle': 'tab',\n\t              onClick: this.handleClick.bind(null, tab.id)\n\t            },\n\t            tab.label\n\t          )\n\t        );\n\t      }.bind(this));\n\t\n\t      return tabs;\n\t    }\n\t  }, {\n\t    key: 'getTabPanes',\n\t    value: function getTabPanes() {\n\t      var tabPanes = React.Children.map(this.props.children, function (child, key) {\n\t        if (child) {\n\t          return React.cloneElement(child, {\n\t            activeTab: this.state.activeTab,\n\t            key: key\n\t          });\n\t        }\n\t      }.bind(this));\n\t\n\t      return tabPanes;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var tabs = this.getTabs();\n\t      var tabPanes = this.getTabPanes();\n\t      var tabStyle = {\n\t        marginLeft: 0,\n\t        marginBottom: '5px'\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'ul',\n\t          { className: 'nav nav-tabs', role: 'tablist', style: tabStyle },\n\t          tabs\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tab-content' },\n\t          tabPanes\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Tabs;\n\t}(React.Component);\n\t\n\tTabs.propTypes = {\n\t  tabs: React.PropTypes.array.isRequired,\n\t  defaultTab: React.PropTypes.string,\n\t  updateURL: React.PropTypes.bool\n\t};\n\tTabs.defaultProps = {\n\t  onTabChange: function onTabChange() {},\n\t  updateURL: false\n\t};\n\t\n\t/*\n\t * TabPane component.\n\t * Used to wrap content for every tab.\n\t */\n\t\n\tvar TabPane = function (_React$Component2) {\n\t  _inherits(TabPane, _React$Component2);\n\t\n\t  function TabPane() {\n\t    _classCallCheck(this, TabPane);\n\t\n\t    return _possibleConstructorReturn(this, (TabPane.__proto__ || Object.getPrototypeOf(TabPane)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(TabPane, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var classList = \"tab-pane\";\n\t      var title = void 0;\n\t\n\t      if (this.props.TabId === this.props.activeTab) {\n\t        classList += \" active\";\n\t      }\n\t      if (this.props.Title) {\n\t        title = React.createElement(\n\t          'h1',\n\t          null,\n\t          this.props.Title\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { role: 'tabpanel', className: classList, id: this.props.TabId },\n\t        title,\n\t        this.props.children\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return TabPane;\n\t}(React.Component);\n\t\n\tTabPane.propTypes = {\n\t  TabId: React.PropTypes.string.isRequired,\n\t  Title: React.PropTypes.string,\n\t  activeTab: React.PropTypes.string\n\t};\n\t\n\tvar Modal = function (_React$Component3) {\n\t  _inherits(Modal, _React$Component3);\n\t\n\t  function Modal() {\n\t    _classCallCheck(this, Modal);\n\t\n\t    return _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Modal, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      // Render nothing if the \"show\" prop is false\n\t      if (!this.props.show) {\n\t        return null;\n\t      }\n\t\n\t      // The gray background\n\t      var modalStyle = {\n\t        position: 'relative',\n\t        zIndex: 9999,\n\t        borderRadius: 10,\n\t        maxWidth: 1000,\n\t        minHeight: 300,\n\t        margin: '0 auto',\n\t        backgroundColor: '#fff',\n\t        padding: 30\n\t      };\n\t\n\t      var backdropStyle = {\n\t        position: 'fixed',\n\t        zIndex: 9998,\n\t        top: 0,\n\t        bottom: 0,\n\t        left: 0,\n\t        right: 0,\n\t        backgroundColor: 'rgba(0,0,0,0.3)',\n\t        padding: 50\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { style: backdropStyle, onClick: this.props.onClose },\n\t        React.createElement(\n\t          'div',\n\t          { style: modalStyle, onClick: function onClick(e) {\n\t              e.stopPropagation();\n\t            } },\n\t          this.props.children\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Modal;\n\t}(React.Component);\n\t\n\tModal.propTypes = {\n\t  onClose: React.PropTypes.func.isRequired,\n\t  show: React.PropTypes.bool,\n\t  children: React.PropTypes.node\n\t};\n\t\n\texports.Tabs = Tabs;\n\texports.TabPane = TabPane;\n\texports.Modal = Modal;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\n\t * Modify behaviour of specified column cells in the Data Table component\n\t * @param {string} column - column name\n\t * @param {string} cell - cell content\n\t * @param {arrray} rowData - array of cell contents for a specific row\n\t * @param {arrray} rowHeaders - array of table headers (column names)\n\t * @return {*} a formated table cell for a given column\n\t */\n\tfunction formatColumn(column, cell, rowData, rowHeaders) {\n\t  // If a column if set as hidden, don't display it\n\t  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n\t  //  return null;\n\t  //}\n\t\n\t  // Create the mapping between rowHeaders and rowData in a row object.\n\t  var row = {};\n\t  rowHeaders.forEach(function (header, index) {\n\t    row[header] = rowData[index];\n\t  }, this);\n\t\n\t  // create array of classes to be added to td tag\n\t  var classes = [];\n\t  if (row['Hide File'] === '1') {\n\t    classes.push(\"bg-danger\");\n\t  }\n\t  // convert array to string, with blank space separator\n\t  classes = classes.join(\" \");\n\t\n\t  //const hasWritePermission = loris.userHasPermission('media_read');\n\t  if (column === 'Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Barcode'];\n\t    return React.createElement(\n\t      'td',\n\t      { className: classes },\n\t      React.createElement(\n\t        'a',\n\t        { href: specimenURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Parent Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Parent Barcode'];\n\t    return React.createElement(\n\t      'td',\n\t      { className: classes },\n\t      React.createElement(\n\t        'a',\n\t        { href: specimenURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Container Barcode') {\n\t    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Container Barcode'];\n\t    return React.createElement(\n\t      'td',\n\t      { className: classes },\n\t      React.createElement(\n\t        'a',\n\t        { href: containerURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  // if (column === 'Visit Label') {\n\t  //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n\t  //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n\t  //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n\t  //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n\t  //   }\n\t  // }\n\t\n\t  // if (column === 'Edit Metadata') {\n\t  //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n\t  //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n\t  // }\n\t\n\t  return React.createElement(\n\t    'td',\n\t    { className: classes },\n\t    cell\n\t  );\n\t}\n\t\n\texports.default = formatColumn;\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// modules/biobank/js/biobankIndex.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 85b5ca1f23def5e48c45","import FilterForm from 'FilterForm';\nimport BiobankSpecimenForm from './specimenForm'\nimport {Tabs, TabPane, Modal} from 'Tabs';\n//import Modal from '../../../htdocs/js/components/Modal';\nimport formatColumn from './columnFormatter';\n\nclass BiobankIndex extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoaded: false,\n      filter: {},\n      isOpen: false,\n    };\n\n    // Bind component instance to custom methods\n    this.fetchData = this.fetchData.bind(this);\n    this.updateFilter = this.updateFilter.bind(this);\n    this.resetFilters = this.resetFilters.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  /**\n   * Retrieve data from the provided URL and save it in state\n   * Additionaly add hiddenHeaders to global loris vairable\n   * for easy access by columnFormatter.\n   */\n  fetchData() {\n    $.ajax(this.props.DataURL, {\n      method: \"GET\",\n      dataType: 'json',\n      success: function(data) {\n        this.setState({\n          Data: data,\n          isLoaded: true\n        });\n      }.bind(this),\n      error: function(error) {\n        console.error(error);\n      }\n    });\n  }\n\n  updateFilter(filter) {\n    this.setState({filter});\n  }\n\n  resetFilters() {\n    this.refs.biobankFilter.clearFilter();\n  }\n\n  toggleModal() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n\n  render() {\n    // Waiting for async data to load\n    if (!this.state.isLoaded) {\n      return (\n        <button className=\"btn-info has-spinner\">\n          Loading\n          <span\n            className=\"glyphicon glyphicon-refresh glyphicon-refresh-animate\">\n          </span>\n        </button>\n      );\n    }\n\n    let addSpecimenButton;\n    let specimenForm;\n    let tabList = [\n      {id: \"specimens\", label: \"Specimens\"},\n      {id: \"containers\", label: \"Containers\"}\n    ];\n\n    if (loris.userHasPermission('biobank_write')) {\n       addSpecimenButton = (\n         <ButtonElement onUserInput={this.toggleModal} label=\"Add New Specimen\" type=\"button\"/>\n       );\n       specimenForm = (\n         <Modal show={this.state.isOpen} onClose={this.toggleModal}>\n           <BiobankSpecimenForm\n             DataURL={`${loris.BaseURL}/biobank/ajax/FileUpload.php?action=getFormData`}\n             action={`${loris.BaseURL}/biobank/ajax/FileUpload.php?action=submitSpecimen`}\n           />\n         </Modal>\n       );\n     }\n    return (\n    <div>\n      <Tabs tabs={tabList} defaultTab=\"specimens\" updateURL={true}>\n        <TabPane TabId={tabList[0].id}>\n          <FilterForm\n            Module=\"biobank\"\n            name=\"specimen_filter\"\n            id=\"specimen_filter_form\"\n            ref=\"specimenFilter\"\n            columns={3}\n            formElements={this.state.Data.form}\n            onUpdate={this.updateFilter}\n            filter={this.state.filter}\n          >\n            <br/>\n          {addSpecimenButton}\n            <ButtonElement label=\"Clear Filters\" type=\"reset\" onUserInput={this.resetFilters}/>\n          </FilterForm>\n          <StaticDataTable\n            Data={this.state.Data.Data}\n            Headers={this.state.Data.Headers}\n            Filter={this.state.filter}\n            getFormattedCell={formatColumn}\n          />\n        </TabPane>\n        <TabPane TabId={tabList[1].id}>\n          <FilterForm\n            Module=\"biobank\"\n            name=\"container_filter\"\n            id=\"container_filter_form\"\n            ref=\"containerFilter\"\n            columns={3}\n            formElements={this.state.Data.form}\n            onUpdate={this.updateFilter}\n            filter={this.state.filter}\n\t\t  >\n            <br/>\n            <ButtonElement label=\"Clear Filters\" type=\"reset\" onUserInput={this.resetFilters}/>\n          </FilterForm>\t\t\t\n          <StaticDataTable\n            Data={this.state.Data.Data}\n            Headers={this.state.Data.Headers}\n            Filter={this.state.filter}\n            getFormattedCell={formatColumn}\n          />\n        </TabPane>\n      </Tabs>\n      {specimenForm}\n      </div>\n    );\n  }\n}\n\n$(function() {\n  const biobankIndex = (\n    <div className=\"page-biobank\">\n      <BiobankIndex DataURL={`${loris.BaseURL}/biobank/?format=json`} />\n    </div>\n  );\n\n  ReactDOM.render(biobankIndex, document.getElementById(\"lorisworkspace\"));\n});\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/biobankIndex.js","/**\n * This file contains React component for FilterForm\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\nimport Panel from 'Panel';\n\n/**\n * FilterForm component.\n * A wrapper for form elements inside a selection filter.\n *\n * Adds necessary filter callbacks to all children and passes them to FormElement\n * for proper rendering.\n *\n * Keeps track of filter object and sends it to parent on every update.\n *\n * //HACK/NOTE: Loris has special behaviour for `candID` attribute in the query string,\n * making it impossible to use it for selection filters. This components renames\n * all `candID` fields to `candidateID` automatically before appending them to URL.\n *\n */\nclass FilterForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    // Bind component instance to custom methods\n    this.clearFilter = this.clearFilter.bind(this);\n    this.getFormChildren = this.getFormChildren.bind(this);\n    this.setFilter = this.setFilter.bind(this);\n    this.onElementUpdate = this.onElementUpdate.bind(this);\n\n    // Keeps track of querystring values\n    // Saved as class variable instead of keeping in state\n    this.queryString = QueryString.get();\n  }\n\n  componentDidMount() {\n    let filter = {};\n    let queryString = this.queryString;\n\n    // Initiaze filter using querystring value\n    Object.keys(queryString).forEach(function(key) {\n      let filterKey = (key === 'candidateID') ? 'candID' : key;\n      filter[filterKey] = {\n        value: queryString[key],\n        exactMatch: false\n      };\n    });\n\n    // Update parent component\n    this.props.onUpdate(filter);\n  }\n\n  /**\n   * Clear the filter object, querystring and input fields\n   */\n  clearFilter() {\n    this.queryString = QueryString.clear(this.props.Module);\n    this.props.onUpdate({});\n  }\n\n  /**\n   * Itterates through FilterForm children, sets necessary callback functions\n   * and initializes filterTable\n   *\n   * @return {Array} formChildren - array of children with necessary props\n   */\n  getFormChildren() {\n    let formChildren = [];\n    React.Children.forEach(this.props.children, function(child, key) {\n      // If child is a React component (i.e not a simple DOM element)\n      if (React.isValidElement(child) &&\n        typeof child.type === \"function\" &&\n        child.props.onUserInput\n      ) {\n        let callbackFunc = child.props.onUserInput;\n        let callbackName = callbackFunc.name;\n        let elementName = child.type.displayName;\n        let queryFieldName = (child.props.name === 'candID') ? 'candidateID' : child.props.name;\n        let filterValue = this.queryString[queryFieldName];\n        // If callback function was not set, set it to onElementUpdate() for form\n        // elements and to clearFilter() for <ButtonElement type='reset'/>.\n        if (callbackName === \"onUserInput\") {\n          if (elementName === \"ButtonElement\" && child.props.type === \"reset\") {\n            callbackFunc = this.clearFilter;\n          } else {\n            callbackFunc = this.onElementUpdate.bind(null, elementName);\n          }\n        }\n        // Pass onUserInput and value props to all children\n        formChildren.push(React.cloneElement(child, {\n          onUserInput: callbackFunc,\n          value: filterValue ? filterValue : '',\n          key: key\n        }));\n        // Initialize filter for StaticDataTable\n        this.setFilter(elementName, child.props.name, filterValue);\n      } else {\n        formChildren.push(React.cloneElement(child, {key: key}));\n      }\n    }.bind(this));\n\n    return formChildren;\n  }\n\n  /**\n   * Appends entry to filter object or deletes it if value is\n   * empty.\n   *\n   * Sets exactMatch to true for all SelectElements (i.e dropdowns)\n   * in order to force StaticDataTable to do exact comparaison\n   *\n   * @param {string} type - form element type (i.e component name)\n   * @param {string} key - the name of the form element\n   * @param {string} value - the value of the form element\n   *\n   * @return {{}} filter - filterData\n   */\n  setFilter(type, key, value) {\n    let filter = {};\n    if (this.props.filter) {\n      filter = JSON.parse(JSON.stringify(this.props.filter));\n    }\n\n    if (key && value) {\n      filter[key] = {};\n      filter[key].value = value;\n      filter[key].exactMatch = (type === \"SelectElement\");\n    } else if (filter && key && value === '') {\n      delete filter[key];\n    }\n\n    return filter;\n  }\n\n  /**\n   * Sets filter object and querystring to reflect values of input fields\n   *\n   * @param {string} type - form element type (i.e component name)\n   * @param {string} fieldName - the name of the form element\n   * @param {string} fieldValue - the value of the form element\n   */\n  onElementUpdate(type, fieldName, fieldValue) {\n    // Make sure both key/value are string before sending them to querystring\n    if (typeof fieldName !== \"string\" || typeof fieldValue !== \"string\") {\n      return;\n    }\n\n    // Update query string\n    let queryFieldName = (fieldName === 'candID') ? 'candidateID' : fieldName;\n    this.queryString = QueryString.set(this.queryString, queryFieldName, fieldValue);\n\n    // Update filter and get new filter object\n    let filter = this.setFilter(type, fieldName, fieldValue);\n    this.props.onUpdate(filter);\n  }\n\n  render() {\n    // Get formatted children\n    let formChildren = this.getFormChildren();\n    let formElements = this.props.formElements;\n\n    if (formElements) {\n      Object.keys(formElements).forEach(function(fieldName) {\n        let queryFieldName = (fieldName === 'candID') ? 'candidateID' : fieldName;\n        formElements[fieldName].onUserInput = this.onElementUpdate.bind(null, fieldName);\n        formElements[fieldName].value = this.queryString[queryFieldName];\n      }.bind(this));\n    }\n\n    return (\n      <Panel\n        id={this.props.id}\n        height={this.props.height}\n        title={this.props.title}\n      >\n        <FormElement {...this.props}>\n          {formChildren}\n        </FormElement>\n      </Panel>\n    );\n  }\n}\n\nFilterForm.defaultProps = {\n  id: 'selection-filter',\n  height: '100%',\n  title: 'Selection Filter',\n  onUpdate: function() {\n    console.warn('onUpdate() callback is not set!');\n  }\n};\nFilterForm.propTypes = {\n  Module: React.PropTypes.string.isRequired,\n  filter: React.PropTypes.object.isRequired,\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  onUpdate: React.PropTypes.func\n};\n\nexport default FilterForm;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/FilterForm.js","/**\n * This file contains React component for Panel\n *\n * @author Alex I.\n * @version 1.0.0\n *\n */\n\n/**\n * Panel component\n * Wraps children in a collapsible bootstrap panel\n */\nclass Panel extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsed: this.props.initCollapsed\n    };\n\n    // Initialize panel class based on collapsed status\n    this.panelClass = (\n      this.props.initCollapsed ?\n        \"panel-collapse collapse\" :\n        \"panel-collapse collapse in\"\n    );\n\n    this.toggleCollapsed = this.toggleCollapsed.bind(this);\n  }\n\n  toggleCollapsed() {\n    this.setState({collapsed: !this.state.collapsed});\n  }\n\n  render() {\n    // Change arrow direction based on collapse status\n    let glyphClass = (\n      this.state.collapsed ?\n        \"glyphicon pull-right glyphicon-chevron-down\" :\n        \"glyphicon pull-right glyphicon-chevron-up\"\n    );\n\n    // Add panel header, if title is set\n    const panelHeading = this.props.title ? (\n      <div\n        className=\"panel-heading\"\n        onClick={this.toggleCollapsed}\n        data-toggle=\"collapse\"\n        data-target={'#' + this.props.id}\n        style={{cursor: 'pointer'}}\n      >\n        {this.props.title}\n        <span className={glyphClass}></span>\n      </div>\n    ) : '';\n\n    return (\n      <div className=\"panel panel-primary\">\n        {panelHeading}\n        <div id={this.props.id} className={this.panelClass} role=\"tabpanel\">\n          <div className=\"panel-body\" style={{height: this.props.height}}>\n            {this.props.children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPanel.propTypes = {\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string\n};\nPanel.defaultProps = {\n  initCollapsed: false,\n  id: 'default-panel',\n  height: '100%'\n};\n\nexport default Panel;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Panel.js","import ProgressBar from 'ProgressBar';\n\n/**\n * Biobank Specimen Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankSpecimenForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      Data: {},\n      formData: {},\n      currentSpecimenType: null,\n      specimenResult: null,\n      errorMessage: null,\n      isLoaded: false,\n      loadedData: 0,\n      specimenProgress: -1\n    };\n\n    //this.getValidFileName = this.getValidFileName.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    //this.isValidFileName = this.isValidFileName.bind(this);\n    this.isValidForm = this.isValidForm.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.getSpecimenTypeFields = this.getSpecimenTypeFields.bind(this);\n    this.specimenSubmit = this.specimenSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    var self = this;\n    $.ajax(this.props.DataURL, {\n      dataType: 'json',\n      success: function(data) {\n        self.setState({\n          Data: data,\n          isLoaded: true\n        });\n      },\n      error: function(data, errorCode, errorMsg) {\n        console.error(data, errorCode, errorMsg);\n        self.setState({\n          error: 'An error occurred when loading the form!'\n        });\n      }\n    });\n  }\n\n  render() {\n    // Data loading error\n    if (this.state.error !== undefined) {\n      return (\n        <div className=\"alert alert-danger text-center\">\n          <strong>\n            {this.state.error}\n          </strong>\n        </div>\n      );\n    }\n\n    // Waiting for data to load\n    if (!this.state.isLoaded) {\n      return (\n        <button className=\"btn-info has-spinner\">\n          Loading\n          <span\n            className=\"glyphicon glyphicon-refresh glyphicon-refresh-animate\">\n          </span>\n        </button>\n      );\n    }\n\n    var specimenTypeFields = this.getSpecimenTypeFields();\n\n    return (\n          <FormElement\n            name=\"biobankSpecimen\"\n            fileSpecimen={true}\n            onSubmit={this.handleSubmit}\n            ref=\"form\"\n          >\n            <h3>Add New Specimen</h3>\n            <br/>\n            <SelectElement\n              name=\"pscid\"\n              label=\"PSCID\"\n              options={this.state.Data.PSCIDs}\n              onUserInput={this.setFormData}\n              ref=\"pscid\"\n              hasError={false}\n              required={true}\n              value={this.state.formData.pscid}\n            />\n            <SelectElement\n              name=\"visitLabel\"\n              label=\"Visit Label\"\n              options={this.state.Data.visits}\n              onUserInput={this.setFormData}\n              ref=\"visitLabel\"\n              required={true}\n              value={this.state.formData.visitLabel}\n            />\n            <SelectElement\n              name=\"forSite\"\n              label=\"Site\"\n              options={this.state.Data.sites}\n              onUserInput={this.setFormData}\n              ref=\"forSite\"\n              required={true}\n              value={this.state.formData.forSite}\n            />\n            <SelectElement\n              name=\"specimenType\"\n              label=\"Specimen Type\"\n              options={this.state.Data.specimenTypes}\n              onUserInput={this.setFormData}\n              ref=\"specimenType\"\n              required={true}\n              value={this.state.formData.specimenType}\n            />\n            {specimenTypeFields}\n            <SelectElement\n              name=\"containerType\"\n              label=\"Container Type\"\n              options={this.state.Data.containerTypes}\n              onUserInput={this.setFormData}\n              ref=\"containerType\"\n              required={true}\n              value={this.state.formData.containerType}\n            />\n            <TextboxElement\n              name=\"barcode\"\n              label=\"Barcode\"\n              onUserInput={this.setFormData}\n              ref=\"barcode\"\n              required={true}\n              value={this.state.formData.barcode}\n            />\n            <TextboxElement\n              name=\"quantity\"\n              label=\"Quantity\"\n              onUserInput={this.setFormData}\n              ref=\"quantity\"\n              required={true}\n              value={this.state.formData.quantity}\n            />\n            <DateElement\n              name=\"timeCollect\"\n              label=\"Collection Time\"\n              minYear=\"2000\"\n              maxYear=\"2017\"\n              onUserInput={this.setFormData}\n              ref=\"timeCollect\"\n              required={true}\n              value={this.state.formData.timeCollect}\n            />\n            <TextareaElement\n              name=\"notes\"\n              label=\"Notes\"\n              onUserInput={this.setFormData}\n              ref=\"notes\"\n              value={this.state.formData.notes}\n            />\n            <ButtonElement label=\"Submit\"/>\n            {/*<ButtonElement label=\"Cancel\" type=\"button\" onUserInput={this.toggleModal}/>*/}\n            <div className=\"row\">\n              <div className=\"col-sm-9 col-sm-offset-3\">\n                <ProgressBar value={this.state.specimenProgress}/>\n              </div>\n            </div>\n          </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n  /**\n   * Returns a valid name for the file to be specimened\n   *\n   * @param {string} pscid - PSCID selected from the dropdown\n   * @param {string} visitLabel - Visit label selected from the dropdown\n   * @param {string} instrument - Instrument selected from the dropdown\n   * @return {string} - Generated valid filename for the current selection\n   */\n//  getValidFileName(pscid, visitLabel, instrument) {\n//    var fileName = pscid + \"_\" + visitLabel;\n//    if (instrument) fileName += \"_\" + instrument;\n//\n//    return fileName;\n//  }\n\n  /**\n   * Handle form submission\n   * @param {object} e - Form submission event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    let formData = this.state.formData;\n    let formRefs = this.refs;\n    //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\n    // Validate the form\n    if (!this.isValidForm(formRefs, formData)) {\n      return;\n    }\n\n//    // Validate specimened file name\n//    let instrument = formData.instrument ? formData.instrument : null;\n//    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n//    let requiredFileName = this.getValidFileName(\n//      formData.pscid, formData.visitLabel, instrument\n//    );\n//    if (!this.isValidFileName(requiredFileName, fileName)) {\n//      swal(\n//        \"Invalid Specimen name!\",\n//        \"File name should begin with: \" + requiredFileName,\n//        \"error\"\n//      );\n//      return;\n//    }\n\n    // Check for duplicate file names\n//    let isDuplicate = biobankFiles.indexOf(fileName);\n//    if (isDuplicate >= 0) {\n//      swal({\n//        title: \"Are you sure?\",\n//        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n//        type: \"warning\",\n//        showCancelButton: true,\n//        confirmButtonText: 'Yes, I am sure!',\n//        cancelButtonText: \"No, cancel it!\"\n//      }, function(isConfirm) {\n//        if (isConfirm) {\n//          this.specimenFile();\n//        } else {\n//          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n//        }\n//      }.bind(this));\n//    } else {\n      this.specimenSubmit();\n//    }\n  }\n\n  /*\n   * Uploads the file to the server\n   */\n  specimenSubmit() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        //xhr.specimen.addEventListener(\"progress\", function(evt) {\n        //  if (evt.lengthComputable) {\n        //    let percentage = Math.round((evt.loaded / evt.total) * 100);\n        //    this.setState({specimenProgress: percentage});\n        //  }\n        //}.bind(this), false);\n        return xhr;\n      }.bind(this),\n      success: function() {\n        // Add git pfile to the list of exiting files\n        //let biobankFiles = JSON.parse(JSON.stringify(this.state.Data.biobankFiles));\n        //biobankFiles.push(formData.file.name);\n\n        // Trigger an update event to update all observers (i.e DataTable)\n        let event = new CustomEvent('update-datatable');\n        window.dispatchEvent(event);\n\n        this.setState({\n          //biobankFiles: biobankFiles,\n          formData: {}, // reset form data after successful file specimen\n          specimenProgress: -1\n        });\n        swal(\"Specimen Successful!\", \"\", \"success\");\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n          specimenProgress: -1\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Checks if the inputted file name is valid\n   *\n   * @param {string} requiredFileName - Required file name\n   * @param {string} fileName - Provided file name\n   * @return {boolean} - true if fileName starts with requiredFileName, false\n   *   otherwise\n   */\n//  isValidFileName(requiredFileName, fileName) {\n//    if (fileName === null || requiredFileName === null) {\n//      return false;\n//    }\n//\n//    return (fileName.indexOf(requiredFileName) === 0);\n//  }\n\n  /**\n   * Validate the form\n   *\n   * @param {object} formRefs - Object containing references to React form elements\n   * @param {object} formData - Object containing form data inputed by user\n   * @return {boolean} - true if all required fields are filled, false otherwise\n   */\n  isValidForm(formRefs, formData) {\n    var isValidForm = true;\n\n    var requiredFields = {\n      pscid: null,\n      visitLabel: null,\n    };\n\n    Object.keys(requiredFields).map(function(field) {\n      if (formData[field]) {\n        requiredFields[field] = formData[field];\n      } else if (formRefs[field]) {\n        formRefs[field].props.hasError = true;\n        isValidForm = false;\n      }\n    });\n    this.forceUpdate();\n\n    return isValidForm;\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    // Only display visits and sites available for the current pscid\n    let visitLabel = this.state.formData.visitLabel;\n    let pscid = this.state.formData.pscid;\n   \n    if (formElement === \"pscid\" && value !== \"\") {\n      this.state.Data.visits = this.state.Data.sessionData[this.state.Data.PSCIDs[value]].visits;\n      this.state.Data.sites = this.state.Data.sessionData[this.state.Data.PSCIDs[value]].sites;\n    }\n\n    if (formElement === \"specimenType\" && value !== \"\") {\n      this.setState({\n        currentSpecimenType: value\n      });\n    } \n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  // This generates all the form fields for a given specimen type\n  getSpecimenTypeFields() {\n    if (this.state.currentSpecimenType) {\n      var specimenTypeFieldsObject = this.state.Data.specimenTypeAttributes[this.state.currentSpecimenType];\n      var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n        return (\n          <TextboxElement\n            name={attribute}\n            label={attribute} \n            onUserInput={this.setFormData}\n            ref={attribute}\n            required={specimenTypeFieldsObject[attribute]}\n            value={this.state.formData[attribute]}\n          />\n        );\n      })\n      \n      return specimenTypeFields;\n    }\n  }\n}\n\n\n  \n\nBiobankSpecimenForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired\n};\n\nexport default BiobankSpecimenForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenForm.js","/**\n * React ProgressBar.\n *\n * Updates UI automatically when passed a progress value between 0 and 100.\n * To hide progress bar before/after upload, set value to -1.\n *\n * Note: This component relies on Bootstrap 3 progress-bar classes\n * (http://getbootstrap.com/components/#progress)\n */\nclass ProgressBar extends React.Component {\n  render() {\n    const progressStyle = {\n      display: (this.props.value < 0 ? 'none' : 'block'),\n      backgroundColor: '#d3d3d3',\n      height: '30px',\n      position: 'relative'\n    };\n\n    const labelStyle = {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      zIndex: 1000,\n      width: '100%',\n      color: '#fff',\n      textAlign: 'center',\n      lineHeight: '30px',\n      fontWeight: '600'\n    };\n\n    return (\n      <div className=\"progress\" style={progressStyle}>\n        <div\n          className=\"progress-bar progress-bar-striped active\"\n          role=\"progressbar\"\n          aria-valuemin=\"0\"\n          aria-valuemax=\"100\"\n          aria-valuenow={this.props.value}\n          style={{width: (this.props.value + '%')}}\n        >\n        </div>\n        <span style={labelStyle}>{this.props.value}%</span>\n      </div>\n    );\n  }\n}\n\nProgressBar.propTypes = {\n  value: React.PropTypes.number\n};\nProgressBar.defaultProps = {\n  value: 0\n};\n\nexport default ProgressBar;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/ProgressBar.js","/**\n * This file contains React components for Tabs component.\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\n/**\n * Tabs Component.\n * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n * and corresponding tab panes.\n *\n * ================================================\n * Usage:\n *\n * 1. Define an array of tabs with IDs and labels\n *\n * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n *\n * 2. Pass tabList as <Tab> property and <TabPane> as child\n *  ```\n * <Tabs tabs={tabList} defaultTab=\"tab1\">\n *   <TabPane TabId={tabList[0].id}>\n *     // Tab content goes here\n *   </TabPane>\n * </Tabs>\n * ```\n * =================================================\n *\n */\nclass Tabs extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    const hash = window.location.hash;\n    let activeTab = \"\";\n\n    /**\n     * Determine the initial active tab in this order\n     * 1. Try to infer from the URL, otherwise\n     * 2. Try to infer from the defaultTab prop, otherwise\n     * 3. Set to be the first tab of the list\n     */\n    if (this.props.updateURL && hash) {\n      activeTab = hash.substr(1);\n    } else if (this.props.defaultTab) {\n      activeTab = this.props.defaultTab;\n    } else if (this.props.tabs.length > 0) {\n      activeTab = this.props.tabs[0].id;\n    }\n\n    this.state = {\n      activeTab: activeTab\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.getTabs = this.getTabs.bind(this);\n    this.getTabPanes = this.getTabPanes.bind(this);\n  }\n\n  handleClick(tabId, e) {\n    this.setState({activeTab: tabId});\n    this.props.onTabChange(tabId);\n\n    // Add tab href to URL querystring and scroll the page to top\n    if (this.props.updateURL) {\n      const scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n      window.location.hash = e.target.hash;\n      $('html,body').scrollTop(scrollDistance);\n    }\n  }\n\n  getTabs() {\n    let tabs = (this.props.tabs).map(function(tab) {\n      let tabClass = this.state.activeTab === tab.id ? 'active' : null;\n      let href = \"#\" + tab.id;\n      let tabID = \"tab-\" + tab.id;\n      return (\n        <li\n          role=\"presentation\"\n          className={tabClass}\n          key={tab.id}\n        >\n          <a id={tabID}\n             href={href}\n             role=\"tab\"\n             data-toggle=\"tab\"\n             onClick={this.handleClick.bind(null, tab.id)}\n          >\n            {tab.label}\n          </a>\n        </li>\n      );\n    }.bind(this));\n\n    return tabs;\n  }\n\n  getTabPanes() {\n    let tabPanes = React.Children.map(this.props.children, function(child, key) {\n      if (child) {\n        return React.cloneElement(child, {\n          activeTab: this.state.activeTab,\n          key: key\n        });\n      }\n    }.bind(this));\n\n    return tabPanes;\n  }\n\n  render() {\n    let tabs = this.getTabs();\n    let tabPanes = this.getTabPanes();\n    let tabStyle = {\n      marginLeft: 0,\n      marginBottom: '5px'\n    };\n\n    return (\n      <div>\n        <ul className=\"nav nav-tabs\" role=\"tablist\" style={tabStyle}>\n          {tabs}\n        </ul>\n        <div className=\"tab-content\">\n          {tabPanes}\n        </div>\n      </div>\n    );\n  }\n}\nTabs.propTypes = {\n  tabs: React.PropTypes.array.isRequired,\n  defaultTab: React.PropTypes.string,\n  updateURL: React.PropTypes.bool\n};\nTabs.defaultProps = {\n  onTabChange: function() {},\n  updateURL: false\n};\n\n/*\n * TabPane component.\n * Used to wrap content for every tab.\n */\nclass TabPane extends React.Component {\n  render() {\n    let classList = \"tab-pane\";\n    let title;\n\n    if (this.props.TabId === this.props.activeTab) {\n      classList += \" active\";\n    }\n    if (this.props.Title) {\n      title = <h1>{this.props.Title}</h1>;\n    }\n\n    return (\n      <div role=\"tabpanel\" className={classList} id={this.props.TabId}>\n        {title}\n        {this.props.children}\n      </div>\n    );\n  }\n}\nTabPane.propTypes = {\n  TabId: React.PropTypes.string.isRequired,\n  Title: React.PropTypes.string,\n  activeTab: React.PropTypes.string\n};\n\nclass Modal extends React.Component {\n\n  render() {\n    // Render nothing if the \"show\" prop is false\n    if(!this.props.show) {\n      return null;\n    }   \n\n    // The gray background\n    const modalStyle = { \n      position: 'relative',\n      zIndex: 9999,\n      borderRadius: 10,\n      maxWidth: 1000,        \n      minHeight: 300,\n      margin: '0 auto',\n      backgroundColor: '#fff',\n      padding: 30\n    };  \n\n    const backdropStyle = {\n      position: 'fixed',\n      zIndex: 9998,\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundColor: 'rgba(0,0,0,0.3)',\n      padding: 50\n    };\n\n    return (\n    <div style={backdropStyle} onClick={this.props.onClose}>\n      <div style={modalStyle} onClick={(e) => {e.stopPropagation()}}>\n        {this.props.children}\n      </div>\n    </div>\n    ); \n  }\n}\nModal.propTypes = { \n  onClose: React.PropTypes.func.isRequired,\n  show: React.PropTypes.bool,\n  children: React.PropTypes.node\n};\n\nexport {\n  Tabs,\n  TabPane,\n  Modal\n};\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Tabs.js","/**\n * Modify behaviour of specified column cells in the Data Table component\n * @param {string} column - column name\n * @param {string} cell - cell content\n * @param {arrray} rowData - array of cell contents for a specific row\n * @param {arrray} rowHeaders - array of table headers (column names)\n * @return {*} a formated table cell for a given column\n */\nfunction formatColumn(column, cell, rowData, rowHeaders) {\n  // If a column if set as hidden, don't display it\n  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n  //  return null;\n  //}\n\n  // Create the mapping between rowHeaders and rowData in a row object.\n  var row = {};\n  rowHeaders.forEach(function(header, index) {\n    row[header] = rowData[index];\n  }, this);\n\n  // create array of classes to be added to td tag\n  var classes = [];\n  if (row['Hide File'] === '1') {\n    classes.push(\"bg-danger\");\n  }\n  // convert array to string, with blank space separator\n  classes = classes.join(\" \");\n\n  //const hasWritePermission = loris.userHasPermission('media_read');\n  if (column === 'Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Barcode'];\n    return <td className= {classes}><a href={specimenURL}>{cell}</a></td>;\n  }\n\n  if (column === 'Parent Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Parent Barcode'];\n    return <td className= {classes}><a href={specimenURL}>{cell}</a></td>; \n}\n\n  if (column === 'Container Barcode') {\n    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Container Barcode'];\n    return <td className= {classes}><a href={containerURL}>{cell}</a></td>;\n}\n\n // if (column === 'Visit Label') {\n //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n //   }\n // }\n\n // if (column === 'Edit Metadata') {\n //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n // }\n\n  return <td className={classes}>{cell}</td>;\n}\n\nexport default formatColumn;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/columnFormatter.js"],"sourceRoot":""}