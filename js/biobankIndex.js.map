{"version":3,"sources":["webpack:///modules/biobank/js/biobankIndex.js","webpack:///webpack/bootstrap 4408ccbeb91cf7c794fc?9d57******","webpack:///./modules/biobank/jsx/biobankIndex.js","webpack:///./jsx/FilterForm.js","webpack:///./jsx/Panel.js","webpack:///./modules/biobank/jsx/specimenForm.js","webpack:///./modules/biobank/jsx/barcodeForm.js","webpack:///./modules/biobank/jsx/collectionForm.js","webpack:///./modules/biobank/jsx/containerForm.js","webpack:///./modules/biobank/jsx/containerBarcodeForm.js","webpack:///./jsx/Tabs.js","webpack:///./jsx/Modal.js","webpack:///./jsx/Loader.js","webpack:///./modules/biobank/jsx/columnFormatterSpecimen.js","webpack:///./modules/biobank/jsx/columnFormatterContainer.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","_FilterForm","_FilterForm2","_specimenForm","_specimenForm2","_containerForm","_containerForm2","_Tabs","_Modal","_Modal2","_Loader","_Loader2","_columnFormatterSpecimen","_columnFormatterSpecimen2","_columnFormatterContainer","_columnFormatterContainer2","BiobankIndex","_React$Component","this","_this","getPrototypeOf","state","isLoaded","specimenFilter","containerFilter","isOpen","fetchSpecimenData","bind","fetchFormData","fetchContainerData","updateSpecimenFilter","updateContainerFilter","resetFilters","mapFormOptions","$","ajax","specimenDataURL","method","dataType","success","data","setState","SpecimenData","error","console","containerDataURL","ContainerData","formDataURL","FormData","refs","biobankFilter","clearFilter","rawObject","targetAttribute","React","createElement","addSpecimenButton","addContainerButton","loris","userHasPermission","specimenTypes","containerTypesPrimary","containerBarcodesNonPrimary","containersNonPrimary","buttonContent","className","style","marginRight","title","buttonClass","buttonStyle","marginLeft","border","specimenTypeAttributes","attributeDatatypes","capacities","specimenTypeUnits","pSCIDs","visits","sessionData","action","BaseURL","refreshTable","containerTypesNonPrimary","sites","tabList","label","Tabs","tabs","defaultTab","updateURL","TabPane","TabId","Module","name","ref","columns","formElements","form","onUpdate","filter","ButtonElement","type","onUserInput","StaticDataTable","Data","Headers","Filter","getFormattedCell","Component","biobankIndex","ReactDOM","render","document","getElementById","_Panel","_Panel2","FilterForm","getFormChildren","setFilter","onElementUpdate","queryString","QueryString","get","keys","forEach","filterKey","exactMatch","clear","formChildren","Children","children","child","isValidElement","callbackFunc","callbackName","elementName","displayName","queryFieldName","filterValue","push","cloneElement","JSON","parse","stringify","fieldName","fieldValue","set","height","FormElement","defaultProps","warn","propTypes","PropTypes","string","isRequired","object","func","Panel","collapsed","initCollapsed","panelClass","toggleCollapsed","glyphClass","pencilGlyph","edit","cursor","onClick","plusGlyph","add","removeGlyph","cancel","panelHeading","data-toggle","data-target","role","_barcodeForm","_barcodeForm2","BiobankSpecimenForm","formData","barcodeFormList","errorMessage","formErrors","countBarcodeForms","handleSubmit","validateForm","setFormData","specimenSubmit","addBarcodeForm","setBarcodeFormData","specimenId","candidateId","sessionId","unitId","_this2","glyphStyle","color","margin","appearance","outline","boxShadow","borderColor","backgroundColor","barcodeForms","_loop","setParentFormData","units","button","removeBarcodeForm","globalFields","remainingQuantityFields","StaticElement","text","barcode","pscid","visit","TextboxElement","required","quantity","SelectElement","options","specimenUnits","emptyOption","visitLabel","disabled","onSubmit","formElement","_this3","test","isNaN","currentContainerType","specimenTypeFieldsObject","currentSpecimenType","map","attribute","datatype","e","preventDefault","formRefs","isValidForm","formObj","append","url","cache","contentType","processData","xhr","window","XMLHttpRequest","event","CustomEvent","dispatchEvent","swal","closeModal","err","msg","responseJSON","message","requiredFields","field","hasError","forceUpdate","barcodeFormData","barcodeId","index","splice","DataURL","_collectionForm","_collectionForm2","BiobankBarcodeForm","setSpecimenFormData","stati","specimenFormData","_defineProperty","SpecimenCollectionForm","specimenType","containerType","setSpecimenTypeFieldFormData","getSpecimenTypeFields","handleUpdate","updateSpecimen","containerId","collection","date","time","comments","parentContainerField","parentContainer","updateButton","unit","specimenTypeFields","specimenFields","DateElement","minYear","maxYear","TimeElement","TextareaElement","showCancelButton","confirmButtonText","cancelButtonText","isConfirm","toggleEdit","fieldsObject","attribte","_$$ajax","updateCollection","_containerBarcodeForm","_containerBarcodeForm2","BiobankContainerForm","containerSubmit","site","toggleModal","ContainerBarcodeForm","hash","location","activeTab","substr","handleClick","getTabs","getTabPanes","tabId","onTabChange","scrollDistance","scrollTop","tab","tabClass","href","tabID","tabPanes","tabStyle","marginBottom","array","bool","_React$Component2","apply","arguments","classList","Title","Modal","show","openModal","modal","backdropStyle","position","zIndex","top","bottom","left","right","padding","modalStyle","maxWidth","maxHeight","borderRadius","overflowY","titleStyle","display","flexDirection","alignItems","background","borderTopRightRadius","fontSize","bodyStyle","footerStyle","stopPropagation","Loader","formatColumn","column","cell","rowData","rowHeaders","row","header","classes","join","specimenURL","containerURL"],"mappings":"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","file":"./modules/biobank/js/biobankIndex.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _FilterForm = __webpack_require__(1);\n\t\n\tvar _FilterForm2 = _interopRequireDefault(_FilterForm);\n\t\n\tvar _specimenForm = __webpack_require__(3);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tvar _containerForm = __webpack_require__(6);\n\t\n\tvar _containerForm2 = _interopRequireDefault(_containerForm);\n\t\n\tvar _Tabs = __webpack_require__(8);\n\t\n\tvar _Modal = __webpack_require__(9);\n\t\n\tvar _Modal2 = _interopRequireDefault(_Modal);\n\t\n\tvar _Loader = __webpack_require__(10);\n\t\n\tvar _Loader2 = _interopRequireDefault(_Loader);\n\t\n\tvar _columnFormatterSpecimen = __webpack_require__(11);\n\t\n\tvar _columnFormatterSpecimen2 = _interopRequireDefault(_columnFormatterSpecimen);\n\t\n\tvar _columnFormatterContainer = __webpack_require__(12);\n\t\n\tvar _columnFormatterContainer2 = _interopRequireDefault(_columnFormatterContainer);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar BiobankIndex = function (_React$Component) {\n\t  _inherits(BiobankIndex, _React$Component);\n\t\n\t  function BiobankIndex(props) {\n\t    _classCallCheck(this, BiobankIndex);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankIndex.__proto__ || Object.getPrototypeOf(BiobankIndex)).call(this, props));\n\t\n\t    _this.state = {\n\t      isLoaded: false,\n\t      specimenFilter: {},\n\t      containerFilter: {},\n\t      isOpen: false\n\t    };\n\t\n\t    // Bind component instance to custom methods\n\t    _this.fetchSpecimenData = _this.fetchSpecimenData.bind(_this);\n\t    _this.fetchFormData = _this.fetchFormData.bind(_this);\n\t    _this.fetchContainerData = _this.fetchContainerData.bind(_this);\n\t    _this.updateSpecimenFilter = _this.updateSpecimenFilter.bind(_this);\n\t    _this.updateContainerFilter = _this.updateContainerFilter.bind(_this);\n\t    _this.resetFilters = _this.resetFilters.bind(_this);\n\t    _this.mapFormOptions = _this.mapFormOptions.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankIndex, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      this.fetchSpecimenData();\n\t      this.fetchFormData();\n\t      this.fetchContainerData();\n\t    }\n\t\n\t    /**\n\t     * Retrieve data from the provided URL and save it in state\n\t     * Additionaly add hiddenHeaders to global loris variable\n\t     * for easy access by columnFormatter.\n\t     */\n\t\n\t  }, {\n\t    key: 'fetchSpecimenData',\n\t    value: function fetchSpecimenData() {\n\t      $.ajax(this.props.specimenDataURL, {\n\t        method: \"GET\",\n\t        dataType: 'json',\n\t        success: function (data) {\n\t          this.setState({\n\t            SpecimenData: data,\n\t            isLoaded: true\n\t          });\n\t        }.bind(this),\n\t        error: function error(_error) {\n\t          console.error(_error);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'fetchContainerData',\n\t    value: function fetchContainerData() {\n\t      $.ajax(this.props.containerDataURL, {\n\t        method: \"GET\",\n\t        dataType: 'json',\n\t        success: function (data) {\n\t          this.setState({\n\t            ContainerData: data,\n\t            isLoaded: true\n\t          });\n\t        }.bind(this),\n\t        error: function error(_error2) {\n\t          console.error(_error2);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'fetchFormData',\n\t    value: function fetchFormData() {\n\t      $.ajax(this.props.formDataURL, {\n\t        method: \"GET\",\n\t        dataType: 'json',\n\t        success: function (data) {\n\t          this.setState({\n\t            FormData: data,\n\t            isLoaded: true\n\t          });\n\t        }.bind(this),\n\t        error: function error(_error3) {\n\t          console.error(_error3);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'updateSpecimenFilter',\n\t    value: function updateSpecimenFilter(specimenFilter) {\n\t      this.setState({ specimenFilter: specimenFilter });\n\t    }\n\t\n\t    // This works,\n\t    // but there must be a way to do this with just one updateFilter function\n\t\n\t  }, {\n\t    key: 'updateContainerFilter',\n\t    value: function updateContainerFilter(containerFilter) {\n\t      this.setState({ containerFilter: containerFilter });\n\t    }\n\t  }, {\n\t    key: 'resetFilters',\n\t    value: function resetFilters() {\n\t      this.refs.biobankFilter.clearFilter();\n\t    }\n\t\n\t    //map options for forms\n\t\n\t  }, {\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(rawObject, targetAttribute) {\n\t      var data = {};\n\t      for (var id in rawObject) {\n\t        data[id] = rawObject[id][targetAttribute];\n\t      }\n\t\n\t      return data;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Waiting for async data to load\n\t      if (!this.state.isLoaded) {\n\t        return React.createElement(_Loader2.default, null);\n\t      }\n\t\n\t      var addSpecimenButton = void 0;\n\t      var addContainerButton = void 0;\n\t      if (loris.userHasPermission('biobank_write')) {\n\t\n\t        /**\n\t         * Map Options for Form Select Elements of Specimen Form\n\t         */\n\t        var specimenTypes = this.mapFormOptions(this.state.FormData.specimenTypes, 'type');\n\t        var containerTypesPrimary = this.mapFormOptions(this.state.FormData.containerTypesPrimary, 'label');\n\t        var containerBarcodesNonPrimary = this.mapFormOptions(this.state.FormData.containersNonPrimary, 'barcode');\n\t\n\t        var buttonContent = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement('span', {\n\t            className: 'glyphicon glyphicon-plus',\n\t            style: { marginRight: '5px' }\n\t          }),\n\t          'Add Specimen'\n\t        );\n\t\n\t        addSpecimenButton = React.createElement(\n\t          _Modal2.default,\n\t          {\n\t            title: 'Add New Specimen',\n\t            buttonClass: 'btn btn-success',\n\t            buttonStyle: { marginLeft: '10px', border: 'none' },\n\t            buttonContent: buttonContent\n\t          },\n\t          React.createElement(_specimenForm2.default, {\n\t            specimenTypes: specimenTypes,\n\t            containerTypesPrimary: containerTypesPrimary,\n\t            containerBarcodesNonPrimary: containerBarcodesNonPrimary,\n\t            specimenTypeAttributes: this.state.FormData.specimenTypeAttributes,\n\t            attributeDatatypes: this.state.FormData.attributeDatatypes,\n\t            capacities: this.state.FormData.capacities,\n\t            specimenTypeUnits: this.state.FormData.specimenTypeUnits,\n\t            pSCIDs: this.state.FormData.pSCIDs,\n\t            visits: this.state.FormData.visits,\n\t            sessionData: this.state.FormData.sessionData,\n\t            action: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=submitSpecimen',\n\t            refreshTable: this.fetchSpecimenData\n\t          })\n\t        );\n\t\n\t        var containerTypesNonPrimary = this.mapFormOptions(this.state.FormData.containerTypesNonPrimary, 'label');\n\t\n\t        addContainerButton = React.createElement(\n\t          _Modal2.default,\n\t          {\n\t            title: 'Add New Container',\n\t            buttonClass: 'btn btn-success',\n\t            buttonStyle: { marginLeft: '10px', border: 'none' }\n\t          },\n\t          React.createElement(_containerForm2.default, {\n\t            containerTypesNonPrimary: containerTypesNonPrimary,\n\t            sites: this.state.FormData.sites,\n\t            action: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=submitContainer',\n\t            refreshTable: this.fetchContainerData\n\t          })\n\t        );\n\t      }\n\t\n\t      //Look at CCNA code from Zaliqa to modify this to be more streamline\n\t      var tabList = [{ id: \"specimens\", label: \"Specimens\" }, { id: \"containers\", label: \"Containers\" }];\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { id: 'biobank-page' },\n\t        React.createElement(\n\t          _Tabs.Tabs,\n\t          { tabs: tabList, defaultTab: 'specimens', updateURL: true },\n\t          React.createElement(\n\t            _Tabs.TabPane,\n\t            { TabId: tabList[0].id },\n\t            React.createElement(\n\t              _FilterForm2.default,\n\t              {\n\t                Module: 'biobank',\n\t                name: 'specimen_filter',\n\t                id: 'specimen_filter',\n\t                ref: 'specimenFilter',\n\t                columns: 3,\n\t                formElements: this.state.SpecimenData.form,\n\t                onUpdate: this.updateSpecimenFilter,\n\t                filter: this.state.specimenFilter\n\t              },\n\t              React.createElement('br', null),\n\t              React.createElement(ButtonElement, { label: 'Clear Filters', type: 'reset', onUserInput: this.resetFilters }),\n\t              addSpecimenButton\n\t            ),\n\t            React.createElement(StaticDataTable, {\n\t              Data: this.state.SpecimenData.Data,\n\t              Headers: this.state.SpecimenData.Headers,\n\t              Filter: this.state.specimenFilter,\n\t              getFormattedCell: _columnFormatterSpecimen2.default\n\t            })\n\t          ),\n\t          React.createElement(\n\t            _Tabs.TabPane,\n\t            { TabId: tabList[1].id },\n\t            React.createElement(\n\t              _FilterForm2.default,\n\t              {\n\t                Module: 'biobank',\n\t                name: 'container_filter',\n\t                id: 'container_filter',\n\t                ref: 'containerFilter',\n\t                columns: 3,\n\t                formElements: this.state.ContainerData.form,\n\t                onUpdate: this.updateContainerFilter,\n\t                filter: this.state.containerFilter\n\t              },\n\t              React.createElement('br', null),\n\t              React.createElement(ButtonElement, { label: 'Clear Filters', type: 'reset', onUserInput: this.resetFilters }),\n\t              addContainerButton\n\t            ),\n\t            React.createElement(StaticDataTable, {\n\t              Data: this.state.ContainerData.Data,\n\t              Headers: this.state.ContainerData.Headers,\n\t              Filter: this.state.containerFilter,\n\t              getFormattedCell: _columnFormatterContainer2.default\n\t            })\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return BiobankIndex;\n\t}(React.Component);\n\t\n\t$(function () {\n\t  var biobankIndex = React.createElement(\n\t    'div',\n\t    { className: 'page-biobank' },\n\t    React.createElement(BiobankIndex, {\n\t      specimenDataURL: loris.BaseURL + '/biobank/?format=json',\n\t      containerDataURL: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=getContainerFilterData',\n\t      formDataURL: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=getFormData'\n\t    })\n\t  );\n\t\n\t  ReactDOM.render(biobankIndex, document.getElementById(\"lorisworkspace\"));\n\t});\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Panel = __webpack_require__(2);\n\t\n\tvar _Panel2 = _interopRequireDefault(_Panel);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file contains React component for FilterForm\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Loris Team\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.1.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/**\n\t * FilterForm component.\n\t * A wrapper for form elements inside a selection filter.\n\t *\n\t * Adds necessary filter callbacks to all children and passes them to FormElement\n\t * for proper rendering.\n\t *\n\t * Keeps track of filter object and sends it to parent on every update.\n\t *\n\t * //HACK/NOTE: Loris has special behaviour for `candID` attribute in the query string,\n\t * making it impossible to use it for selection filters. This components renames\n\t * all `candID` fields to `candidateID` automatically before appending them to URL.\n\t *\n\t */\n\tvar FilterForm = function (_React$Component) {\n\t  _inherits(FilterForm, _React$Component);\n\t\n\t  function FilterForm(props) {\n\t    _classCallCheck(this, FilterForm);\n\t\n\t    // Bind component instance to custom methods\n\t    var _this = _possibleConstructorReturn(this, (FilterForm.__proto__ || Object.getPrototypeOf(FilterForm)).call(this, props));\n\t\n\t    _this.clearFilter = _this.clearFilter.bind(_this);\n\t    _this.getFormChildren = _this.getFormChildren.bind(_this);\n\t    _this.setFilter = _this.setFilter.bind(_this);\n\t    _this.onElementUpdate = _this.onElementUpdate.bind(_this);\n\t\n\t    // Keeps track of querystring values\n\t    // Saved as class variable instead of keeping in state\n\t    _this.queryString = QueryString.get();\n\t    return _this;\n\t  }\n\t\n\t  _createClass(FilterForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var filter = {};\n\t      var queryString = this.queryString;\n\t\n\t      // Initiaze filter using querystring value\n\t      Object.keys(queryString).forEach(function (key) {\n\t        var filterKey = key === 'candidateID' ? 'candID' : key;\n\t        filter[filterKey] = {\n\t          value: queryString[key],\n\t          exactMatch: false\n\t        };\n\t      });\n\t\n\t      // Update parent component\n\t      this.props.onUpdate(filter);\n\t    }\n\t\n\t    /**\n\t     * Clear the filter object, querystring and input fields\n\t     */\n\t\n\t  }, {\n\t    key: 'clearFilter',\n\t    value: function clearFilter() {\n\t      this.queryString = QueryString.clear(this.props.Module);\n\t      this.props.onUpdate({});\n\t    }\n\t\n\t    /**\n\t     * Itterates through FilterForm children, sets necessary callback functions\n\t     * and initializes filterTable\n\t     *\n\t     * @return {Array} formChildren - array of children with necessary props\n\t     */\n\t\n\t  }, {\n\t    key: 'getFormChildren',\n\t    value: function getFormChildren() {\n\t      var formChildren = [];\n\t      React.Children.forEach(this.props.children, function (child, key) {\n\t        // If child is a React component (i.e not a simple DOM element)\n\t        if (React.isValidElement(child) && typeof child.type === \"function\" && child.props.onUserInput) {\n\t          var callbackFunc = child.props.onUserInput;\n\t          var callbackName = callbackFunc.name;\n\t          var elementName = child.type.displayName;\n\t          var queryFieldName = child.props.name === 'candID' ? 'candidateID' : child.props.name;\n\t          var filterValue = this.queryString[queryFieldName];\n\t          // If callback function was not set, set it to onElementUpdate() for form\n\t          // elements and to clearFilter() for <ButtonElement type='reset'/>.\n\t          if (callbackName === \"onUserInput\") {\n\t            if (elementName === \"ButtonElement\" && child.props.type === \"reset\") {\n\t              callbackFunc = this.clearFilter;\n\t            } else {\n\t              callbackFunc = this.onElementUpdate.bind(null, elementName);\n\t            }\n\t          }\n\t          // Pass onUserInput and value props to all children\n\t          formChildren.push(React.cloneElement(child, {\n\t            onUserInput: callbackFunc,\n\t            value: filterValue ? filterValue : '',\n\t            key: key\n\t          }));\n\t          // Initialize filter for StaticDataTable\n\t          this.setFilter(elementName, child.props.name, filterValue);\n\t        } else {\n\t          formChildren.push(React.cloneElement(child, { key: key }));\n\t        }\n\t      }.bind(this));\n\t\n\t      return formChildren;\n\t    }\n\t\n\t    /**\n\t     * Appends entry to filter object or deletes it if value is\n\t     * empty.\n\t     *\n\t     * Sets exactMatch to true for all SelectElements (i.e dropdowns)\n\t     * in order to force StaticDataTable to do exact comparaison\n\t     *\n\t     * @param {string} type - form element type (i.e component name)\n\t     * @param {string} key - the name of the form element\n\t     * @param {string} value - the value of the form element\n\t     *\n\t     * @return {{}} filter - filterData\n\t     */\n\t\n\t  }, {\n\t    key: 'setFilter',\n\t    value: function setFilter(type, key, value) {\n\t      var filter = {};\n\t      if (this.props.filter) {\n\t        filter = JSON.parse(JSON.stringify(this.props.filter));\n\t      }\n\t\n\t      if (key && value) {\n\t        filter[key] = {};\n\t        filter[key].value = value;\n\t        filter[key].exactMatch = type === \"SelectElement\";\n\t      } else if (filter && key && value === '') {\n\t        delete filter[key];\n\t      }\n\t\n\t      return filter;\n\t    }\n\t\n\t    /**\n\t     * Sets filter object and querystring to reflect values of input fields\n\t     *\n\t     * @param {string} type - form element type (i.e component name)\n\t     * @param {string} fieldName - the name of the form element\n\t     * @param {string} fieldValue - the value of the form element\n\t     */\n\t\n\t  }, {\n\t    key: 'onElementUpdate',\n\t    value: function onElementUpdate(type, fieldName, fieldValue) {\n\t      // Make sure both key/value are string before sending them to querystring\n\t      if (typeof fieldName !== \"string\" || typeof fieldValue !== \"string\") {\n\t        return;\n\t      }\n\t\n\t      // Update query string\n\t      var queryFieldName = fieldName === 'candID' ? 'candidateID' : fieldName;\n\t      this.queryString = QueryString.set(this.queryString, queryFieldName, fieldValue);\n\t\n\t      // Update filter and get new filter object\n\t      var filter = this.setFilter(type, fieldName, fieldValue);\n\t      this.props.onUpdate(filter);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Get formatted children\n\t      var formChildren = this.getFormChildren();\n\t      var formElements = this.props.formElements;\n\t\n\t      if (formElements) {\n\t        Object.keys(formElements).forEach(function (fieldName) {\n\t          var queryFieldName = fieldName === 'candID' ? 'candidateID' : fieldName;\n\t          formElements[fieldName].onUserInput = this.onElementUpdate.bind(null, fieldName);\n\t          formElements[fieldName].value = this.queryString[queryFieldName];\n\t        }.bind(this));\n\t      }\n\t\n\t      return React.createElement(\n\t        _Panel2.default,\n\t        {\n\t          id: this.props.id,\n\t          height: this.props.height,\n\t          title: this.props.title\n\t        },\n\t        React.createElement(\n\t          FormElement,\n\t          this.props,\n\t          formChildren\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return FilterForm;\n\t}(React.Component);\n\t\n\tFilterForm.defaultProps = {\n\t  id: 'selection-filter',\n\t  height: '100%',\n\t  title: 'Selection Filter',\n\t  onUpdate: function onUpdate() {\n\t    console.warn('onUpdate() callback is not set!');\n\t  }\n\t};\n\tFilterForm.propTypes = {\n\t  Module: React.PropTypes.string.isRequired,\n\t  filter: React.PropTypes.object.isRequired,\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  onUpdate: React.PropTypes.func\n\t};\n\t\n\texports.default = FilterForm;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Panel\n\t *\n\t * @author Alex I.\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Panel component\n\t * Wraps children in a collapsible bootstrap panel\n\t */\n\tvar Panel = function (_React$Component) {\n\t  _inherits(Panel, _React$Component);\n\t\n\t  function Panel(props) {\n\t    _classCallCheck(this, Panel);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).call(this, props));\n\t\n\t    _this.state = {\n\t      collapsed: _this.props.initCollapsed\n\t    };\n\t\n\t    // Initialize panel class based on collapsed status\n\t    _this.panelClass = _this.props.initCollapsed ? \"panel-collapse collapse\" : \"panel-collapse collapse in\";\n\t\n\t    _this.toggleCollapsed = _this.toggleCollapsed.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Panel, [{\n\t    key: \"toggleCollapsed\",\n\t    value: function toggleCollapsed() {\n\t      this.setState({ collapsed: !this.state.collapsed });\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      // Change arrow direction based on collapse status\n\t      var glyphClass = this.state.collapsed ? \"glyphicon pull-right glyphicon-chevron-down\" : \"glyphicon pull-right glyphicon-chevron-up\";\n\t\n\t      var pencilGlyph = void 0;\n\t      if (this.props.edit) {\n\t        pencilGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-pencil\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.edit\n\t        });\n\t      }\n\t\n\t      var plusGlyph = void 0;\n\t      if (this.props.add) {\n\t        plusGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-plus\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.add\n\t        });\n\t      }\n\t\n\t      var removeGlyph = void 0;\n\t      if (this.props.cancel) {\n\t        removeGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-remove\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.cancel\n\t        });\n\t      }\n\t\n\t      // Add panel header, if title is set\n\t      var panelHeading = this.props.title ? React.createElement(\n\t        \"div\",\n\t        {\n\t          className: \"panel-heading\"\n\t        },\n\t        React.createElement(\"span\", {\n\t          className: glyphClass,\n\t          onClick: this.toggleCollapsed,\n\t          \"data-toggle\": \"collapse\",\n\t          \"data-target\": '#' + this.props.id,\n\t          style: { cursor: 'pointer' }\n\t        }),\n\t        pencilGlyph,\n\t        plusGlyph,\n\t        removeGlyph,\n\t        this.props.title\n\t      ) : '';\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"panel panel-primary\" },\n\t        panelHeading,\n\t        React.createElement(\n\t          \"div\",\n\t          { id: this.props.id, className: this.panelClass, role: \"tabpanel\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"panel-body\", style: { height: this.props.height } },\n\t            this.props.children\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Panel;\n\t}(React.Component);\n\t\n\tPanel.propTypes = {\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  edit: React.PropTypes.func,\n\t  add: React.PropTypes.func\n\t};\n\tPanel.defaultProps = {\n\t  initCollapsed: false,\n\t  id: 'default-panel',\n\t  height: '100%'\n\t};\n\t\n\texports.default = Panel;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _barcodeForm = __webpack_require__(4);\n\t\n\tvar _barcodeForm2 = _interopRequireDefault(_barcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankSpecimenForm = function (_React$Component) {\n\t  _inherits(BiobankSpecimenForm, _React$Component);\n\t\n\t  function BiobankSpecimenForm(props) {\n\t    _classCallCheck(this, BiobankSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimenForm.__proto__ || Object.getPrototypeOf(BiobankSpecimenForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      barcodeFormList: {},\n\t      errorMessage: null,\n\t      formErrors: {},\n\t      countBarcodeForms: [1]\n\t    };\n\t\n\t    //this.getValidFileName = this.getValidFileName.bind(this);\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    //this.isValidFileName = this.isValidFileName.bind(this);\n\t    _this.validateForm = _this.validateForm.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.specimenSubmit = _this.specimenSubmit.bind(_this);\n\t    _this.addBarcodeForm = _this.addBarcodeForm.bind(_this);\n\t    _this.setBarcodeFormData = _this.setBarcodeFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimenForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t\n\t      //if this is a child specimen form then certain formData is set when component mounts\n\t      if (this.props.child) {\n\t        var formData = this.state.formData;\n\t        formData['parentSpecimen'] = this.props.specimenId;\n\t        formData['pscid'] = this.props.candidateId;\n\t        formData['visitLabel'] = this.props.sessionId;\n\t        formData['unitId'] = this.props.unitId;\n\t\n\t        this.setState({\n\t          formData: formData\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      //Styling for remove Barcode button\n\t      var glyphStyle = {\n\t        color: '#D3D3D3',\n\t        margin: 'auto'\n\t      };\n\t      var buttonStyle = {\n\t        appearance: 'none',\n\t        outline: 'none',\n\t        boxShadow: 'none',\n\t        borderColor: 'transparent',\n\t        backgroundColor: 'transparent'\n\t\n\t      };\n\t\n\t      //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n\t      var barcodeForms = [];\n\t\n\t      var _loop = function _loop(i) {\n\t        barcodeForms.push(React.createElement(_barcodeForm2.default, {\n\t          setParentFormData: _this2.setBarcodeFormData,\n\t          id: _this2.state.countBarcodeForms[i],\n\t          specimenTypes: _this2.props.specimenTypes,\n\t          containerTypesPrimary: _this2.props.containerTypesPrimary,\n\t          containerBarcodesNonPrimary: _this2.props.containerBarcodesNonPrimary,\n\t          specimenTypeAttributes: _this2.props.specimenTypeAttributes,\n\t          attributeDatatypes: _this2.props.attributeDatatypes,\n\t          capacities: _this2.props.capacities,\n\t          specimenTypeUnits: _this2.props.specimenTypeUnits,\n\t          units: _this2.props.units,\n\t          button: i + 1 === _this2.state.countBarcodeForms.length ? React.createElement(\n\t            'button',\n\t            {\n\t              type: 'button',\n\t              className: 'btn btn-success btn-sm',\n\t              onClick: _this2.addBarcodeForm\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-plus' })\n\t          ) : React.createElement(\n\t            'button',\n\t            {\n\t              type: 'button',\n\t              className: 'btn btn-primary-outline btn-sm',\n\t              style: buttonStyle,\n\t              onClick: function onClick() {\n\t                return _this2.removeBarcodeForm(i);\n\t              }\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-remove', style: glyphStyle })\n\t          )\n\t        }));\n\t      };\n\t\n\t      for (var i = 0; i < this.state.countBarcodeForms.length; i++) {\n\t        _loop(i);\n\t      }\n\t\n\t      var globalFields = void 0;\n\t      var remainingQuantityFields = void 0;\n\t      if (this.props.child) {\n\t        globalFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(StaticElement, {\n\t            label: 'Parent Specimen',\n\t            text: this.props.barcode\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'PSCID',\n\t            text: this.props.pscid\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Visit Label',\n\t            text: this.props.visit\n\t          })\n\t        );\n\t\n\t        //It may be wise to make unit static and forced, or atleast prepopulated --\n\t        remainingQuantityFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Remaining Quantity',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: this.props.specimenUnits,\n\t            onUserInput: this.setFormData,\n\t            emptyOption: false,\n\t            required: true,\n\t            value: this.state.formData.unitId\n\t          })\n\t        );\n\t      } else {\n\t        globalFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'pscid',\n\t            label: 'PSCID',\n\t            options: this.props.pSCIDs,\n\t            onUserInput: this.setFormData,\n\t            ref: 'pscid',\n\t            required: true,\n\t            value: this.state.formData.pscid\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'visitLabel',\n\t            label: 'Visit Label',\n\t            options: this.state.visits,\n\t            onUserInput: this.setFormData,\n\t            ref: 'visitLabel',\n\t            required: true,\n\t            value: this.state.formData.visitLabel,\n\t            disabled: this.state.formData.pscid ? false : true\n\t          })\n\t        );\n\t      }\n\t\n\t      //ALLOW THEM TO CANCEL THE FORM AND DELETE BARCODE FORMS\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenForm',\n\t          id: 'specimenForm',\n\t          onSubmit: this.handleSubmit,\n\t          ref: 'form'\n\t        },\n\t        React.createElement('br', null),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            globalFields\n\t          )\n\t        ),\n\t        barcodeForms,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            remainingQuantityFields\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-xs-3 col-xs-offset-9' },\n\t          React.createElement(ButtonElement, { label: 'Submit' })\n\t        )\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t    /**\n\t     * Returns a valid name for the file to be specimened\n\t     *\n\t     * @param {string} pscid - PSCID selected from the dropdown\n\t     * @param {string} visitLabel - Visit label selected from the dropdown\n\t     * @param {string} instrument - Instrument selected from the dropdown\n\t     * @return {string} - Generated valid filename for the current selection\n\t     */\n\t    //  getValidFileName(pscid, visitLabel, instrument) {\n\t    //    var fileName = pscid + \"_\" + visitLabel;\n\t    //    if (instrument) fileName += \"_\" + instrument;\n\t    //\n\t    //    return fileName;\n\t    //  }\n\t\n\t\n\t  }, {\n\t    key: 'validateForm',\n\t    value: function validateForm(formElement, value) {\n\t      var _this3 = this;\n\t\n\t      var formErrors = this.state.formErrors;\n\t\n\t      //validate barcode regex\n\t      if (formElement === \"barcode\" && value !== \"\") {\n\t        if (!/^hello/.test(this.state.formData.barcode)) {\n\t          formErrors.barcode = true;\n\t        } else {\n\t          formErrors.barcode = false;\n\t        }\n\t      }\n\t\n\t      //validate that quantity is a number and less than capacity\n\t      if (formElement === \"quantity\" && value !== \"\") {\n\t        if (isNaN(value) || value > this.props.capacities[this.state.currentContainerType]) {\n\t          formErrors.quantity = true;\n\t        } else {\n\t          formErrors.quantity = false;\n\t        }\n\t      }\n\t\n\t      //validate datatypes and regex of generated type attributes\n\t      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t      var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t\n\t        var datatype = _this3.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"number\") {\n\t          if (formElement === attribute) {\n\t            if (isNaN(value) && value !== \"\") {\n\t              formErrors[attribute] = true;\n\t            } else {\n\t              formErrors[attribute] = false;\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      this.setState({\n\t        formErrors: formErrors\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Handle form submission\n\t     * @param {object} e - Form submission event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      var formRefs = this.refs;\n\t      //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\t\n\t      // Validate the form\n\t      if (!this.isValidForm(formRefs, formData)) {\n\t        return;\n\t      }\n\t\n\t      //    // Validate specimened file name\n\t      //    let instrument = formData.instrument ? formData.instrument : null;\n\t      //    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n\t      //    let requiredFileName = this.getValidFileName(\n\t      //      formData.pscid, formData.visitLabel, instrument\n\t      //    );\n\t      //    if (!this.isValidFileName(requiredFileName, fileName)) {\n\t      //      swal(\n\t      //        \"Invalid Specimen name!\",\n\t      //        \"File name should begin with: \" + requiredFileName,\n\t      //        \"error\"\n\t      //      );\n\t      //      return;\n\t      //    }\n\t\n\t      // Check for duplicate file names\n\t      //    let isDuplicate = biobankFiles.indexOf(fileName);\n\t      //    if (isDuplicate >= 0) {\n\t      //      swal({\n\t      //        title: \"Are you sure?\",\n\t      //        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n\t      //        type: \"warning\",\n\t      //        showCancelButton: true,\n\t      //        confirmButtonText: 'Yes, I am sure!',\n\t      //        cancelButtonText: \"No, cancel it!\"\n\t      //      }, function(isConfirm) {\n\t      //        if (isConfirm) {\n\t      //          this.specimenFile();\n\t      //        } else {\n\t      //          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n\t      //        }\n\t      //      }.bind(this));\n\t      //    } else {\n\t\n\t      this.specimenSubmit();\n\t      //    }\n\t    }\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'specimenSubmit',\n\t    value: function specimenSubmit() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          // FOR SOME REASON THIS IS NO LONGER WORKING\n\t          // Trigger an update event to update all observers (i.e DataTable)\n\t          // THIS CURRENTLY DOES NOT WORK - LOOK INTO IT\n\t          var event = new CustomEvent('update-datatable');\n\t          window.dispatchEvent(event);\n\t\n\t          //refreshes table if not a child\n\t          if (!this.props.child) {\n\t            this.props.refreshTable();\n\t          }\n\t          swal(\"Specimen Submission Successful!\", \"\", \"success\");\n\t          this.props.closeModal();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Checks if the inputted file name is valid\n\t     *\n\t     * @param {string} requiredFileName - Required file name\n\t     * @param {string} fileName - Provided file name\n\t     * @return {boolean} - true if fileName starts with requiredFileName, false\n\t     *   otherwise\n\t     */\n\t    //  isValidFileName(requiredFileName, fileName) {\n\t    //    if (fileName === null || requiredFileName === null) {\n\t    //      return false;\n\t    //    }\n\t    //\n\t    //    return (fileName.indexOf(requiredFileName) === 0);\n\t    //  }\n\t\n\t    /**\n\t     * Validate the form\n\t     *\n\t     * @param {object} formRefs - Object containing references to React form elements\n\t     * @param {object} formData - Object containing form data inputed by user\n\t     * @return {boolean} - true if all required fields are filled, false otherwise\n\t     */\n\t\n\t  }, {\n\t    key: 'isValidForm',\n\t    value: function isValidForm(formRefs, formData) {\n\t      var isValidForm = true;\n\t\n\t      var requiredFields = {\n\t        pscid: null,\n\t        visitLabel: null\n\t      };\n\t\n\t      Object.keys(requiredFields).map(function (field) {\n\t        if (formData[field]) {\n\t          requiredFields[field] = formData[field];\n\t        } else if (formRefs[field]) {\n\t          formRefs[field].props.hasError = true;\n\t          isValidForm = false;\n\t        }\n\t      });\n\t      this.forceUpdate();\n\t\n\t      return isValidForm;\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      // Only display visits and sites available for the current pscid\n\t      //let visitLabel = this.state.formData.visitLabel;\n\t      //let pscid = this.state.formData.pscid;\n\t\n\t      //LOOK AT THIS LATER - THE SWITCH TO PROPS MESSED THIS ALL UP \n\t      if (formElement === \"pscid\" && value !== \"\") {\n\t        this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n\t        //this.state.Data.sites = this.state.Data.sessionData[this.state.Data.PSCIDs[value]].sites;\n\t      }\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setBarcodeFormData',\n\t    value: function setBarcodeFormData(barcodeFormData, barcodeId) {\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      barcodeFormList[barcodeId] = barcodeFormData;\n\t      formData['barcodeFormList'] = barcodeFormList;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'addBarcodeForm',\n\t    value: function addBarcodeForm() {\n\t      var countBarcodeForms = this.state.countBarcodeForms;\n\t      countBarcodeForms.push(countBarcodeForms[countBarcodeForms.length - 1] + 1);\n\t      this.setState({\n\t        countBarcodeForms: countBarcodeForms\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removeBarcodeForm',\n\t    value: function removeBarcodeForm(index) {\n\t      var countBarcodeForms = this.state.countBarcodeForms;\n\t      countBarcodeForms.splice(index, 1);\n\t      this.setState({\n\t        countBarcodeForms: countBarcodeForms\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimenForm;\n\t}(React.Component);\n\t\n\tBiobankSpecimenForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired,\n\t  barcode: React.PropTypes.string,\n\t  refreshTable: React.PropTypes.func\n\t};\n\t\n\texports.default = BiobankSpecimenForm;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _collectionForm = __webpack_require__(5);\n\t\n\tvar _collectionForm2 = _interopRequireDefault(_collectionForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Barcode Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar BiobankBarcodeForm = function (_React$Component) {\n\t  _inherits(BiobankBarcodeForm, _React$Component);\n\t\n\t  function BiobankBarcodeForm(props) {\n\t    _classCallCheck(this, BiobankBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankBarcodeForm.__proto__ || Object.getPrototypeOf(BiobankBarcodeForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      formErrors: {}\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setSpecimenFormData = _this.setSpecimenFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankBarcodeForm, [{\n\t    key: \"render\",\n\t    value: function render() {\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: \"biobankBarcode\"\n\t        },\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-11\" },\n\t            React.createElement(\n\t              \"div\",\n\t              {\n\t                \"data-toggle\": \"collapse\",\n\t                \"data-target\": \"#\" + this.props.id\n\t              },\n\t              React.createElement(TextboxElement, {\n\t                name: \"barcode\",\n\t                label: \"Barcode \" + this.props.id,\n\t                onUserInput: this.setFormData,\n\t                ref: \"barcode\",\n\t                required: true,\n\t                value: this.state.formData[\"barcode\"],\n\t                hasError: this.state.formErrors[\"barcode\"],\n\t                errorMessage: \"Incorrect Barcode format for this Specimen and Container Type\"\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-1\" },\n\t            this.props.button\n\t          )\n\t        ),\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row\" },\n\t          React.createElement(\"div\", { className: \"col-xs-2\" }),\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-9\" },\n\t            React.createElement(\n\t              \"div\",\n\t              { id: this.props.id, className: \"collapse\" },\n\t              React.createElement(_collectionForm2.default, {\n\t                setParentFormData: this.setSpecimenFormData,\n\t                specimenTypes: this.props.specimenTypes,\n\t                specimenTypeAttributes: this.props.specimenTypeAttributes,\n\t                attributeDatatypes: this.props.attributeDatatypes,\n\t                containerTypesPrimary: this.props.containerTypesPrimary,\n\t                containerBarcodesNonPrimary: this.props.containerBarcodesNonPrimary,\n\t                specimenTypeUnits: this.props.specimenTypeUnits,\n\t                stati: this.props.stati\n\t              })\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: \"setFormData\",\n\t    value: function setFormData(formElement, value) {\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: \"setSpecimenFormData\",\n\t    value: function setSpecimenFormData(specimenFormData) {\n\t      var formData = this.state.formData;\n\t\n\t      for (var attribute in specimenFormData) {\n\t        formData[attribute] = specimenFormData[attribute];\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: \"setParentFormData\",\n\t    value: function setParentFormData() {\n\t      this.props.setParentFormData(this.state.formData, this.props.id);\n\t    }\n\t  }]);\n\t\n\t  return BiobankBarcodeForm;\n\t}(React.Component);\n\t\n\tBiobankBarcodeForm.propTypes = {\n\t\n\t  id: React.PropTypes.string,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = BiobankBarcodeForm;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenCollectionForm = function (_React$Component) {\n\t  _inherits(SpecimenCollectionForm, _React$Component);\n\t\n\t  function SpecimenCollectionForm(props) {\n\t    _classCallCheck(this, SpecimenCollectionForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenCollectionForm.__proto__ || Object.getPrototypeOf(SpecimenCollectionForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: { data: {} },\n\t      currentSpecimenType: _this.props.edit ? _this.props.specimenType : null,\n\t      currentContainerType: _this.props.edit ? _this.props.containerType : null,\n\t      formErrors: {}\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setSpecimenTypeFieldFormData = _this.setSpecimenTypeFieldFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    _this.getSpecimenTypeFields = _this.getSpecimenTypeFields.bind(_this);\n\t    _this.handleUpdate = _this.handleUpdate.bind(_this);\n\t    _this.updateSpecimen = _this.updateSpecimen.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenCollectionForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var _this2 = this;\n\t\n\t      var formData = this.state.formData;\n\t      if (this.props.edit) {\n\t        formData['specimenId'] = this.props.specimenId;\n\t        formData['containerId'] = this.props.containerId;\n\t        formData['specimenType'] = this.props.specimenType;\n\t        formData['containerType'] = this.props.containerType;\n\t        formData['quantity'] = this.props.collection.quantity;\n\t        formData['unitId'] = this.props.collection.unitId;\n\t        formData['date'] = this.props.collection.date;\n\t        formData['time'] = this.props.collection.time;\n\t        formData['comments'] = this.props.collection.comments;\n\t\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t        if (specimenTypeFieldsObject) {\n\t          var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t            formData.data[attribute] = _this2.props.collection.data[attribute];\n\t          });\n\t        }\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      var parentContainerField;\n\t      if (!this.props.edit) {\n\t        parentContainerField = React.createElement(SelectElement, {\n\t          name: 'parentContainer',\n\t          label: 'Parent Container Barcode',\n\t          options: this.props.containerBarcodesNonPrimary,\n\t          onUserInput: this.setFormData,\n\t          ref: 'parentContainer',\n\t          required: false,\n\t          value: this.state.formData.parentContainer\n\t        });\n\t      }\n\t\n\t      var updateButton;\n\t      if (this.props.edit) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      }\n\t\n\t      //This block of code should potentially be moved to setFormData();\n\t      //Consider Refactoring...\n\t      var specimenTypeUnits = {};\n\t      if (this.state.currentSpecimenType) {\n\t\n\t        //This modifies the selections for unit drop down based on the chosend specimen type \n\t        for (var id in this.props.specimenTypeUnits[this.state.currentSpecimenType]) {\n\t          specimenTypeUnits[id] = this.props.specimenTypeUnits[this.state.currentSpecimenType][id].unit;\n\t        }\n\t\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t        if (specimenTypeFieldsObject) {\n\t          var specimenTypeFields = this.getSpecimenTypeFields(specimenTypeFieldsObject);\n\t        }\n\t      }\n\t\n\t      var specimenFields;\n\t      if (this.state.currentSpecimenType) {\n\t        specimenFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'containerType',\n\t            label: 'Container Type',\n\t            options: this.props.containerTypesPrimary,\n\t            onUserInput: this.setFormData,\n\t            ref: 'containerType',\n\t            required: true,\n\t            value: this.state.formData.containerType\n\t          }),\n\t          parentContainerField,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Quantity',\n\t            onUserInput: this.setFormData,\n\t            ref: 'quantity',\n\t            required: true,\n\t            value: this.state.formData.quantity,\n\t            hasError: this.state.formErrors.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: specimenTypeUnits,\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.unitId\n\t          }),\n\t          specimenTypeFields,\n\t          React.createElement(DateElement, {\n\t            name: 'date',\n\t            label: 'Date',\n\t            minYear: '2000',\n\t            maxYear: '2018',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.date\n\t          }),\n\t          React.createElement(TimeElement, {\n\t            name: 'time',\n\t            label: 'Time',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.time\n\t          }),\n\t          React.createElement(TextareaElement, {\n\t            name: 'comments',\n\t            label: 'Comments',\n\t            onUserInput: this.setFormData,\n\t            ref: 'comments',\n\t            value: this.state.formData.comments\n\t          }),\n\t          updateButton\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankSpecimen',\n\t          onSubmit: this.handleUpdate,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'specimenType',\n\t            label: 'Specimen Type',\n\t            options: this.props.specimenTypes,\n\t            onUserInput: this.setFormData,\n\t            ref: 'specimenType',\n\t            required: true,\n\t            value: this.state.formData.specimenType\n\t          }),\n\t          specimenFields\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      if (formElement === \"specimenType\" && value !== \"\") {\n\t        //This throws a warning if the specimen type is changed because of the cascading effects this \n\t        //would cause.\n\t        if (this.props.edit) {\n\t          swal({\n\t            title: \"Warning\",\n\t            text: \"Changing the specimen type will result in the loss of any preparation or anaylsis \" + \"data for this specimen. You will also need to manually change the specimen type of any \" + \"aliquots derived from this specimen. Proceed with caution.\",\n\t            type: \"warning\",\n\t            showCancelButton: true,\n\t            confirmButtonText: 'Cancel Change',\n\t            cancelButtonText: 'Proceed'\n\t          }, function (isConfirm) {\n\t            if (isConfirm) {\n\t              this.props.toggleEdit();\n\t            } else {}\n\t          }.bind(this));\n\t        }\n\t\n\t        //This is to eliminate the values for the specimen type fields\n\t        //This could potentially be improved later to retain the values\n\t        //for the fields that are common across specimen types\n\t        formData.data = {};\n\t        this.setState({\n\t          currentSpecimenType: value\n\t        });\n\t      }\n\t\n\t      if (formElement === \"containerType\" && value !== \"\") {\n\t        this.setState({\n\t          currentContainerType: value\n\t        });\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setSpecimenTypeFieldFormData',\n\t    value: function setSpecimenTypeFieldFormData(formElement, value) {\n\t      var formData = this.state.formData;\n\t      formData.data[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      if (!this.props.edit) {\n\t        var formData = this.state.formData;\n\t        this.props.setParentFormData(formData);\n\t      }\n\t    }\n\t\n\t    // This generates all the form fields for a given specimen type\n\t\n\t  }, {\n\t    key: 'getSpecimenTypeFields',\n\t    value: function getSpecimenTypeFields(fieldsObject) {\n\t      var _this3 = this;\n\t\n\t      var specimenTypeFields = Object.keys(fieldsObject).map(function (attribute) {\n\t        var datatype = _this3.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"text\" || datatype === \"number\") {\n\t          if (fieldsObject[attribute]['refTableId'] == null) {\n\t            return React.createElement(TextboxElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this3.state.formData.data[attribute],\n\t              hasError: _this3.state.formErrors[attribute],\n\t              errorMessage: \"This is a \" + datatype + \" field.\"\n\t            });\n\t          }\n\t\n\t          // OPTIONS FOR SELECT ELEMENT WILL MOST LIKELY BE PASSED VIA AJAX CALL\n\t          // BUT IT CAN ALSO BE PRELOADED --\n\t          // ASK RIDA HOW THIS SHOULD BE DONE\n\t          if (fieldsObject[attribute]['refTableId'] !== null) {\n\t            return React.createElement(SelectElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              options: '',\n\t              onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribte]['required'],\n\t              value: _this3.state.formData.data[attribute]\n\t            });\n\t          }\n\t        }\n\t\n\t        if (datatype === \"datetime\") {\n\t          return React.createElement(DateElement, {\n\t            name: attribute,\n\t            label: fieldsObject[attribute]['name'],\n\t            onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t            ref: attribute,\n\t            required: fieldsObject[attribute]['required'],\n\t            value: _this3.state.formData.data[attribute]\n\t          });\n\t        }\n\t\n\t        if (datatype === \"boolean\") {}\n\t      });\n\t\n\t      return specimenTypeFields;\n\t    }\n\t  }, {\n\t    key: 'handleUpdate',\n\t    value: function handleUpdate(e) {\n\t      //more things will go here later\n\t      this.updateSpecimen();\n\t    }\n\t  }, {\n\t    key: 'updateSpecimen',\n\t    value: function updateSpecimen() {\n\t      var _$$ajax;\n\t\n\t      var formData = this.state.formData;\n\t      formData['data'] = JSON.stringify(formData['data']);\n\t\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax((_$$ajax = {\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false\n\t      }, _defineProperty(_$$ajax, 'processData', false), _defineProperty(_$$ajax, 'xhr', function () {\n\t        var xhr = new window.XMLHttpRequest();\n\t        return xhr;\n\t      }.bind(this)), _defineProperty(_$$ajax, 'success', function () {\n\t        //Update Parent Specimen Page Here\n\t        formData.data = JSON.parse(formData.data);\n\t        this.props.updateCollection(formData);\n\t      }.bind(this)), _defineProperty(_$$ajax, 'error', function (err) {\n\t        console.error(err);\n\t        var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t        this.setState({\n\t          errorMessage: msg\n\t        });\n\t        swal(msg, \"\", \"error\");\n\t      }.bind(this)), _$$ajax));\n\t    }\n\t  }]);\n\t\n\t  return SpecimenCollectionForm;\n\t}(React.Component);\n\t\n\tSpecimenCollectionForm.propTypes = {\n\t  setParentFormData: React.PropTypes.func,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = SpecimenCollectionForm;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _containerBarcodeForm = __webpack_require__(7);\n\t\n\tvar _containerBarcodeForm2 = _interopRequireDefault(_containerBarcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankContainerForm = function (_React$Component) {\n\t  _inherits(BiobankContainerForm, _React$Component);\n\t\n\t  function BiobankContainerForm(props) {\n\t    _classCallCheck(this, BiobankContainerForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankContainerForm.__proto__ || Object.getPrototypeOf(BiobankContainerForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      barcodeFormList: {},\n\t      formErrors: {},\n\t      countBarcodeForms: [1],\n\t      errorMessage: null\n\t    };\n\t\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    _this.validateForm = _this.validateForm.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.containerSubmit = _this.containerSubmit.bind(_this);\n\t    _this.addBarcodeForm = _this.addBarcodeForm.bind(_this);\n\t    _this.setBarcodeFormData = _this.setBarcodeFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankContainerForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t\n\t      //if this is a child specimen form then certain formData is set when component mounts\n\t      if (this.props.child) {\n\t        var formData = this.state.formData;\n\t        formData['parentSpecimen'] = this.props.specimenId;\n\t        formData['visitLabel'] = this.props.sessionId;\n\t\n\t        this.setState({\n\t          formData: formData\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      //Styling for remove Barcode button\n\t      var glyphStyle = {\n\t        color: '#D3D3D3',\n\t        margin: 'auto'\n\t      };\n\t      var buttonStyle = {\n\t        appearance: 'none',\n\t        outline: 'none',\n\t        boxShadow: 'none',\n\t        borderColor: 'transparent',\n\t        backgroundColor: 'transparent'\n\t\n\t      };\n\t\n\t      //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n\t      var barcodeForms = [];\n\t\n\t      var _loop = function _loop(i) {\n\t        barcodeForms.push(React.createElement(_containerBarcodeForm2.default, {\n\t          setParentFormData: _this2.setBarcodeFormData,\n\t          id: _this2.state.countBarcodeForms[i],\n\t          containerTypesNonPrimary: _this2.props.containerTypesNonPrimary,\n\t          containerBarcodesNonPrimary: _this2.props.containerBarcodesNonPrimary,\n\t          button: i + 1 === _this2.state.countBarcodeForms.length ? React.createElement(\n\t            'button',\n\t            {\n\t              type: 'button',\n\t              className: 'btn btn-success btn-sm',\n\t              onClick: _this2.addBarcodeForm\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-plus' })\n\t          ) : React.createElement(\n\t            'button',\n\t            {\n\t              type: 'button',\n\t              className: 'btn btn-primary-outline btn-sm',\n\t              style: buttonStyle,\n\t              onClick: function onClick() {\n\t                return _this2.removeBarcodeForm(i);\n\t              }\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-remove', style: glyphStyle })\n\t          )\n\t        }));\n\t      };\n\t\n\t      for (var i = 0; i < this.state.countBarcodeForms.length; i++) {\n\t        _loop(i);\n\t      }\n\t\n\t      //ALLOW THEM TO CANCEL THE FORM AND DELETE BARCODE FORMS\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenForm',\n\t          onSubmit: this.handleSubmit,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(\n\t          'h3',\n\t          null,\n\t          React.createElement(\n\t            'b',\n\t            null,\n\t            'Add New Container',\n\t            this.state.countBarcodeForms > 1 ? \"s\" : \"\"\n\t          )\n\t        ),\n\t        React.createElement('br', null),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement(SelectElement, {\n\t              name: 'site',\n\t              label: 'Site',\n\t              options: this.props.sites,\n\t              onUserInput: this.setFormData,\n\t              ref: 'site',\n\t              required: true,\n\t              value: this.state.formData.site\n\t            })\n\t          )\n\t        ),\n\t        barcodeForms,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-xs-3 col-xs-offset-9' },\n\t          React.createElement(ButtonElement, { label: 'Submit' })\n\t        ),\n\t        React.createElement(\n\t          'a',\n\t          { onClick: this.toggleModal },\n\t          'Cancel'\n\t        )\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t    /**\n\t     * Returns a valid name for the file to be specimened\n\t     *\n\t     * @param {string} visitLabel - Visit label selected from the dropdown\n\t     * @param {string} instrument - Instrument selected from the dropdown\n\t     * @return {string} - Generated valid filename for the current selection\n\t     */\n\t\n\t  }, {\n\t    key: 'validateForm',\n\t    value: function validateForm(formElement, value) {\n\t      var _this3 = this;\n\t\n\t      var formErrors = this.state.formErrors;\n\t\n\t      //validate barcode regex\n\t      if (formElement === \"barcode\" && value !== \"\") {\n\t        if (!/^hello/.test(this.state.formData.barcode)) {\n\t          formErrors.barcode = true;\n\t        } else {\n\t          formErrors.barcode = false;\n\t        }\n\t      }\n\t\n\t      //validate that quantity is a number and less than capacity\n\t      if (formElement === \"quantity\" && value !== \"\") {\n\t        if (isNaN(value) || value > this.props.capacities[this.state.currentContainerType]) {\n\t          formErrors.quantity = true;\n\t        } else {\n\t          formErrors.quantity = false;\n\t        }\n\t      }\n\t\n\t      //validate datatypes and regex of generated type attributes\n\t      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t      var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t\n\t        var datatype = _this3.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"number\") {\n\t          if (formElement === attribute) {\n\t            if (isNaN(value) && value !== \"\") {\n\t              formErrors[attribute] = true;\n\t            } else {\n\t              formErrors[attribute] = false;\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      this.setState({\n\t        formErrors: formErrors\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Handle form submission\n\t     * @param {object} e - Form submission event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      var formRefs = this.refs;\n\t      //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\t\n\t      // Validate the form\n\t      if (!this.isValidForm(formRefs, formData)) {\n\t        return;\n\t      }\n\t\n\t      //    // Validate specimened file name\n\t      //    let instrument = formData.instrument ? formData.instrument : null;\n\t      //    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n\t      //    if (!this.isValidFileName(requiredFileName, fileName)) {\n\t      //      swal(\n\t      //        \"Invalid Specimen name!\",\n\t      //        \"File name should begin with: \" + requiredFileName,\n\t      //        \"error\"\n\t      //      );\n\t      //      return;\n\t      //    }\n\t\n\t      // Check for duplicate file names\n\t      //    let isDuplicate = biobankFiles.indexOf(fileName);\n\t      //    if (isDuplicate >= 0) {\n\t      //      swal({\n\t      //        title: \"Are you sure?\",\n\t      //        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n\t      //        type: \"warning\",\n\t      //        showCancelButton: true,\n\t      //        confirmButtonText: 'Yes, I am sure!',\n\t      //        cancelButtonText: \"No, cancel it!\"\n\t      //      }, function(isConfirm) {\n\t      //        if (isConfirm) {\n\t      //          this.specimenFile();\n\t      //        } else {\n\t      //          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n\t      //        }\n\t      //      }.bind(this));\n\t      //    } else {\n\t\n\t      this.containerSubmit();\n\t      //    }\n\t    }\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'containerSubmit',\n\t    value: function containerSubmit() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          // Trigger an update event to update all observers (i.e DataTable)\n\t          // THIS CURRENTLY DOES NOT WORK\n\t          var event = new CustomEvent('update-datatable');\n\t          window.dispatchEvent(event);\n\t\n\t          this.props.closeModal();\n\t\n\t          //refreshes table \n\t          //may need refresh specimen data as well? probably..\n\t          this.props.refreshTable();\n\t          swal(\"Container Submission Successful!\", \"\", \"success\");\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Checks if the inputted file name is valid\n\t     *\n\t     * @param {string} requiredFileName - Required file name\n\t     * @param {string} fileName - Provided file name\n\t     * @return {boolean} - true if fileName starts with requiredFileName, false\n\t     *   otherwise\n\t     */\n\t    //  isValidFileName(requiredFileName, fileName) {\n\t    //    if (fileName === null || requiredFileName === null) {\n\t    //      return false;\n\t    //    }\n\t    //\n\t    //    return (fileName.indexOf(requiredFileName) === 0);\n\t    //  }\n\t\n\t    /**\n\t     * Validate the form\n\t     *\n\t     * @param {object} formRefs - Object containing references to React form elements\n\t     * @param {object} formData - Object containing form data inputed by user\n\t     * @return {boolean} - true if all required fields are filled, false otherwise\n\t     */\n\t\n\t  }, {\n\t    key: 'isValidForm',\n\t    value: function isValidForm(formRefs, formData) {\n\t      var isValidForm = true;\n\t\n\t      var requiredFields = {\n\t        visitLabel: null\n\t      };\n\t\n\t      Object.keys(requiredFields).map(function (field) {\n\t        if (formData[field]) {\n\t          requiredFields[field] = formData[field];\n\t        } else if (formRefs[field]) {\n\t          formRefs[field].props.hasError = true;\n\t          isValidForm = false;\n\t        }\n\t      });\n\t      this.forceUpdate();\n\t\n\t      return isValidForm;\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      //let visitLabel = this.state.formData.visitLabel;\n\t\n\t      //LOOK AT THIS LATER - THE SWITCH TO PROPS MESSED THIS ALL UP \n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setBarcodeFormData',\n\t    value: function setBarcodeFormData(barcodeFormData, barcodeId) {\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      barcodeFormList[barcodeId] = barcodeFormData;\n\t      formData['barcodeFormList'] = barcodeFormList;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'addBarcodeForm',\n\t    value: function addBarcodeForm() {\n\t      var countBarcodeForms = this.state.countBarcodeForms;\n\t      countBarcodeForms.push(countBarcodeForms[countBarcodeForms.length - 1] + 1);\n\t      this.setState({\n\t        countBarcodeForms: countBarcodeForms\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removeBarcodeForm',\n\t    value: function removeBarcodeForm(index) {\n\t      var countBarcodeForms = this.state.countBarcodeForms;\n\t      countBarcodeForms.splice(index, 1);\n\t      this.setState({\n\t        countBarcodeForms: countBarcodeForms\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return BiobankContainerForm;\n\t}(React.Component);\n\t\n\tBiobankContainerForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired,\n\t  barcode: React.PropTypes.string,\n\t  refreshTable: React.PropTypes.func\n\t};\n\t\n\texports.default = BiobankContainerForm;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Container Barcode Form\n\t *\n\t * Acts a subform for ContainerForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar ContainerBarcodeForm = function (_React$Component) {\n\t  _inherits(ContainerBarcodeForm, _React$Component);\n\t\n\t  function ContainerBarcodeForm(props) {\n\t    _classCallCheck(this, ContainerBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ContainerBarcodeForm.__proto__ || Object.getPrototypeOf(ContainerBarcodeForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      formErrors: {}\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setSpecimenFormData = _this.setSpecimenFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ContainerBarcodeForm, [{\n\t    key: \"render\",\n\t    value: function render() {\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: \"biobankBarcode\"\n\t        },\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-11\" },\n\t            React.createElement(\n\t              \"div\",\n\t              {\n\t                \"data-toggle\": \"collapse\",\n\t                \"data-target\": \"#\" + this.props.id\n\t              },\n\t              React.createElement(TextboxElement, {\n\t                name: \"barcode\",\n\t                label: \"Barcode \" + this.props.id,\n\t                onUserInput: this.setFormData,\n\t                ref: \"barcode\",\n\t                required: true,\n\t                value: this.state.formData[\"barcode\"],\n\t                hasError: this.state.formErrors[\"barcode\"],\n\t                errorMessage: \"Incorrect Barcode format for this Specimen and Container Type\"\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-1\" },\n\t            this.props.button\n\t          )\n\t        ),\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row\" },\n\t          React.createElement(\"div\", { className: \"col-xs-2\" }),\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-9\" },\n\t            React.createElement(\n\t              \"div\",\n\t              { id: this.props.id, className: \"collapse\" },\n\t              React.createElement(SelectElement, {\n\t                name: \"containerType\",\n\t                label: \"Container Type\",\n\t                options: this.props.containerTypesNonPrimary,\n\t                onUserInput: this.setFormData,\n\t                required: true,\n\t                value: this.state.formData.containerType\n\t              })\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: \"setFormData\",\n\t    value: function setFormData(formElement, value) {\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: \"setSpecimenFormData\",\n\t    value: function setSpecimenFormData(specimenFormData) {\n\t      var formData = this.state.formData;\n\t\n\t      for (var attribute in specimenFormData) {\n\t        formData[attribute] = specimenFormData[attribute];\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: \"setParentFormData\",\n\t    value: function setParentFormData() {\n\t      this.props.setParentFormData(this.state.formData, this.props.id);\n\t    }\n\t  }]);\n\t\n\t  return ContainerBarcodeForm;\n\t}(React.Component);\n\t\n\tContainerBarcodeForm.propTypes = {\n\t  id: React.PropTypes.string,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = ContainerBarcodeForm;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Tabs component.\n\t *\n\t * @author Loris Team\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Tabs Component.\n\t * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n\t * and corresponding tab panes.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * 1. Define an array of tabs with IDs and labels\n\t *\n\t * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n\t *\n\t * 2. Pass tabList as <Tab> property and <TabPane> as child\n\t *  ```\n\t * <Tabs tabs={tabList} defaultTab=\"tab1\">\n\t *   <TabPane TabId={tabList[0].id}>\n\t *     // Tab content goes here\n\t *   </TabPane>\n\t * </Tabs>\n\t * ```\n\t * =================================================\n\t *\n\t */\n\tvar Tabs = function (_React$Component) {\n\t  _inherits(Tabs, _React$Component);\n\t\n\t  function Tabs(props) {\n\t    _classCallCheck(this, Tabs);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call(this, props));\n\t\n\t    var hash = window.location.hash;\n\t    var activeTab = \"\";\n\t\n\t    /**\n\t     * Determine the initial active tab in this order\n\t     * 1. Try to infer from the URL, otherwise\n\t     * 2. Try to infer from the defaultTab prop, otherwise\n\t     * 3. Set to be the first tab of the list\n\t     */\n\t    if (_this.props.updateURL && hash) {\n\t      activeTab = hash.substr(1);\n\t    } else if (_this.props.defaultTab) {\n\t      activeTab = _this.props.defaultTab;\n\t    } else if (_this.props.tabs.length > 0) {\n\t      activeTab = _this.props.tabs[0].id;\n\t    }\n\t\n\t    _this.state = {\n\t      activeTab: activeTab\n\t    };\n\t\n\t    _this.handleClick = _this.handleClick.bind(_this);\n\t    _this.getTabs = _this.getTabs.bind(_this);\n\t    _this.getTabPanes = _this.getTabPanes.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Tabs, [{\n\t    key: 'handleClick',\n\t    value: function handleClick(tabId, e) {\n\t      this.setState({ activeTab: tabId });\n\t      this.props.onTabChange(tabId);\n\t\n\t      // Add tab href to URL querystring and scroll the page to top\n\t      if (this.props.updateURL) {\n\t        var scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n\t        window.location.hash = e.target.hash;\n\t        $('html,body').scrollTop(scrollDistance);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getTabs',\n\t    value: function getTabs() {\n\t      var tabs = this.props.tabs.map(function (tab) {\n\t        var tabClass = this.state.activeTab === tab.id ? 'active' : null;\n\t        var href = \"#\" + tab.id;\n\t        var tabID = \"tab-\" + tab.id;\n\t        return React.createElement(\n\t          'li',\n\t          {\n\t            role: 'presentation',\n\t            className: tabClass,\n\t            key: tab.id\n\t          },\n\t          React.createElement(\n\t            'a',\n\t            { id: tabID,\n\t              href: href,\n\t              role: 'tab',\n\t              'data-toggle': 'tab',\n\t              onClick: this.handleClick.bind(null, tab.id)\n\t            },\n\t            tab.label\n\t          )\n\t        );\n\t      }.bind(this));\n\t\n\t      return tabs;\n\t    }\n\t  }, {\n\t    key: 'getTabPanes',\n\t    value: function getTabPanes() {\n\t      var tabPanes = React.Children.map(this.props.children, function (child, key) {\n\t        if (child) {\n\t          return React.cloneElement(child, {\n\t            activeTab: this.state.activeTab,\n\t            key: key\n\t          });\n\t        }\n\t      }.bind(this));\n\t\n\t      return tabPanes;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var tabs = this.getTabs();\n\t      var tabPanes = this.getTabPanes();\n\t      var tabStyle = {\n\t        marginLeft: 0,\n\t        marginBottom: '5px'\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'ul',\n\t          { className: 'nav nav-tabs', role: 'tablist', style: tabStyle },\n\t          tabs\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tab-content' },\n\t          tabPanes\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Tabs;\n\t}(React.Component);\n\t\n\tTabs.propTypes = {\n\t  tabs: React.PropTypes.array.isRequired,\n\t  defaultTab: React.PropTypes.string,\n\t  updateURL: React.PropTypes.bool\n\t};\n\tTabs.defaultProps = {\n\t  onTabChange: function onTabChange() {},\n\t  updateURL: false\n\t};\n\t\n\t/*\n\t * TabPane component.\n\t * Used to wrap content for every tab.\n\t */\n\t\n\tvar TabPane = function (_React$Component2) {\n\t  _inherits(TabPane, _React$Component2);\n\t\n\t  function TabPane() {\n\t    _classCallCheck(this, TabPane);\n\t\n\t    return _possibleConstructorReturn(this, (TabPane.__proto__ || Object.getPrototypeOf(TabPane)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(TabPane, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var classList = \"tab-pane\";\n\t      var title = void 0;\n\t\n\t      if (this.props.TabId === this.props.activeTab) {\n\t        classList += \" active\";\n\t      }\n\t      if (this.props.Title) {\n\t        title = React.createElement(\n\t          'h1',\n\t          null,\n\t          this.props.Title\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { role: 'tabpanel', className: classList, id: this.props.TabId },\n\t        title,\n\t        this.props.children\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return TabPane;\n\t}(React.Component);\n\t\n\tTabPane.propTypes = {\n\t  TabId: React.PropTypes.string.isRequired,\n\t  Title: React.PropTypes.string,\n\t  activeTab: React.PropTypes.string\n\t};\n\t\n\texports.Tabs = Tabs;\n\texports.TabPane = TabPane;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Modal component.\n\t *\n\t * @author Loris Team\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Modal Component.\n\t * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * 1. Define an array of tabs with IDs and labels\n\t *\n\t * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n\t *\n\t * 2. Pass tabList as <Tab> property and <TabPane> as child\n\t *  ```\n\t * <Tabs tabs={tabList} defaultTab=\"tab1\">\n\t *   <TabPane TabId={tabList[0].id}>\n\t *     // Tab content goes here\n\t *   </TabPane>\n\t * </Tabs>\n\t * ```\n\t * =================================================\n\t *\n\t */\n\tvar Modal = function (_React$Component) {\n\t  _inherits(Modal, _React$Component);\n\t\n\t  function Modal(props) {\n\t    _classCallCheck(this, Modal);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));\n\t\n\t    _this.state = {\n\t      show: false\n\t    };\n\t\n\t    _this.openModal = _this.openModal.bind(_this);\n\t    _this.closeModal = _this.closeModal.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Modal, [{\n\t    key: 'openModal',\n\t    value: function openModal() {\n\t      this.setState({\n\t        show: true\n\t      });\n\t    }\n\t  }, {\n\t    key: 'closeModal',\n\t    value: function closeModal() {\n\t      this.setState({\n\t        show: false\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Black Background with Alpha Channel\n\t      var backdropStyle = {\n\t        position: 'fixed',\n\t        zIndex: 9998,\n\t        top: 0,\n\t        bottom: 0,\n\t        left: 0,\n\t        right: 0,\n\t        backgroundColor: 'rgba(0,0,0,0.3)',\n\t        padding: 50\n\t      };\n\t\n\t      // White Modal Window\n\t      var modalStyle = {\n\t        position: 'relative',\n\t        maxWidth: 1000,\n\t        maxHeight: '80%',\n\t        margin: '5% auto',\n\t        backgroundColor: '#fff',\n\t        borderRadius: 10,\n\t        overflowY: 'auto',\n\t        zIndex: 9999\n\t      };\n\t\n\t      var titleStyle = {\n\t        display: 'flex',\n\t        flexDirection: 'row',\n\t        alignItems: 'center',\n\t        background: '#093782',\n\t        height: '70px',\n\t        borderTopRightRadius: '10',\n\t        color: '#FFFFFF',\n\t        fontSize: 24,\n\t        padding: 20\n\t      };\n\t\n\t      var bodyStyle = {\n\t        padding: 15\n\t      };\n\t\n\t      var footerStyle = {\n\t        padding: 15\n\t      };\n\t\n\t      var button = React.createElement(\n\t        'button',\n\t        {\n\t          type: 'button',\n\t          className: this.props.buttonClass,\n\t          onClick: this.openModal,\n\t          style: this.props.buttonStyle\n\t        },\n\t        this.props.buttonContent\n\t      );\n\t\n\t      var modal;\n\t      if (this.state.show) {\n\t        modal = React.createElement(\n\t          'div',\n\t          { style: backdropStyle, onClick: this.closeModal },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              style: modalStyle,\n\t              onClick: function onClick(e) {\n\t                e.stopPropagation();\n\t              }\n\t            },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                style: titleStyle\n\t              },\n\t              this.props.title\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                style: bodyStyle\n\t              },\n\t              this.props.children\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { style: footerStyle, onClick: this.closeModal },\n\t              React.createElement(\n\t                'a',\n\t                null,\n\t                'Cancel'\n\t              )\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        button,\n\t        modal\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Modal;\n\t}(React.Component);\n\t\n\tModal.propTypes = {\n\t  title: React.PropTypes.string,\n\t  buttonClass: React.PropTypes.string,\n\t  buttonStyle: React.PropTypes.object,\n\t  buttonContent: React.PropTypes.object\n\t};\n\tModal.defaultProps = {\n\t  buttonClass: 'btn btn-primary'\n\t};\n\t\n\texports.default = Modal;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Loader\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Loader component\n\t */\n\tvar Loader = function (_React$Component) {\n\t  _inherits(Loader, _React$Component);\n\t\n\t  function Loader(props) {\n\t    _classCallCheck(this, Loader);\n\t\n\t    return _possibleConstructorReturn(this, (Loader.__proto__ || Object.getPrototypeOf(Loader)).call(this, props));\n\t  }\n\t\n\t  _createClass(Loader, [{\n\t    key: \"render\",\n\t    value: function render() {\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"loader-container\" },\n\t        React.createElement(\"div\", { className: \"loader\" })\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Loader;\n\t}(React.Component);\n\t\n\texports.default = Loader;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\n\t * Modify behaviour of specified column cells in the Data Table component\n\t * @param {string} column - column name\n\t * @param {string} cell - cell content\n\t * @param {arrray} rowData - array of cell contents for a specific row\n\t * @param {arrray} rowHeaders - array of table headers (column names)\n\t * @return {*} a formated table cell for a given column\n\t */\n\tfunction formatColumn(column, cell, rowData, rowHeaders) {\n\t  // If a column if set as hidden, don't display it\n\t  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n\t  //  return null;\n\t  //}\n\t\n\t  // Create the mapping between rowHeaders and rowData in a row object.\n\t  var row = {};\n\t  rowHeaders.forEach(function (header, index) {\n\t    row[header] = rowData[index];\n\t  }, this);\n\t\n\t  // create array of classes to be added to td tag\n\t  var classes = [];\n\t\n\t  // convert array to string, with blank space separator\n\t  classes = classes.join(\" \");\n\t\n\t  //const hasWritePermission = loris.userHasPermission('media_read');\n\t  if (column === 'Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: specimenURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Parent Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Parent Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: specimenURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Container Barcode') {\n\t    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Container Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: containerURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  // if (column === 'Visit Label') {\n\t  //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n\t  //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n\t  //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n\t  //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n\t  //   }\n\t  // }\n\t\n\t  // if (column === 'Edit Metadata') {\n\t  //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n\t  //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n\t  // }\n\t\n\t  return React.createElement(\n\t    \"td\",\n\t    { className: classes },\n\t    cell\n\t  );\n\t}\n\t\n\texports.default = formatColumn;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\n\t * Modify behaviour of specified column cells in the Data Table component\n\t * @param {string} column - column name\n\t * @param {string} cell - cell content\n\t * @param {arrray} rowData - array of cell contents for a specific row\n\t * @param {arrray} rowHeaders - array of table headers (column names)\n\t * @return {*} a formated table cell for a given column\n\t */\n\tfunction formatColumn(column, cell, rowData, rowHeaders) {\n\t  // If a column if set as hidden, don't display it\n\t  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n\t  //  return null;\n\t  //}\n\t\n\t  // Create the mapping between rowHeaders and rowData in a row object.\n\t  var row = {};\n\t  rowHeaders.forEach(function (header, index) {\n\t    row[header] = rowData[index];\n\t  }, this);\n\t\n\t  // create array of classes to be added to td tag\n\t  var classes = [];\n\t\n\t  // convert array to string, with blank space separator\n\t  classes = classes.join(\" \");\n\t\n\t  //const hasWritePermission = loris.userHasPermission('media_read');\n\t  if (column === 'Barcode') {\n\t    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: containerURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Parent Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Parent Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: containerURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  // if (column === 'Visit Label') {\n\t  //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n\t  //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n\t  //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n\t  //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n\t  //   }\n\t  // }\n\t\n\t  // if (column === 'Edit Metadata') {\n\t  //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n\t  //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n\t  // }\n\t\n\t  return React.createElement(\n\t    \"td\",\n\t    { className: classes },\n\t    cell\n\t  );\n\t}\n\t\n\texports.default = formatColumn;\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// modules/biobank/js/biobankIndex.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4408ccbeb91cf7c794fc","import FilterForm from 'FilterForm';\nimport BiobankSpecimenForm from './specimenForm';\nimport BiobankContainerForm from './containerForm';\nimport {Tabs, TabPane} from 'Tabs';\nimport Modal from 'Modal';\nimport Loader from 'Loader';\nimport formatColumnSpecimen from './columnFormatterSpecimen';\nimport formatColumnContainer from './columnFormatterContainer';\n\nclass BiobankIndex extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoaded: false,\n      specimenFilter: {},\n      containerFilter: {},\n      isOpen: false,\n    };\n\n    // Bind component instance to custom methods\n    this.fetchSpecimenData = this.fetchSpecimenData.bind(this);\n    this.fetchFormData = this.fetchFormData.bind(this);\n    this.fetchContainerData = this.fetchContainerData.bind(this);\n    this.updateSpecimenFilter = this.updateSpecimenFilter.bind(this);\n    this.updateContainerFilter = this.updateContainerFilter.bind(this);\n    this.resetFilters = this.resetFilters.bind(this);\n    this.mapFormOptions = this.mapFormOptions.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchSpecimenData();\n    this.fetchFormData();\n    this.fetchContainerData();\n  }\n\n  /**\n   * Retrieve data from the provided URL and save it in state\n   * Additionaly add hiddenHeaders to global loris variable\n   * for easy access by columnFormatter.\n   */\n  fetchSpecimenData() {\n    $.ajax(this.props.specimenDataURL, {\n      method: \"GET\",\n      dataType: 'json',\n      success: function(data) {\n        this.setState({\n          SpecimenData: data,\n          isLoaded: true\n        });\n      }.bind(this),\n      error: function(error) {\n        console.error(error);\n      }\n    });\n  }\n\n  fetchContainerData() {\n    $.ajax(this.props.containerDataURL, {\n      method: \"GET\",\n      dataType: 'json',\n      success: function(data) {\n        this.setState({\n          ContainerData: data,\n          isLoaded: true\n        });\n      }.bind(this),\n      error: function(error) {\n        console.error(error);\n      }\n    });\n  }\n\n  fetchFormData() {\n    $.ajax(this.props.formDataURL, {\n      method: \"GET\",\n      dataType: 'json',\n      success: function(data) {\n        this.setState({\n          FormData: data,\n          isLoaded: true\n        });\n      }.bind(this),\n      error: function(error) {\n        console.error(error);\n      }\n    });\n  }\n\n  updateSpecimenFilter(specimenFilter) {\n    this.setState({specimenFilter});\n  }\n\n  // This works,\n  // but there must be a way to do this with just one updateFilter function\n  updateContainerFilter(containerFilter) {\n    this.setState({containerFilter});\n  }\n\n  resetFilters() {\n    this.refs.biobankFilter.clearFilter();\n  }\n\n //map options for forms\n  mapFormOptions(rawObject, targetAttribute) {\n    var data = {}; \n    for (var id in rawObject) {\n      data[id] = rawObject[id][targetAttribute];\n    }   \n\n    return data;\n  }\n\n  render() {\n    // Waiting for async data to load\n    if (!this.state.isLoaded) {\n      return (\n        <Loader/>\n      );\n    }\n\n    let addSpecimenButton;\n    let addContainerButton;\n    if (loris.userHasPermission('biobank_write')) {\n\n       /**\n        * Map Options for Form Select Elements of Specimen Form\n        */\n       let specimenTypes = this.mapFormOptions(this.state.FormData.specimenTypes, 'type');\n       let containerTypesPrimary = this.mapFormOptions(this.state.FormData.containerTypesPrimary, 'label');\n       let containerBarcodesNonPrimary = this.mapFormOptions(this.state.FormData.containersNonPrimary, 'barcode');\n        \n       let buttonContent = (\n         <div>\n           <span\n             className='glyphicon glyphicon-plus'\n             style={{marginRight: '5px'}}\n           />\n           Add Specimen\n         </div>\n       );\n\n       addSpecimenButton = (\n         <Modal\n           title='Add New Specimen'\n           buttonClass='btn btn-success'\n           buttonStyle={{marginLeft: '10px', border: 'none'}}\n           buttonContent={buttonContent}\n         >\n           <BiobankSpecimenForm\n             specimenTypes={specimenTypes}\n             containerTypesPrimary={containerTypesPrimary}\n             containerBarcodesNonPrimary={containerBarcodesNonPrimary}\n             specimenTypeAttributes={this.state.FormData.specimenTypeAttributes}\n             attributeDatatypes={this.state.FormData.attributeDatatypes}\n             capacities={this.state.FormData.capacities}\n             specimenTypeUnits={this.state.FormData.specimenTypeUnits}\n             pSCIDs={this.state.FormData.pSCIDs}\n             visits={this.state.FormData.visits}\n             sessionData={this.state.FormData.sessionData}\n             action={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=submitSpecimen`}\n             refreshTable={this.fetchSpecimenData}\n           />\n         </Modal>\n       );\n\n       let containerTypesNonPrimary = this.mapFormOptions(this.state.FormData.containerTypesNonPrimary, 'label');\n\n       addContainerButton = (\n         <Modal\n           title='Add New Container'\n           buttonClass='btn btn-success'\n           buttonStyle={{marginLeft: '10px', border: 'none'}}\n         >\n           <BiobankContainerForm\n             containerTypesNonPrimary={containerTypesNonPrimary}\n             sites={this.state.FormData.sites}\n             action={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=submitContainer`}\n             refreshTable={this.fetchContainerData}\n           />\n         </Modal>\n       ); \n    }\n\n    //Look at CCNA code from Zaliqa to modify this to be more streamline\n    var tabList = [\n      {id: \"specimens\", label: \"Specimens\"},\n      {id: \"containers\", label: \"Containers\"}\n    ];\n\n    return (\n    <div id='biobank-page'>\n      <Tabs tabs={tabList} defaultTab=\"specimens\" updateURL={true}>\n        <TabPane TabId={tabList[0].id}>\n          <FilterForm\n            Module=\"biobank\"\n            name=\"specimen_filter\"\n            id=\"specimen_filter\"\n            ref=\"specimenFilter\"\n            columns={3}\n            formElements={this.state.SpecimenData.form}\n            onUpdate={this.updateSpecimenFilter}\n            filter={this.state.specimenFilter}\n          >\n            <br/>\n            <ButtonElement label=\"Clear Filters\" type=\"reset\" onUserInput={this.resetFilters}/>\n            {addSpecimenButton}\n          </FilterForm>\n          <StaticDataTable\n            Data={this.state.SpecimenData.Data}\n            Headers={this.state.SpecimenData.Headers}\n            Filter={this.state.specimenFilter}\n            getFormattedCell={formatColumnSpecimen}\n          />\n        </TabPane>\n        <TabPane TabId={tabList[1].id}>\n          <FilterForm\n            Module=\"biobank\"\n            name=\"container_filter\"\n            id=\"container_filter\"\n            ref=\"containerFilter\"\n            columns={3}\n            formElements={this.state.ContainerData.form}\n            onUpdate={this.updateContainerFilter}\n            filter={this.state.containerFilter}\n\t\t  >\n            <br/>\n            <ButtonElement label=\"Clear Filters\" type=\"reset\" onUserInput={this.resetFilters}/>\n            {addContainerButton}\n          </FilterForm>\t\t\t\n          <StaticDataTable\n            Data={this.state.ContainerData.Data}\n            Headers={this.state.ContainerData.Headers}\n            Filter={this.state.containerFilter}\n            getFormattedCell={formatColumnContainer}\n          />\n        </TabPane>\n      </Tabs>\n      </div>\n    );\n  }\n}\n\n$(function() {\n  const biobankIndex = (\n    <div className=\"page-biobank\">\n      <BiobankIndex \n        specimenDataURL={`${loris.BaseURL}/biobank/?format=json`} \n        containerDataURL={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=getContainerFilterData`} \n        formDataURL={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=getFormData`}\n      />\n    </div>\n  );\n\n  ReactDOM.render(biobankIndex, document.getElementById(\"lorisworkspace\"));\n});\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/biobankIndex.js","/**\n * This file contains React component for FilterForm\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\nimport Panel from 'Panel';\n\n/**\n * FilterForm component.\n * A wrapper for form elements inside a selection filter.\n *\n * Adds necessary filter callbacks to all children and passes them to FormElement\n * for proper rendering.\n *\n * Keeps track of filter object and sends it to parent on every update.\n *\n * //HACK/NOTE: Loris has special behaviour for `candID` attribute in the query string,\n * making it impossible to use it for selection filters. This components renames\n * all `candID` fields to `candidateID` automatically before appending them to URL.\n *\n */\nclass FilterForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    // Bind component instance to custom methods\n    this.clearFilter = this.clearFilter.bind(this);\n    this.getFormChildren = this.getFormChildren.bind(this);\n    this.setFilter = this.setFilter.bind(this);\n    this.onElementUpdate = this.onElementUpdate.bind(this);\n\n    // Keeps track of querystring values\n    // Saved as class variable instead of keeping in state\n    this.queryString = QueryString.get();\n  }\n\n  componentDidMount() {\n    let filter = {};\n    let queryString = this.queryString;\n\n    // Initiaze filter using querystring value\n    Object.keys(queryString).forEach(function(key) {\n      let filterKey = (key === 'candidateID') ? 'candID' : key;\n      filter[filterKey] = {\n        value: queryString[key],\n        exactMatch: false\n      };\n    });\n\n    // Update parent component\n    this.props.onUpdate(filter);\n  }\n\n  /**\n   * Clear the filter object, querystring and input fields\n   */\n  clearFilter() {\n    this.queryString = QueryString.clear(this.props.Module);\n    this.props.onUpdate({});\n  }\n\n  /**\n   * Itterates through FilterForm children, sets necessary callback functions\n   * and initializes filterTable\n   *\n   * @return {Array} formChildren - array of children with necessary props\n   */\n  getFormChildren() {\n    let formChildren = [];\n    React.Children.forEach(this.props.children, function(child, key) {\n      // If child is a React component (i.e not a simple DOM element)\n      if (React.isValidElement(child) &&\n        typeof child.type === \"function\" &&\n        child.props.onUserInput\n      ) {\n        let callbackFunc = child.props.onUserInput;\n        let callbackName = callbackFunc.name;\n        let elementName = child.type.displayName;\n        let queryFieldName = (child.props.name === 'candID') ? 'candidateID' : child.props.name;\n        let filterValue = this.queryString[queryFieldName];\n        // If callback function was not set, set it to onElementUpdate() for form\n        // elements and to clearFilter() for <ButtonElement type='reset'/>.\n        if (callbackName === \"onUserInput\") {\n          if (elementName === \"ButtonElement\" && child.props.type === \"reset\") {\n            callbackFunc = this.clearFilter;\n          } else {\n            callbackFunc = this.onElementUpdate.bind(null, elementName);\n          }\n        }\n        // Pass onUserInput and value props to all children\n        formChildren.push(React.cloneElement(child, {\n          onUserInput: callbackFunc,\n          value: filterValue ? filterValue : '',\n          key: key\n        }));\n        // Initialize filter for StaticDataTable\n        this.setFilter(elementName, child.props.name, filterValue);\n      } else {\n        formChildren.push(React.cloneElement(child, {key: key}));\n      }\n    }.bind(this));\n\n    return formChildren;\n  }\n\n  /**\n   * Appends entry to filter object or deletes it if value is\n   * empty.\n   *\n   * Sets exactMatch to true for all SelectElements (i.e dropdowns)\n   * in order to force StaticDataTable to do exact comparaison\n   *\n   * @param {string} type - form element type (i.e component name)\n   * @param {string} key - the name of the form element\n   * @param {string} value - the value of the form element\n   *\n   * @return {{}} filter - filterData\n   */\n  setFilter(type, key, value) {\n    let filter = {};\n    if (this.props.filter) {\n      filter = JSON.parse(JSON.stringify(this.props.filter));\n    }\n\n    if (key && value) {\n      filter[key] = {};\n      filter[key].value = value;\n      filter[key].exactMatch = (type === \"SelectElement\");\n    } else if (filter && key && value === '') {\n      delete filter[key];\n    }\n\n    return filter;\n  }\n\n  /**\n   * Sets filter object and querystring to reflect values of input fields\n   *\n   * @param {string} type - form element type (i.e component name)\n   * @param {string} fieldName - the name of the form element\n   * @param {string} fieldValue - the value of the form element\n   */\n  onElementUpdate(type, fieldName, fieldValue) {\n    // Make sure both key/value are string before sending them to querystring\n    if (typeof fieldName !== \"string\" || typeof fieldValue !== \"string\") {\n      return;\n    }\n\n    // Update query string\n    let queryFieldName = (fieldName === 'candID') ? 'candidateID' : fieldName;\n    this.queryString = QueryString.set(this.queryString, queryFieldName, fieldValue);\n\n    // Update filter and get new filter object\n    let filter = this.setFilter(type, fieldName, fieldValue);\n    this.props.onUpdate(filter);\n  }\n\n  render() {\n    // Get formatted children\n    let formChildren = this.getFormChildren();\n    let formElements = this.props.formElements;\n\n    if (formElements) {\n      Object.keys(formElements).forEach(function(fieldName) {\n        let queryFieldName = (fieldName === 'candID') ? 'candidateID' : fieldName;\n        formElements[fieldName].onUserInput = this.onElementUpdate.bind(null, fieldName);\n        formElements[fieldName].value = this.queryString[queryFieldName];\n      }.bind(this));\n    }\n\n    return (\n      <Panel\n        id={this.props.id}\n        height={this.props.height}\n        title={this.props.title}\n      >\n        <FormElement {...this.props}>\n          {formChildren}\n        </FormElement>\n      </Panel>\n    );\n  }\n}\n\nFilterForm.defaultProps = {\n  id: 'selection-filter',\n  height: '100%',\n  title: 'Selection Filter',\n  onUpdate: function() {\n    console.warn('onUpdate() callback is not set!');\n  }\n};\nFilterForm.propTypes = {\n  Module: React.PropTypes.string.isRequired,\n  filter: React.PropTypes.object.isRequired,\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  onUpdate: React.PropTypes.func\n};\n\nexport default FilterForm;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/FilterForm.js","/**\n * This file contains React component for Panel\n *\n * @author Alex I.\n * @version 1.0.0\n *\n */\n\n/**\n * Panel component\n * Wraps children in a collapsible bootstrap panel\n */\nclass Panel extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsed: this.props.initCollapsed\n    };\n\n    // Initialize panel class based on collapsed status\n    this.panelClass = (\n      this.props.initCollapsed ?\n        \"panel-collapse collapse\" :\n        \"panel-collapse collapse in\"\n    );\n\n    this.toggleCollapsed = this.toggleCollapsed.bind(this);\n  }\n\n  toggleCollapsed() {\n    this.setState({collapsed: !this.state.collapsed});\n  }\n\n  render() {\n    // Change arrow direction based on collapse status\n    let glyphClass = (\n      this.state.collapsed ?\n        \"glyphicon pull-right glyphicon-chevron-down\" :\n        \"glyphicon pull-right glyphicon-chevron-up\"\n    );\n\n    let pencilGlyph;\n    if (this.props.edit) {\n      pencilGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-pencil\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.edit}\n        /> \n      );\n    } \n\n    let plusGlyph;\n    if (this.props.add) {\n      plusGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-plus\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.add}\n        />\n      );\n    }\n\n    let removeGlyph;\n    if (this.props.cancel) {\n      removeGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-remove\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.cancel}\n        />\n      );\n    }\n\n    // Add panel header, if title is set\n    const panelHeading = this.props.title ? (\n      <div\n        className=\"panel-heading\"\n      >\n        <span \n          className={glyphClass}\n          onClick={this.toggleCollapsed}\n          data-toggle=\"collapse\"\n          data-target={'#' + this.props.id}\n          style={{cursor: 'pointer'}}\n        />\n        {pencilGlyph}\n        {plusGlyph}\n        {removeGlyph}\n        {this.props.title}\n      </div>\n    ) : '';\n\n    return (\n      <div className=\"panel panel-primary\">\n        {panelHeading}\n        <div id={this.props.id} className={this.panelClass} role=\"tabpanel\">\n          <div className=\"panel-body\" style={{height: this.props.height}}>\n            {this.props.children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPanel.propTypes = {\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  edit: React.PropTypes.func,\n  add: React.PropTypes.func\n};\nPanel.defaultProps = {\n  initCollapsed: false,\n  id: 'default-panel',\n  height: '100%'\n};\n\nexport default Panel;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Panel.js","import BiobankBarcodeForm from './barcodeForm.js';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankSpecimenForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      barcodeFormList: {},\n      errorMessage: null,\n      formErrors: {},\n      countBarcodeForms: [1] \n    };\n\n    //this.getValidFileName = this.getValidFileName.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    //this.isValidFileName = this.isValidFileName.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.specimenSubmit = this.specimenSubmit.bind(this);\n    this.addBarcodeForm = this.addBarcodeForm.bind(this);\n    this.setBarcodeFormData = this.setBarcodeFormData.bind(this);\n  }\n\n  componentDidMount() {\n\n    //if this is a child specimen form then certain formData is set when component mounts\n    if (this.props.child) {\n      var formData = this.state.formData;\n      formData['parentSpecimen'] = this.props.specimenId;\n      formData['pscid'] = this.props.candidateId;\n      formData['visitLabel'] = this.props.sessionId;\n      formData['unitId'] = this.props.unitId;\n\n      this.setState({\n        formData: formData\n      });\n    }\n  }\n\n  render() {\n\n    //Styling for remove Barcode button\n    const glyphStyle = {\n     color: '#D3D3D3',\n     margin: 'auto',\n    }; \n    const buttonStyle = {\n      appearance: 'none',\n      outline: 'none',\n      boxShadow: 'none',\n      borderColor: 'transparent',\n      backgroundColor: 'transparent',\n       \n    };\n\n    //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n    var barcodeForms = [];\n    for (let i = 0; i < this.state.countBarcodeForms.length; i++) {\n      barcodeForms.push(\n        <BiobankBarcodeForm\n          setParentFormData={this.setBarcodeFormData}\n          id={this.state.countBarcodeForms[i]}\n          specimenTypes={this.props.specimenTypes}\n          containerTypesPrimary={this.props.containerTypesPrimary}\n          containerBarcodesNonPrimary={this.props.containerBarcodesNonPrimary}\n          specimenTypeAttributes={this.props.specimenTypeAttributes}\n          attributeDatatypes={this.props.attributeDatatypes}\n          capacities={this.props.capacities}\n          specimenTypeUnits={this.props.specimenTypeUnits}\n          units={this.props.units}\n          button={i+1 === this.state.countBarcodeForms.length ? (\n            <button \n              type=\"button\"\n              className=\"btn btn-success btn-sm\"\n              onClick={this.addBarcodeForm}\n            >   \n              <span className=\"glyphicon glyphicon-plus\"/>\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"btn btn-primary-outline btn-sm\"\n              style={buttonStyle}\n              onClick={() => this.removeBarcodeForm(i)}\n            >\n            <span className=\"glyphicon glyphicon-remove\" style={glyphStyle}/>\n            </button>\n          )}\n        />\n      );\n    }\n\n\n    let globalFields;\n    let remainingQuantityFields;\n    if (this.props.child) {\n      globalFields = (   \n        <div>\n          <StaticElement\n            label=\"Parent Specimen\"\n            text={this.props.barcode}\n          />\n          <StaticElement\n            label=\"PSCID\"\n            text={this.props.pscid}\n          />\n          <StaticElement\n            label=\"Visit Label\"\n            text={this.props.visit}\n          />\n        </div>\n      );\n\n      //It may be wise to make unit static and forced, or atleast prepopulated --\n      remainingQuantityFields = (\n        <div>\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Remaining Quantity\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={this.props.specimenUnits}\n            onUserInput={this.setFormData}\n            emptyOption={false}\n            required={true}\n            value={this.state.formData.unitId}\n          />\n        </div>\n      );\n\n    } else {\n      globalFields = (\n          <div>\n            <SelectElement\n              name=\"pscid\"\n              label=\"PSCID\"\n              options={this.props.pSCIDs}\n              onUserInput={this.setFormData}\n              ref=\"pscid\"\n              required={true}\n              value={this.state.formData.pscid}\n            />\n            <SelectElement\n              name=\"visitLabel\"\n              label=\"Visit Label\"\n              options={this.state.visits}\n              onUserInput={this.setFormData}\n              ref=\"visitLabel\"\n              required={true}\n              value={this.state.formData.visitLabel}\n              disabled={this.state.formData.pscid ? false : true}\n            />\n          </div>\n      );\n    }\n\n    //ALLOW THEM TO CANCEL THE FORM AND DELETE BARCODE FORMS\n    return (\n      <FormElement\n        name=\"specimenForm\"\n        id='specimenForm'\n        onSubmit={this.handleSubmit}\n        ref=\"form\"\n      >\n        <br/>\n        <div className='row'>\n          <div className=\"col-xs-11\">\n            {globalFields}\n          </div>\n        </div>\n        {barcodeForms}\n        <div className='row'>\n          <div className=\"col-xs-11\">\n            {remainingQuantityFields}\n          </div>\n        </div>\n        <div className=\"col-xs-3 col-xs-offset-9\">\n          <ButtonElement label=\"Submit\"/>\n        </div>\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n  /**\n   * Returns a valid name for the file to be specimened\n   *\n   * @param {string} pscid - PSCID selected from the dropdown\n   * @param {string} visitLabel - Visit label selected from the dropdown\n   * @param {string} instrument - Instrument selected from the dropdown\n   * @return {string} - Generated valid filename for the current selection\n   */\n//  getValidFileName(pscid, visitLabel, instrument) {\n//    var fileName = pscid + \"_\" + visitLabel;\n//    if (instrument) fileName += \"_\" + instrument;\n//\n//    return fileName;\n//  }\n\n\n  validateForm(formElement, value) {\n    let formErrors = this.state.formErrors;\n\n    //validate barcode regex\n    if (formElement === \"barcode\" && value !== \"\") {\n      if (!(/^hello/.test(this.state.formData.barcode))) {\n        formErrors.barcode = true;\n      } else {\n        formErrors.barcode = false;\n      }\n    }\n\n    //validate that quantity is a number and less than capacity\n    if (formElement === \"quantity\" && value !== \"\") {\n      if (isNaN(value) || (value > this.props.capacities[this.state.currentContainerType])) {\n        formErrors.quantity = true;\n      } else {\n        formErrors.quantity = false;\n      }\n    }\n\n    //validate datatypes and regex of generated type attributes\n    var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n    var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n\n      let datatype = this.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"number\") {\n        if (formElement === attribute) {\n          if (isNaN(value) && value !== \"\") {\n            formErrors[attribute] = true;\n          } else {\n            formErrors[attribute] = false;\n          }\n        }\n      }\n    })\n\n    this.setState({\n      formErrors: formErrors\n    });\n\n  }\n\n\n  /**\n   * Handle form submission\n   * @param {object} e - Form submission event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    let formRefs = this.refs;\n    //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\n    // Validate the form\n    if (!this.isValidForm(formRefs, formData)) {\n      return;\n    }\n\n\n//    // Validate specimened file name\n//    let instrument = formData.instrument ? formData.instrument : null;\n//    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n//    let requiredFileName = this.getValidFileName(\n//      formData.pscid, formData.visitLabel, instrument\n//    );\n//    if (!this.isValidFileName(requiredFileName, fileName)) {\n//      swal(\n//        \"Invalid Specimen name!\",\n//        \"File name should begin with: \" + requiredFileName,\n//        \"error\"\n//      );\n//      return;\n//    }\n\n    // Check for duplicate file names\n//    let isDuplicate = biobankFiles.indexOf(fileName);\n//    if (isDuplicate >= 0) {\n//      swal({\n//        title: \"Are you sure?\",\n//        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n//        type: \"warning\",\n//        showCancelButton: true,\n//        confirmButtonText: 'Yes, I am sure!',\n//        cancelButtonText: \"No, cancel it!\"\n//      }, function(isConfirm) {\n//        if (isConfirm) {\n//          this.specimenFile();\n//        } else {\n//          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n//        }\n//      }.bind(this));\n//    } else {\n\n    this.specimenSubmit();\n//    }\n  }\n\n  /*\n   * Uploads the file to the server\n   */\n  specimenSubmit() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        // FOR SOME REASON THIS IS NO LONGER WORKING\n        // Trigger an update event to update all observers (i.e DataTable)\n        // THIS CURRENTLY DOES NOT WORK - LOOK INTO IT\n        let event = new CustomEvent('update-datatable');\n        window.dispatchEvent(event);\n\n        //refreshes table if not a child\n        if (!this.props.child) {\n          this.props.refreshTable();\n        }\n        swal(\"Specimen Submission Successful!\", \"\", \"success\");\n        this.props.closeModal();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Checks if the inputted file name is valid\n   *\n   * @param {string} requiredFileName - Required file name\n   * @param {string} fileName - Provided file name\n   * @return {boolean} - true if fileName starts with requiredFileName, false\n   *   otherwise\n   */\n//  isValidFileName(requiredFileName, fileName) {\n//    if (fileName === null || requiredFileName === null) {\n//      return false;\n//    }\n//\n//    return (fileName.indexOf(requiredFileName) === 0);\n//  }\n\n  /**\n   * Validate the form\n   *\n   * @param {object} formRefs - Object containing references to React form elements\n   * @param {object} formData - Object containing form data inputed by user\n   * @return {boolean} - true if all required fields are filled, false otherwise\n   */\n  isValidForm(formRefs, formData) {\n    var isValidForm = true;\n\n    var requiredFields = {\n      pscid: null,\n      visitLabel: null,\n    };\n\n    Object.keys(requiredFields).map(function(field) {\n      if (formData[field]) {\n        requiredFields[field] = formData[field];\n      } else if (formRefs[field]) {\n        formRefs[field].props.hasError = true;\n        isValidForm = false;\n      }\n    });\n    this.forceUpdate();\n\n    return isValidForm;\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    // Only display visits and sites available for the current pscid\n    //let visitLabel = this.state.formData.visitLabel;\n    //let pscid = this.state.formData.pscid;\n  \n    //LOOK AT THIS LATER - THE SWITCH TO PROPS MESSED THIS ALL UP \n    if (formElement === \"pscid\" && value !== \"\") {\n      this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n      //this.state.Data.sites = this.state.Data.sessionData[this.state.Data.PSCIDs[value]].sites;\n    }\n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  setBarcodeFormData(barcodeFormData, barcodeId) {\n    var formData = this.state.formData;\n    var barcodeFormList = this.state.barcodeFormList;\n    barcodeFormList[barcodeId] = barcodeFormData;\n    formData['barcodeFormList'] = barcodeFormList;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  addBarcodeForm() {\n    let countBarcodeForms = this.state.countBarcodeForms;\n    countBarcodeForms.push(countBarcodeForms[countBarcodeForms.length -1] + 1); \n    this.setState({\n      countBarcodeForms: countBarcodeForms\n    });\n  }\n\n  removeBarcodeForm(index) {\n    let countBarcodeForms = this.state.countBarcodeForms;\n    countBarcodeForms.splice(index, 1);\n    this.setState({\n      countBarcodeForms: countBarcodeForms\n    });\n  }\n\n}\n\nBiobankSpecimenForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired,\n  barcode: React.PropTypes.string,\n  refreshTable: React.PropTypes.func\n};\n\nexport default BiobankSpecimenForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenForm.js","import SpecimenCollectionForm from './collectionForm'\n\n/**\n * Biobank Barcode Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass BiobankBarcodeForm extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      formData: {},\n      formErrors: {},\n    };\n   \n    this.setFormData = this.setFormData.bind(this);\n    this.setSpecimenFormData = this.setSpecimenFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n  }\n\n  render() {\n\n    return (\n      <FormElement\n        name=\"biobankBarcode\"\n      >\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <div \n              data-toggle=\"collapse\" \n              data-target={\"#\" + this.props.id}\n            >   \n              <TextboxElement\n                name={\"barcode\"}\n                label={\"Barcode \" + this.props.id}\n                onUserInput={this.setFormData}\n                ref={\"barcode\"}\n                required={true}\n                value={this.state.formData[\"barcode\"]}\n                hasError={this.state.formErrors[\"barcode\"]}\n                errorMessage=\"Incorrect Barcode format for this Specimen and Container Type\"\n              />\n            </div>\n          </div>\n          <div className=\"col-xs-1\">\n            {this.props.button}\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xs-2\"/>\n          <div className=\"col-xs-9\">\n            <div id={this.props.id} className=\"collapse\">\n              <SpecimenCollectionForm\n                setParentFormData={this.setSpecimenFormData}\n                specimenTypes={this.props.specimenTypes}\n                specimenTypeAttributes={this.props.specimenTypeAttributes}\n                attributeDatatypes={this.props.attributeDatatypes}\n                containerTypesPrimary={this.props.containerTypesPrimary}\n                containerBarcodesNonPrimary={this.props.containerBarcodesNonPrimary}\n                specimenTypeUnits={this.props.specimenTypeUnits}\n                stati={this.props.stati}\n              />\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState(\n      {\n      formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setSpecimenFormData(specimenFormData) {\n    var formData = this.state.formData;\n    \n    for (var attribute in specimenFormData) {\n      formData[attribute] = specimenFormData[attribute]\n    }\n \n    this.setState(\n      {\n      formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    this.props.setParentFormData(this.state.formData, this.props.id);\n  }\n}\n\nBiobankBarcodeForm.propTypes = {\n  \n  id: React.PropTypes.string,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n}\n\nexport default BiobankBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/barcodeForm.js","\n/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenCollectionForm extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      formData: {data:{}},\n      currentSpecimenType: this.props.edit ? this.props.specimenType : null,\n      currentContainerType: this.props.edit ? this.props.containerType : null,\n      formErrors: {},\n    };\n\n    this.setFormData = this.setFormData.bind(this);\n    this.setSpecimenTypeFieldFormData = this.setSpecimenTypeFieldFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n    this.getSpecimenTypeFields = this.getSpecimenTypeFields.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.updateSpecimen = this.updateSpecimen.bind(this);\n  }\n\n  componentDidMount() {\n    let formData = this.state.formData;\n    if (this.props.edit) {\n      formData['specimenId']    = this.props.specimenId;\n      formData['containerId']   = this.props.containerId;\n      formData['specimenType']  = this.props.specimenType;\n      formData['containerType'] = this.props.containerType;\n      formData['quantity']      = this.props.collection.quantity;\n      formData['unitId']        = this.props.collection.unitId;\n      formData['date']          = this.props.collection.date;\n      formData['time']          = this.props.collection.time;\n      formData['comments']      = this.props.collection.comments;\n\n      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n      if (specimenTypeFieldsObject) {\n        var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n          formData.data[attribute] = this.props.collection.data[attribute];\n        });\n      }\n    }\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  render() {\n\n    var parentContainerField;\n    if (!this.props.edit) {\n      parentContainerField = (\n        <SelectElement\n          name=\"parentContainer\"\n          label=\"Parent Container Barcode\"\n          options={this.props.containerBarcodesNonPrimary}\n          onUserInput={this.setFormData}\n          ref=\"parentContainer\"\n          required={false}\n          value={this.state.formData.parentContainer}\n        />\n      );\n    }\n\n    var updateButton;\n    if (this.props.edit) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    }\n\n    //This block of code should potentially be moved to setFormData();\n    //Consider Refactoring...\n    var specimenTypeUnits = {};\n    if (this.state.currentSpecimenType) {\n     \n      //This modifies the selections for unit drop down based on the chosend specimen type \n      for (var id in this.props.specimenTypeUnits[this.state.currentSpecimenType]) {\n        specimenTypeUnits[id] = this.props.specimenTypeUnits[this.state.currentSpecimenType][id].unit;\n      }\n\n      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n      if (specimenTypeFieldsObject) {\n        var specimenTypeFields = this.getSpecimenTypeFields(specimenTypeFieldsObject);\n      }\n    }\n\n    var specimenFields;\n    if (this.state.currentSpecimenType) {\n      specimenFields = (\n        <div>\n          <SelectElement\n            name=\"containerType\"\n            label=\"Container Type\"\n            options={this.props.containerTypesPrimary}\n            onUserInput={this.setFormData}\n            ref=\"containerType\"\n            required={true}\n            value={this.state.formData.containerType}\n          />\n          {parentContainerField}\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Quantity\"\n            onUserInput={this.setFormData}\n            ref=\"quantity\"\n            required={true}\n            value={this.state.formData.quantity}\n            hasError={this.state.formErrors.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={specimenTypeUnits}\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.unitId}\n          />\n          {specimenTypeFields}\n          <DateElement\n            name=\"date\"\n            label=\"Date\"\n            minYear=\"2000\"\n            maxYear=\"2018\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.date}\n          />\n          <TimeElement\n            name=\"time\"\n            label=\"Time\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.time}\n          />\n          <TextareaElement\n            name=\"comments\"\n            label=\"Comments\"\n            onUserInput={this.setFormData}\n            ref=\"comments\"\n            value={this.state.formData.comments}\n          />\n          {updateButton}\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"biobankSpecimen\"\n        onSubmit={this.handleUpdate}\n        ref=\"form\"\n      >\n        <div>\n          <SelectElement\n            name=\"specimenType\"\n            label=\"Specimen Type\"\n            options={this.props.specimenTypes}\n            onUserInput={this.setFormData}\n            ref=\"specimenType\"\n            required={true}\n            value={this.state.formData.specimenType}\n          />\n        {specimenFields}\n        </div>\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n\n    let formData = this.state.formData;\n    formData[formElement] = value;\n\n    if (formElement === \"specimenType\" && value !== \"\") {\n      //This throws a warning if the specimen type is changed because of the cascading effects this \n      //would cause.\n      if (this.props.edit) {\n        swal({\n          title: \"Warning\",\n          text: \"Changing the specimen type will result in the loss of any preparation or anaylsis \"+\n            \"data for this specimen. You will also need to manually change the specimen type of any \"+\n            \"aliquots derived from this specimen. Proceed with caution.\",\n          type: \"warning\",\n          showCancelButton: true,\n          confirmButtonText: 'Cancel Change',\n          cancelButtonText: 'Proceed',\n        }, \n        function(isConfirm) {\n          if (isConfirm) {\n            this.props.toggleEdit();\n          } else {\n          }\n        }.bind(this));\n      }\n\n      //This is to eliminate the values for the specimen type fields\n      //This could potentially be improved later to retain the values\n      //for the fields that are common across specimen types\n      formData.data = {}; \n      this.setState({\n        currentSpecimenType: value\n      });\n    }\n\n    if (formElement === \"containerType\" && value !== \"\") {\n      this.setState({\n        currentContainerType: value\n      });\n    }\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setSpecimenTypeFieldFormData(formElement, value) {\n    let formData = this.state.formData;\n    formData.data[formElement] = value;\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  \n  }\n\n  setParentFormData() {\n    if (!this.props.edit) {\n      var formData = this.state.formData;\n      this.props.setParentFormData(formData);\n    }\n  }\n\n  // This generates all the form fields for a given specimen type\n  getSpecimenTypeFields(fieldsObject) {\n    var specimenTypeFields = Object.keys(fieldsObject).map((attribute) => {\n      let datatype = this.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"text\" || datatype === \"number\") {\n        if (fieldsObject[attribute]['refTableId'] == null) {\n          return (\n            <TextboxElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              onUserInput={this.setSpecimenTypeFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribute]['required']}\n              value={this.state.formData.data[attribute]}\n              hasError={this.state.formErrors[attribute]}\n              errorMessage={\"This is a \" + datatype + \" field.\"}\n            />\n          );\n        }\n\n        // OPTIONS FOR SELECT ELEMENT WILL MOST LIKELY BE PASSED VIA AJAX CALL\n        // BUT IT CAN ALSO BE PRELOADED --\n        // ASK RIDA HOW THIS SHOULD BE DONE\n        if (fieldsObject[attribute]['refTableId'] !== null) {\n          return (\n            <SelectElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              options=\"\"\n              onUserInput={this.setSpecimenTypeFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribte]['required']}\n              value={this.state.formData.data[attribute]}\n            />\n          );\n        }\n      }\n\n      if (datatype === \"datetime\") {\n        return (\n          <DateElement\n            name={attribute}\n            label={fieldsObject[attribute]['name']}\n            onUserInput={this.setSpecimenTypeFieldFormData}\n            ref={attribute}\n            required={fieldsObject[attribute]['required']}\n            value={this.state.formData.data[attribute]}\n          />\n        );\n      }\n\n      if (datatype === \"boolean\") {\n      \n      }\n    })\n\n    return specimenTypeFields;\n  }\n\n  handleUpdate(e) {\n    //more things will go here later\n    this.updateSpecimen();\n  }\n\n  updateSpecimen() {\n    let formData = this.state.formData;\n    formData['data'] = JSON.stringify(formData['data']);\n\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        //Update Parent Specimen Page Here\n        formData.data = JSON.parse(formData.data);\n        this.props.updateCollection(formData);\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n}\n\nSpecimenCollectionForm.propTypes = {\n  setParentFormData: React.PropTypes.func,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n}\n\nexport default SpecimenCollectionForm;\n\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/collectionForm.js","import ContainerBarcodeForm from './containerBarcodeForm.js';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankContainerForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      barcodeFormList: {},\n      formErrors: {},\n      countBarcodeForms: [1],\n      errorMessage: null\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.containerSubmit = this.containerSubmit.bind(this);\n    this.addBarcodeForm = this.addBarcodeForm.bind(this);\n    this.setBarcodeFormData = this.setBarcodeFormData.bind(this);\n  }\n\n  componentDidMount() {\n\n    //if this is a child specimen form then certain formData is set when component mounts\n    if (this.props.child) {\n      var formData = this.state.formData;\n      formData['parentSpecimen'] = this.props.specimenId;\n      formData['visitLabel'] = this.props.sessionId;\n\n      this.setState({\n        formData: formData\n      });\n    }\n  }\n\n  render() {\n\n    //Styling for remove Barcode button\n    const glyphStyle = {\n     color: '#D3D3D3',\n     margin: 'auto',\n    }; \n    const buttonStyle = {\n      appearance: 'none',\n      outline: 'none',\n      boxShadow: 'none',\n      borderColor: 'transparent',\n      backgroundColor: 'transparent',\n       \n    };\n\n    //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n    var barcodeForms = [];\n    for (let i = 0; i < this.state.countBarcodeForms.length; i++) {\n      barcodeForms.push(\n        <ContainerBarcodeForm\n          setParentFormData={this.setBarcodeFormData}\n          id={this.state.countBarcodeForms[i]}\n          containerTypesNonPrimary={this.props.containerTypesNonPrimary}\n          containerBarcodesNonPrimary={this.props.containerBarcodesNonPrimary}\n          button={i+1 === this.state.countBarcodeForms.length ? (\n            <button \n              type=\"button\"\n              className=\"btn btn-success btn-sm\"\n              onClick={this.addBarcodeForm}\n            >   \n              <span className=\"glyphicon glyphicon-plus\"/>\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"btn btn-primary-outline btn-sm\"\n              style={buttonStyle}\n              onClick={() => this.removeBarcodeForm(i)}\n            >\n            <span className=\"glyphicon glyphicon-remove\" style={glyphStyle}/>\n            </button>\n          )}\n        />\n      );\n    }\n\n    //ALLOW THEM TO CANCEL THE FORM AND DELETE BARCODE FORMS\n    return (\n      <FormElement\n        name=\"specimenForm\"\n        onSubmit={this.handleSubmit}\n        ref=\"form\"\n      >\n        <h3><b>Add New Container{this.state.countBarcodeForms > 1 ? \"s\" : \"\"}</b></h3>\n        <br/>\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <SelectElement\n              name=\"site\"\n              label=\"Site\"\n              options={this.props.sites}\n              onUserInput={this.setFormData}\n              ref=\"site\"\n              required={true}\n              value={this.state.formData.site}\n            />\n          </div>\n        </div>\n        {barcodeForms}\n          <div className=\"col-xs-3 col-xs-offset-9\">\n            <ButtonElement label=\"Submit\"/>\n          </div>\n        <a onClick={this.toggleModal}>Cancel</a>\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n  /**\n   * Returns a valid name for the file to be specimened\n   *\n   * @param {string} visitLabel - Visit label selected from the dropdown\n   * @param {string} instrument - Instrument selected from the dropdown\n   * @return {string} - Generated valid filename for the current selection\n   */\n\n\n  validateForm(formElement, value) {\n    let formErrors = this.state.formErrors;\n\n    //validate barcode regex\n    if (formElement === \"barcode\" && value !== \"\") {\n      if (!(/^hello/.test(this.state.formData.barcode))) {\n        formErrors.barcode = true;\n      } else {\n        formErrors.barcode = false;\n      }\n    }\n\n    //validate that quantity is a number and less than capacity\n    if (formElement === \"quantity\" && value !== \"\") {\n      if (isNaN(value) || (value > this.props.capacities[this.state.currentContainerType])) {\n        formErrors.quantity = true;\n      } else {\n        formErrors.quantity = false;\n      }\n    }\n\n    //validate datatypes and regex of generated type attributes\n    var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n    var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n\n      let datatype = this.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"number\") {\n        if (formElement === attribute) {\n          if (isNaN(value) && value !== \"\") {\n            formErrors[attribute] = true;\n          } else {\n            formErrors[attribute] = false;\n          }\n        }\n      }\n    })\n\n    this.setState({\n      formErrors: formErrors\n    });\n\n  }\n\n\n  /**\n   * Handle form submission\n   * @param {object} e - Form submission event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    let formRefs = this.refs;\n    //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\n    // Validate the form\n    if (!this.isValidForm(formRefs, formData)) {\n      return;\n    }\n\n\n//    // Validate specimened file name\n//    let instrument = formData.instrument ? formData.instrument : null;\n//    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n//    if (!this.isValidFileName(requiredFileName, fileName)) {\n//      swal(\n//        \"Invalid Specimen name!\",\n//        \"File name should begin with: \" + requiredFileName,\n//        \"error\"\n//      );\n//      return;\n//    }\n\n    // Check for duplicate file names\n//    let isDuplicate = biobankFiles.indexOf(fileName);\n//    if (isDuplicate >= 0) {\n//      swal({\n//        title: \"Are you sure?\",\n//        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n//        type: \"warning\",\n//        showCancelButton: true,\n//        confirmButtonText: 'Yes, I am sure!',\n//        cancelButtonText: \"No, cancel it!\"\n//      }, function(isConfirm) {\n//        if (isConfirm) {\n//          this.specimenFile();\n//        } else {\n//          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n//        }\n//      }.bind(this));\n//    } else {\n\n    this.containerSubmit();\n//    }\n  }\n\n  /*\n   * Uploads the file to the server\n   */\n  containerSubmit() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        // Trigger an update event to update all observers (i.e DataTable)\n        // THIS CURRENTLY DOES NOT WORK\n        let event = new CustomEvent('update-datatable');\n        window.dispatchEvent(event);\n\n        this.props.closeModal();\n \n        //refreshes table \n        //may need refresh specimen data as well? probably..\n        this.props.refreshTable();\n        swal(\"Container Submission Successful!\", \"\", \"success\");\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Checks if the inputted file name is valid\n   *\n   * @param {string} requiredFileName - Required file name\n   * @param {string} fileName - Provided file name\n   * @return {boolean} - true if fileName starts with requiredFileName, false\n   *   otherwise\n   */\n//  isValidFileName(requiredFileName, fileName) {\n//    if (fileName === null || requiredFileName === null) {\n//      return false;\n//    }\n//\n//    return (fileName.indexOf(requiredFileName) === 0);\n//  }\n\n  /**\n   * Validate the form\n   *\n   * @param {object} formRefs - Object containing references to React form elements\n   * @param {object} formData - Object containing form data inputed by user\n   * @return {boolean} - true if all required fields are filled, false otherwise\n   */\n  isValidForm(formRefs, formData) {\n    var isValidForm = true;\n\n    var requiredFields = {\n      visitLabel: null,\n    };\n\n    Object.keys(requiredFields).map(function(field) {\n      if (formData[field]) {\n        requiredFields[field] = formData[field];\n      } else if (formRefs[field]) {\n        formRefs[field].props.hasError = true;\n        isValidForm = false;\n      }\n    });\n    this.forceUpdate();\n\n    return isValidForm;\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    //let visitLabel = this.state.formData.visitLabel;\n  \n    //LOOK AT THIS LATER - THE SWITCH TO PROPS MESSED THIS ALL UP \n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  setBarcodeFormData(barcodeFormData, barcodeId) {\n    var formData = this.state.formData;\n    var barcodeFormList = this.state.barcodeFormList;\n    barcodeFormList[barcodeId] = barcodeFormData;\n    formData['barcodeFormList'] = barcodeFormList;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  addBarcodeForm() {\n    let countBarcodeForms = this.state.countBarcodeForms;\n    countBarcodeForms.push(countBarcodeForms[countBarcodeForms.length -1] + 1); \n    this.setState({\n      countBarcodeForms: countBarcodeForms\n    });\n  }\n\n  removeBarcodeForm(index) {\n    let countBarcodeForms = this.state.countBarcodeForms;\n    countBarcodeForms.splice(index, 1);\n    this.setState({\n      countBarcodeForms: countBarcodeForms\n    });\n  }\n\n}\n\nBiobankContainerForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired,\n  barcode: React.PropTypes.string,\n  refreshTable: React.PropTypes.func\n};\n\nexport default BiobankContainerForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerForm.js","/**\n * Container Barcode Form\n *\n * Acts a subform for ContainerForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass ContainerBarcodeForm extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      formData: {},\n      formErrors: {},\n    };\n   \n    this.setFormData = this.setFormData.bind(this);\n    this.setSpecimenFormData = this.setSpecimenFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n  }\n\n  render() {\n\n    return (\n      <FormElement\n        name=\"biobankBarcode\"\n      >\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <div \n              data-toggle=\"collapse\" \n              data-target={\"#\" + this.props.id}\n            >   \n              <TextboxElement\n                name={\"barcode\"}\n                label={\"Barcode \" + this.props.id}\n                onUserInput={this.setFormData}\n                ref={\"barcode\"}\n                required={true}\n                value={this.state.formData[\"barcode\"]}\n                hasError={this.state.formErrors[\"barcode\"]}\n                errorMessage=\"Incorrect Barcode format for this Specimen and Container Type\"\n              />\n            </div>\n          </div>\n          <div className=\"col-xs-1\">\n            {this.props.button}\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xs-2\"/>\n          <div className=\"col-xs-9\">\n            <div id={this.props.id} className=\"collapse\">\n              <SelectElement\n                name=\"containerType\"\n                label=\"Container Type\"\n                options={this.props.containerTypesNonPrimary}\n                onUserInput={this.setFormData}\n                required={true}\n                value={this.state.formData.containerType}\n              />\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState(\n      {\n      formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setSpecimenFormData(specimenFormData) {\n    var formData = this.state.formData;\n    \n    for (var attribute in specimenFormData) {\n      formData[attribute] = specimenFormData[attribute]\n    }\n \n    this.setState(\n      {\n      formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    this.props.setParentFormData(this.state.formData, this.props.id);\n  }\n}\n\nContainerBarcodeForm.propTypes = {\n  id: React.PropTypes.string,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n}\n\nexport default ContainerBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerBarcodeForm.js","/**\n * This file contains React components for Tabs component.\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\n/**\n * Tabs Component.\n * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n * and corresponding tab panes.\n *\n * ================================================\n * Usage:\n *\n * 1. Define an array of tabs with IDs and labels\n *\n * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n *\n * 2. Pass tabList as <Tab> property and <TabPane> as child\n *  ```\n * <Tabs tabs={tabList} defaultTab=\"tab1\">\n *   <TabPane TabId={tabList[0].id}>\n *     // Tab content goes here\n *   </TabPane>\n * </Tabs>\n * ```\n * =================================================\n *\n */\nclass Tabs extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    const hash = window.location.hash;\n    let activeTab = \"\";\n\n    /**\n     * Determine the initial active tab in this order\n     * 1. Try to infer from the URL, otherwise\n     * 2. Try to infer from the defaultTab prop, otherwise\n     * 3. Set to be the first tab of the list\n     */\n    if (this.props.updateURL && hash) {\n      activeTab = hash.substr(1);\n    } else if (this.props.defaultTab) {\n      activeTab = this.props.defaultTab;\n    } else if (this.props.tabs.length > 0) {\n      activeTab = this.props.tabs[0].id;\n    }\n\n    this.state = {\n      activeTab: activeTab\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.getTabs = this.getTabs.bind(this);\n    this.getTabPanes = this.getTabPanes.bind(this);\n  }\n\n  handleClick(tabId, e) {\n    this.setState({activeTab: tabId});\n    this.props.onTabChange(tabId);\n\n    // Add tab href to URL querystring and scroll the page to top\n    if (this.props.updateURL) {\n      const scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n      window.location.hash = e.target.hash;\n      $('html,body').scrollTop(scrollDistance);\n    }\n  }\n\n  getTabs() {\n    let tabs = (this.props.tabs).map(function(tab) {\n      let tabClass = this.state.activeTab === tab.id ? 'active' : null;\n      let href = \"#\" + tab.id;\n      let tabID = \"tab-\" + tab.id;\n      return (\n        <li\n          role=\"presentation\"\n          className={tabClass}\n          key={tab.id}\n        >\n          <a id={tabID}\n             href={href}\n             role=\"tab\"\n             data-toggle=\"tab\"\n             onClick={this.handleClick.bind(null, tab.id)}\n          >\n            {tab.label}\n          </a>\n        </li>\n      );\n    }.bind(this));\n\n    return tabs;\n  }\n\n  getTabPanes() {\n    let tabPanes = React.Children.map(this.props.children, function(child, key) {\n      if (child) {\n        return React.cloneElement(child, {\n          activeTab: this.state.activeTab,\n          key: key\n        });\n      }\n    }.bind(this));\n\n    return tabPanes;\n  }\n\n  render() {\n    let tabs = this.getTabs();\n    let tabPanes = this.getTabPanes();\n    let tabStyle = {\n      marginLeft: 0,\n      marginBottom: '5px'\n    };\n\n    return (\n      <div>\n        <ul className=\"nav nav-tabs\" role=\"tablist\" style={tabStyle}>\n          {tabs}\n        </ul>\n        <div className=\"tab-content\">\n          {tabPanes}\n        </div>\n      </div>\n    );\n  }\n}\nTabs.propTypes = {\n  tabs: React.PropTypes.array.isRequired,\n  defaultTab: React.PropTypes.string,\n  updateURL: React.PropTypes.bool\n};\nTabs.defaultProps = {\n  onTabChange: function() {},\n  updateURL: false\n};\n\n/*\n * TabPane component.\n * Used to wrap content for every tab.\n */\nclass TabPane extends React.Component {\n  render() {\n    let classList = \"tab-pane\";\n    let title;\n\n    if (this.props.TabId === this.props.activeTab) {\n      classList += \" active\";\n    }\n    if (this.props.Title) {\n      title = <h1>{this.props.Title}</h1>;\n    }\n\n    return (\n      <div role=\"tabpanel\" className={classList} id={this.props.TabId}>\n        {title}\n        {this.props.children}\n      </div>\n    );\n  }\n}\nTabPane.propTypes = {\n  TabId: React.PropTypes.string.isRequired,\n  Title: React.PropTypes.string,\n  activeTab: React.PropTypes.string\n};\n\nexport {\n  Tabs,\n  TabPane\n};\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Tabs.js","/**\n * This file contains React components for Modal component.\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\n/**\n * Modal Component.\n * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n *\n * ================================================\n * Usage:\n *\n * 1. Define an array of tabs with IDs and labels\n *\n * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n *\n * 2. Pass tabList as <Tab> property and <TabPane> as child\n *  ```\n * <Tabs tabs={tabList} defaultTab=\"tab1\">\n *   <TabPane TabId={tabList[0].id}>\n *     // Tab content goes here\n *   </TabPane>\n * </Tabs>\n * ```\n * =================================================\n *\n */\nclass Modal extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      show: false\n    };\n\n  this.openModal = this.openModal.bind(this);\n  this.closeModal = this.closeModal.bind(this);\n  }\n\n  openModal() {\n    this.setState({\n      show: true\n    });\n  }\n \n  closeModal() {\n    this.setState({\n      show: false\n    });\n  }\n\n  render() {\n    // Black Background with Alpha Channel\n    const backdropStyle = {\n      position: 'fixed',\n      zIndex: 9998,\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundColor: 'rgba(0,0,0,0.3)',\n      padding: 50\n    };\n\n    // White Modal Window\n    const modalStyle = {\n      position: 'relative',\n      maxWidth: 1000,\n      maxHeight: '80%',\n      margin: '5% auto',\n      backgroundColor: '#fff',\n      borderRadius: 10,\n      overflowY: 'auto',\n      zIndex: 9999\n    };\n\n    const titleStyle = {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      background: '#093782',\n      height: '70px',\n      borderTopRightRadius: '10',\n      color: '#FFFFFF',\n      fontSize: 24,\n      padding: 20,\n    }\n\n    const bodyStyle = {\n      padding: 15\n    }\n  \n    const footerStyle = {\n      padding: 15\n    }\n\n    var button = (\n      <button\n        type='button'\n        className={this.props.buttonClass}\n        onClick={this.openModal}\n        style={this.props.buttonStyle}\n      >\n        {this.props.buttonContent}\n      </button>\n    );\n\n    var modal;\n    if (this.state.show) {\n      modal = (\n        <div style={backdropStyle} onClick={this.closeModal}>\n          <div\n            style={modalStyle}\n            onClick={e => {\n              e.stopPropagation();\n            }}\n          >\n            <div\n              style={titleStyle}\n            >\n              {this.props.title}\n            </div>\n            <div\n              style={bodyStyle}\n            >\n              {this.props.children}\n            </div>\n            <div style={footerStyle} onClick={this.closeModal}>\n              <a>Cancel</a>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {button}\n        {modal}\n      </div>\n    );\n  }\n}\n\nModal.propTypes = {\n  title: React.PropTypes.string,\n  buttonClass: React.PropTypes.string,\n  buttonStyle: React.PropTypes.object,\n  buttonContent: React.PropTypes.object\n};\nModal.defaultProps = {\n  buttonClass: 'btn btn-primary'\n};\n\nexport default Modal;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Modal.js","/**\n * This file contains React component for Loader\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n */\n\n/**\n * Loader component\n */\nclass Loader extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n\n    return (\n      <div className='loader-container'>\n        <div className=\"loader\"/>\n      </div>\n\n\n    );\n  }\n}\n\nexport default Loader;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Loader.js","/**\n * Modify behaviour of specified column cells in the Data Table component\n * @param {string} column - column name\n * @param {string} cell - cell content\n * @param {arrray} rowData - array of cell contents for a specific row\n * @param {arrray} rowHeaders - array of table headers (column names)\n * @return {*} a formated table cell for a given column\n */\nfunction formatColumn(column, cell, rowData, rowHeaders) {\n  // If a column if set as hidden, don't display it\n  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n  //  return null;\n  //}\n\n  // Create the mapping between rowHeaders and rowData in a row object.\n  var row = {};\n  rowHeaders.forEach(function(header, index) {\n    row[header] = rowData[index];\n  }, this);\n\n  // create array of classes to be added to td tag\n  var classes = [];\n\n  // convert array to string, with blank space separator\n  classes = classes.join(\" \");\n\n  //const hasWritePermission = loris.userHasPermission('media_read');\n  if (column === 'Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Barcode'];\n    return <td className= {classes}><a href={specimenURL}>{cell}</a></td>;\n  }\n\n  if (column === 'Parent Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Parent Barcode'];\n    return <td className= {classes}><a href={specimenURL}>{cell}</a></td>; \n}\n\n  if (column === 'Container Barcode') {\n    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Container Barcode'];\n    return <td className= {classes}><a href={containerURL}>{cell}</a></td>;\n}\n\n // if (column === 'Visit Label') {\n //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n //   }\n // }\n\n // if (column === 'Edit Metadata') {\n //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n // }\n\n  return <td className={classes}>{cell}</td>;\n}\n\nexport default formatColumn;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/columnFormatterSpecimen.js","/**\n * Modify behaviour of specified column cells in the Data Table component\n * @param {string} column - column name\n * @param {string} cell - cell content\n * @param {arrray} rowData - array of cell contents for a specific row\n * @param {arrray} rowHeaders - array of table headers (column names)\n * @return {*} a formated table cell for a given column\n */\nfunction formatColumn(column, cell, rowData, rowHeaders) {\n  // If a column if set as hidden, don't display it\n  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n  //  return null;\n  //}\n\n  // Create the mapping between rowHeaders and rowData in a row object.\n  var row = {};\n  rowHeaders.forEach(function(header, index) {\n    row[header] = rowData[index];\n  }, this);\n\n  // create array of classes to be added to td tag\n  var classes = [];\n\n  // convert array to string, with blank space separator\n  classes = classes.join(\" \");\n\n  //const hasWritePermission = loris.userHasPermission('media_read');\n  if (column === 'Barcode') {\n    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Barcode'];\n    return <td className= {classes}><a href={containerURL}>{cell}</a></td>;\n  }\n\n  if (column === 'Parent Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Parent Barcode'];\n    return <td className= {classes}><a href={containerURL}>{cell}</a></td>; \n}\n\n // if (column === 'Visit Label') {\n //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n //   }\n // }\n\n // if (column === 'Edit Metadata') {\n //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n // }\n\n  return <td className={classes}>{cell}</td>;\n}\n\nexport default formatColumn;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/columnFormatterContainer.js"],"sourceRoot":""}