{"version":3,"sources":["webpack:///modules/biobank/js/biobankIndex.js","webpack:///webpack/bootstrap c96f989a0538674481fa?b3a0*******","webpack:///./modules/biobank/jsx/biobankIndex.js","webpack:///./jsx/FilterForm.js","webpack:///./jsx/Panel.js","webpack:///./modules/biobank/jsx/specimenForm.js","webpack:///./modules/biobank/jsx/barcodeForm.js","webpack:///./modules/biobank/jsx/collectionForm.js","webpack:///./modules/biobank/jsx/containerParentForm.js","webpack:///./modules/biobank/jsx/containerDisplay.js","webpack:///./modules/biobank/jsx/poolSpecimenForm.js","webpack:///./modules/biobank/jsx/preparationForm.js","webpack:///./modules/biobank/jsx/containerForm.js","webpack:///./modules/biobank/jsx/containerBarcodeForm.js","webpack:///./jsx/Tabs.js","webpack:///./jsx/FormModal.js","webpack:///./jsx/Modal.js","webpack:///./jsx/Loader.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_defineProperty","key","value","Object","defineProperty","enumerable","configurable","writable","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","create","constructor","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","i","length","descriptor","protoProps","staticProps","_FilterForm","_FilterForm2","_specimenForm","_specimenForm2","_poolSpecimenForm","_poolSpecimenForm2","_containerForm","_containerForm2","_Tabs","_FormModal","_FormModal2","_Loader","_Loader2","BiobankIndex","_React$Component","this","_this","getPrototypeOf","state","isLoaded","specimenFilter","containerFilter","isOpen","formOptions","show","specimenForm","containerForm","loadPage","bind","fetch","updateSpecimenFilter","updateContainerFilter","resetFilters","mapFormOptions","toggleModal","closeAllModals","formatSpecimenColumns","formatContainerColumns","save","specimenDataURL","formOptionsURL","containerDataURL","setState","request","url","$","ajax","method","dataType","success","data","error","console","refs","biobankFilter","clearFilter","rawObject","targetAttribute","stateKey","stateValue","column","cell","rowData","rowHeaders","row","forEach","header","index","specimenURL","loris","BaseURL","React","createElement","href","containerURL","pscidURL","visitLabelURL","message","_this2","log","Promise","resolve","type","JSON","stringify","cache","swal","textStatus","errorThrown","responseJSON","_this3","addSpecimenButton","poolSpecimenButton","addContainerButton","userHasPermission","containerTypesPrimary","containerStati","candidates","sessions","className","title","onClick","candidateSessions","sessionCenters","specimenTypes","specimenTypeUnits","specimenTypeAttributes","attributeOptions","attributeDatatypes","containersNonPrimary","containerDimensions","containerCoordinates","refreshParent","saveBarcodeListURL","poolSpecimenButtonContent","buttonClass","buttonContent","style","display","specimenProtocols","specimenProtocolAttributes","capacities","specimenUnits","specimenRequest","saveSpecimen","saveContainer","containerTypesNonPrimary","centers","tabList","label","Tabs","tabs","defaultTab","updateURL","TabPane","TabId","Module","name","ref","columns","formElements","specimenData","form","onUpdate","filter","StaticElement","ButtonElement","onUserInput","StaticDataTable","Data","Headers","Filter","getFormattedCell","containerData","Component","biobankIndex","ReactDOM","render","document","getElementById","_typeof","Symbol","iterator","_Panel","_Panel2","FilterForm","getFormChildren","setFilter","onElementUpdate","queryString","QueryString","get","keys","filterKey","exactMatch","clear","formChildren","Children","children","child","isValidElement","callbackFunc","callbackName","elementName","displayName","queryFieldName","filterValue","push","cloneElement","parse","fieldName","fieldValue","set","height","FormElement","defaultProps","warn","propTypes","PropTypes","string","isRequired","object","func","Panel","collapsed","initCollapsed","panelClass","toggleCollapsed","glyphClass","pencilGlyph","edit","marginRight","cursor","plusGlyph","add","removeGlyph","cancel","panelHeading","data-toggle","data-target","role","_barcodeForm","_barcodeForm2","BiobankSpecimenForm","formErrors","candidateId","sessionId","centerId","barcodeList","1","specimen","collection","container","count","copyMultiplier","toggleCollapse","setSpecimen","setContainer","addBarcode","setCopyMultiplier","copyBarcode","removeBarcode","saveBarcodeList","availableId","find","barcode","statusId","temperature","locationId","originId","quantity","unitId","typeId","freezeThaw","fTCycle","candidate","CandID","session","ID","parentSpecimenId","then","onChange","Function","e","nextKey","multiplier","barcodeListArray","barcodes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","barcodeKey","units","_iterator","next","done","err","return","globalFields","remainingQuantityFields","text","PSCID","Visit_label","TextboxElement","setSpecimenData","required","SelectElement","options","emptyOption","placeHolder","disabled","onSubmit","columnSize","_collectionForm","_collectionForm2","_containerParentForm","_containerParentForm2","SpecimenBarcodeForm","copy","addBarcodeButton","addBarcodeText","copyBarcodeButton","copyBarcodeText","min","max","width","removeBarcodeButton","glyphStyle","color","marginLeft","fontSize","parentTypeId","paddingLeft","marginTop","position","right","setContainerData","SpecimenCollectionForm","getSpecimenTypeFields","setCollectionData","addData","setData","fieldsObject","specimenTypeFields","map","attribute","datatype","DateElement","updateButton","unit","specimenTypeFieldsObject","specimenFields","minYear","maxYear","date","TimeElement","time","TextareaElement","comments","_containerDisplay","_containerDisplay2","ContainerParentForm","apply","arguments","containerDisplay","containerBarcodesNonPrimary","parentContainerField","parentContainerId","dimensionId","dimensions","coordinatesTotal","dimension","coordinates","containerTypes","select","selectedCoordinate","coordinate","ContainerDisplay","redirectURL","drag","drop","tooltip","types","primary","window","location","preventDefault","dataTransfer","getData","newCoordinate","parseInt","saveChildContainer","y","x","nodeWidth","nodeStyle","nodeClass","tooltipTitle","dataHtml","dataToggle","dataPlacement","draggable","onDragStart","onDragOver","allowDrop","onDrop","status","coordinateDisplay","data-html","data-placement","data-original-title","rowHeight","rowStyle","_preparationForm","_preparationForm2","PoolSpecimenForm","formData","errorMessage","barcodeCount","preparation","step","handleSubmit","validateForm","setFormData","setPreparationFormData","setSpecimenFormData","submitForm","setBarcodeCount","previous","addPreparation","removePreparation","validate","formSwitch","preparationSwitch","runAjax","poolData","responseText","inputData","reject","field","inputForm","preparationButton","preparationForm","_this4","setParentFormData","insertAction","NumericElement","pscid","pSCIDs","visit","sessionData","visits","barcodesArray","values","barcodesString","join","parentSpecimenBarcodes","parentSpecimenIds","specimenIds","action","formElement","_this5","test","isNaN","currentContainerType","currentSpecimenType","formObj","FormData","append","contentType","processData","xhr","XMLHttpRequest","onSuccess","msg","isValidForm","formRefs","requiredFields","visitLabel","hasError","forceUpdate","preparationFormData","specimenFormData","DataURL","refreshTable","SpecimenPreparationForm","getSpecimenProtocolFields","setPreparation","specimenProtocolFields","submitButton","protocolId","specimenProtocolFieldsObject","_containerBarcodeForm","_containerBarcodeForm2","BiobankContainerForm","containerList","countContainers","addContainer","copyContainer","removeContainer","saveContainerList","siteId","containerListArray","containers","containerKey","ContainerBarcodeForm","addContainerText","copyContainerButton","copyContainerText","removeContainerButton","hash","activeTab","substr","handleClick","getTabs","getTabPanes","tabId","onTabChange","scrollDistance","scrollTop","tab","tabClass","tabID","tabPanes","tabStyle","marginBottom","array","bool","VerticalTabs","_React$Component2","_React$Component3","classList","Title","_extends","assign","source","hasOwnProperty","_Modal","_Modal2","FormModal","closeModal","confirmClose","closeAction","throwWarning","showCancelButton","confirmButtonText","cancelButtonText","togglemodal","Modal","backdropStyle","zIndex","top","bottom","left","backgroundColor","padding","modalStyle","maxWidth","maxHeight","margin","borderRadius","overflowY","titleStyle","flexDirection","alignItems","background","borderTopRightRadius","bodyStyle","modal","stopPropagation","openModal","Loader"],"mappings":"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","file":"./modules/biobank/js/biobankIndex.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _FilterForm = __webpack_require__(1);\n\t\n\tvar _FilterForm2 = _interopRequireDefault(_FilterForm);\n\t\n\tvar _specimenForm = __webpack_require__(3);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tvar _poolSpecimenForm = __webpack_require__(8);\n\t\n\tvar _poolSpecimenForm2 = _interopRequireDefault(_poolSpecimenForm);\n\t\n\tvar _containerForm = __webpack_require__(10);\n\t\n\tvar _containerForm2 = _interopRequireDefault(_containerForm);\n\t\n\tvar _Tabs = __webpack_require__(12);\n\t\n\tvar _FormModal = __webpack_require__(13);\n\t\n\tvar _FormModal2 = _interopRequireDefault(_FormModal);\n\t\n\tvar _Loader = __webpack_require__(15);\n\t\n\tvar _Loader2 = _interopRequireDefault(_Loader);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar BiobankIndex = function (_React$Component) {\n\t  _inherits(BiobankIndex, _React$Component);\n\t\n\t  function BiobankIndex() {\n\t    _classCallCheck(this, BiobankIndex);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankIndex.__proto__ || Object.getPrototypeOf(BiobankIndex)).call(this));\n\t\n\t    _this.state = {\n\t      isLoaded: false,\n\t      specimenFilter: {},\n\t      containerFilter: {},\n\t      isOpen: false,\n\t      formOptions: {},\n\t      show: {\n\t        specimenForm: false,\n\t        containerForm: false\n\t      }\n\t    };\n\t\n\t    _this.loadPage = _this.loadPage.bind(_this);\n\t    _this.fetch = _this.fetch.bind(_this);\n\t    _this.updateSpecimenFilter = _this.updateSpecimenFilter.bind(_this);\n\t    _this.updateContainerFilter = _this.updateContainerFilter.bind(_this);\n\t    _this.resetFilters = _this.resetFilters.bind(_this);\n\t    _this.mapFormOptions = _this.mapFormOptions.bind(_this);\n\t    _this.toggleModal = _this.toggleModal.bind(_this);\n\t    _this.closeAllModals = _this.closeAllModals.bind(_this);\n\t    _this.formatSpecimenColumns = _this.formatSpecimenColumns.bind(_this);\n\t    _this.formatContainerColumns = _this.formatContainerColumns.bind(_this);\n\t    _this.save = _this.save.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankIndex, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      this.loadPage();\n\t    }\n\t  }, {\n\t    key: 'loadPage',\n\t    value: function loadPage() {\n\t      this.fetch('specimenData', this.props.specimenDataURL);\n\t      this.fetch('formOptions', this.props.formOptionsURL);\n\t      this.fetch('containerData', this.props.containerDataURL);\n\t      this.setState({ isLoaded: true });\n\t    }\n\t\n\t    /**\n\t     * Retrieve data from the provided URL and save it in state\n\t     */\n\t\n\t  }, {\n\t    key: 'fetch',\n\t    value: function fetch(request, url) {\n\t      $.ajax(url, {\n\t        method: \"GET\",\n\t        dataType: 'json',\n\t        success: function (data) {\n\t          this.setState(_defineProperty({}, request, data));\n\t        }.bind(this),\n\t        error: function error(_error) {\n\t          console.error(_error);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'updateSpecimenFilter',\n\t    value: function updateSpecimenFilter(specimenFilter) {\n\t      this.setState({ specimenFilter: specimenFilter });\n\t    }\n\t  }, {\n\t    key: 'updateContainerFilter',\n\t    value: function updateContainerFilter(containerFilter) {\n\t      this.setState({ containerFilter: containerFilter });\n\t    }\n\t  }, {\n\t    key: 'resetFilters',\n\t    value: function resetFilters() {\n\t      this.refs.biobankFilter.clearFilter();\n\t    }\n\t\n\t    //map options for forms\n\t\n\t  }, {\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(rawObject, targetAttribute) {\n\t      var data = {};\n\t      for (var id in rawObject) {\n\t        data[id] = rawObject[id][targetAttribute];\n\t      }\n\t\n\t      return data;\n\t    }\n\t  }, {\n\t    key: 'toggleModal',\n\t    value: function toggleModal(stateKey) {\n\t      var show = this.state.show;\n\t      var stateValue = show[stateKey];\n\t      show[stateKey] = !stateValue;\n\t      this.setState({ show: show });\n\t    }\n\t  }, {\n\t    key: 'closeAllModals',\n\t    value: function closeAllModals() {\n\t      var show = this.state.show;\n\t      for (var key in show) {\n\t        show[key] = false;\n\t      }\n\t      this.setState({ show: show });\n\t    }\n\t  }, {\n\t    key: 'formatSpecimenColumns',\n\t    value: function formatSpecimenColumns(column, cell, rowData, rowHeaders) {\n\t      // Create the mapping between rowHeaders and rowData in a row object.\n\t      var row = {};\n\t      rowHeaders.forEach(function (header, index) {\n\t        row[header] = rowData[index];\n\t      });\n\t\n\t      switch (column) {\n\t        case 'Barcode':\n\t          var specimenURL = loris.BaseURL + '/biobank/specimen/?barcode=' + row['Barcode'];\n\t          return React.createElement(\n\t            'td',\n\t            null,\n\t            React.createElement(\n\t              'a',\n\t              { href: specimenURL },\n\t              cell\n\t            )\n\t          );\n\t        case 'Parent Barcode':\n\t          specimenURL = loris.BaseURL + '/biobank/specimen/?barcode=' + row['Parent Barcode'];\n\t          return React.createElement(\n\t            'td',\n\t            null,\n\t            React.createElement(\n\t              'a',\n\t              { href: specimenURL },\n\t              cell\n\t            )\n\t          );\n\t        case 'Container Barcode':\n\t          var containerURL = loris.BaseURL + '/biobank/container/?barcode=' + row['Container Barcode'];\n\t          return React.createElement(\n\t            'td',\n\t            null,\n\t            React.createElement(\n\t              'a',\n\t              { href: containerURL },\n\t              cell\n\t            )\n\t          );\n\t        case 'PSCID':\n\t          var pscidURL = loris.BaseURL + '/' + row['PSCID'];\n\t          return React.createElement(\n\t            'td',\n\t            null,\n\t            React.createElement(\n\t              'a',\n\t              { href: pscidURL },\n\t              cell\n\t            )\n\t          );\n\t        case 'Visit Label':\n\t          var visitLabelURL = loris.BaseURL + '/instrument_list/?candID=' + row['PSCID'] + '&sessionID=' + row['Visit Label'];\n\t          return React.createElement(\n\t            'td',\n\t            null,\n\t            React.createElement(\n\t              'a',\n\t              { href: visitLabelURL },\n\t              cell\n\t            )\n\t          );\n\t        default:\n\t          return React.createElement(\n\t            'td',\n\t            null,\n\t            cell\n\t          );\n\t      }\n\t    }\n\t  }, {\n\t    key: 'formatContainerColumns',\n\t    value: function formatContainerColumns(column, cell, rowData, rowHeaders) {\n\t      // Create the mapping between rowHeaders and rowData in a row object.\n\t      var row = {};\n\t      rowHeaders.forEach(function (header, index) {\n\t        row[header] = rowData[index];\n\t      });\n\t\n\t      switch (column) {\n\t        case 'Barcode':\n\t          var containerURL = loris.BaseURL + '/biobank/container/?barcode=' + row['Barcode'];\n\t          return React.createElement(\n\t            'td',\n\t            null,\n\t            React.createElement(\n\t              'a',\n\t              { href: containerURL },\n\t              cell\n\t            )\n\t          );\n\t        case 'Parent Barcode':\n\t          containerURL = loris.BaseURL + '/biobank/specimen/?barcode=' + row['Parent Barcode'];\n\t          return React.createElement(\n\t            'td',\n\t            null,\n\t            React.createElement(\n\t              'a',\n\t              { href: containerURL },\n\t              cell\n\t            )\n\t          );\n\t        default:\n\t          return React.createElement(\n\t            'td',\n\t            null,\n\t            cell\n\t          );\n\t      }\n\t    }\n\t  }, {\n\t    key: 'save',\n\t    value: function save(data, url, message) {\n\t      var _this2 = this;\n\t\n\t      console.log(data);\n\t      return new Promise(function (resolve) {\n\t        $.ajax({\n\t          type: 'POST',\n\t          url: url,\n\t          data: { data: JSON.stringify(data) },\n\t          cache: false,\n\t          success: function success() {\n\t            resolve();\n\t            message ? swal(message, '', 'success') : swal('Save Successful!', '', 'success');\n\t            _this2.closeAllModals();\n\t          },\n\t          error: function error(_error2, textStatus, errorThrown) {\n\t            var message = (_error2.responseJSON || {}).message || 'Submission error!';\n\t            swal(message, '', 'error');\n\t            console.error(_error2, textStatus, errorThrown);\n\t          }\n\t        });\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this3 = this;\n\t\n\t      // Waiting for async data to load\n\t      if (!this.state.isLoaded) {\n\t        return React.createElement(_Loader2.default, null);\n\t      }\n\t\n\t      var addSpecimenButton = void 0;\n\t      var poolSpecimenButton = void 0;\n\t      var addContainerButton = void 0;\n\t      if (loris.userHasPermission('biobank_write')) {\n\t\n\t        /**\n\t         * Map Options for Form Select Elements of Specimen Form\n\t         */\n\t        var containerTypesPrimary = this.mapFormOptions(this.state.formOptions.containerTypesPrimary, 'label');\n\t        var containerStati = this.mapFormOptions(this.state.formOptions.containerStati, 'status');\n\t        var candidates = this.mapFormOptions(this.state.formOptions.candidates, 'pscid');\n\t        var sessions = this.mapFormOptions(this.state.formOptions.sessions, 'label');\n\t\n\t        addSpecimenButton = React.createElement(\n\t          'div',\n\t          {\n\t            className: 'action',\n\t            title: 'Add Specimen'\n\t          },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: function onClick() {\n\t                _this3.toggleModal('specimenForm');\n\t              }\n\t            },\n\t            React.createElement(\n\t              'span',\n\t              null,\n\t              '+'\n\t            )\n\t          ),\n\t          React.createElement(\n\t            _FormModal2.default,\n\t            {\n\t              title: 'Add New Specimen',\n\t              show: this.state.show.specimenForm,\n\t              toggleModal: function toggleModal() {\n\t                _this3.toggleModal('specimenForm');\n\t              }\n\t            },\n\t            React.createElement(_specimenForm2.default, {\n\t              candidates: candidates,\n\t              sessions: sessions,\n\t              candidateSessions: this.state.formOptions.candidateSessions,\n\t              sessionCenters: this.state.formOptions.sessionCenters,\n\t              specimenTypes: this.state.formOptions.specimenTypes,\n\t              specimenTypeUnits: this.state.formOptions.specimenTypeUnits,\n\t              specimenTypeAttributes: this.state.formOptions.specimenTypeAttributes,\n\t              attributeOptions: this.state.formOptions.attributeOptions,\n\t              attributeDatatypes: this.state.formOptions.attributeDatatypes,\n\t              containerTypesPrimary: containerTypesPrimary,\n\t              containersNonPrimary: this.state.formOptions.containersNonPrimary,\n\t              containerDimensions: this.state.formOptions.containerDimensions,\n\t              containerCoordinates: this.state.formOptions.containerCoordinates,\n\t              containerStati: containerStati,\n\t              refreshParent: this.loadPage,\n\t              mapFormOptions: this.mapFormOptions,\n\t              saveBarcodeListURL: this.props.saveBarcodeListURL,\n\t              save: this.save\n\t            })\n\t          )\n\t        );\n\t\n\t        var poolSpecimenButtonContent = React.createElement('span', { className: 'glyphicon glyphicon-resize-small' });\n\t\n\t        poolSpecimenButton = React.createElement(\n\t          _FormModal2.default,\n\t          {\n\t            title: 'Pool Specimens',\n\t            buttonClass: 'action-button pool',\n\t            buttonContent: poolSpecimenButtonContent,\n\t            style: { display: 'inline-block' }\n\t          },\n\t          React.createElement(_poolSpecimenForm2.default, {\n\t            specimenTypes: this.state.formOptions.specimenTypes,\n\t            containerTypesPrimary: containerTypesPrimary,\n\t            containersNonPrimary: this.state.formOptions.containersNonPrimary,\n\t            specimenTypeAttributes: this.state.formOptions.specimenTypeAttributes,\n\t            specimenProtocols: this.state.formOptions.specimenProtocols,\n\t            specimenProtocolAttributes: this.state.formOptions.specimenProtocolAttributes,\n\t            attributeDatatypes: this.state.formOptions.attributeDatatypes,\n\t            attributeOptions: this.state.formOptions.attributeOptions,\n\t            capacities: this.state.formOptions.capacities,\n\t            containerDimensions: this.state.formOptions.containerDimensions,\n\t            containerCoordinates: this.state.formOptions.containerCoordinates,\n\t            specimenTypeUnits: this.state.formOptions.specimenTypeUnits,\n\t            specimenUnits: this.state.formOptions.specimenUnits,\n\t            candidates: candidates,\n\t            candidateSessions: this.state.formOptions.candidateSessions,\n\t            sessionCenters: this.state.formOptions.sessionCenters,\n\t            specimenRequest: loris.BaseURL + '/biobank/ajax/requestData.php?action=getSpecimenDataFromBarcode',\n\t            refreshParent: this.loadPage,\n\t            mapFormOptions: this.mapFormOptions,\n\t            saveSpecimen: loris.BaseURL + '/biobank/ajax/submitData.php?action=saveSpecimen',\n\t            saveContainer: loris.BaseURL + '/biobank/ajax/submitData.php?action=saveContainer'\n\t          })\n\t        );\n\t\n\t        var containerTypesNonPrimary = this.mapFormOptions(this.state.formOptions.containerTypesNonPrimary, 'label');\n\t\n\t        addContainerButton = React.createElement(\n\t          'div',\n\t          {\n\t            className: 'action',\n\t            title: 'Add Container'\n\t          },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: function onClick() {\n\t                _this3.toggleModal('containerForm');\n\t              }\n\t            },\n\t            React.createElement(\n\t              'span',\n\t              null,\n\t              '+'\n\t            )\n\t          ),\n\t          React.createElement(\n\t            _FormModal2.default,\n\t            {\n\t              title: 'Add New Container',\n\t              show: this.state.show.containerForm,\n\t              toggleModal: function toggleModal() {\n\t                _this3.toggleModal('containerForm');\n\t              }\n\t            },\n\t            React.createElement(_containerForm2.default, {\n\t              containerTypesNonPrimary: containerTypesNonPrimary,\n\t              centers: this.state.formOptions.centers,\n\t              containerStati: containerStati,\n\t              refreshParent: this.loadPage,\n\t              saveContainer: loris.BaseURL + '/biobank/ajax/submitData.php?action=saveContainer',\n\t              save: this.save\n\t            })\n\t          )\n\t        );\n\t      }\n\t\n\t      var tabList = [{ id: \"specimens\", label: \"Specimens\" }, { id: \"containers\", label: \"Containers\" }];\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { id: 'biobank-page' },\n\t        React.createElement(\n\t          _Tabs.Tabs,\n\t          { tabs: tabList, defaultTab: 'specimens', updateURL: true },\n\t          React.createElement(\n\t            _Tabs.TabPane,\n\t            { TabId: tabList[0].id },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'row' },\n\t              React.createElement(\n\t                'div',\n\t                { className: 'col-lg-10' },\n\t                React.createElement(\n\t                  _FilterForm2.default,\n\t                  {\n\t                    Module: 'biobank',\n\t                    name: 'specimen_filter',\n\t                    id: 'specimen_filter',\n\t                    ref: 'specimenFilter',\n\t                    columns: 3,\n\t                    formElements: this.state.specimenData.form,\n\t                    onUpdate: this.updateSpecimenFilter,\n\t                    filter: this.state.specimenFilter\n\t                  },\n\t                  React.createElement('br', null),\n\t                  React.createElement(StaticElement, null),\n\t                  React.createElement(StaticElement, null),\n\t                  React.createElement(ButtonElement, { label: 'Clear Filters', type: 'reset', onUserInput: this.resetFilters })\n\t                )\n\t              ),\n\t              React.createElement(\n\t                'div',\n\t                { className: 'col-lg-2' },\n\t                React.createElement(\n\t                  'span',\n\t                  { className: 'action' },\n\t                  addSpecimenButton,\n\t                  React.createElement(\n\t                    'div',\n\t                    { className: 'action-title' },\n\t                    'Add Specimen'\n\t                  )\n\t                ),\n\t                React.createElement('br', null),\n\t                React.createElement('br', null),\n\t                React.createElement(\n\t                  'span',\n\t                  { className: 'action' },\n\t                  poolSpecimenButton,\n\t                  React.createElement(\n\t                    'div',\n\t                    { className: 'action-title' },\n\t                    'Pool Specimens'\n\t                  )\n\t                )\n\t              )\n\t            ),\n\t            React.createElement(StaticDataTable, {\n\t              Data: this.state.specimenData.Data,\n\t              Headers: this.state.specimenData.Headers,\n\t              Filter: this.state.specimenFilter,\n\t              getFormattedCell: this.formatSpecimenColumns\n\t            })\n\t          ),\n\t          React.createElement(\n\t            _Tabs.TabPane,\n\t            { TabId: tabList[1].id },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'row' },\n\t              React.createElement(\n\t                'div',\n\t                { className: 'col-lg-10' },\n\t                React.createElement(\n\t                  _FilterForm2.default,\n\t                  {\n\t                    Module: 'biobank',\n\t                    name: 'container_filter',\n\t                    id: 'container_filter',\n\t                    ref: 'containerFilter',\n\t                    columns: 3,\n\t                    formElements: this.state.containerData.form,\n\t                    onUpdate: this.updateContainerFilter,\n\t                    filter: this.state.containerFilter\n\t                  },\n\t                  React.createElement('br', null),\n\t                  React.createElement(StaticElement, null),\n\t                  React.createElement(StaticElement, null),\n\t                  React.createElement(ButtonElement, { label: 'Clear Filters', type: 'reset', onUserInput: this.resetFilters })\n\t                )\n\t              ),\n\t              React.createElement(\n\t                'div',\n\t                { className: 'col-lg-2' },\n\t                React.createElement(\n\t                  'span',\n\t                  { className: 'action' },\n\t                  addContainerButton,\n\t                  React.createElement(\n\t                    'div',\n\t                    { className: 'action-title' },\n\t                    'New Container'\n\t                  )\n\t                )\n\t              )\n\t            ),\n\t            React.createElement(StaticDataTable, {\n\t              Data: this.state.containerData.Data,\n\t              Headers: this.state.containerData.Headers,\n\t              Filter: this.state.containerFilter,\n\t              getFormattedCell: this.formatContainerColumns\n\t            })\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return BiobankIndex;\n\t}(React.Component);\n\t\n\t$(function () {\n\t  var biobankIndex = React.createElement(\n\t    'div',\n\t    { className: 'page-biobank' },\n\t    React.createElement(BiobankIndex, {\n\t      specimenDataURL: loris.BaseURL + '/biobank/?format=json',\n\t      containerDataURL: loris.BaseURL + '/biobank/ajax/requestData.php?action=getContainerFilterData',\n\t      formOptionsURL: loris.BaseURL + '/biobank/ajax/requestData.php?action=getFormOptions',\n\t      saveBarcodeListURL: loris.BaseURL + '/biobank/ajax/submitData.php?action=saveBarcodeList'\n\t    })\n\t  );\n\t\n\t  ReactDOM.render(biobankIndex, document.getElementById(\"lorisworkspace\"));\n\t});\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Panel = __webpack_require__(2);\n\t\n\tvar _Panel2 = _interopRequireDefault(_Panel);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file contains React component for FilterForm\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Loris Team\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.1.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/**\n\t * FilterForm component.\n\t * A wrapper for form elements inside a selection filter.\n\t *\n\t * Adds necessary filter callbacks to all children and passes them to FormElement\n\t * for proper rendering.\n\t *\n\t * Keeps track of filter object and sends it to parent on every update.\n\t *\n\t * //HACK/NOTE: Loris has special behaviour for `candID` attribute in the query string,\n\t * making it impossible to use it for selection filters. This components renames\n\t * all `candID` fields to `candidateID` automatically before appending them to URL.\n\t *\n\t */\n\tvar FilterForm = function (_React$Component) {\n\t  _inherits(FilterForm, _React$Component);\n\t\n\t  function FilterForm(props) {\n\t    _classCallCheck(this, FilterForm);\n\t\n\t    // Bind component instance to custom methods\n\t    var _this = _possibleConstructorReturn(this, (FilterForm.__proto__ || Object.getPrototypeOf(FilterForm)).call(this, props));\n\t\n\t    _this.clearFilter = _this.clearFilter.bind(_this);\n\t    _this.getFormChildren = _this.getFormChildren.bind(_this);\n\t    _this.setFilter = _this.setFilter.bind(_this);\n\t    _this.onElementUpdate = _this.onElementUpdate.bind(_this);\n\t\n\t    // Keeps track of querystring values\n\t    // Saved as class variable instead of keeping in state\n\t    _this.queryString = QueryString.get();\n\t    return _this;\n\t  }\n\t\n\t  _createClass(FilterForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var filter = {};\n\t      var queryString = this.queryString;\n\t\n\t      // Initiaze filter using querystring value\n\t      Object.keys(queryString).forEach(function (key) {\n\t        var filterKey = key === 'candidateID' ? 'candID' : key;\n\t        filter[filterKey] = {\n\t          value: queryString[key],\n\t          exactMatch: false\n\t        };\n\t      });\n\t\n\t      // Update parent component\n\t      this.props.onUpdate(filter);\n\t    }\n\t\n\t    /**\n\t     * Clear the filter object, querystring and input fields\n\t     */\n\t\n\t  }, {\n\t    key: 'clearFilter',\n\t    value: function clearFilter() {\n\t      this.queryString = QueryString.clear(this.props.Module);\n\t      this.props.onUpdate({});\n\t    }\n\t\n\t    /**\n\t     * Itterates through FilterForm children, sets necessary callback functions\n\t     * and initializes filterTable\n\t     *\n\t     * @return {Array} formChildren - array of children with necessary props\n\t     */\n\t\n\t  }, {\n\t    key: 'getFormChildren',\n\t    value: function getFormChildren() {\n\t      var formChildren = [];\n\t      React.Children.forEach(this.props.children, function (child, key) {\n\t        // If child is a React component (i.e not a simple DOM element)\n\t        if (React.isValidElement(child) && typeof child.type === \"function\" && child.props.onUserInput) {\n\t          var callbackFunc = child.props.onUserInput;\n\t          var callbackName = callbackFunc.name;\n\t          var elementName = child.type.displayName;\n\t          var queryFieldName = child.props.name === 'candID' ? 'candidateID' : child.props.name;\n\t          var filterValue = this.queryString[queryFieldName];\n\t          // If callback function was not set, set it to onElementUpdate() for form\n\t          // elements and to clearFilter() for <ButtonElement type='reset'/>.\n\t          if (callbackName === \"onUserInput\") {\n\t            if (elementName === \"ButtonElement\" && child.props.type === \"reset\") {\n\t              callbackFunc = this.clearFilter;\n\t            } else {\n\t              callbackFunc = this.onElementUpdate.bind(null, elementName);\n\t            }\n\t          }\n\t          // Pass onUserInput and value props to all children\n\t          formChildren.push(React.cloneElement(child, {\n\t            onUserInput: callbackFunc,\n\t            value: filterValue ? filterValue : '',\n\t            key: key\n\t          }));\n\t          // Initialize filter for StaticDataTable\n\t          this.setFilter(elementName, child.props.name, filterValue);\n\t        } else {\n\t          formChildren.push(React.cloneElement(child, { key: key }));\n\t        }\n\t      }.bind(this));\n\t\n\t      return formChildren;\n\t    }\n\t\n\t    /**\n\t     * Appends entry to filter object or deletes it if value is\n\t     * empty.\n\t     *\n\t     * Sets exactMatch to true for all SelectElements (i.e dropdowns)\n\t     * in order to force StaticDataTable to do exact comparaison\n\t     *\n\t     * @param {string} type - form element type (i.e component name)\n\t     * @param {string} key - the name of the form element\n\t     * @param {string} value - the value of the form element\n\t     *\n\t     * @return {{}} filter - filterData\n\t     */\n\t\n\t  }, {\n\t    key: 'setFilter',\n\t    value: function setFilter(type, key, value) {\n\t      var filter = {};\n\t      if (this.props.filter) {\n\t        filter = JSON.parse(JSON.stringify(this.props.filter));\n\t      }\n\t      if (key) {\n\t        filter[key] = {};\n\t        if (value.length === 0) {\n\t          filter[key].value = '';\n\t        } else if (key && value) {\n\t          filter[key].value = value;\n\t        }\n\t        filter[key].exactMatch = type === \"SelectElement\";\n\t      } else if (filter && key && value === '') {\n\t        delete filter[key];\n\t      }\n\t      return filter;\n\t    }\n\t\n\t    /**\n\t     * Sets filter object and querystring to reflect values of input fields\n\t     *\n\t     * @param {string} type - form element type (i.e component name)\n\t     * @param {string} fieldName - the name of the form element\n\t     * @param {string} fieldValue - the value of the form element\n\t     */\n\t\n\t  }, {\n\t    key: 'onElementUpdate',\n\t    value: function onElementUpdate(type, fieldName, fieldValue) {\n\t      // Make sure key is of string type and value is of string or object type\n\t      // before sending them to querystring\n\t      if (typeof fieldName !== 'string' || typeof fieldValue !== 'string' && (typeof fieldValue === 'undefined' ? 'undefined' : _typeof(fieldValue)) !== 'object') {\n\t        return;\n\t      }\n\t\n\t      // Update query string\n\t      var queryFieldName = fieldName === 'candID' ? 'candidateID' : fieldName;\n\t      this.queryString = QueryString.set(this.queryString, queryFieldName, fieldValue);\n\t\n\t      // Update filter and get new filter object\n\t      var filter = this.setFilter(type, fieldName, fieldValue);\n\t      this.props.onUpdate(filter);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Get formatted children\n\t      var formChildren = this.getFormChildren();\n\t      var formElements = this.props.formElements;\n\t\n\t      if (formElements) {\n\t        Object.keys(formElements).forEach(function (fieldName) {\n\t          var queryFieldName = fieldName === 'candID' ? 'candidateID' : fieldName;\n\t          formElements[fieldName].onUserInput = this.onElementUpdate.bind(null, fieldName);\n\t          formElements[fieldName].value = this.queryString[queryFieldName];\n\t        }.bind(this));\n\t      }\n\t\n\t      return React.createElement(\n\t        _Panel2.default,\n\t        {\n\t          id: this.props.id,\n\t          height: this.props.height,\n\t          title: this.props.title\n\t        },\n\t        React.createElement(\n\t          FormElement,\n\t          this.props,\n\t          formChildren\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return FilterForm;\n\t}(React.Component);\n\t\n\tFilterForm.defaultProps = {\n\t  id: 'selection-filter',\n\t  height: '100%',\n\t  title: 'Selection Filter',\n\t  onUpdate: function onUpdate() {\n\t    console.warn('onUpdate() callback is not set!');\n\t  }\n\t};\n\tFilterForm.propTypes = {\n\t  Module: React.PropTypes.string.isRequired,\n\t  filter: React.PropTypes.object.isRequired,\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  onUpdate: React.PropTypes.func\n\t};\n\t\n\texports.default = FilterForm;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Panel\n\t *\n\t * @author Alex I.\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Panel component\n\t * Wraps children in a collapsible bootstrap panel\n\t */\n\tvar Panel = function (_React$Component) {\n\t  _inherits(Panel, _React$Component);\n\t\n\t  function Panel(props) {\n\t    _classCallCheck(this, Panel);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).call(this, props));\n\t\n\t    _this.state = {\n\t      collapsed: _this.props.initCollapsed\n\t    };\n\t\n\t    // Initialize panel class based on collapsed status\n\t    _this.panelClass = _this.props.initCollapsed ? \"panel-collapse collapse\" : \"panel-collapse collapse in\";\n\t\n\t    _this.toggleCollapsed = _this.toggleCollapsed.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Panel, [{\n\t    key: \"toggleCollapsed\",\n\t    value: function toggleCollapsed() {\n\t      this.setState({ collapsed: !this.state.collapsed });\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      // Change arrow direction based on collapse status\n\t      var glyphClass = this.state.collapsed ? \"glyphicon pull-right glyphicon-chevron-down\" : \"glyphicon pull-right glyphicon-chevron-up\";\n\t\n\t      var pencilGlyph = void 0;\n\t      if (this.props.edit) {\n\t        pencilGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-pencil\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.edit\n\t        });\n\t      }\n\t\n\t      var plusGlyph = void 0;\n\t      if (this.props.add) {\n\t        plusGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-plus\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.add\n\t        });\n\t      }\n\t\n\t      var removeGlyph = void 0;\n\t      if (this.props.cancel) {\n\t        removeGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-remove\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.cancel\n\t        });\n\t      }\n\t\n\t      // Add panel header, if title is set\n\t      var panelHeading = this.props.title ? React.createElement(\n\t        \"div\",\n\t        {\n\t          className: \"panel-heading\"\n\t        },\n\t        React.createElement(\"span\", {\n\t          className: glyphClass,\n\t          onClick: this.toggleCollapsed,\n\t          \"data-toggle\": \"collapse\",\n\t          \"data-target\": '#' + this.props.id,\n\t          style: { cursor: 'pointer' }\n\t        }),\n\t        pencilGlyph,\n\t        plusGlyph,\n\t        removeGlyph,\n\t        this.props.title\n\t      ) : '';\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"panel panel-primary\" },\n\t        panelHeading,\n\t        React.createElement(\n\t          \"div\",\n\t          { id: this.props.id, className: this.panelClass, role: \"tabpanel\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"panel-body\", style: { height: this.props.height } },\n\t            this.props.children\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Panel;\n\t}(React.Component);\n\t\n\tPanel.propTypes = {\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  edit: React.PropTypes.func,\n\t  add: React.PropTypes.func\n\t};\n\tPanel.defaultProps = {\n\t  initCollapsed: false,\n\t  id: 'default-panel',\n\t  height: '100%'\n\t};\n\t\n\texports.default = Panel;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _barcodeForm = __webpack_require__(4);\n\t\n\tvar _barcodeForm2 = _interopRequireDefault(_barcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankSpecimenForm = function (_React$Component) {\n\t  _inherits(BiobankSpecimenForm, _React$Component);\n\t\n\t  function BiobankSpecimenForm() {\n\t    _classCallCheck(this, BiobankSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimenForm.__proto__ || Object.getPrototypeOf(BiobankSpecimenForm)).call(this));\n\t\n\t    _this.state = {\n\t      formErrors: {},\n\t      candidateId: null,\n\t      sessionId: null,\n\t      centerId: null,\n\t      barcodeList: { 1: { specimen: { collection: {} }, container: {} } },\n\t      count: 1,\n\t      collapsed: { 1: true },\n\t      copyMultiplier: 1\n\t    };\n\t\n\t    _this.toggleCollapse = _this.toggleCollapse.bind(_this);\n\t    _this.setSpecimen = _this.setSpecimen.bind(_this);\n\t    _this.setContainer = _this.setContainer.bind(_this);\n\t    _this.addBarcode = _this.addBarcode.bind(_this);\n\t    _this.setCopyMultiplier = _this.setCopyMultiplier.bind(_this);\n\t    _this.copyBarcode = _this.copyBarcode.bind(_this);\n\t    _this.removeBarcode = _this.removeBarcode.bind(_this);\n\t    _this.saveBarcodeList = _this.saveBarcodeList.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimenForm, [{\n\t    key: 'toggleCollapse',\n\t    value: function toggleCollapse(key) {\n\t      var collapsed = this.state.collapsed;\n\t      collapsed[key] = !collapsed[key];\n\t      this.setState({ collapsed: collapsed });\n\t    }\n\t  }, {\n\t    key: 'saveBarcodeList',\n\t    value: function saveBarcodeList() {\n\t      var _this2 = this;\n\t\n\t      var barcodeList = JSON.parse(JSON.stringify(this.state.barcodeList));\n\t      var availableId = Object.keys(this.props.containerStati).find(function (key) {\n\t        return _this2.props.containerStati[key] === 'Available';\n\t      });\n\t\n\t      for (var barcode in barcodeList) {\n\t        //set container values\n\t        var container = barcodeList[barcode].container;\n\t        container.statusId = availableId;\n\t        container.temperature = 20;\n\t        container.locationId = this.state.centerId;\n\t        container.originId = this.state.centerId;\n\t\n\t        //set specimen values\n\t        var specimen = barcodeList[barcode].specimen;\n\t        specimen.candidateId = this.state.candidateId;\n\t        specimen.sessionId = this.state.sessionId;\n\t        specimen.quantity = specimen.collection.quantity;\n\t        specimen.unitId = specimen.collection.unitId;\n\t        specimen.collection.locationId = this.state.centerId;\n\t        if (this.props.specimenTypes[specimen.typeId].freezeThaw === 1) {\n\t          specimen.fTCycle = 0;\n\t        }\n\t\n\t        //if this is an aliquot form, reset some of the values.\n\t        //TODO: these will eventually be higher level states.\n\t        if (this.props.data) {\n\t          specimen.candidateId = this.props.data.candidate.CandID;\n\t          specimen.sessionId = this.props.data.session.ID;\n\t          specimen.parentSpecimenId = this.props.data.specimen.id;\n\t          specimen.collection.locationId = this.props.data.container.locationId;\n\t          container.locationId = this.props.data.container.locationId;\n\t          container.originId = this.props.data.container.locationId;\n\t        }\n\t\n\t        barcodeList[barcode].container = container;\n\t        barcodeList[barcode].specimen = specimen;\n\t      }\n\t\n\t      this.props.save(barcodeList, this.props.saveBarcodeListURL, 'Save Successful!').then(function () {\n\t        _this2.props.refreshParent();\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setSpecimen',\n\t    value: function setSpecimen(name, value, key) {\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t      var centerId = this.state.centerId;\n\t      var candidateId = this.state.candidateId;\n\t      var sessionId = this.state.sessionId;\n\t      var barcodeList = this.state.barcodeList;\n\t\n\t      if (name === 'candidateId') {\n\t        candidateId = value;\n\t      } else if (name === 'sessionId') {\n\t        sessionId = value;\n\t        centerId = this.props.sessionCenters[sessionId].centerId;\n\t      } else {\n\t        //this is eliminate values if specimen type is changed\n\t        if (name === 'typeId') {\n\t          barcodeList[key].specimen = { collection: {} };\n\t        }\n\t        barcodeList[key].specimen[name] = value;\n\t      }\n\t\n\t      this.setState({ barcodeList: barcodeList, centerId: centerId, candidateId: candidateId, sessionId: sessionId });\n\t    }\n\t  }, {\n\t    key: 'setContainer',\n\t    value: function setContainer(name, value, key) {\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t      var barcodeList = this.state.barcodeList;\n\t      barcodeList[key].container[name] = value;\n\t      this.setState({ barcodeList: barcodeList });\n\t    }\n\t  }, {\n\t    key: 'addBarcode',\n\t    value: function addBarcode() {\n\t      var barcodeList = this.state.barcodeList;\n\t      var count = this.state.count;\n\t      var collapsed = this.state.collapsed;\n\t\n\t      barcodeList[count + 1] = { specimen: {}, container: { collection: {} } };\n\t      collapsed[count + 1] = true;\n\t      count = count + 1;\n\t\n\t      this.setState({ barcodeList: barcodeList, collapsed: collapsed, count: count });\n\t    }\n\t  }, {\n\t    key: 'setCopyMultiplier',\n\t    value: function setCopyMultiplier(e) {\n\t      var copyMultiplier = e.target.value;\n\t      this.setState({ copyMultiplier: copyMultiplier });\n\t    }\n\t  }, {\n\t    key: 'copyBarcode',\n\t    value: function copyBarcode(key) {\n\t      var count = this.state.count;\n\t      var collapsed = this.state.collapsed;\n\t      var nextKey = count + 1;\n\t      var barcodeList = this.state.barcodeList;\n\t      var multiplier = this.state.copyMultiplier;\n\t\n\t      for (var i = 1; i <= multiplier; i++) {\n\t        barcodeList[nextKey] = JSON.parse(JSON.stringify(barcodeList[key]));\n\t        delete barcodeList[nextKey].container.barcode;\n\t        collapsed[nextKey] = true;\n\t        nextKey++;\n\t      }\n\t\n\t      this.setState({\n\t        barcodeList: barcodeList,\n\t        count: nextKey,\n\t        collapsed: collapsed\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removeBarcode',\n\t    value: function removeBarcode(key) {\n\t      var barcodeList = this.state.barcodeList;\n\t      delete barcodeList[key];\n\t      this.setState({ barcodeList: barcodeList });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this3 = this;\n\t\n\t      //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n\t      var barcodeListArray = Object.keys(this.state.barcodeList);\n\t      var barcodes = [];\n\t      var i = 1;\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        var _loop = function _loop() {\n\t          var key = _step.value;\n\t\n\t          barcodes.push(React.createElement(_barcodeForm2.default, {\n\t            data: _this3.props.data || null,\n\t            key: key,\n\t            barcodeKey: key,\n\t            id: i,\n\t            collapsed: _this3.state.collapsed[key],\n\t            toggleCollapse: _this3.toggleCollapse,\n\t            mapFormOptions: _this3.props.mapFormOptions,\n\t            container: _this3.state.barcodeList[key].container || null,\n\t            specimen: _this3.state.barcodeList[key].specimen || null,\n\t            removeBarcode: barcodeListArray.length !== 1 ? function () {\n\t              return _this3.removeBarcode(key);\n\t            } : null,\n\t            addBarcode: i == barcodeListArray.length ? _this3.addBarcode : null,\n\t            setCopyMultiplier: _this3.setCopyMultiplier,\n\t            copyMultiplier: _this3.state.copyMultiplier,\n\t            copyBarcode: i == barcodeListArray.length && _this3.state.barcodeList[key] ? _this3.copyBarcode : null,\n\t            setContainer: _this3.setContainer,\n\t            setSpecimen: _this3.setSpecimen,\n\t            onChange: _this3.props.onChange,\n\t            specimenTypes: _this3.props.specimenTypes,\n\t            containerTypesPrimary: _this3.props.containerTypesPrimary,\n\t            containersNonPrimary: _this3.props.containersNonPrimary,\n\t            specimenTypeAttributes: _this3.props.specimenTypeAttributes,\n\t            attributeDatatypes: _this3.props.attributeDatatypes,\n\t            attributeOptions: _this3.props.attributeOptions,\n\t            capacities: _this3.props.capacities,\n\t            containerDimensions: _this3.props.containerDimensions,\n\t            containerCoordinates: _this3.props.containerCoordinates,\n\t            specimenTypeUnits: _this3.props.specimenTypeUnits,\n\t            units: _this3.props.units\n\t          }));\n\t\n\t          i++;\n\t        };\n\t\n\t        for (var _iterator = barcodeListArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          _loop();\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t\n\t      var globalFields = void 0;\n\t      var remainingQuantityFields = void 0;\n\t      if (this.props.data) {\n\t        globalFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(StaticElement, {\n\t            label: 'Parent Specimen',\n\t            text: this.props.data.container.barcode\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'PSCID',\n\t            text: this.props.data.candidate.PSCID\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Visit Label',\n\t            text: this.props.data.session.Visit_label\n\t          })\n\t        );\n\t\n\t        remainingQuantityFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Remaining Quantity',\n\t            onUserInput: this.props.setSpecimenData,\n\t            required: true,\n\t            value: this.props.specimen.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: this.props.specimenUnits,\n\t            onUserInput: this.props.setSpecimenData,\n\t            emptyOption: false,\n\t            required: true,\n\t            value: this.props.specimen.unitId\n\t          })\n\t        );\n\t      } else {\n\t        var sessions = {};\n\t        if (this.state.candidateId) {\n\t          sessions = this.props.mapFormOptions(this.props.candidateSessions[this.state.candidateId], 'label');\n\t        }\n\t        //TODO: not sure why, but I'm now having trouble with the SearchableDropdown\n\t        globalFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'candidateId',\n\t            label: 'PSCID',\n\t            options: this.props.candidates,\n\t            onUserInput: this.setSpecimen,\n\t            required: true,\n\t            value: this.state.candidateId,\n\t            placeHolder: 'Search for a PSCID'\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'sessionId',\n\t            label: 'Visit Label',\n\t            options: sessions,\n\t            onUserInput: this.setSpecimen,\n\t            required: true,\n\t            value: this.state.sessionId,\n\t            disabled: this.state.candidateId ? false : true\n\t          })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenForm',\n\t          id: 'specimenForm',\n\t          onSubmit: function onSubmit() {\n\t            _this3.saveBarcodeList();\n\t            _this3.props.saveSpecimen instanceof Function && _this3.props.saveSpecimen();\n\t          },\n\t          ref: 'form'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-9 col-xs-offset-1' },\n\t            globalFields,\n\t            remainingQuantityFields\n\t          )\n\t        ),\n\t        barcodes,\n\t        React.createElement(ButtonElement, {\n\t          label: 'Submit',\n\t          columnSize: 'col-sm-2 col-sm-offset-10'\n\t        })\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimenForm;\n\t}(React.Component);\n\t\n\tBiobankSpecimenForm.propTypes = {};\n\t\n\texports.default = BiobankSpecimenForm;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _collectionForm = __webpack_require__(5);\n\t\n\tvar _collectionForm2 = _interopRequireDefault(_collectionForm);\n\t\n\tvar _containerParentForm = __webpack_require__(6);\n\t\n\tvar _containerParentForm2 = _interopRequireDefault(_containerParentForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Barcode Form\n\t *\n\t * Acts a subform for BiobankSpecimenForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenBarcodeForm = function (_React$Component) {\n\t  _inherits(SpecimenBarcodeForm, _React$Component);\n\t\n\t  function SpecimenBarcodeForm() {\n\t    _classCallCheck(this, SpecimenBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenBarcodeForm.__proto__ || Object.getPrototypeOf(SpecimenBarcodeForm)).call(this));\n\t\n\t    _this.setContainer = _this.setContainer.bind(_this);\n\t    _this.setSpecimen = _this.setSpecimen.bind(_this);\n\t    _this.copy = _this.copy.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenBarcodeForm, [{\n\t    key: 'setContainer',\n\t    value: function setContainer(name, value) {\n\t      this.props.setContainer(name, value, this.props.barcodeKey);\n\t    }\n\t  }, {\n\t    key: 'setSpecimen',\n\t    value: function setSpecimen(name, value) {\n\t      this.props.setSpecimen(name, value, this.props.barcodeKey);\n\t    }\n\t  }, {\n\t    key: 'copy',\n\t    value: function copy() {\n\t      this.props.copyBarcode(this.props.copyMultiplier);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      var addBarcodeButton = void 0;\n\t      var addBarcodeText = void 0;\n\t      var copyBarcodeButton = void 0;\n\t      var copyBarcodeText = void 0;\n\t      if (this.props.addBarcode) {\n\t        addBarcodeButton = React.createElement(\n\t          'span',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: this.props.addBarcode\n\t            },\n\t            '+'\n\t          )\n\t        );\n\t\n\t        addBarcodeText = React.createElement(\n\t          'span',\n\t          { className: 'action-title' },\n\t          'New Entry'\n\t        );\n\t      }\n\t\n\t      if (this.props.copyBarcode) {\n\t        copyBarcodeButton = React.createElement(\n\t          'span',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: this.copy\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-duplicate' })\n\t          )\n\t        );\n\t        copyBarcodeText = React.createElement(\n\t          'span',\n\t          { className: 'action-title' },\n\t          React.createElement('input', {\n\t            className: 'form-control input-sm',\n\t            type: 'number',\n\t            min: '1',\n\t            max: '50',\n\t            style: { width: 50, display: 'inline' },\n\t            onChange: this.props.setCopyMultiplier,\n\t            value: this.props.copyMultiplier\n\t          }),\n\t          'Copies'\n\t        );\n\t      }\n\t\n\t      var removeBarcodeButton = void 0;\n\t      if (this.props.removeBarcode) {\n\t        var glyphStyle = {\n\t          color: '#DDDDDD',\n\t          marginLeft: 10,\n\t          cursor: 'pointer',\n\t          fontSize: 15\n\t        };\n\t\n\t        removeBarcodeButton = React.createElement('span', {\n\t          className: 'glyphicon glyphicon-remove',\n\t          onClick: this.props.removeBarcode,\n\t          style: glyphStyle\n\t        });\n\t      }\n\t\n\t      var specimenTypes = {};\n\t      if (this.props.data) {\n\t        for (var id in this.props.specimenTypes) {\n\t          if (this.props.specimenTypes[id].parentTypeId == this.props.data.specimen.typeId || id == this.props.data.specimen.typeId) {\n\t            specimenTypes[id] = this.props.specimenTypes[id]['type'];\n\t          }\n\t        }\n\t      } else {\n\t        specimenTypes = this.props.mapFormOptions(this.props.specimenTypes, 'type');\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankBarcode'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-9 col-xs-offset-1' },\n\t            React.createElement(\n\t              'div',\n\t              null,\n\t              React.createElement(TextboxElement, {\n\t                name: 'barcode',\n\t                label: 'Barcode ' + this.props.id,\n\t                onUserInput: this.setContainer,\n\t                required: true,\n\t                value: this.props.container.barcode\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-1', style: { paddingLeft: 0, marginTop: 10 } },\n\t            React.createElement('span', {\n\t              className: this.props.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up',\n\t              style: { cursor: 'pointer', fontSize: 15, position: 'relative', right: 40 },\n\t              'data-toggle': 'collapse',\n\t              'data-target': '#item-' + this.props.barcodeKey,\n\t              onClick: function onClick() {\n\t                return _this2.props.toggleCollapse(_this2.props.barcodeKey);\n\t              }\n\t            }),\n\t            removeBarcodeButton\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement('div', { className: 'col-xs-2' }),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-8' },\n\t            React.createElement(\n\t              'div',\n\t              { id: 'item-' + this.props.barcodeKey, className: 'collapse' },\n\t              React.createElement(SelectElement, {\n\t                name: 'typeId',\n\t                label: 'Specimen Type',\n\t                options: specimenTypes,\n\t                onUserInput: this.setSpecimen,\n\t                required: true,\n\t                value: this.props.specimen.typeId\n\t              }),\n\t              React.createElement(SelectElement, {\n\t                name: 'typeId',\n\t                label: 'Container Type',\n\t                options: this.props.containerTypesPrimary,\n\t                onUserInput: this.setContainer,\n\t                ref: 'containerType',\n\t                required: true,\n\t                value: this.props.container.typeId\n\t              }),\n\t              React.createElement(_collectionForm2.default, {\n\t                specimen: this.props.specimen,\n\t                setSpecimenData: this.setSpecimen,\n\t                specimenTypeUnits: this.props.specimenTypeUnits,\n\t                specimenTypeAttributes: this.props.specimenTypeAttributes,\n\t                attributeDatatypes: this.props.attributeDatatypes,\n\t                attributeOptions: this.props.attributeOptions\n\t              }),\n\t              React.createElement(_containerParentForm2.default, {\n\t                setContainerData: this.setContainer,\n\t                mapFormOptions: this.props.mapFormOptions,\n\t                container: this.props.container,\n\t                containersNonPrimary: this.props.containersNonPrimary,\n\t                containerDimensions: this.props.containerDimensions,\n\t                containerCoordinates: this.props.containerCoordinates\n\t              })\n\t            )\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement('div', { className: 'col-xs-4' }),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-3 action' },\n\t              addBarcodeButton,\n\t              addBarcodeText\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-3 action' },\n\t              copyBarcodeButton,\n\t              copyBarcodeText\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return SpecimenBarcodeForm;\n\t}(React.Component);\n\t\n\tSpecimenBarcodeForm.propTypes = {};\n\t\n\texports.default = SpecimenBarcodeForm;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenCollectionForm = function (_React$Component) {\n\t  _inherits(SpecimenCollectionForm, _React$Component);\n\t\n\t  function SpecimenCollectionForm() {\n\t    _classCallCheck(this, SpecimenCollectionForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenCollectionForm.__proto__ || Object.getPrototypeOf(SpecimenCollectionForm)).call(this));\n\t\n\t    _this.getSpecimenTypeFields = _this.getSpecimenTypeFields.bind(_this);\n\t    _this.setCollectionData = _this.setCollectionData.bind(_this);\n\t    _this.addData = _this.addData.bind(_this);\n\t    _this.setData = _this.setData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenCollectionForm, [{\n\t    key: 'setCollectionData',\n\t    value: function setCollectionData(name, value) {\n\t      var collection = this.props.specimen.collection;\n\t      collection[name] = value;\n\t      this.props.setSpecimenData('collection', collection);\n\t    }\n\t\n\t    //TODO: this function may not be necessary\n\t\n\t  }, {\n\t    key: 'addData',\n\t    value: function addData() {\n\t      var collection = this.props.specimen.collection;\n\t      collection.data = {};\n\t      this.props.setSpecimenData('collection', collection);\n\t    }\n\t  }, {\n\t    key: 'setData',\n\t    value: function setData(name, value) {\n\t      var data = this.props.specimen.collection.data;\n\t      data[name] = value;\n\t      this.setCollectionData('data', data);\n\t    }\n\t\n\t    // This generates all the form fields for a given specimen type\n\t\n\t  }, {\n\t    key: 'getSpecimenTypeFields',\n\t    value: function getSpecimenTypeFields(fieldsObject) {\n\t      var _this2 = this;\n\t\n\t      var specimenTypeFields = Object.keys(fieldsObject).map(function (attribute) {\n\t        var datatype = _this2.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"text\" || datatype === \"number\") {\n\t\n\t          if (fieldsObject[attribute]['refTableId'] == null) {\n\t            return React.createElement(TextboxElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              onUserInput: _this2.setData,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this2.props.specimen.collection.data[attribute]\n\t            });\n\t          }\n\t\n\t          if (fieldsObject[attribute]['refTableId'] !== null) {\n\t            return React.createElement(SelectElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              options: _this2.props.attributeOptions[fieldsObject[attribute]['refTableId']],\n\t              onUserInput: _this2.setData,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this2.props.specimen.collection.data[attribute]\n\t            });\n\t          }\n\t        }\n\t\n\t        if (datatype === \"datetime\") {\n\t          return React.createElement(DateElement, {\n\t            name: attribute,\n\t            label: fieldsObject[attribute]['name'],\n\t            onUserInput: _this2.setData,\n\t            ref: attribute,\n\t            required: fieldsObject[attribute]['required'],\n\t            value: _this2.props.specimen.collection.data[attribute]\n\t          });\n\t        }\n\t\n\t        if (datatype === \"boolean\") {\n\t          // There is currently no CheckboxElement or RadioElement in loris/jsx/Form.js and therefore\n\t          // this is not possible.     \n\t        }\n\t      });\n\t\n\t      return specimenTypeFields;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var updateButton = void 0;\n\t      if (((this.props.data || {}).specimen || {}).collection) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      }\n\t\n\t      var specimenTypeUnits = {};\n\t      var specimenTypeFields = void 0;\n\t      if (this.props.specimen.typeId) {\n\t\n\t        //This modifies the selections for unit drop down based on the chosen\n\t        //specimen type \n\t        for (var id in this.props.specimenTypeUnits[this.props.specimen.typeId]) {\n\t          specimenTypeUnits[id] = this.props.specimenTypeUnits[this.props.specimen.typeId][id].unit;\n\t        }\n\t\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.props.specimen.typeId];\n\t        if (specimenTypeFieldsObject) {\n\t          if (((this.props.specimen || {}).collection || {}).data) {\n\t            specimenTypeFields = this.getSpecimenTypeFields(specimenTypeFieldsObject);\n\t          } else {\n\t            this.addData();\n\t          }\n\t        }\n\t      }\n\t\n\t      var specimenFields = void 0;\n\t      if (this.props.specimen.typeId) {\n\t        specimenFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Quantity',\n\t            onUserInput: this.setCollectionData,\n\t            required: true,\n\t            value: this.props.specimen.collection.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: specimenTypeUnits,\n\t            onUserInput: this.setCollectionData,\n\t            required: true,\n\t            value: this.props.specimen.collection.unitId\n\t          }),\n\t          specimenTypeFields,\n\t          React.createElement(DateElement, {\n\t            name: 'date',\n\t            label: 'Date',\n\t            minYear: '2000',\n\t            maxYear: '2018',\n\t            onUserInput: this.setCollectionData,\n\t            required: true,\n\t            value: this.props.specimen.collection.date\n\t          }),\n\t          React.createElement(TimeElement, {\n\t            name: 'time',\n\t            label: 'Time',\n\t            onUserInput: this.setCollectionData,\n\t            required: true,\n\t            value: this.props.specimen.collection.time\n\t          }),\n\t          React.createElement(TextareaElement, {\n\t            name: 'comments',\n\t            label: 'Comments',\n\t            onUserInput: this.setCollectionData,\n\t            ref: 'comments',\n\t            value: this.props.specimen.collection.comments\n\t          })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankSpecimen',\n\t          onSubmit: this.props.saveSpecimen,\n\t          ref: 'form'\n\t        },\n\t        specimenFields,\n\t        updateButton\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return SpecimenCollectionForm;\n\t}(React.Component);\n\t\n\tSpecimenCollectionForm.propTypes = {\n\t  setSpecimenData: React.PropTypes.func.isRequired,\n\t  saveSpecimen: React.PropTypes.func,\n\t  specimen: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  attributeOptions: React.PropTypes.object.isRequired,\n\t  specimenTypeUnits: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = SpecimenCollectionForm;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _containerDisplay = __webpack_require__(7);\n\t\n\tvar _containerDisplay2 = _interopRequireDefault(_containerDisplay);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Biobank Container Parent Form\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Fetches data from Loris backend and displays a form allowing\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * to specimen a biobank file attached to a specific instrument\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Henri Rabalais\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.0.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\tn\t\n\tvar ContainerParentForm = function (_React$Component) {\n\t  _inherits(ContainerParentForm, _React$Component);\n\t\n\t  function ContainerParentForm() {\n\t    _classCallCheck(this, ContainerParentForm);\n\t\n\t    return _possibleConstructorReturn(this, (ContainerParentForm.__proto__ || Object.getPrototypeOf(ContainerParentForm)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(ContainerParentForm, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var containerDisplay = void 0;\n\t      var containerBarcodesNonPrimary = this.props.mapFormOptions(this.props.containersNonPrimary, 'barcode');\n\t      var parentContainerField = React.createElement(SelectElement, {\n\t        name: 'parentContainerId',\n\t        label: 'Parent Container Barcode',\n\t        options: containerBarcodesNonPrimary,\n\t        onUserInput: this.props.setContainerData,\n\t        required: true,\n\t        value: this.props.container.parentContainerId\n\t      });\n\t\n\t      if (this.props.container.parentContainerId) {\n\t        var dimensionId = this.props.containersNonPrimary[this.props.container.parentContainerId].dimensionId;\n\t\n\t        if (dimensionId) {\n\t          // This will eventually become unecessary\n\t          var dimensions = this.props.containerDimensions[dimensionId];\n\t\n\t          // Total coordinates is determined by the product of the dimensions\n\t          var coordinatesTotal = 1;\n\t          for (var dimension in dimensions) {\n\t            coordinatesTotal = coordinatesTotal * dimensions[dimension];\n\t          }\n\t\n\t          // Mapping of options for the SelectElement\n\t          var coordinates = {};\n\t          for (var i = 1; i <= coordinatesTotal; i++) {\n\t            // If the coordinate is already taken, skip it.\n\t            // this doubling of if statements seems unnecessary\n\t            if (this.props.containerCoordinates[this.props.container.parentContainerId]) {\n\t              if (this.props.containerCoordinates[this.props.container.parentContainerId][i]) {\n\t                continue;\n\t              }\n\t            }\n\t\n\t            coordinates[i] = i;\n\t          }\n\t\n\t          containerDisplay = React.createElement(_containerDisplay2.default, {\n\t            dimensions: this.props.containerDimensions[this.props.containersNonPrimary[this.props.container.parentContainerId].dimensionId],\n\t            coordinates: this.props.containerCoordinates[this.props.container.parentContainerId],\n\t            containerTypes: this.props.containerTypes,\n\t            containerStati: this.props.containerStati,\n\t            select: true,\n\t            selectedCoordinate: this.props.container.coordinate,\n\t            setContainerData: this.props.setContainerData\n\t          });\n\t        }\n\t      }\n\t\n\t      var updateButton = void 0;\n\t      if ((this.props.data || {}).container) {\n\t        updateButton = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement('br', null),\n\t          React.createElement(ButtonElement, { label: 'Update' })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          onSubmit: this.props.saveContainer\n\t        },\n\t        parentContainerField,\n\t        containerDisplay,\n\t        updateButton\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return ContainerParentForm;\n\t}(React.Component);\n\t\n\tContainerParentForm.propTypes = {\n\t  mapFormOptions: React.PropTypes.func.isRequired,\n\t  setContainerData: React.PropTypes.func.isRequired,\n\t  saveContainer: React.PropTypes.func,\n\t  data: React.PropTypes.object,\n\t  container: React.PropTypes.object.isRequired,\n\t  containersNonPrimary: React.PropTypes.object.isRequired,\n\t  containerDimensions: React.PropTypes.object.isRequired,\n\t  containerCoordinates: React.PropTypes.object.isRequired,\n\t  containerTypes: React.PropTypes.object,\n\t  containerStati: React.PropTypes.object\n\t};\n\t\n\texports.default = ContainerParentForm;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * ContainerDisplay\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar ContainerDisplay = function (_React$Component) {\n\t  _inherits(ContainerDisplay, _React$Component);\n\t\n\t  function ContainerDisplay() {\n\t    _classCallCheck(this, ContainerDisplay);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ContainerDisplay.__proto__ || Object.getPrototypeOf(ContainerDisplay)).call(this));\n\t\n\t    _this.redirectURL = _this.redirectURL.bind(_this);\n\t    _this.drag = _this.drag.bind(_this);\n\t    _this.drop = _this.drop.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ContainerDisplay, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      $('[data-toggle=\"tooltip\"]').tooltip();\n\t    }\n\t  }, {\n\t    key: 'componenDidUpdate',\n\t    value: function componenDidUpdate() {\n\t      $('[data-toggle=\"tooltip\"]').tooltip();\n\t    }\n\t  }, {\n\t    key: 'redirectURL',\n\t    value: function redirectURL(e) {\n\t      var coordinate = e.target.id;\n\t      if (this.props.coordinates[coordinate]) {\n\t        var type = this.props.types[this.props.children[this.props.coordinates[coordinate]].typeId].primary ? 'specimen' : 'container';\n\t        var url = loris.BaseURL + '/biobank/' + type + '/?barcode=' + this.props.children[this.props.coordinates[coordinate]].barcode;\n\t\n\t        window.location.href = url;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'allowDrop',\n\t    value: function allowDrop(e) {\n\t      e.preventDefault();\n\t    }\n\t  }, {\n\t    key: 'drag',\n\t    value: function drag(e) {\n\t      var container = JSON.stringify(this.props.children[this.props.coordinates[e.target.id]]);\n\t      e.dataTransfer.setData(\"text/plain\", container);\n\t    }\n\t  }, {\n\t    key: 'drop',\n\t    value: function drop(e) {\n\t      e.preventDefault();\n\t\n\t      var container = JSON.parse(e.dataTransfer.getData(\"text/plain\"));\n\t      var newCoordinate = parseInt(e.target.id);\n\t\n\t      container.coordinate = newCoordinate;\n\t\n\t      this.props.saveChildContainer(container);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      // This is eventually need to be reworked and cleaned up\n\t      var column = [];\n\t      var row = [];\n\t      var display = void 0;\n\t      var coordinate = 1;\n\t      if (this.props.dimensions) {\n\t        for (var y = 0; y < this.props.dimensions.y; y++) {\n\t          column = [];\n\t          for (var x = 1; x <= this.props.dimensions.x; x++) {\n\t\n\t            var nodeWidth = 500 / this.props.dimensions.x - 500 / this.props.dimensions.x * 0.08;\n\t            var nodeStyle = { width: nodeWidth };\n\t            var nodeClass = 'node';\n\t            var tooltipTitle = null;\n\t            var dataHtml = 'false';\n\t            var dataToggle = null;\n\t            var dataPlacement = null;\n\t            var draggable = 'false';\n\t            var onDragStart = null;\n\t            var onDragOver = this.allowDrop;\n\t            var onDrop = this.drop;\n\t            var onClick = null;\n\t\n\t            if (!this.props.select) {\n\t              // This double if statement doesn't sound great\n\t              if (this.props.coordinates) {\n\t                if (this.props.coordinates[coordinate]) {\n\t                  nodeClass = 'node occupied';\n\t                  dataHtml = 'true';\n\t                  dataToggle = 'tooltip';\n\t                  dataPlacement = 'top';\n\t                  tooltipTitle = '<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + '<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + '<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n\t                  draggable = 'true';\n\t                  onDragStart = this.drag;\n\t                  onDragOver = null;\n\t                  onDrop = null;\n\t                  onClick = this.redirectURL;\n\t                }\n\t              }\n\t            }\n\t\n\t            if (this.props.select) {\n\t              if (coordinate == this.props.selectedCoordinate) {\n\t                nodeClass = 'node occupied';\n\t              } else if (!this.props.coordinates) {\n\t                nodeClass = 'node available';\n\t                onClick = function onClick(e) {\n\t                  return _this2.props.setContainerData('coordinate', e.target.id);\n\t                };\n\t              } else if (this.props.coordinates) {\n\t                if (!this.props.coordinates[coordinate]) {\n\t                  nodeClass = 'node available';\n\t                  onClick = function onClick(e) {\n\t                    return _this2.props.setContainerData('coordinate', e.target.id);\n\t                  };\n\t                } else if (this.props.coordinates[coordinate]) {\n\t                  // TODO: --- This is currently not working ---\n\t                  //  dataHtml = 'true';\n\t                  //  dataToggle = 'tooltip';\n\t                  //  dataPlacement = 'top';\n\t                  //  tooltipTitle = \n\t                  //'<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + \n\t                  //'<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + \n\t                  //'<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n\t                }\n\t              }\n\t            }\n\t\n\t            var coordinateDisplay = void 0;\n\t            if (true) {\n\t              coordinateDisplay = x + this.props.dimensions.x * y;\n\t            } else if (false) {\n\t              coordinateDisplay = String.fromCharCode(65 + y) + '' + x;\n\t            }\n\t\n\t            column.push(React.createElement(\n\t              'div',\n\t              {\n\t                id: coordinate,\n\t                className: nodeClass,\n\t                'data-html': dataHtml,\n\t                'data-toggle': dataToggle,\n\t                'data-placement': dataPlacement,\n\t                'data-original-title': tooltipTitle,\n\t                style: nodeStyle,\n\t                onClick: onClick,\n\t                draggable: draggable,\n\t                onDragStart: onDragStart,\n\t                onDragOver: onDragOver,\n\t                onDrop: onDrop\n\t              },\n\t              coordinateDisplay\n\t            ));\n\t\n\t            coordinate++;\n\t          }\n\t\n\t          var rowHeight = 500 / this.props.dimensions.y - 500 / this.props.dimensions.y * 0.08;\n\t          var rowMargin = 500 / this.props.dimensions.y * 0.04;\n\t          var rowStyle = {\n\t            height: rowHeight\n\t          };\n\t\n\t          row.push(React.createElement(\n\t            'div',\n\t            {\n\t              className: 'row',\n\t              style: rowStyle\n\t            },\n\t            column\n\t          ));\n\t        }\n\t\n\t        display = row;\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { className: 'display' },\n\t        display\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return ContainerDisplay;\n\t}(React.Component);\n\t\n\tContainerDisplay.propTypes = {};\n\t\n\texports.default = ContainerDisplay;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _barcodeForm = __webpack_require__(4);\n\t\n\tvar _barcodeForm2 = _interopRequireDefault(_barcodeForm);\n\t\n\tvar _specimenForm = __webpack_require__(3);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tvar _preparationForm = __webpack_require__(9);\n\t\n\tvar _preparationForm2 = _interopRequireDefault(_preparationForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Pool Specimen Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\tvar PoolSpecimenForm = function (_React$Component) {\n\t  _inherits(PoolSpecimenForm, _React$Component);\n\t\n\t  function PoolSpecimenForm(props) {\n\t    _classCallCheck(this, PoolSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (PoolSpecimenForm.__proto__ || Object.getPrototypeOf(PoolSpecimenForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      barcodeList: {},\n\t      errorMessage: null,\n\t      formErrors: {},\n\t      barcodeCount: 2,\n\t      preparation: false,\n\t      step: 1\n\t    };\n\t\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    _this.validateForm = _this.validateForm.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setPreparationFormData = _this.setPreparationFormData.bind(_this);\n\t    _this.setSpecimenFormData = _this.setSpecimenFormData.bind(_this);\n\t    _this.submitForm = _this.submitForm.bind(_this);\n\t    _this.setBarcodeCount = _this.setBarcodeCount.bind(_this);\n\t    _this.next = _this.next.bind(_this);\n\t    _this.previous = _this.previous.bind(_this);\n\t    _this.addPreparation = _this.addPreparation.bind(_this);\n\t    _this.removePreparation = _this.removePreparation.bind(_this);\n\t    _this.validate = _this.validate.bind(_this);\n\t    _this.formSwitch = _this.formSwitch.bind(_this);\n\t    _this.preparationSwitch = _this.preparationSwitch.bind(_this);\n\t    _this.runAjax = _this.runAjax.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(PoolSpecimenForm, [{\n\t    key: 'next',\n\t    value: function next() {\n\t      var _this2 = this;\n\t\n\t      this.validate().then(function (data) {\n\t        _this2.setState({\n\t          poolData: data,\n\t          step: _this2.state.step + 1\n\t        });\n\t      }, function (error) {\n\t        swal(\"Oops!\", error.responseText, \"error\");\n\t      });\n\t    }\n\t  }, {\n\t    key: 'previous',\n\t    value: function previous() {\n\t      this.setState({\n\t        step: this.state.step - 1\n\t      });\n\t    }\n\t  }, {\n\t    key: 'validate',\n\t    value: function validate() {\n\t      return this.runAjax(this.props.specimenRequest, { barcodeList: this.state.barcodeList });\n\t    }\n\t  }, {\n\t    key: 'runAjax',\n\t    value: function runAjax(url, inputData) {\n\t      var _this3 = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        $.ajax(url, {\n\t          method: \"GET\",\n\t          dataType: 'json',\n\t          data: inputData,\n\t          success: function (data) {\n\t            resolve(data);\n\t          }.bind(_this3),\n\t          error: function error(_error, textStatus, errorThrown) {\n\t            reject(_error);\n\t            console.error(_error);\n\t          }\n\t        });\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setBarcodeCount',\n\t    value: function setBarcodeCount(field, value) {\n\t      var barcodeCount = value;\n\t      var barcodeList = this.state.barcodeList;\n\t      for (var barcode in barcodeList) {\n\t        if (barcode > barcodeCount) {\n\t          delete barcodeList[barcode];\n\t        }\n\t      }\n\t\n\t      this.setState({ barcodeCount: barcodeCount, barcodeList: barcodeList });\n\t    }\n\t  }, {\n\t    key: 'formSwitch',\n\t    value: function formSwitch(inputForm, specimenForm) {\n\t      switch (this.state.step) {\n\t        case 1:\n\t          return inputForm;\n\t        case 2:\n\t          return specimenForm;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'preparationSwitch',\n\t    value: function preparationSwitch(preparationButton, preparationForm) {\n\t      switch (this.state.preparation) {\n\t        case false:\n\t          return preparationButton;\n\t        case true:\n\t          return preparationForm;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'addPreparation',\n\t    value: function addPreparation() {\n\t      var _this4 = this;\n\t\n\t      this.validate().then(function (data) {\n\t        _this4.setState({\n\t          poolData: data,\n\t          preparation: true\n\t        });\n\t      }, function (error) {\n\t        swal('Oh no!', error.responseText, 'error');\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removePreparation',\n\t    value: function removePreparation() {\n\t      var formData = this.state.formData;\n\t      //TODO: is it better to set it to empty, or delete it?\n\t      formData.preparationForm = {};\n\t      this.setState({\n\t        preparation: false,\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      //Generates barcodes\n\t      var barcodes = [];\n\t      for (var i = 1; i <= this.state.barcodeCount; i++) {\n\t        barcodes.push(React.createElement(TextboxElement, {\n\t          name: i,\n\t          label: 'Barcode ' + i,\n\t          onUserInput: this.setFormData,\n\t          required: true,\n\t          value: this.state.barcodeList[i],\n\t          errorMessage: this.state.formErrors[i]\n\t        }));\n\t      }\n\t\n\t      var preparationButton = React.createElement(\n\t        'div',\n\t        { className: 'row' },\n\t        React.createElement('div', { className: 'col-xs-4' }),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-xs 4 action' },\n\t          React.createElement(\n\t            'span',\n\t            { className: 'action' },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                className: 'action-button add',\n\t                onClick: this.addPreparation\n\t              },\n\t              '+'\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'action-title' },\n\t            'Add Preparation'\n\t          )\n\t        )\n\t      );\n\t\n\t      var preparationForm = void 0;\n\t      if (this.state.poolData) {\n\t\n\t        var specimenProtocolAttributes = this.props.specimenProtocolAttributes[this.state.poolData.typeId];\n\t\n\t        var specimenProtocols = {};\n\t        for (var id in specimenProtocolAttributes) {\n\t          specimenProtocols[id] = this.props.specimenProtocols[id];\n\t        }\n\t        specimenProtocols = this.props.mapFormOptions(specimenProtocols, 'protocol');\n\t\n\t        preparationForm = React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-sm-9 col-sm-offset-1' },\n\t            React.createElement(_preparationForm2.default, {\n\t              formData: this.state.formData.preparationForm,\n\t              specimenProtocols: specimenProtocols,\n\t              specimenProtocolAttributes: specimenProtocolAttributes,\n\t              attributeDatatypes: this.props.attributeDatatypes,\n\t              attributeOptions: this.props.attributeOptions,\n\t              setParentFormData: this.setPreparationFormData,\n\t              insertAction: loris.BaseURL + '/biobank/ajax/submitData.php?action=insertSpecimenPreparation'\n\t            }),\n\t            React.createElement(\n\t              'a',\n\t              { className: 'pull-right', style: { cursor: 'pointer' }, onClick: this.removePreparation },\n\t              'Cancel Preparation'\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      var inputForm = React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-sm-9 col-sm-offset-1' },\n\t            React.createElement(StaticElement, {\n\t              label: 'Pooling Note',\n\t              text: 'Select or Scan the specimens to be pooled. Please ensure that they are the same type, and share the same PSCID and Visit Label'\n\t            }),\n\t            React.createElement(NumericElement, {\n\t              label: '\\u2116 of Specimens',\n\t              min: '2',\n\t              max: '100',\n\t              value: this.state.barcodeCount,\n\t              onUserInput: this.setBarcodeCount\n\t            }),\n\t            barcodes\n\t          )\n\t        ),\n\t        this.preparationSwitch(preparationButton, preparationForm),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-sm-3 col-xs-offset-9 action' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'action-title' },\n\t            'Next'\n\t          ),\n\t          React.createElement(\n\t            'span',\n\t            { className: 'action' },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                className: 'action-button update',\n\t                onClick: this.next\n\t              },\n\t              React.createElement('span', { className: 'glyphicon glyphicon-chevron-right' })\n\t            )\n\t          )\n\t        )\n\t      );\n\t\n\t      //TODO: Things here need to be in the proper order!!!\n\t      var specimenForm = void 0;\n\t      if (this.state.poolData) {\n\t\n\t        // This is to provide the options for the output specimens\n\t        var specimenTypes = {};\n\t        if (this.state.poolData.typeId) {\n\t          specimenTypes[this.state.poolData.typeId] = this.props.specimenTypes[this.state.poolData.typeId];\n\t        }\n\t\n\t        var pscid = this.props.pSCIDs[this.state.poolData.candidateId];\n\t        var visit = this.props.sessionData[pscid].visits[this.state.poolData.sessionId];\n\t\n\t        var barcodesArray = Object.values(this.state.barcodeList);\n\t        var barcodesString = barcodesArray.join(', ');\n\t\n\t        // TODO: rather than all specimen units this should really be specific to the\n\t        // type\n\t        var specimenUnits = this.props.mapFormOptions(this.props.specimenUnits, 'unit');\n\t\n\t        specimenForm = React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-12' },\n\t            React.createElement(_specimenForm2.default, {\n\t              formData: this.state.formData.specimenForm,\n\t              candidateId: this.state.poolData.candidateId,\n\t              pscid: pscid,\n\t              sessionId: this.state.poolData.sessionId,\n\t              visit: visit,\n\t              parentSpecimenBarcodes: barcodesString,\n\t              parentSpecimenIds: this.state.poolData.specimenIds,\n\t              specimenTypes: specimenTypes,\n\t              specimenTypeUnits: this.props.specimenTypeUnits,\n\t              specimenUnits: specimenUnits,\n\t              containerTypesPrimary: this.props.containerTypesPrimary,\n\t              containersNonPrimary: this.props.containersNonPrimary,\n\t              specimenTypeAttributes: this.props.specimenTypeAttributes,\n\t              attributeDatatypes: this.props.attributeDatatypes,\n\t              attributeOptions: this.props.attributeOptions,\n\t              capacities: this.props.capacities,\n\t              containerDimensions: this.props.containerDimensions,\n\t              containerCoordinates: this.props.containerCoordinates,\n\t              setParentFormData: this.setSpecimenFormData,\n\t              action: loris.BaseURL + '/biobank/ajax/submitData.php?action=submitSpecimen',\n\t              refreshParent: this.props.refreshParent\n\t            }),\n\t            React.createElement(ButtonElement, {\n\t              label: 'Submit'\n\t            })\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-sm-3 col-xs-offset-2 action' },\n\t            React.createElement(\n\t              'span',\n\t              { className: 'action' },\n\t              React.createElement(\n\t                'div',\n\t                {\n\t                  className: 'action-button update',\n\t                  onClick: this.previous\n\t                },\n\t                React.createElement('span', { className: 'glyphicon glyphicon-chevron-left' })\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'action-title' },\n\t              'Previous'\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'poolSpecimenForm',\n\t          id: 'poolSpecimenForm',\n\t          onSubmit: this.handleSubmit,\n\t          ref: 'form'\n\t        },\n\t        this.formSwitch(inputForm, specimenForm)\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t  }, {\n\t    key: 'validateForm',\n\t    value: function validateForm(formElement, value) {\n\t      var _this5 = this;\n\t\n\t      var formErrors = this.state.formErrors;\n\t\n\t      //validate barcode regex\n\t      if (formElement === \"barcode\" && value !== \"\") {\n\t        if (!/^hello/.test(this.state.formData.barcode)) {\n\t          formErrors.barcode = true;\n\t        } else {\n\t          formErrors.barcode = false;\n\t        }\n\t      }\n\t\n\t      //validate that quantity is a number and less than capacity\n\t      if (formElement === \"quantity\" && value !== \"\") {\n\t        if (isNaN(value) || value > this.props.capacities[this.state.currentContainerType]) {\n\t          formErrors.quantity = true;\n\t        } else {\n\t          formErrors.quantity = false;\n\t        }\n\t      }\n\t\n\t      //validate datatypes and regex of generated type attributes\n\t      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t      var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t\n\t        var datatype = _this5.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"number\") {\n\t          if (formElement === attribute) {\n\t            if (isNaN(value) && value !== \"\") {\n\t              formErrors[attribute] = true;\n\t            } else {\n\t              formErrors[attribute] = false;\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      this.setState({\n\t        formErrors: formErrors\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Handle form submission\n\t     * @param {object} e - Form submission event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      this.submitForm();\n\t    }\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'submitForm',\n\t    value: function submitForm() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var preparationForm = this.state.formData.preparationForm;\n\t      var specimenForm = this.state.formData.specimenForm;\n\t      formData['preparationForm'] = JSON.stringify(preparationForm);\n\t      formData['specimenForm'] = JSON.stringify(specimenForm);\n\t\n\t      console.log(formData.specimenForm);\n\t      console.log(formData.preparationForm);\n\t\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          //this.props.refreshParent();\n\t          swal(\"Specimens Pooled Successful!\", \"\", \"success\");\n\t          this.props.onSuccess();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Checks if the inputted file name is valid\n\t     *\n\t     * @param {string} requiredFileName - Required file name\n\t     * @param {string} fileName - Provided file name\n\t     * @return {boolean} - true if fileName starts with requiredFileName, false\n\t     *   otherwise\n\t     */\n\t    //  isValidFileName(requiredFileName, fileName) {\n\t    //    if (fileName === null || requiredFileName === null) {\n\t    //      return false;\n\t    //    }\n\t    //\n\t    //    return (fileName.indexOf(requiredFileName) === 0);\n\t    //  }\n\t\n\t    /**\n\t     * Validate the form\n\t     *\n\t     * @param {object} formRefs - Object containing references to React form elements\n\t     * @param {object} formData - Object containing form data inputed by user\n\t     * @return {boolean} - true if all required fields are filled, false otherwise\n\t     */\n\t\n\t  }, {\n\t    key: 'isValidForm',\n\t    value: function isValidForm(formRefs, formData) {\n\t      var isValidForm = true;\n\t\n\t      var requiredFields = {\n\t        pscid: null,\n\t        visitLabel: null\n\t      };\n\t\n\t      Object.keys(requiredFields).map(function (field) {\n\t        if (formData[field]) {\n\t          requiredFields[field] = formData[field];\n\t        } else if (formRefs[field]) {\n\t          formRefs[field].props.hasError = true;\n\t          isValidForm = false;\n\t        }\n\t      });\n\t      this.forceUpdate();\n\t\n\t      return isValidForm;\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      // This lets the modal window know that there is formData\n\t      // and will cause a warning to be thrown of the modal window\n\t      // is exited\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t\n\t      if (formElement === \"pscid\" && value !== \"\" && value !== undefined) {\n\t        this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n\t      }\n\t\n\t      var formData = this.state.formData;\n\t      var barcodeList = this.state.barcodeList;\n\t\n\t      //TODO: there must be a better way to do this\n\t      if (isNaN(formElement)) {\n\t        formData[formElement] = value;\n\t      } else {\n\t        barcodeList[formElement] = value;\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData,\n\t        barcodeList: barcodeList\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setPreparationFormData',\n\t    value: function setPreparationFormData(preparationFormData) {\n\t      var formData = this.state.formData;\n\t      formData.preparationForm = preparationFormData;\n\t\n\t      this.setState({ formData: formData });\n\t    }\n\t  }, {\n\t    key: 'setSpecimenFormData',\n\t    value: function setSpecimenFormData(specimenFormData) {\n\t      var formData = this.state.formData;\n\t      formData.specimenForm = specimenFormData;\n\t\n\t      this.setState({ formData: formData });\n\t    }\n\t  }]);\n\t\n\t  return PoolSpecimenForm;\n\t}(React.Component);\n\t\n\tPoolSpecimenForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired,\n\t  refreshTable: React.PropTypes.func\n\t};\n\t\n\texports.default = PoolSpecimenForm;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenPreparationForm = function (_React$Component) {\n\t  _inherits(SpecimenPreparationForm, _React$Component);\n\t\n\t  function SpecimenPreparationForm() {\n\t    _classCallCheck(this, SpecimenPreparationForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenPreparationForm.__proto__ || Object.getPrototypeOf(SpecimenPreparationForm)).call(this));\n\t\n\t    _this.getSpecimenProtocolFields = _this.getSpecimenProtocolFields.bind(_this);\n\t    _this.setPreparation = _this.setPreparation.bind(_this);\n\t    _this.addData = _this.addData.bind(_this);\n\t    _this.setData = _this.setData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenPreparationForm, [{\n\t    key: 'setPreparation',\n\t    value: function setPreparation(name, value) {\n\t      var preparation = this.props.specimen.preparation;\n\t      preparation[name] = value;\n\t      this.props.setSpecimenData('preparation', preparation);\n\t    }\n\t  }, {\n\t    key: 'addData',\n\t    value: function addData() {\n\t      var preparation = this.props.specimen.preparation;\n\t      preparation.data = {};\n\t      this.props.setSpecimenData('preparation', preparation);\n\t    }\n\t  }, {\n\t    key: 'setData',\n\t    value: function setData(name, value) {\n\t      var data = this.props.specimen.preparation.data;\n\t      data[name] = value;\n\t      this.setPreparation('data', data);\n\t    }\n\t\n\t    // TODO: decouple this code from the collectionForm by make it a React Component\n\t    // This generates all the form fields for a given specimen protocol\n\t\n\t  }, {\n\t    key: 'getSpecimenProtocolFields',\n\t    value: function getSpecimenProtocolFields(fieldsObject) {\n\t      var _this2 = this;\n\t\n\t      var specimenProtocolFields = Object.keys(fieldsObject).map(function (attribute) {\n\t        var datatype = _this2.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\t\n\t        if (datatype === \"text\" || datatype === \"number\") {\n\t          if (fieldsObject[attribute]['refTableId'] == null) {\n\t            return React.createElement(TextboxElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              onUserInput: _this2.setData,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this2.props.specimen.preparation.data[attribute]\n\t            });\n\t          }\n\t\n\t          if (fieldsObject[attribute]['refTableId'] !== null) {\n\t            return React.createElement(SelectElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              options: _this2.props.attributeOptions[fieldsObject[attribute]['refTableId']],\n\t              onUserInput: _this2.setData,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this2.props.specimen.preparation.data[attribute]\n\t            });\n\t          }\n\t        }\n\t\n\t        if (datatype === \"datetime\") {\n\t          return React.createElement(DateElement, {\n\t            name: attribute,\n\t            label: fieldsObject[attribute]['name'],\n\t            onUserInput: _this2.setData,\n\t            ref: attribute,\n\t            required: fieldsObject[attribute]['required'],\n\t            value: _this2.props.specimen.preparation.data[attribute]\n\t          });\n\t        }\n\t\n\t        if (datatype === \"boolean\") {}\n\t      });\n\t\n\t      return specimenProtocolFields;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      var submitButton = void 0;\n\t      if (this.props.data.specimen.preparation) {\n\t        submitButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      } else {\n\t        submitButton = React.createElement(ButtonElement, { label: 'Submit' });\n\t      }\n\t\n\t      var specimenProtocolFields = void 0;\n\t      if (this.props.specimen.preparation.protocolId) {\n\t        var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.props.specimen.preparation.protocolId];\n\t\n\t        if (specimenProtocolFieldsObject) {\n\t          if (this.props.specimen.preparation.data) {\n\t            specimenProtocolFields = this.getSpecimenProtocolFields(specimenProtocolFieldsObject);\n\t          } else {\n\t            this.addData();\n\t          }\n\t        }\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenPreparation',\n\t          onSubmit: this.props.saveSpecimen,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(SelectElement, {\n\t          name: 'protocolId',\n\t          label: 'Protocol',\n\t          options: this.props.specimenProtocols,\n\t          onUserInput: this.setPreparation,\n\t          required: true,\n\t          value: this.props.specimen.preparation.protocolId\n\t        }),\n\t        specimenProtocolFields,\n\t        React.createElement(DateElement, {\n\t          name: 'date',\n\t          label: 'Date',\n\t          onUserInput: this.setPreparation,\n\t          required: true,\n\t          value: this.props.specimen.preparation.date\n\t        }),\n\t        React.createElement(TimeElement, {\n\t          name: 'time',\n\t          label: 'Time',\n\t          onUserInput: this.setPreparation,\n\t          required: true,\n\t          value: this.props.specimen.preparation.time\n\t        }),\n\t        React.createElement(TextareaElement, {\n\t          name: 'comments',\n\t          label: 'Comments',\n\t          onUserInput: this.setPreparation,\n\t          value: this.props.specimen.preparation.comments\n\t        }),\n\t        submitButton\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return SpecimenPreparationForm;\n\t}(React.Component);\n\t\n\tSpecimenPreparationForm.propTypes = {};\n\t\n\texports.default = SpecimenPreparationForm;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _containerBarcodeForm = __webpack_require__(11);\n\t\n\tvar _containerBarcodeForm2 = _interopRequireDefault(_containerBarcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankContainerForm = function (_React$Component) {\n\t  _inherits(BiobankContainerForm, _React$Component);\n\t\n\t  function BiobankContainerForm(props) {\n\t    _classCallCheck(this, BiobankContainerForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankContainerForm.__proto__ || Object.getPrototypeOf(BiobankContainerForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formErrors: {},\n\t      errorMessage: null,\n\t      containerList: { 1: {} },\n\t      countContainers: 1,\n\t      collapsed: { 1: true },\n\t      copyMultiplier: 1\n\t    };\n\t\n\t    _this.toggleCollapse = _this.toggleCollapse.bind(_this);\n\t    _this.addContainer = _this.addContainer.bind(_this);\n\t    _this.setContainer = _this.setContainer.bind(_this);\n\t    _this.setCopyMultiplier = _this.setCopyMultiplier.bind(_this);\n\t    _this.copyContainer = _this.copyContainer.bind(_this);\n\t    _this.removeContainer = _this.removeContainer.bind(_this);\n\t    _this.saveContainerList = _this.saveContainerList.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankContainerForm, [{\n\t    key: 'toggleCollapse',\n\t    value: function toggleCollapse(key) {\n\t      var collapsed = this.state.collapsed;\n\t      collapsed[key] = !collapsed[key];\n\t      this.setState({ collapsed: collapsed });\n\t    }\n\t  }, {\n\t    key: 'saveContainerList',\n\t    value: function saveContainerList() {\n\t      var _this2 = this;\n\t\n\t      var containerList = this.state.containerList;\n\t      var availableId = Object.keys(this.props.containerStati).find(function (key) {\n\t        return _this2.props.containerStati[key] === 'Available';\n\t      });\n\t\n\t      for (var container in containerList) {\n\t        containerList[container].statusId = availableId;\n\t        containerList[container].temperature = 20;\n\t        this.props.save(containerList[container], this.props.saveContainer).then(function () {\n\t          _this2.props.refreshParent();\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'setContainer',\n\t    value: function setContainer(name, value, key) {\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t      var siteId = this.state.siteId;\n\t      var containerList = this.state.containerList;\n\t      if (name === 'siteId') {\n\t        siteId = value;\n\t        for (var container in containerList) {\n\t          containerList[container].originId = siteId;\n\t          containerList[container].locationId = siteId;\n\t        }\n\t      } else {\n\t        containerList[key][name] = value;\n\t      }\n\t      this.setState({ containerList: containerList, siteId: siteId });\n\t    }\n\t  }, {\n\t    key: 'addContainer',\n\t    value: function addContainer() {\n\t      var _this3 = this;\n\t\n\t      var containerList = this.state.containerList;\n\t      var count = this.state.countContainers;\n\t      var collapsed = this.state.collapsed;\n\t      var siteId = this.state.siteId;\n\t      var temperature = 20;\n\t\n\t      // get Id of available status\n\t      var statusId = Object.keys(this.props.containerStati).find(function (key) {\n\t        return _this3.props.containerStati[key] === 'Available';\n\t      });\n\t\n\t      containerList[count + 1] = {\n\t        statusId: statusId,\n\t        originId: siteId,\n\t        locationId: siteId,\n\t        temperature: temperature\n\t      };\n\t\n\t      collapsed[count + 1] = true;\n\t\n\t      this.setState({\n\t        containerList: containerList,\n\t        countContainers: count + 1,\n\t        collapsed: collapsed\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setCopyMultiplier',\n\t    value: function setCopyMultiplier(e) {\n\t      var copyMultiplier = e.target.value;\n\t      this.setState({ copyMultiplier: copyMultiplier });\n\t    }\n\t  }, {\n\t    key: 'copyContainer',\n\t    value: function copyContainer(key) {\n\t      var count = this.state.countContainers;\n\t      var collapsed = this.state.collapsed;\n\t      var nextKey = count + 1;\n\t      var containerList = this.state.containerList;\n\t      var multiplier = this.state.copyMultiplier;\n\t\n\t      for (var i = 1; i <= multiplier; i++) {\n\t        containerList[nextKey] = JSON.parse(JSON.stringify(containerList[key]));\n\t        delete containerList[nextKey].barcode;\n\t        collapsed[nextKey] = true;\n\t        nextKey++;\n\t      }\n\t\n\t      this.setState({\n\t        containerList: containerList,\n\t        countContainers: nextKey,\n\t        collapsed: collapsed\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removeContainer',\n\t    value: function removeContainer(key) {\n\t      var containerList = this.state.containerList;\n\t      delete containerList[key];\n\t      this.setState({ containerList: containerList });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this4 = this;\n\t\n\t      //Generates new Barcode Form everytime the addContainer button is pressed\n\t      var containerListArray = Object.keys(this.state.containerList);\n\t      var containers = [];\n\t      var i = 1;\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        var _loop = function _loop() {\n\t          var key = _step.value;\n\t\n\t          containers.push(React.createElement(_containerBarcodeForm2.default, {\n\t            key: key,\n\t            containerKey: key,\n\t            id: i,\n\t            collapsed: _this4.state.collapsed[key],\n\t            toggleCollapse: _this4.toggleCollapse,\n\t            container: _this4.state.containerList[key] || null,\n\t            removeContainer: containerListArray.length !== 1 ? function () {\n\t              return _this4.removeContainer(key);\n\t            } : null,\n\t            addContainer: i == containerListArray.length ? _this4.addContainer : null,\n\t            setCopyMultiplier: _this4.setCopyMultiplier,\n\t            copyMultiplier: _this4.state.copyMultiplier,\n\t            copyContainer: i == containerListArray.length && _this4.state.containerList[key] ? _this4.copyContainer : null,\n\t            setContainer: _this4.setContainer,\n\t            onChange: _this4.props.onChange,\n\t            containerTypesNonPrimary: _this4.props.containerTypesNonPrimary,\n\t            containerBarcodesNonPrimary: _this4.props.containerBarcodesNonPrimary\n\t          }));\n\t\n\t          i++;\n\t        };\n\t\n\t        for (var _iterator = containerListArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          _loop();\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'containerForm',\n\t          onSubmit: this.saveContainerList,\n\t          ref: 'form'\n\t        },\n\t        React.createElement('br', null),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement(SelectElement, {\n\t              name: 'siteId',\n\t              label: 'Site',\n\t              options: this.props.centers,\n\t              onUserInput: this.setContainer,\n\t              required: true,\n\t              value: this.state.siteId\n\t            })\n\t          )\n\t        ),\n\t        containers,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-xs-3 col-xs-offset-9' },\n\t          React.createElement(ButtonElement, { label: 'Submit' })\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return BiobankContainerForm;\n\t}(React.Component);\n\t\n\tBiobankContainerForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  barcode: React.PropTypes.string,\n\t  refreshTable: React.PropTypes.func\n\t};\n\t\n\texports.default = BiobankContainerForm;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Container Barcode Form\n\t *\n\t * Acts a subform for ContainerForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar ContainerBarcodeForm = function (_React$Component) {\n\t  _inherits(ContainerBarcodeForm, _React$Component);\n\t\n\t  function ContainerBarcodeForm() {\n\t    _classCallCheck(this, ContainerBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ContainerBarcodeForm.__proto__ || Object.getPrototypeOf(ContainerBarcodeForm)).call(this));\n\t\n\t    _this.setContainer = _this.setContainer.bind(_this);\n\t    _this.copy = _this.copy.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ContainerBarcodeForm, [{\n\t    key: 'copy',\n\t    value: function copy() {\n\t      this.props.copyContainer(this.props.containerKey);\n\t    }\n\t\n\t    //TODO: change form.js so this isn't necessary\n\t\n\t  }, {\n\t    key: 'setContainer',\n\t    value: function setContainer(name, value) {\n\t      this.props.setContainer(name, value, this.props.containerKey);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      // HR TODO: All this CSS should eventually be moved\n\t      var addContainerButton = void 0;\n\t      var addContainerText = void 0;\n\t      var copyContainerButton = void 0;\n\t      var copyContainerText = void 0;\n\t      if (this.props.addContainer) {\n\t        addContainerButton = React.createElement(\n\t          'span',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: this.props.addContainer\n\t            },\n\t            '+'\n\t          )\n\t        );\n\t\n\t        addContainerText = React.createElement(\n\t          'span',\n\t          { className: 'action-title' },\n\t          'New Entry'\n\t        );\n\t      }\n\t\n\t      if (this.props.copyContainer) {\n\t        copyContainerButton = React.createElement(\n\t          'span',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: this.copy\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-duplicate' })\n\t          )\n\t        );\n\t        copyContainerText = React.createElement(\n\t          'span',\n\t          { className: 'action-title' },\n\t          React.createElement('input', {\n\t            className: 'form-control input-sm',\n\t            type: 'number',\n\t            min: '1',\n\t            max: '50',\n\t            style: { width: 50, display: 'inline' },\n\t            onChange: this.props.setCopyMultiplier,\n\t            value: this.props.copyMultiplier\n\t          }),\n\t          'Copies'\n\t        );\n\t      }\n\t\n\t      var removeContainerButton = void 0;\n\t      if (this.props.removeContainer) {\n\t        var glyphStyle = {\n\t          color: '#DDDDDD',\n\t          marginLeft: 10,\n\t          cursor: 'pointer',\n\t          fontSize: 15\n\t        };\n\t\n\t        removeContainerButton = React.createElement('span', {\n\t          className: 'glyphicon glyphicon-remove',\n\t          onClick: this.props.removeContainer,\n\t          style: glyphStyle\n\t        });\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'container'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement(\n\t              'div',\n\t              null,\n\t              React.createElement(TextboxElement, {\n\t                name: 'barcode',\n\t                label: 'Barcode ' + this.props.id,\n\t                onUserInput: this.setContainer,\n\t                ref: 'barcode',\n\t                required: true,\n\t                value: this.props.container.barcode\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-1', style: { paddingLeft: 0, marginTop: 10 } },\n\t            React.createElement('span', {\n\t              className: this.props.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up',\n\t              style: { cursor: 'pointer', fontSize: 15, position: 'relative', right: 40 },\n\t              'data-toggle': 'collapse',\n\t              'data-target': '#item-' + this.props.containerKey,\n\t              onClick: function onClick() {\n\t                return _this2.props.toggleCollapse(_this2.props.containerKey);\n\t              }\n\t            }),\n\t            removeContainerButton\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement('div', { className: 'col-xs-2' }),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-9' },\n\t            React.createElement(\n\t              'div',\n\t              { id: 'item-' + this.props.containerKey, className: 'collapse' },\n\t              React.createElement(SelectElement, {\n\t                name: 'typeId',\n\t                label: 'Container Type',\n\t                options: this.props.containerTypesNonPrimary,\n\t                onUserInput: this.setContainer,\n\t                required: true,\n\t                value: this.props.container.typeId\n\t              })\n\t            )\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement('div', { className: 'col-xs-3' }),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-4 action' },\n\t              addContainerButton,\n\t              addContainerText\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-4 action' },\n\t              copyContainerButton,\n\t              copyContainerText\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return ContainerBarcodeForm;\n\t}(React.Component);\n\t\n\tContainerBarcodeForm.propTypes = {};\n\t\n\texports.default = ContainerBarcodeForm;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Tabs component.\n\t *\n\t * @author Loris Team\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Tabs Component.\n\t * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n\t * and corresponding tab panes.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * 1. Define an array of tabs with IDs and labels\n\t *\n\t * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n\t *\n\t * 2. Pass tabList as <Tab> property and <TabPane> as child\n\t *  ```\n\t * <Tabs tabs={tabList} defaultTab=\"tab1\">\n\t *   <TabPane TabId={tabList[0].id}>\n\t *     // Tab content goes here\n\t *   </TabPane>\n\t * </Tabs>\n\t * ```\n\t * =================================================\n\t *\n\t */\n\tvar Tabs = function (_React$Component) {\n\t  _inherits(Tabs, _React$Component);\n\t\n\t  function Tabs(props) {\n\t    _classCallCheck(this, Tabs);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call(this, props));\n\t\n\t    var hash = window.location.hash;\n\t    var activeTab = \"\";\n\t\n\t    /**\n\t     * Determine the initial active tab in this order\n\t     * 1. Try to infer from the URL, otherwise\n\t     * 2. Try to infer from the defaultTab prop, otherwise\n\t     * 3. Set to be the first tab of the list\n\t     */\n\t    if (_this.props.updateURL && hash) {\n\t      activeTab = hash.substr(1);\n\t    } else if (_this.props.defaultTab) {\n\t      activeTab = _this.props.defaultTab;\n\t    } else if (_this.props.tabs.length > 0) {\n\t      activeTab = _this.props.tabs[0].id;\n\t    }\n\t\n\t    _this.state = {\n\t      activeTab: activeTab\n\t    };\n\t\n\t    _this.handleClick = _this.handleClick.bind(_this);\n\t    _this.getTabs = _this.getTabs.bind(_this);\n\t    _this.getTabPanes = _this.getTabPanes.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Tabs, [{\n\t    key: 'handleClick',\n\t    value: function handleClick(tabId, e) {\n\t      this.setState({ activeTab: tabId });\n\t      this.props.onTabChange(tabId);\n\t\n\t      // Add tab href to URL querystring and scroll the page to top\n\t      if (this.props.updateURL) {\n\t        var scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n\t        window.location.hash = e.target.hash;\n\t        $('html,body').scrollTop(scrollDistance);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getTabs',\n\t    value: function getTabs() {\n\t      var tabs = this.props.tabs.map(function (tab) {\n\t        var tabClass = this.state.activeTab === tab.id ? 'active' : null;\n\t        var href = \"#\" + tab.id;\n\t        var tabID = \"tab-\" + tab.id;\n\t        return React.createElement(\n\t          'li',\n\t          {\n\t            role: 'presentation',\n\t            className: tabClass,\n\t            key: tab.id\n\t          },\n\t          React.createElement(\n\t            'a',\n\t            { id: tabID,\n\t              href: href,\n\t              role: 'tab',\n\t              'data-toggle': 'tab',\n\t              onClick: this.handleClick.bind(null, tab.id)\n\t            },\n\t            tab.label\n\t          )\n\t        );\n\t      }.bind(this));\n\t\n\t      return tabs;\n\t    }\n\t  }, {\n\t    key: 'getTabPanes',\n\t    value: function getTabPanes() {\n\t      var tabPanes = React.Children.map(this.props.children, function (child, key) {\n\t        if (child) {\n\t          return React.cloneElement(child, {\n\t            activeTab: this.state.activeTab,\n\t            key: key\n\t          });\n\t        }\n\t      }.bind(this));\n\t\n\t      return tabPanes;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var tabs = this.getTabs();\n\t      var tabPanes = this.getTabPanes();\n\t      var tabStyle = {\n\t        marginLeft: 0,\n\t        marginBottom: '5px'\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'ul',\n\t          { className: 'nav nav-tabs', role: 'tablist', style: tabStyle },\n\t          tabs\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tab-content' },\n\t          tabPanes\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Tabs;\n\t}(React.Component);\n\t\n\tTabs.propTypes = {\n\t  tabs: React.PropTypes.array.isRequired,\n\t  defaultTab: React.PropTypes.string,\n\t  updateURL: React.PropTypes.bool\n\t};\n\tTabs.defaultProps = {\n\t  onTabChange: function onTabChange() {},\n\t  // Set updateURL to default to true but allow for change\n\t  // Nested tabs should set this variable to false\n\t  updateURL: true\n\t};\n\t\n\t/**\n\t * Allows to dynamically render vertical tabs corresponding to tab panes.\n\t */\n\t\n\tvar VerticalTabs = function (_React$Component2) {\n\t  _inherits(VerticalTabs, _React$Component2);\n\t\n\t  function VerticalTabs(props) {\n\t    _classCallCheck(this, VerticalTabs);\n\t\n\t    var _this2 = _possibleConstructorReturn(this, (VerticalTabs.__proto__ || Object.getPrototypeOf(VerticalTabs)).call(this, props));\n\t\n\t    var hash = window.location.hash;\n\t    var activeTab = \"\";\n\t\n\t    /**\n\t     * Determine the initial active tab in this order\n\t     * 1. Try to infer from the URL, otherwise\n\t     * 2. Try to infer from the defaultTab prop, otherwise\n\t     * 3. Set to be the first tab of the list\n\t     */\n\t    if (_this2.props.updateURL && hash) {\n\t      activeTab = hash.substr(1);\n\t    } else if (_this2.props.defaultTab) {\n\t      activeTab = _this2.props.defaultTab;\n\t    } else if (_this2.props.tabs.length > 0) {\n\t      activeTab = _this2.props.tabs[0].id;\n\t    }\n\t\n\t    _this2.state = {\n\t      activeTab: activeTab\n\t    };\n\t\n\t    _this2.handleClick = _this2.handleClick.bind(_this2);\n\t    _this2.getTabs = _this2.getTabs.bind(_this2);\n\t    _this2.getTabPanes = _this2.getTabPanes.bind(_this2);\n\t    return _this2;\n\t  }\n\t\n\t  _createClass(VerticalTabs, [{\n\t    key: 'handleClick',\n\t    value: function handleClick(tabId, e) {\n\t      this.setState({ activeTab: tabId });\n\t      this.props.onTabChange(tabId);\n\t\n\t      // Add tab href to URL querystring and scroll the page to top\n\t      if (this.props.updateURL) {\n\t        var scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n\t        window.location.hash = e.target.hash;\n\t        $('html,body').scrollTop(scrollDistance);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getTabs',\n\t    value: function getTabs() {\n\t      var tabs = this.props.tabs.map(function (tab) {\n\t        var tabClass = this.state.activeTab === tab.id ? 'active' : null;\n\t        var href = \"#\" + tab.id;\n\t        var tabID = \"tab-\" + tab.id;\n\t        return React.createElement(\n\t          'li',\n\t          {\n\t            role: 'presentation',\n\t            className: tabClass,\n\t            key: tab.id\n\t          },\n\t          React.createElement(\n\t            'a',\n\t            { id: tabID,\n\t              href: href,\n\t              role: 'tab',\n\t              'data-toggle': 'tab',\n\t              onClick: this.handleClick.bind(null, tab.id)\n\t            },\n\t            tab.label\n\t          )\n\t        );\n\t      }.bind(this));\n\t\n\t      return tabs;\n\t    }\n\t  }, {\n\t    key: 'getTabPanes',\n\t    value: function getTabPanes() {\n\t      var tabPanes = React.Children.map(this.props.children, function (child, key) {\n\t        if (child) {\n\t          return React.cloneElement(child, {\n\t            activeTab: this.state.activeTab,\n\t            key: key\n\t          });\n\t        }\n\t      }.bind(this));\n\t\n\t      return tabPanes;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var tabs = this.getTabs();\n\t      var tabPanes = this.getTabPanes();\n\t      var tabStyle = {\n\t        marginLeft: 0,\n\t        marginBottom: '5px'\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tabbable col-md-3 col-sm-3' },\n\t          React.createElement(\n\t            'ul',\n\t            { className: 'nav nav-pills nav-stacked', role: 'tablist', style: tabStyle },\n\t            tabs\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tab-content col-md-9 col-sm-9' },\n\t          tabPanes\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return VerticalTabs;\n\t}(React.Component);\n\t\n\tVerticalTabs.propTypes = {\n\t  tabs: React.PropTypes.array.isRequired,\n\t  defaultTab: React.PropTypes.string,\n\t  updateURL: React.PropTypes.bool\n\t};\n\tVerticalTabs.defaultProps = {\n\t  onTabChange: function onTabChange() {},\n\t  // Set updateURL to default to true but allow for change\n\t  // Nested tabs should set this variable to false\n\t  updateURL: true\n\t};\n\t\n\t/*\n\t * TabPane component.\n\t * Used to wrap content for every tab.\n\t */\n\t\n\tvar TabPane = function (_React$Component3) {\n\t  _inherits(TabPane, _React$Component3);\n\t\n\t  function TabPane() {\n\t    _classCallCheck(this, TabPane);\n\t\n\t    return _possibleConstructorReturn(this, (TabPane.__proto__ || Object.getPrototypeOf(TabPane)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(TabPane, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var classList = \"tab-pane\";\n\t      var title = void 0;\n\t\n\t      if (this.props.TabId === this.props.activeTab) {\n\t        classList += \" active\";\n\t      }\n\t      if (this.props.Title) {\n\t        title = React.createElement(\n\t          'h1',\n\t          null,\n\t          this.props.Title\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { role: 'tabpanel', className: classList, id: this.props.TabId },\n\t        title,\n\t        this.props.children\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return TabPane;\n\t}(React.Component);\n\t\n\tTabPane.propTypes = {\n\t  TabId: React.PropTypes.string.isRequired,\n\t  Title: React.PropTypes.string,\n\t  activeTab: React.PropTypes.string\n\t};\n\t\n\texports.Tabs = Tabs;\n\texports.VerticalTabs = VerticalTabs;\n\texports.TabPane = TabPane;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Modal = __webpack_require__(14);\n\t\n\tvar _Modal2 = _interopRequireDefault(_Modal);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file contains React components for Modal component.\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Henri Rabalais\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.1.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/**\n\t * Modal Component.\n\t * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * =================================================\n\t *\n\t */\n\t\n\tvar FormModal = function (_React$Component) {\n\t  _inherits(FormModal, _React$Component);\n\t\n\t  function FormModal() {\n\t    _classCallCheck(this, FormModal);\n\t\n\t    var _this = _possibleConstructorReturn(this, (FormModal.__proto__ || Object.getPrototypeOf(FormModal)).call(this));\n\t\n\t    _this.closeModal = _this.closeModal.bind(_this);\n\t    _this.confirmClose = _this.confirmClose.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(FormModal, [{\n\t    key: \"closeModal\",\n\t    value: function closeModal() {\n\t      this.props.closeAction instanceof Function && this.props.closeAction();\n\t      this.props.toggleModal();\n\t    }\n\t  }, {\n\t    key: \"confirmClose\",\n\t    value: function confirmClose() {\n\t      if (this.props.throwWarning) {\n\t        swal({\n\t          title: \"Are You Sure?\",\n\t          text: \"Leaving the form will result in the loss of any information entered.\",\n\t          type: \"warning\",\n\t          showCancelButton: true,\n\t          confirmButtonText: 'Proceed',\n\t          cancelButtonText: 'Cancel'\n\t        }, function () {\n\t          this.closeModal();\n\t        }.bind(this));\n\t      } else {\n\t        this.closeModal();\n\t      }\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      return React.createElement(\n\t        _Modal2.default,\n\t        _extends({\n\t          closeModal: this.confirmClose,\n\t          show: this.props.show\n\t        }, this.props),\n\t        this.props.children\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return FormModal;\n\t}(React.Component);\n\t\n\tFormModal.propTypes = {\n\t  closeAction: React.PropTypes.func,\n\t  togglemodal: React.PropTypes.func.isRequired,\n\t  throwWarning: React.PropTypes.bool.isRequired\n\t};\n\t\n\tFormModal.defaultProps = {\n\t  throwWarning: true\n\t};\n\t\n\texports.default = FormModal;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Modal component.\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Modal Component.\n\t * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * =================================================\n\t *\n\t */\n\tvar Modal = function (_React$Component) {\n\t  _inherits(Modal, _React$Component);\n\t\n\t  function Modal(props) {\n\t    _classCallCheck(this, Modal);\n\t\n\t    return _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));\n\t  }\n\t\n\t  _createClass(Modal, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      // Black Background with Alpha Channel\n\t      var backdropStyle = {\n\t        position: 'fixed',\n\t        zIndex: 9998,\n\t        top: 0,\n\t        bottom: 0,\n\t        left: 0,\n\t        right: 0,\n\t        backgroundColor: 'rgba(0,0,0,0.3)',\n\t        padding: 50\n\t      };\n\t\n\t      // White Modal Window\n\t      var modalStyle = {\n\t        position: 'relative',\n\t        maxWidth: 1000,\n\t        maxHeight: '100%',\n\t        margin: '0 auto',\n\t        backgroundColor: '#fff',\n\t        borderRadius: 10,\n\t        overflowY: 'auto',\n\t        zIndex: 9999\n\t      };\n\t\n\t      var titleStyle = {\n\t        display: 'flex',\n\t        flexDirection: 'row',\n\t        alignItems: 'center',\n\t        background: '#093782',\n\t        height: '70px',\n\t        borderTopRightRadius: '10',\n\t        color: '#FFFFFF',\n\t        fontSize: 24,\n\t        padding: 20\n\t      };\n\t\n\t      var glyphStyle = {\n\t        marginLeft: 'auto',\n\t        cursor: 'pointer'\n\t      };\n\t\n\t      var bodyStyle = {\n\t        padding: 15\n\t      };\n\t\n\t      var modal = void 0;\n\t      if (this.props.show) {\n\t        modal = React.createElement(\n\t          'div',\n\t          { style: backdropStyle, onClick: this.props.closeModal },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              style: modalStyle,\n\t              onClick: function onClick(e) {\n\t                e.stopPropagation();\n\t              }\n\t            },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                style: titleStyle\n\t              },\n\t              this.props.title,\n\t              React.createElement(\n\t                'span',\n\t                {\n\t                  style: glyphStyle,\n\t                  onClick: this.props.closeModal\n\t                },\n\t                '\\xD7'\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                style: bodyStyle\n\t              },\n\t              this.props.children\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        modal\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Modal;\n\t}(React.Component);\n\t\n\tModal.propTypes = {\n\t  title: React.PropTypes.string,\n\t  show: React.PropTypes.bool.isRequired,\n\t  closeModal: React.PropTypes.func,\n\t  openModal: React.PropTypes.func\n\t};\n\t\n\texports.default = Modal;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Loader\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Loader component\n\t */\n\tvar Loader = function (_React$Component) {\n\t  _inherits(Loader, _React$Component);\n\t\n\t  function Loader(props) {\n\t    _classCallCheck(this, Loader);\n\t\n\t    return _possibleConstructorReturn(this, (Loader.__proto__ || Object.getPrototypeOf(Loader)).call(this, props));\n\t  }\n\t\n\t  _createClass(Loader, [{\n\t    key: \"render\",\n\t    value: function render() {\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"loader-container\" },\n\t        React.createElement(\"div\", { className: \"loader\" })\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Loader;\n\t}(React.Component);\n\t\n\texports.default = Loader;\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// modules/biobank/js/biobankIndex.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c96f989a0538674481fa","import FilterForm from 'FilterForm';\nimport BiobankSpecimenForm from './specimenForm';\nimport PoolSpecimenForm from './poolSpecimenForm';\nimport BiobankContainerForm from './containerForm';\nimport {Tabs, TabPane} from 'Tabs';\nimport FormModal from 'FormModal';\nimport Loader from 'Loader';\n\nclass BiobankIndex extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      isLoaded: false,\n      specimenFilter: {},\n      containerFilter: {},\n      isOpen: false,\n      formOptions: {},\n      show: {\n        specimenForm: false,\n        containerForm: false,\n      },\n    };\n\n    this.loadPage = this.loadPage.bind(this);\n    this.fetch = this.fetch.bind(this);\n    this.updateSpecimenFilter = this.updateSpecimenFilter.bind(this);\n    this.updateContainerFilter = this.updateContainerFilter.bind(this);\n    this.resetFilters = this.resetFilters.bind(this);\n    this.mapFormOptions = this.mapFormOptions.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n    this.closeAllModals = this.closeAllModals.bind(this);\n    this.formatSpecimenColumns = this.formatSpecimenColumns.bind(this);\n    this.formatContainerColumns = this.formatContainerColumns.bind(this);\n    this.save = this.save.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadPage();\n  }\n\n  loadPage() {\n    this.fetch('specimenData', this.props.specimenDataURL);\n    this.fetch('formOptions', this.props.formOptionsURL);\n    this.fetch('containerData', this.props.containerDataURL);\n    this.setState({isLoaded: true});\n  }\n\n  /**\n   * Retrieve data from the provided URL and save it in state\n   */\n  fetch(request, url) {\n    $.ajax(url, {\n      method: \"GET\",\n      dataType: 'json',\n      success: function(data) {\n        this.setState({\n          [request]: data,\n        });\n      }.bind(this),\n      error: function(error) {\n        console.error(error);\n      }\n    });\n  }\n\n  updateSpecimenFilter(specimenFilter) {\n    this.setState({specimenFilter});\n  }\n\n  updateContainerFilter(containerFilter) {\n    this.setState({containerFilter});\n  }\n\n  resetFilters() {\n    this.refs.biobankFilter.clearFilter();\n  }\n\n //map options for forms\n  mapFormOptions(rawObject, targetAttribute) {\n    let data = {}; \n    for (let id in rawObject) {\n      data[id] = rawObject[id][targetAttribute];\n    }   \n\n    return data;\n  }\n\n  toggleModal(stateKey) {\n    let show = this.state.show;\n    let stateValue = show[stateKey];\n    show[stateKey] = !stateValue;\n    this.setState({show});\n  }\n\n  closeAllModals() {\n    let show = this.state.show;\n    for (let key in show) {\n      show[key] = false;\n    }\n    this.setState({show});\n  }\n\n  formatSpecimenColumns(column, cell, rowData, rowHeaders) {\n    // Create the mapping between rowHeaders and rowData in a row object.\n    let row = {};\n    rowHeaders.forEach((header, index) => {\n      row[header] = rowData[index];\n    });\n\n    switch (column) {\n      case 'Barcode':\n        let specimenURL = loris.BaseURL + '/biobank/specimen/?barcode=' + row['Barcode'];\n        return <td><a href={specimenURL}>{cell}</a></td>;\n      case 'Parent Barcode':\n        specimenURL = loris.BaseURL + '/biobank/specimen/?barcode=' + row['Parent Barcode'];\n        return <td><a href={specimenURL}>{cell}</a></td>; \n      case 'Container Barcode':\n        let containerURL = loris.BaseURL + '/biobank/container/?barcode=' + row['Container Barcode'];\n        return <td><a href={containerURL}>{cell}</a></td>;\n      case 'PSCID':\n        let pscidURL = loris.BaseURL + '/' + row['PSCID'];\n        return <td><a href={pscidURL}>{cell}</a></td>;\n      case 'Visit Label':\n        let visitLabelURL = loris.BaseURL + '/instrument_list/?candID=' + row['PSCID'] +\n          '&sessionID=' + row['Visit Label'];\n        return <td><a href={visitLabelURL}>{cell}</a></td>;\n      default:\n        return <td>{cell}</td>;\n     }\n  }\n\n  formatContainerColumns(column, cell, rowData, rowHeaders) {\n    // Create the mapping between rowHeaders and rowData in a row object.\n    let row = {};\n    rowHeaders.forEach((header, index) => {\n      row[header] = rowData[index];\n    });\n\n    switch (column) {\n      case 'Barcode':\n        let containerURL = loris.BaseURL + '/biobank/container/?barcode=' + row['Barcode'];\n        return <td><a href={containerURL}>{cell}</a></td>;\n      case 'Parent Barcode':\n        containerURL = loris.BaseURL + '/biobank/specimen/?barcode=' + row['Parent Barcode'];\n        return <td><a href={containerURL}>{cell}</a></td>; \n      default:\n        return <td>{cell}</td>;\n     }\n  }\n\n  save(data, url, message) {\n    console.log(data);\n    return new Promise(resolve => {\n      $.ajax({\n        type: 'POST',\n        url: url,\n        data: {data: JSON.stringify(data)},\n        cache: false,\n        success: () => {\n          resolve();\n          message ? swal(message, '', 'success') : swal('Save Successful!', '', 'success');\n          this.closeAllModals();\n        },\n        error: (error, textStatus, errorThrown) => {\n          let message = (error.responseJSON||{}).message || 'Submission error!';\n          swal(message, '', 'error');\n          console.error(error, textStatus, errorThrown);\n        }\n      });\n    });\n  }\n\n  render() {\n    // Waiting for async data to load\n    if (!this.state.isLoaded) {\n      return (\n        <Loader/>\n      );\n    }\n\n    let addSpecimenButton;\n    let poolSpecimenButton;\n    let addContainerButton;\n    if (loris.userHasPermission('biobank_write')) {\n\n       /**\n        * Map Options for Form Select Elements of Specimen Form\n        */\n       let containerTypesPrimary = this.mapFormOptions(this.state.formOptions.containerTypesPrimary, 'label');\n       let containerStati = this.mapFormOptions(this.state.formOptions.containerStati, 'status');\n       let candidates = this.mapFormOptions(this.state.formOptions.candidates, 'pscid');\n       let sessions = this.mapFormOptions(this.state.formOptions.sessions, 'label');\n        \n       addSpecimenButton = (\n         <div\n           className='action'\n           title='Add Specimen'\n         >\n           <div\n             className='action-button add'\n             onClick={()=>{this.toggleModal('specimenForm')}}\n           >\n             <span>+</span>\n           </div>\n           <FormModal\n             title='Add New Specimen'\n             show={this.state.show.specimenForm}\n             toggleModal={()=>{this.toggleModal('specimenForm')}}\n           >\n             <BiobankSpecimenForm\n               candidates={candidates}\n               sessions={sessions}\n               candidateSessions={this.state.formOptions.candidateSessions}\n               sessionCenters={this.state.formOptions.sessionCenters}\n               specimenTypes={this.state.formOptions.specimenTypes}\n               specimenTypeUnits={this.state.formOptions.specimenTypeUnits}\n               specimenTypeAttributes={this.state.formOptions.specimenTypeAttributes}\n               attributeOptions={this.state.formOptions.attributeOptions}\n               attributeDatatypes={this.state.formOptions.attributeDatatypes}\n               containerTypesPrimary={containerTypesPrimary}\n               containersNonPrimary={this.state.formOptions.containersNonPrimary}\n               containerDimensions={this.state.formOptions.containerDimensions}\n               containerCoordinates={this.state.formOptions.containerCoordinates}\n               containerStati={containerStati}\n               refreshParent={this.loadPage}\n               mapFormOptions={this.mapFormOptions}\n               saveBarcodeListURL={this.props.saveBarcodeListURL}\n               save={this.save}\n             />\n           </FormModal>\n         </div>\n       );\n\n       let poolSpecimenButtonContent = (\n         <span className='glyphicon glyphicon-resize-small'/>\n       )\n\n       poolSpecimenButton = (\n         <FormModal\n           title='Pool Specimens'\n           buttonClass='action-button pool'\n           buttonContent={poolSpecimenButtonContent}\n           style={{display:'inline-block'}}\n         >\n           <PoolSpecimenForm\n             specimenTypes={this.state.formOptions.specimenTypes}\n             containerTypesPrimary={containerTypesPrimary}\n             containersNonPrimary={this.state.formOptions.containersNonPrimary}\n             specimenTypeAttributes={this.state.formOptions.specimenTypeAttributes}\n             specimenProtocols={this.state.formOptions.specimenProtocols}\n             specimenProtocolAttributes={this.state.formOptions.specimenProtocolAttributes}\n             attributeDatatypes={this.state.formOptions.attributeDatatypes}\n             attributeOptions={this.state.formOptions.attributeOptions}\n             capacities={this.state.formOptions.capacities}\n             containerDimensions={this.state.formOptions.containerDimensions}\n             containerCoordinates={this.state.formOptions.containerCoordinates}\n             specimenTypeUnits={this.state.formOptions.specimenTypeUnits}\n             specimenUnits={this.state.formOptions.specimenUnits}\n             candidates={candidates}\n             candidateSessions={this.state.formOptions.candidateSessions}\n             sessionCenters={this.state.formOptions.sessionCenters}\n             specimenRequest={`${loris.BaseURL}/biobank/ajax/requestData.php?action=getSpecimenDataFromBarcode`}\n             refreshParent={this.loadPage}\n             mapFormOptions={this.mapFormOptions}\n             saveSpecimen={`${loris.BaseURL}/biobank/ajax/submitData.php?action=saveSpecimen`}\n             saveContainer={`${loris.BaseURL}/biobank/ajax/submitData.php?action=saveContainer`}\n           />\n         </FormModal>\n       );\n\n       let containerTypesNonPrimary = this.mapFormOptions(this.state.formOptions.containerTypesNonPrimary, 'label');\n\n       addContainerButton = (\n         <div\n           className='action'\n           title='Add Container'\n         >\n           <div\n             className='action-button add'\n             onClick={()=>{this.toggleModal('containerForm')}}\n           >\n             <span>+</span>\n           </div>\n           <FormModal\n             title='Add New Container'\n             show={this.state.show.containerForm}\n             toggleModal={()=>{this.toggleModal('containerForm')}}\n           >\n             <BiobankContainerForm\n               containerTypesNonPrimary={containerTypesNonPrimary}\n               centers={this.state.formOptions.centers}\n               containerStati={containerStati}\n               refreshParent={this.loadPage}\n               saveContainer={`${loris.BaseURL}/biobank/ajax/submitData.php?action=saveContainer`}\n               save={this.save}\n             />\n           </FormModal>\n         </div>\n       ); \n    }\n\n    var tabList = [\n      {id: \"specimens\", label: \"Specimens\"},\n      {id: \"containers\", label: \"Containers\"}\n    ];\n\n    return (\n    <div id='biobank-page'>\n      <Tabs tabs={tabList} defaultTab=\"specimens\" updateURL={true}>\n        <TabPane TabId={tabList[0].id}>\n          <div className='row'>\n            <div className='col-lg-10'>\n              <FilterForm\n                Module=\"biobank\"\n                name=\"specimen_filter\"\n                id=\"specimen_filter\"\n                ref=\"specimenFilter\"\n                columns={3}\n                formElements={this.state.specimenData.form}\n                onUpdate={this.updateSpecimenFilter}\n                filter={this.state.specimenFilter}\n              >\n                <br/>\n                <StaticElement/>\n                <StaticElement/>\n                <ButtonElement label=\"Clear Filters\" type=\"reset\" onUserInput={this.resetFilters}/>\n              </FilterForm>\n            </div>\n            <div className='col-lg-2'>\n              <span className='action'>\n                {addSpecimenButton}\n                <div className='action-title'>\n                  Add Specimen\n                </div>\n              </span>\n              <br/><br/>\n              <span className='action'>\n                {poolSpecimenButton}\n                <div className='action-title'>\n                  Pool Specimens\n                </div>\n              </span>\n            </div>\n          </div>\n          <StaticDataTable\n            Data={this.state.specimenData.Data}\n            Headers={this.state.specimenData.Headers}\n            Filter={this.state.specimenFilter}\n            getFormattedCell={this.formatSpecimenColumns}\n          />\n        </TabPane>\n        <TabPane TabId={tabList[1].id}>\n          <div className='row'>\n            <div className='col-lg-10'>\n              <FilterForm\n                Module=\"biobank\"\n                name=\"container_filter\"\n                id=\"container_filter\"\n                ref=\"containerFilter\"\n                columns={3}\n                formElements={this.state.containerData.form}\n                onUpdate={this.updateContainerFilter}\n                filter={this.state.containerFilter}\n\t\t          >\n                <br/>\n                <StaticElement/>\n                <StaticElement/>\n                <ButtonElement label=\"Clear Filters\" type=\"reset\" onUserInput={this.resetFilters}/>\n              </FilterForm>\t\t\t\n            </div>\n            <div className='col-lg-2'>\n              <span className='action'>\n                {addContainerButton}\n                <div className='action-title'>\n                  New Container\n                </div>\n              </span>\n            </div>\n          </div>\n          <StaticDataTable\n            Data={this.state.containerData.Data}\n            Headers={this.state.containerData.Headers}\n            Filter={this.state.containerFilter}\n            getFormattedCell={this.formatContainerColumns}\n          />\n        </TabPane>\n      </Tabs>\n      </div>\n    );\n  }\n}\n\n$(function() {\n  const biobankIndex = (\n    <div className=\"page-biobank\">\n      <BiobankIndex \n        specimenDataURL={`${loris.BaseURL}/biobank/?format=json`} \n        containerDataURL={`${loris.BaseURL}/biobank/ajax/requestData.php?action=getContainerFilterData`} \n        formOptionsURL={`${loris.BaseURL}/biobank/ajax/requestData.php?action=getFormOptions`}\n        saveBarcodeListURL={`${loris.BaseURL}/biobank/ajax/submitData.php?action=saveBarcodeList`}\n      />\n    </div>\n  );\n\n  ReactDOM.render(biobankIndex, document.getElementById(\"lorisworkspace\"));\n});\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/biobankIndex.js","/**\n * This file contains React component for FilterForm\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\nimport Panel from 'Panel';\n\n/**\n * FilterForm component.\n * A wrapper for form elements inside a selection filter.\n *\n * Adds necessary filter callbacks to all children and passes them to FormElement\n * for proper rendering.\n *\n * Keeps track of filter object and sends it to parent on every update.\n *\n * //HACK/NOTE: Loris has special behaviour for `candID` attribute in the query string,\n * making it impossible to use it for selection filters. This components renames\n * all `candID` fields to `candidateID` automatically before appending them to URL.\n *\n */\nclass FilterForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    // Bind component instance to custom methods\n    this.clearFilter = this.clearFilter.bind(this);\n    this.getFormChildren = this.getFormChildren.bind(this);\n    this.setFilter = this.setFilter.bind(this);\n    this.onElementUpdate = this.onElementUpdate.bind(this);\n\n    // Keeps track of querystring values\n    // Saved as class variable instead of keeping in state\n    this.queryString = QueryString.get();\n  }\n\n  componentDidMount() {\n    let filter = {};\n    let queryString = this.queryString;\n\n    // Initiaze filter using querystring value\n    Object.keys(queryString).forEach(function(key) {\n      let filterKey = (key === 'candidateID') ? 'candID' : key;\n      filter[filterKey] = {\n        value: queryString[key],\n        exactMatch: false\n      };\n    });\n\n    // Update parent component\n    this.props.onUpdate(filter);\n  }\n\n  /**\n   * Clear the filter object, querystring and input fields\n   */\n  clearFilter() {\n    this.queryString = QueryString.clear(this.props.Module);\n    this.props.onUpdate({});\n  }\n\n  /**\n   * Itterates through FilterForm children, sets necessary callback functions\n   * and initializes filterTable\n   *\n   * @return {Array} formChildren - array of children with necessary props\n   */\n  getFormChildren() {\n    let formChildren = [];\n    React.Children.forEach(this.props.children, function(child, key) {\n      // If child is a React component (i.e not a simple DOM element)\n      if (React.isValidElement(child) &&\n        typeof child.type === \"function\" &&\n        child.props.onUserInput\n      ) {\n        let callbackFunc = child.props.onUserInput;\n        let callbackName = callbackFunc.name;\n        let elementName = child.type.displayName;\n        let queryFieldName = (child.props.name === 'candID') ? 'candidateID' : child.props.name;\n        let filterValue = this.queryString[queryFieldName];\n        // If callback function was not set, set it to onElementUpdate() for form\n        // elements and to clearFilter() for <ButtonElement type='reset'/>.\n        if (callbackName === \"onUserInput\") {\n          if (elementName === \"ButtonElement\" && child.props.type === \"reset\") {\n            callbackFunc = this.clearFilter;\n          } else {\n            callbackFunc = this.onElementUpdate.bind(null, elementName);\n          }\n        }\n        // Pass onUserInput and value props to all children\n        formChildren.push(React.cloneElement(child, {\n          onUserInput: callbackFunc,\n          value: filterValue ? filterValue : '',\n          key: key\n        }));\n        // Initialize filter for StaticDataTable\n        this.setFilter(elementName, child.props.name, filterValue);\n      } else {\n        formChildren.push(React.cloneElement(child, {key: key}));\n      }\n    }.bind(this));\n\n    return formChildren;\n  }\n\n  /**\n   * Appends entry to filter object or deletes it if value is\n   * empty.\n   *\n   * Sets exactMatch to true for all SelectElements (i.e dropdowns)\n   * in order to force StaticDataTable to do exact comparaison\n   *\n   * @param {string} type - form element type (i.e component name)\n   * @param {string} key - the name of the form element\n   * @param {string} value - the value of the form element\n   *\n   * @return {{}} filter - filterData\n   */\n  setFilter(type, key, value) {\n    let filter = {};\n    if (this.props.filter) {\n      filter = JSON.parse(JSON.stringify(this.props.filter));\n    }\n    if (key) {\n      filter[key] = {};\n      if (value.length === 0) {\n        filter[key].value = '';\n      } else if (key && value) {\n        filter[key].value = value;\n      }\n      filter[key].exactMatch = (type === \"SelectElement\");\n    } else if (filter && key && value === '') {\n      delete filter[key];\n    }\n    return filter;\n  }\n\n  /**\n   * Sets filter object and querystring to reflect values of input fields\n   *\n   * @param {string} type - form element type (i.e component name)\n   * @param {string} fieldName - the name of the form element\n   * @param {string} fieldValue - the value of the form element\n   */\n  onElementUpdate(type, fieldName, fieldValue) {\n    // Make sure key is of string type and value is of string or object type\n    // before sending them to querystring\n    if (typeof fieldName !== 'string' ||\n        (typeof fieldValue !== 'string' && typeof fieldValue !== 'object')) {\n      return;\n    }\n\n    // Update query string\n    let queryFieldName = (fieldName === 'candID') ? 'candidateID' : fieldName;\n    this.queryString = QueryString.set(this.queryString, queryFieldName, fieldValue);\n\n    // Update filter and get new filter object\n    let filter = this.setFilter(type, fieldName, fieldValue);\n    this.props.onUpdate(filter);\n  }\n\n  render() {\n    // Get formatted children\n    let formChildren = this.getFormChildren();\n    let formElements = this.props.formElements;\n\n    if (formElements) {\n      Object.keys(formElements).forEach(function(fieldName) {\n        let queryFieldName = (fieldName === 'candID') ? 'candidateID' : fieldName;\n        formElements[fieldName].onUserInput = this.onElementUpdate.bind(null, fieldName);\n        formElements[fieldName].value = this.queryString[queryFieldName];\n      }.bind(this));\n    }\n\n    return (\n      <Panel\n        id={this.props.id}\n        height={this.props.height}\n        title={this.props.title}\n      >\n        <FormElement {...this.props}>\n          {formChildren}\n        </FormElement>\n      </Panel>\n    );\n  }\n}\n\nFilterForm.defaultProps = {\n  id: 'selection-filter',\n  height: '100%',\n  title: 'Selection Filter',\n  onUpdate: function() {\n    console.warn('onUpdate() callback is not set!');\n  }\n};\nFilterForm.propTypes = {\n  Module: React.PropTypes.string.isRequired,\n  filter: React.PropTypes.object.isRequired,\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  onUpdate: React.PropTypes.func\n};\n\nexport default FilterForm;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/FilterForm.js","/**\n * This file contains React component for Panel\n *\n * @author Alex I.\n * @version 1.0.0\n *\n */\n\n/**\n * Panel component\n * Wraps children in a collapsible bootstrap panel\n */\nclass Panel extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsed: this.props.initCollapsed\n    };\n\n    // Initialize panel class based on collapsed status\n    this.panelClass = (\n      this.props.initCollapsed ?\n        \"panel-collapse collapse\" :\n        \"panel-collapse collapse in\"\n    );\n\n    this.toggleCollapsed = this.toggleCollapsed.bind(this);\n  }\n\n  toggleCollapsed() {\n    this.setState({collapsed: !this.state.collapsed});\n  }\n\n  render() {\n    // Change arrow direction based on collapse status\n    let glyphClass = (\n      this.state.collapsed ?\n        \"glyphicon pull-right glyphicon-chevron-down\" :\n        \"glyphicon pull-right glyphicon-chevron-up\"\n    );\n\n    let pencilGlyph;\n    if (this.props.edit) {\n      pencilGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-pencil\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.edit}\n        /> \n      );\n    } \n\n    let plusGlyph;\n    if (this.props.add) {\n      plusGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-plus\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.add}\n        />\n      );\n    }\n\n    let removeGlyph;\n    if (this.props.cancel) {\n      removeGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-remove\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.cancel}\n        />\n      );\n    }\n\n    // Add panel header, if title is set\n    const panelHeading = this.props.title ? (\n      <div\n        className=\"panel-heading\"\n      >\n        <span \n          className={glyphClass}\n          onClick={this.toggleCollapsed}\n          data-toggle=\"collapse\"\n          data-target={'#' + this.props.id}\n          style={{cursor: 'pointer'}}\n        />\n        {pencilGlyph}\n        {plusGlyph}\n        {removeGlyph}\n        {this.props.title}\n      </div>\n    ) : '';\n\n    return (\n      <div className=\"panel panel-primary\">\n        {panelHeading}\n        <div id={this.props.id} className={this.panelClass} role=\"tabpanel\">\n          <div className=\"panel-body\" style={{height: this.props.height}}>\n            {this.props.children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPanel.propTypes = {\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  edit: React.PropTypes.func,\n  add: React.PropTypes.func\n};\nPanel.defaultProps = {\n  initCollapsed: false,\n  id: 'default-panel',\n  height: '100%'\n};\n\nexport default Panel;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Panel.js","import SpecimenBarcodeForm from './barcodeForm.js';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankSpecimenForm extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      formErrors: {},\n      candidateId: null,\n      sessionId: null,\n      centerId: null,\n      barcodeList: {1: {specimen: {collection: {}}, container: {}}},\n      count: 1,\n      collapsed: {1: true},\n      copyMultiplier: 1,\n    };\n\n    this.toggleCollapse = this.toggleCollapse.bind(this);\n    this.setSpecimen = this.setSpecimen.bind(this);\n    this.setContainer = this.setContainer.bind(this);\n    this.addBarcode = this.addBarcode.bind(this);\n    this.setCopyMultiplier = this.setCopyMultiplier.bind(this);\n    this.copyBarcode = this.copyBarcode.bind(this);\n    this.removeBarcode = this.removeBarcode.bind(this);\n    this.saveBarcodeList = this.saveBarcodeList.bind(this);\n  }\n\n  toggleCollapse(key) {\n    let collapsed = this.state.collapsed;\n    collapsed[key] = !collapsed[key];\n    this.setState({collapsed});\n  }\n\n  saveBarcodeList() {\n    let barcodeList = JSON.parse(JSON.stringify(this.state.barcodeList));\n    let availableId = Object.keys(this.props.containerStati).find(\n      key => this.props.containerStati[key] === 'Available'\n    );\n\n    for (let barcode in barcodeList) {\n      //set container values\n      let container = barcodeList[barcode].container;\n      container.statusId = availableId;\n      container.temperature = 20;\n      container.locationId = this.state.centerId;\n      container.originId = this.state.centerId;\n\n      //set specimen values\n      let specimen = barcodeList[barcode].specimen;\n      specimen.candidateId = this.state.candidateId;\n      specimen.sessionId = this.state.sessionId;\n      specimen.quantity = specimen.collection.quantity;\n      specimen.unitId = specimen.collection.unitId;\n      specimen.collection.locationId = this.state.centerId;\n      if (this.props.specimenTypes[specimen.typeId].freezeThaw === 1) {\n        specimen.fTCycle = 0;\n      }\n\n      //if this is an aliquot form, reset some of the values.\n      //TODO: these will eventually be higher level states.\n      if (this.props.data) {\n        specimen.candidateId = this.props.data.candidate.CandID;\n        specimen.sessionId = this.props.data.session.ID;\n        specimen.parentSpecimenId = this.props.data.specimen.id;\n        specimen.collection.locationId = this.props.data.container.locationId;\n        container.locationId = this.props.data.container.locationId;\n        container.originId = this.props.data.container.locationId;\n      }\n    \n      barcodeList[barcode].container = container;\n      barcodeList[barcode].specimen = specimen;\n    }\n\n    this.props.save(barcodeList, this.props.saveBarcodeListURL, 'Save Successful!').then(\n      () => {this.props.refreshParent();}\n    );\n  }\n\n  setSpecimen(name, value, key) {\n    this.props.onChange instanceof Function && this.props.onChange();\n    let centerId = this.state.centerId;\n    let candidateId = this.state.candidateId;\n    let sessionId = this.state.sessionId;\n    let barcodeList = this.state.barcodeList;\n\n    if (name === 'candidateId') {\n      candidateId = value;\n    } else if (name === 'sessionId') {\n      sessionId = value;\n      centerId = this.props.sessionCenters[sessionId].centerId;\n    } else {\n      //this is eliminate values if specimen type is changed\n      if (name === 'typeId') {\n        barcodeList[key].specimen = {collection:{}};\n      }\n      barcodeList[key].specimen[name] = value;\n    }\n\n    this.setState({barcodeList, centerId, candidateId, sessionId})\n  }\n\n  setContainer(name, value, key) {\n    this.props.onChange instanceof Function && this.props.onChange();\n    let barcodeList = this.state.barcodeList;\n    barcodeList[key].container[name] = value;\n    this.setState({barcodeList});\n  }\n\n  addBarcode() {\n    let barcodeList = this.state.barcodeList;\n    let count = this.state.count;\n    let collapsed = this.state.collapsed;\n\n    barcodeList[count+1] = {specimen: {}, container: {collection:{}}}; \n    collapsed[count+1] = true;\n    count = count+1\n\n    this.setState({barcodeList, collapsed, count});\n  }\n\n  setCopyMultiplier(e) {\n    let copyMultiplier = e.target.value;\n    this.setState({copyMultiplier});\n  }\n\n  copyBarcode(key) {\n    let count = this.state.count;\n    let collapsed = this.state.collapsed;\n    let nextKey = count+1;\n    let barcodeList = this.state.barcodeList;\n    let multiplier = this.state.copyMultiplier\n\n    for (let i=1; i<=multiplier; i++) {\n      barcodeList[nextKey] = JSON.parse(JSON.stringify(barcodeList[key])); \n      delete barcodeList[nextKey].container.barcode;\n      collapsed[nextKey] = true;\n      nextKey++;\n    }\n\n    this.setState({\n      barcodeList: barcodeList,\n      count: nextKey,\n      collapsed: collapsed,\n    });\n  }\n\n  removeBarcode(key) {\n    let barcodeList = this.state.barcodeList;\n    delete barcodeList[key];\n    this.setState({barcodeList: barcodeList});\n  }\n\n  render() {\n    //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n    let barcodeListArray = Object.keys(this.state.barcodeList);\n    let barcodes = [];\n    let i = 1;\n    for (let key of barcodeListArray) {\n      barcodes.push(\n        <SpecimenBarcodeForm\n          data={this.props.data || null}\n          key={key}\n          barcodeKey={key}\n          id={i} \n          collapsed={this.state.collapsed[key]}\n          toggleCollapse={this.toggleCollapse}\n          mapFormOptions={this.props.mapFormOptions}\n          container={this.state.barcodeList[key].container || null}\n          specimen={this.state.barcodeList[key].specimen || null}\n          removeBarcode={barcodeListArray.length !== 1 ?\n            () => this.removeBarcode(key) : null}\n          addBarcode={i == barcodeListArray.length ? this.addBarcode : null}\n          setCopyMultiplier={this.setCopyMultiplier}\n          copyMultiplier={this.state.copyMultiplier}\n          copyBarcode={i == barcodeListArray.length && this.state.barcodeList[key] ? \n            this.copyBarcode : null}\n          setContainer={this.setContainer}\n          setSpecimen={this.setSpecimen}\n          onChange={this.props.onChange}\n          specimenTypes={this.props.specimenTypes}\n          containerTypesPrimary={this.props.containerTypesPrimary}\n          containersNonPrimary={this.props.containersNonPrimary}\n          specimenTypeAttributes={this.props.specimenTypeAttributes}\n          attributeDatatypes={this.props.attributeDatatypes}\n          attributeOptions={this.props.attributeOptions}\n          capacities={this.props.capacities}\n          containerDimensions={this.props.containerDimensions}\n          containerCoordinates={this.props.containerCoordinates}\n          specimenTypeUnits={this.props.specimenTypeUnits}\n          units={this.props.units}\n        />\n      )\n      \n      i++;\n    }\n\n    let globalFields;\n    let remainingQuantityFields;\n    if (this.props.data) {\n      globalFields = (\n        <div>\n          <StaticElement\n            label=\"Parent Specimen\"\n            text={this.props.data.container.barcode}\n          />\n          <StaticElement\n            label=\"PSCID\"\n            text={this.props.data.candidate.PSCID}\n          />\n          <StaticElement\n            label=\"Visit Label\"\n            text={this.props.data.session.Visit_label}\n          />\n        </div>\n      );\n\n      remainingQuantityFields = (\n        <div>\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Remaining Quantity\"\n            onUserInput={this.props.setSpecimenData}\n            required={true}\n            value={this.props.specimen.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={this.props.specimenUnits}\n            onUserInput={this.props.setSpecimenData}\n            emptyOption={false}\n            required={true}\n            value={this.props.specimen.unitId}\n          />\n        </div>\n      );\n    } else {\n     let sessions = {};\n     if (this.state.candidateId) {\n       sessions = this.props.mapFormOptions(this.props.candidateSessions[this.state.candidateId], 'label'); \n     }\n      //TODO: not sure why, but I'm now having trouble with the SearchableDropdown\n      globalFields = (\n        <div>\n          <SelectElement\n            name=\"candidateId\"\n            label=\"PSCID\"\n            options={this.props.candidates}\n            onUserInput={this.setSpecimen}\n            required={true}\n            value={this.state.candidateId}\n            placeHolder='Search for a PSCID'\n          />\n          <SelectElement\n            name='sessionId'\n            label='Visit Label'\n            options={sessions}\n            onUserInput={this.setSpecimen}\n            required={true}\n            value={this.state.sessionId}\n            disabled={this.state.candidateId ? false : true}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"specimenForm\"\n        id='specimenForm'\n        onSubmit={() => {\n          this.saveBarcodeList();\n          this.props.saveSpecimen instanceof Function && this.props.saveSpecimen()}}\n        ref=\"form\"\n      >\n        <div className='row'>\n          <div className=\"col-xs-9 col-xs-offset-1\">\n            {globalFields}\n            {remainingQuantityFields}\n          </div>\n        </div>\n        {barcodes}\n        <ButtonElement\n          label='Submit'\n          columnSize='col-sm-2 col-sm-offset-10'\n        />\n      </FormElement>\n    );\n  }\n}\n\nBiobankSpecimenForm.propTypes = {\n};\n\nexport default BiobankSpecimenForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenForm.js","import SpecimenCollectionForm from './collectionForm'\nimport ContainerParentForm from './containerParentForm'\n\n/**\n * Biobank Barcode Form\n *\n * Acts a subform for BiobankSpecimenForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenBarcodeForm extends React.Component {\n  constructor() {\n    super();\n    this.setContainer = this.setContainer.bind(this);\n    this.setSpecimen = this.setSpecimen.bind(this);\n    this.copy = this.copy.bind(this);\n  }\n\n  setContainer(name, value) {\n    this.props.setContainer(name, value, this.props.barcodeKey);\n  }\n\n  setSpecimen(name, value) {\n    this.props.setSpecimen(name, value, this.props.barcodeKey);\n  }\n\n  copy() {\n    this.props.copyBarcode(this.props.copyMultiplier);\n  }\n\n  render() {\n    let addBarcodeButton;\n    let addBarcodeText;\n    let copyBarcodeButton;\n    let copyBarcodeText;\n    if (this.props.addBarcode) {\n      addBarcodeButton = (\n        <span className='action'>\n          <div\n            className='action-button add'\n            onClick={this.props.addBarcode}\n          >\n          +\n          </div>\n        </span>\n      );\n\n      addBarcodeText = (\n        <span className='action-title'>\n          New Entry\n        </span>\n      );\n    }\n\t\n    if (this.props.copyBarcode) {\n      copyBarcodeButton = (\n        <span className='action'>\n          <div\n            className='action-button add'\n            onClick={this.copy}\n          >\n            <span className='glyphicon glyphicon-duplicate'/>\n          </div>\n        </span>\n      );\n      copyBarcodeText = (\n        <span className='action-title'>\n          <input \n            className='form-control input-sm'\n            type='number'\n            min='1'\n            max='50'\n            style={{width: 50, display: 'inline'}}\n            onChange={this.props.setCopyMultiplier}\n            value={this.props.copyMultiplier}\n          />\n          Copies\n        </span>\n      );\n    }\n\n    let removeBarcodeButton;\n    if (this.props.removeBarcode) {\n      const glyphStyle = {\n        color: '#DDDDDD',\n        marginLeft: 10,\n        cursor: 'pointer',\n        fontSize: 15\n      }\n\n      removeBarcodeButton = (\n        <span \n          className='glyphicon glyphicon-remove' \n          onClick={this.props.removeBarcode}\n          style={glyphStyle}\n        />\n      );\n    }\n\n    let specimenTypes = {};\n    if (this.props.data) {\n      for (let id in this.props.specimenTypes) {\n        if (\n             (this.props.specimenTypes[id].parentTypeId ==\n             this.props.data.specimen.typeId) ||\n             (id == this.props.data.specimen.typeId)\n        ) {\n          specimenTypes[id] = this.props.specimenTypes[id]['type'];\n        }\n      }\n    } else {\n      specimenTypes = this.props.mapFormOptions(this.props.specimenTypes, 'type');\n    }\n\n    return (\n      <FormElement\n        name='biobankBarcode'\n      >\n        <div className='row'>\n          <div className='col-xs-9 col-xs-offset-1'>\n            <div>   \n              <TextboxElement\n                name='barcode'\n                label={'Barcode ' + this.props.id}\n                onUserInput={this.setContainer}\n                required={true}\n                value={this.props.container.barcode}\n              />\n            </div>\n          </div>\n          <div className='col-xs-1' style={{paddingLeft:0, marginTop:10}}>\n            <span \n              className= {this.props.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up'}\n              style={{cursor: 'pointer', fontSize:15, position:'relative', right:40}}\n              data-toggle='collapse' \n              data-target={'#item-' + this.props.barcodeKey}\n              onClick={() => this.props.toggleCollapse(this.props.barcodeKey)}\n            />\n            {removeBarcodeButton}\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xs-2'/>\n          <div className='col-xs-8'>\n            <div id={'item-' + this.props.barcodeKey} className='collapse'>\n              <SelectElement\n                name=\"typeId\"\n                label=\"Specimen Type\"\n                options={specimenTypes}\n                onUserInput={this.setSpecimen}\n                required={true}\n                value={this.props.specimen.typeId}\n              />\n              <SelectElement\n                name=\"typeId\"\n                label=\"Container Type\"                                              \n                options={this.props.containerTypesPrimary}                          \n                onUserInput={this.setContainer}\n                ref=\"containerType\"                                                 \n                required={true}                                                     \n                value={this.props.container.typeId}                           \n              />            \n              <SpecimenCollectionForm\n                specimen={this.props.specimen}\n                setSpecimenData={this.setSpecimen}\n                specimenTypeUnits={this.props.specimenTypeUnits}\n                specimenTypeAttributes={this.props.specimenTypeAttributes}\n                attributeDatatypes={this.props.attributeDatatypes}\n                attributeOptions={this.props.attributeOptions}\n              />\n              <ContainerParentForm                                                    \n                setContainerData={this.setContainer}\n                mapFormOptions={this.props.mapFormOptions}\n                container={this.props.container}\n                containersNonPrimary={this.props.containersNonPrimary}\n                containerDimensions={this.props.containerDimensions}\n                containerCoordinates={this.props.containerCoordinates}\n              />\n            </div>\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xs-11'>\n            <div className='col-xs-4'/>\n            <div className='col-xs-3 action'>\n              {addBarcodeButton}\n              {addBarcodeText}\n            </div>\n            <div className='col-xs-3 action'>\n              {copyBarcodeButton}\n              {copyBarcodeText}\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n}\n\nSpecimenBarcodeForm.propTypes = {\n}\n\nexport default SpecimenBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/barcodeForm.js","/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenCollectionForm extends React.Component {\n  constructor() {\n    super();\n    \n    this.getSpecimenTypeFields = this.getSpecimenTypeFields.bind(this);\n    this.setCollectionData = this.setCollectionData.bind(this);\n    this.addData = this.addData.bind(this);\n    this.setData = this.setData.bind(this);\n  }\n\n  setCollectionData(name, value) {\n    let collection = this.props.specimen.collection;\n    collection[name] = value;\n    this.props.setSpecimenData('collection', collection);\n  }\n\n  //TODO: this function may not be necessary\n  addData() {\n    let collection = this.props.specimen.collection;\n    collection.data = {};\n    this.props.setSpecimenData('collection', collection)\n  }\n\n  setData(name, value) {\n    let data = this.props.specimen.collection.data;\n    data[name] = value;\n    this.setCollectionData('data', data);\n  }\n\n  // This generates all the form fields for a given specimen type\n  getSpecimenTypeFields(fieldsObject) {\n    let specimenTypeFields = Object.keys(fieldsObject).map((attribute) => {\n      let datatype = this.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"text\" || datatype === \"number\") {\n\n        if (fieldsObject[attribute]['refTableId'] == null) {\n          return (\n            <TextboxElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              onUserInput={this.setData}\n              required={fieldsObject[attribute]['required']}\n              value={this.props.specimen.collection.data[attribute]}\n            />\n          );\n        }\n\n        if (fieldsObject[attribute]['refTableId'] !== null) {\n          return (\n            <SelectElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              options={this.props.attributeOptions[fieldsObject[attribute]['refTableId']]}\n              onUserInput={this.setData}\n              required={fieldsObject[attribute]['required']}\n              value={this.props.specimen.collection.data[attribute]}\n            />\n          );\n        }\n      }\n\n      if (datatype === \"datetime\") {\n        return (\n          <DateElement\n            name={attribute}\n            label={fieldsObject[attribute]['name']}\n            onUserInput={this.setData}\n            ref={attribute}\n            required={fieldsObject[attribute]['required']}\n            value={this.props.specimen.collection.data[attribute]}\n          />\n        );\n      }\n\n      if (datatype === \"boolean\") {\n        // There is currently no CheckboxElement or RadioElement in loris/jsx/Form.js and therefore\n        // this is not possible.     \n      }\n    })\n\n    return specimenTypeFields;\n  }\n\n  render() {\n    let updateButton;\n    if (((this.props.data||{}).specimen||{}).collection) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    }\n\n    let specimenTypeUnits = {};\n    let specimenTypeFields;\n    if (this.props.specimen.typeId) {\n      \n      //This modifies the selections for unit drop down based on the chosen\n      //specimen type \n      for (let id in this.props.specimenTypeUnits[this.props.specimen.typeId]) {\n        specimenTypeUnits[id] = this.props.specimenTypeUnits[this.props.specimen.typeId][id].unit;\n      }\n\n      let specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.props.specimen.typeId];\n      if (specimenTypeFieldsObject) {\n        if (((this.props.specimen||{}).collection||{}).data) {\n          specimenTypeFields = this.getSpecimenTypeFields(specimenTypeFieldsObject);\n        } else {\n          this.addData();\n        }\n      }\n    }\n\n    let specimenFields;\n    if (this.props.specimen.typeId) {\n      specimenFields = (\n        <div>\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Quantity\"\n            onUserInput={this.setCollectionData}\n            required={true}\n            value={this.props.specimen.collection.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={specimenTypeUnits}\n            onUserInput={this.setCollectionData}\n            required={true}\n            value={this.props.specimen.collection.unitId}\n          />\n          {specimenTypeFields}\n          <DateElement\n            name=\"date\"\n            label=\"Date\"\n            minYear=\"2000\"\n            maxYear=\"2018\"\n            onUserInput={this.setCollectionData}\n            required={true}\n            value={this.props.specimen.collection.date}\n          />\n          <TimeElement\n            name=\"time\"\n            label=\"Time\"\n            onUserInput={this.setCollectionData}\n            required={true}\n            value={this.props.specimen.collection.time}\n          />\n          <TextareaElement\n            name=\"comments\"\n            label=\"Comments\"\n            onUserInput={this.setCollectionData}\n            ref=\"comments\"\n            value={this.props.specimen.collection.comments}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"biobankSpecimen\"\n        onSubmit={this.props.saveSpecimen}\n        ref=\"form\"\n      >\n        {specimenFields}\n        {updateButton}\n      </FormElement>\n    );\n  }\n}\n\n\nSpecimenCollectionForm.propTypes = {\n  setSpecimenData: React.PropTypes.func.isRequired,\n  saveSpecimen: React.PropTypes.func,\n  specimen: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  attributeOptions: React.PropTypes.object.isRequired,\n  specimenTypeUnits: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n}\n\nexport default SpecimenCollectionForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/collectionForm.js","/**\n * Biobank Container Parent Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\n\nimport ContainerDisplay from './containerDisplay.js';\n\nclass ContainerParentForm extends React.Component {\n\n  render() {\n    let containerDisplay;\n    let containerBarcodesNonPrimary = this.props.mapFormOptions(\n      this.props.containersNonPrimary, 'barcode'\n    );\n    let parentContainerField = ( \n      <SelectElement\n        name=\"parentContainerId\"\n        label=\"Parent Container Barcode\"\n        options={containerBarcodesNonPrimary}\n        onUserInput={this.props.setContainerData}\n        required={true}\n        value={this.props.container.parentContainerId}\n      />  \n    );  \n\n    if (this.props.container.parentContainerId) {\n      let dimensionId = this.props.containersNonPrimary[\n        this.props.container.parentContainerId\n      ].dimensionId;\n\n      if (dimensionId) {\n        // This will eventually become unecessary\n        let dimensions = this.props.containerDimensions[dimensionId];\n\n        // Total coordinates is determined by the product of the dimensions\n        let coordinatesTotal = 1;\n        for (let dimension in dimensions) {\n          coordinatesTotal = coordinatesTotal * dimensions[dimension];\n        }\n\n        // Mapping of options for the SelectElement\n        let coordinates = {}; \n        for (let i = 1; i <= coordinatesTotal; i++) {\n          // If the coordinate is already taken, skip it.\n          // this doubling of if statements seems unnecessary\n          if (this.props.containerCoordinates[this.props.container.parentContainerId]) {\n            if (this.props.containerCoordinates[this.props.container.parentContainerId][i]) {\n              continue; \n            }\n          }\n\n          coordinates[i] = i;\n        }   \n\n        containerDisplay = (\n          <ContainerDisplay\n            dimensions = {\n              this.props.containerDimensions[\n                this.props.containersNonPrimary[\n                  this.props.container.parentContainerId\n                ].dimensionId\n              ]\n            }\n            coordinates = {\n              this.props.containerCoordinates[this.props.container.parentContainerId]\n            }\n            containerTypes = {this.props.containerTypes}\n            containerStati = {this.props.containerStati} \n            select = {true}\n            selectedCoordinate = {this.props.container.coordinate}\n            setContainerData = {this.props.setContainerData}\n          />\n        );\n      }\n    }   \n\n    let updateButton;\n    if ((this.props.data||{}).container) {\n      updateButton = (\n        <div>\n          <br/>\n          <ButtonElement label='Update'/>\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        onSubmit={this.props.saveContainer}\n      >\n        {parentContainerField}\n        {containerDisplay}\n        {updateButton}\n      </FormElement>\n    );\n  }\n}\n\nContainerParentForm.propTypes = {\n  mapFormOptions: React.PropTypes.func.isRequired,\n  setContainerData: React.PropTypes.func.isRequired,\n  saveContainer: React.PropTypes.func,\n  data: React.PropTypes.object,\n  container: React.PropTypes.object.isRequired,\n  containersNonPrimary: React.PropTypes.object.isRequired,\n  containerDimensions: React.PropTypes.object.isRequired,\n  containerCoordinates: React.PropTypes.object.isRequired,\n  containerTypes: React.PropTypes.object,\n  containerStati: React.PropTypes.object,\n};\n\nexport default ContainerParentForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerParentForm.js","/**\n * ContainerDisplay\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass ContainerDisplay extends React.Component {\n  constructor() {\n    super();\n   \n    this.redirectURL = this.redirectURL.bind(this);\n    this.drag = this.drag.bind(this);\n    this.drop = this.drop.bind(this);\n  }\n\n  componentDidMount() {\n    $('[data-toggle=\"tooltip\"]').tooltip();\n  }\n\n  componenDidUpdate() {\n    $('[data-toggle=\"tooltip\"]').tooltip();\n  }\n\n  redirectURL(e) {\n    let coordinate = e.target.id;\n    if (this.props.coordinates[coordinate]) {\n      let type = this.props.types[\n        this.props.children[this.props.coordinates[coordinate]].typeId\n      ].primary ? 'specimen' : 'container';\n      let url = loris.BaseURL+'/biobank/'+type+'/?barcode='+\n        this.props.children[this.props.coordinates[coordinate]].barcode;\n\n      window.location.href = url;\n    }\n  }\n\n  allowDrop(e) {\n      e.preventDefault();\n  }\n  \n  drag(e) {\n      let container = JSON.stringify(\n        this.props.children[this.props.coordinates[e.target.id]]\n      );\n      e.dataTransfer.setData(\"text/plain\", container);\n  }\n  \n  drop(e) {\n    e.preventDefault();\n\n    let container = JSON.parse(e.dataTransfer.getData(\"text/plain\"));\n    let newCoordinate = parseInt(e.target.id);\n   \n    container.coordinate = newCoordinate;\n\n    this.props.saveChildContainer(container);\n  }\n\n  render() {\n  // This is eventually need to be reworked and cleaned up\n  let column = [];\n  let row = [];\n  let display;\n  var coordinate = 1;\n  if (this.props.dimensions) {\n    for (let y=0; y < this.props.dimensions.y; y++) {\n      column = [];\n      for (let x=1; x <= this.props.dimensions.x; x++) {\n        \n        let nodeWidth = (500/this.props.dimensions.x) - (500/this.props.dimensions.x * 0.08);\n        let nodeStyle = {width: nodeWidth}\n        let nodeClass = 'node';\n        let tooltipTitle = null;\n        let dataHtml = 'false';\n        let dataToggle = null;\n        let dataPlacement = null;\n        let draggable = 'false';\n        let onDragStart = null;\n        let onDragOver = this.allowDrop;\n        let onDrop = this.drop;\n        let onClick = null;\n\n        if (!this.props.select) {\n          // This double if statement doesn't sound great\n          if (this.props.coordinates) {\n            if (this.props.coordinates[coordinate]) {\n              nodeClass = 'node occupied';\n              dataHtml = 'true';\n              dataToggle = 'tooltip';\n              dataPlacement = 'top';\n              tooltipTitle = \n            '<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + \n            '<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + \n            '<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n              draggable = 'true';\n              onDragStart = this.drag;\n              onDragOver = null;\n              onDrop = null;\n              onClick = this.redirectURL;\n            }\n          }\n        }\n      \n        if (this.props.select) {\n          if (coordinate == this.props.selectedCoordinate) {\n            nodeClass = 'node occupied';\n          }\n          else if (!this.props.coordinates) {\n            nodeClass = 'node available';\n            onClick = (e) => this.props.setContainerData('coordinate', e.target.id);\n          } \n          else if (this.props.coordinates) {\n            if (!this.props.coordinates[coordinate]) {\n              nodeClass = 'node available';\n\t\t\t  onClick = (e) => this.props.setContainerData('coordinate', e.target.id);\n            }\n            else if (this.props.coordinates[coordinate]){\n            // TODO: --- This is currently not working ---\n            //  dataHtml = 'true';\n            //  dataToggle = 'tooltip';\n            //  dataPlacement = 'top';\n            //  tooltipTitle = \n            //'<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + \n            //'<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + \n            //'<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n            }\n          }\n        }\n\n        let coordinateDisplay;\n        if (true) {\n          coordinateDisplay = x + (this.props.dimensions.x * y);\n        } else if (false) {\n          coordinateDisplay = String.fromCharCode(65+y)+''+x;\n        }\n\n        column.push(\n          <div\n            id={coordinate}\n            className={nodeClass}\n            data-html={dataHtml}\n            data-toggle={dataToggle}\n            data-placement={dataPlacement}\n            data-original-title={tooltipTitle}\n            style={nodeStyle}\n            onClick={onClick}\n            draggable={draggable}\n            onDragStart={onDragStart}\n            onDragOver={onDragOver}\n            onDrop={onDrop}\n          >\n            {coordinateDisplay}\n          </div>\n        );\n\n        coordinate++;\n      }\n\n      let rowHeight = (500/this.props.dimensions.y) - (500/this.props.dimensions.y * 0.08);\n      let rowMargin = (500/this.props.dimensions.y * 0.04);\n      let rowStyle = {\n        height: rowHeight,\n      }\n      \n      row.push(\n        <div\n          className='row'\n          style={rowStyle} \n        >\n          {column}\n        </div>\n      )\n    }\n    \n    display = row;\n  }\n \n    return (\n      <div className='display'>\n        {display}\n      </div>\n    );\n  }\n}\n\nContainerDisplay.propTypes = {\n}\n\nexport default ContainerDisplay;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerDisplay.js","import SpecimenBarcodeForm from './barcodeForm';\nimport BiobankSpecimenForm from './specimenForm';\nimport SpecimenPreparationForm from './preparationForm';\n\n/**\n * Biobank Pool Specimen Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\nclass PoolSpecimenForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      barcodeList: {},\n      errorMessage: null,\n      formErrors: {},\n      barcodeCount: 2,\n      preparation: false,\n      step: 1\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.setPreparationFormData = this.setPreparationFormData.bind(this);\n    this.setSpecimenFormData = this.setSpecimenFormData.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n    this.setBarcodeCount = this.setBarcodeCount.bind(this);\n    this.next = this.next.bind(this);\n    this.previous = this.previous.bind(this);\n    this.addPreparation = this.addPreparation.bind(this);\n    this.removePreparation = this.removePreparation.bind(this);\n    this.validate = this.validate.bind(this);\n    this.formSwitch = this.formSwitch.bind(this);\n    this.preparationSwitch = this.preparationSwitch.bind(this);\n    this.runAjax = this.runAjax.bind(this);\n  }\n\n  next() {\n    this.validate().then(\n      data => {\n        this.setState({\n          poolData: data,\n          step: this.state.step+1\n        });\n      }, \n      error => {\n        swal(\"Oops!\", error.responseText, \"error\");\n      }\n    );\n  }\n\n  previous() {\n    this.setState({\n      step: this.state.step-1\n    });\n  }\n\n  validate() {\n    return this.runAjax(this.props.specimenRequest, {barcodeList: this.state.barcodeList});\n  }\n\n  runAjax(url, inputData) {\n    return new Promise((resolve, reject) => {\n      $.ajax(url, {\n        method: \"GET\",\n        dataType: 'json',\n        data: inputData,\n        success: function(data) {\n          resolve(data);\n        }.bind(this),\n        error: function(error, textStatus, errorThrown) {\n          reject(error);\n          console.error(error);\n        }\n      });  \n    })\n  }\n\n  setBarcodeCount(field, value) {\n    let barcodeCount = value;\n    let barcodeList = this.state.barcodeList;\n    for (let barcode in barcodeList) {\n      if (barcode > barcodeCount) {\n        delete barcodeList[barcode];\n      }\n    }\n\n    this.setState({barcodeCount, barcodeList});\n  }\n\n  formSwitch(inputForm, specimenForm) {\n    switch(this.state.step) {\n      case 1:\n        return inputForm;\n      case 2:\n        return specimenForm;\n    }\n  }\n\n  preparationSwitch(preparationButton, preparationForm) {\n    switch(this.state.preparation) {\n      case false:\n        return preparationButton;\n      case true:\n        return preparationForm;\n    }\n  }\n\n  addPreparation() {\n    this.validate().then(\n      data => {\n        this.setState({\n          poolData: data,\n          preparation: true\n        });\n      },\n      error => {\n        swal('Oh no!', error.responseText, 'error');\n      }\n    );\n  }\n\n  removePreparation() {\n    let formData = this.state.formData;\n    //TODO: is it better to set it to empty, or delete it?\n    formData.preparationForm = {};\n    this.setState({\n      preparation: false,\n      formData\n    });\n  }\n\n  render() {\n    //Generates barcodes\n    let barcodes = [];\n    for (let i=1; i<=this.state.barcodeCount; i++) {\n      barcodes.push(\n        <TextboxElement\n          name={i}\n          label={'Barcode ' + i}\n          onUserInput={this.setFormData}\n          required={true}\n          value={this.state.barcodeList[i]}\n          errorMessage={this.state.formErrors[i]}\n        />\n      )\n    }\n    \n    let preparationButton = ( \n      <div className='row'>\n        <div className='col-xs-4'/>\n        <div className='col-xs 4 action'>\n            <span className='action'>\n            <div \n              className='action-button add'\n              onClick={this.addPreparation}\n            >\n              +\n            </div>\n            </span>\n            <div className='action-title'>\n              Add Preparation\n            </div>\n        </div>\n      </div>\n    );\n\n    let preparationForm;\n    if (this.state.poolData) {\n\n      const specimenProtocolAttributes = this.props.specimenProtocolAttributes[this.state.poolData.typeId]\n \n      let specimenProtocols = {};\n      for (let id in specimenProtocolAttributes) {\n        specimenProtocols[id] = this.props.specimenProtocols[id];\n      }\n      specimenProtocols = this.props.mapFormOptions(specimenProtocols, 'protocol');\n\n      preparationForm = (\n        <div className='row'>\n          <div className='col-sm-9 col-sm-offset-1'>\n            <SpecimenPreparationForm\n              formData={this.state.formData.preparationForm}\n              specimenProtocols={specimenProtocols}\n              specimenProtocolAttributes={specimenProtocolAttributes}\n              attributeDatatypes={this.props.attributeDatatypes}\n              attributeOptions={this.props.attributeOptions}\n              setParentFormData={this.setPreparationFormData}\n              insertAction={`${loris.BaseURL}/biobank/ajax/submitData.php?action=insertSpecimenPreparation`}\n            />\n            <a className='pull-right' style={{cursor:'pointer'}} onClick={this.removePreparation}>Cancel Preparation</a>\n          </div>\n        </div>\n      );\n    }\n\n    let inputForm = (\n      <div>\n        <div className='row'>\n          <div className='col-sm-9 col-sm-offset-1'>\n            <StaticElement\n              label='Pooling Note'\n              text='Select or Scan the specimens to be pooled. Please ensure that they\n                    are the same type, and share the same PSCID and Visit Label'\n            />\n            <NumericElement\n              label='№ of Specimens'\n              min='2'\n              max='100'\n              value={this.state.barcodeCount}\n              onUserInput={this.setBarcodeCount}\n            />\n            {barcodes}\n          </div>\n        </div>\n        {this.preparationSwitch(preparationButton, preparationForm)}\n        <div className='col-sm-3 col-xs-offset-9 action'>\n          <div className='action-title'>\n            Next\n          </div>\n          <span className='action'>\n            <div \n              className='action-button update'\n              onClick={this.next}\n            >\n              <span className='glyphicon glyphicon-chevron-right'/>\n            </div>\n          </span>\n        </div>\n      </div>\n    );\n\n    //TODO: Things here need to be in the proper order!!!\n    let specimenForm;\n    if (this.state.poolData) {\n\n      // This is to provide the options for the output specimens\n      let specimenTypes = {};\n      if (this.state.poolData.typeId) {\n        specimenTypes[this.state.poolData.typeId] = this.props.specimenTypes[this.state.poolData.typeId];\n      }\n  \n      let pscid = this.props.pSCIDs[this.state.poolData.candidateId];\n      let visit = this.props.sessionData[pscid].visits[this.state.poolData.sessionId];\n\n      let barcodesArray = Object.values(this.state.barcodeList); \n      let barcodesString = barcodesArray.join(', ');  \n\n      // TODO: rather than all specimen units this should really be specific to the\n      // type\n      let specimenUnits = this.props.mapFormOptions(this.props.specimenUnits, 'unit');\n\n      specimenForm = (\n        <div className='row'>\n          <div className='col-xs-12'>\n            <BiobankSpecimenForm\n              formData={this.state.formData.specimenForm}\n              candidateId={this.state.poolData.candidateId}\n              pscid={pscid}\n              sessionId={this.state.poolData.sessionId}\n              visit={visit}\n              parentSpecimenBarcodes={barcodesString}\n              parentSpecimenIds={this.state.poolData.specimenIds}\n              specimenTypes={specimenTypes}\n              specimenTypeUnits={this.props.specimenTypeUnits}\n              specimenUnits={specimenUnits}\n              containerTypesPrimary={this.props.containerTypesPrimary}\n              containersNonPrimary={this.props.containersNonPrimary}\n              specimenTypeAttributes={this.props.specimenTypeAttributes}\n              attributeDatatypes={this.props.attributeDatatypes}\n              attributeOptions={this.props.attributeOptions}\n              capacities={this.props.capacities}\n              containerDimensions={this.props.containerDimensions}\n              containerCoordinates={this.props.containerCoordinates}\n              setParentFormData={this.setSpecimenFormData}\n              action={`${loris.BaseURL}/biobank/ajax/submitData.php?action=submitSpecimen`}\n              refreshParent={this.props.refreshParent}\n            />\n            <ButtonElement\n              label='Submit'\n            />\n          </div>\n          <div className='col-sm-3 col-xs-offset-2 action'>\n            <span className='action'>\n              <div \n                className='action-button update'\n                onClick={this.previous}\n              >\n                <span className='glyphicon glyphicon-chevron-left'/>\n              </div>\n            </span>\n            <div className='action-title'>\n              Previous\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"poolSpecimenForm\"\n        id='poolSpecimenForm'\n        onSubmit={this.handleSubmit}\n        ref=\"form\"\n      >\n        {this.formSwitch(inputForm, specimenForm)}\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n\n  validateForm(formElement, value) {\n    let formErrors = this.state.formErrors;\n\n    //validate barcode regex\n    if (formElement === \"barcode\" && value !== \"\") {\n      if (!(/^hello/.test(this.state.formData.barcode))) {\n        formErrors.barcode = true;\n      } else {\n        formErrors.barcode = false;\n      }\n    }\n\n    //validate that quantity is a number and less than capacity\n    if (formElement === \"quantity\" && value !== \"\") {\n      if (isNaN(value) || (value > this.props.capacities[this.state.currentContainerType])) {\n        formErrors.quantity = true;\n      } else {\n        formErrors.quantity = false;\n      }\n    }\n\n    //validate datatypes and regex of generated type attributes\n    let specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n    let specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n\n      let datatype = this.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"number\") {\n        if (formElement === attribute) {\n          if (isNaN(value) && value !== \"\") {\n            formErrors[attribute] = true;\n          } else {\n            formErrors[attribute] = false;\n          }\n        }\n      }\n    })\n\n    this.setState({\n      formErrors: formErrors\n    });\n  }\n\n\n  /**\n   * Handle form submission\n   * @param {object} e - Form submission event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    this.submitForm();\n  }\n\n  /*\n   * Uploads the file to the server\n   */\n  submitForm() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let preparationForm = this.state.formData.preparationForm;\n    let specimenForm = this.state.formData.specimenForm;\n    formData['preparationForm'] = JSON.stringify(preparationForm);\n    formData['specimenForm'] = JSON.stringify(specimenForm);\n\n    console.log(formData.specimenForm);\n    console.log(formData.preparationForm);\n\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        //this.props.refreshParent();\n        swal(\"Specimens Pooled Successful!\", \"\", \"success\");\n        this.props.onSuccess();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Checks if the inputted file name is valid\n   *\n   * @param {string} requiredFileName - Required file name\n   * @param {string} fileName - Provided file name\n   * @return {boolean} - true if fileName starts with requiredFileName, false\n   *   otherwise\n   */\n//  isValidFileName(requiredFileName, fileName) {\n//    if (fileName === null || requiredFileName === null) {\n//      return false;\n//    }\n//\n//    return (fileName.indexOf(requiredFileName) === 0);\n//  }\n\n  /**\n   * Validate the form\n   *\n   * @param {object} formRefs - Object containing references to React form elements\n   * @param {object} formData - Object containing form data inputed by user\n   * @return {boolean} - true if all required fields are filled, false otherwise\n   */\n  isValidForm(formRefs, formData) {\n    let isValidForm = true;\n\n    let requiredFields = {\n      pscid: null,\n      visitLabel: null,\n    };\n\n    Object.keys(requiredFields).map(function(field) {\n      if (formData[field]) {\n        requiredFields[field] = formData[field];\n      } else if (formRefs[field]) {\n        formRefs[field].props.hasError = true;\n        isValidForm = false;\n      }\n    });\n    this.forceUpdate();\n\n    return isValidForm;\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    // This lets the modal window know that there is formData\n    // and will cause a warning to be thrown of the modal window\n    // is exited\n    this.props.onChange instanceof Function && this.props.onChange();\n  \n    if (formElement === \"pscid\" && value !== \"\" && value !== undefined) {\n      this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n    }\n\n    let formData = this.state.formData;\n    let barcodeList = this.state.barcodeList;\n \n    //TODO: there must be a better way to do this\n    if (isNaN(formElement)) {\n      formData[formElement] = value;\n    } else {\n      barcodeList[formElement] = value;\n    }\n\n    this.setState({\n      formData,\n      barcodeList\n    });\n  }\n\n  setPreparationFormData(preparationFormData) {\n    let formData = this.state.formData;\n    formData.preparationForm = preparationFormData;\n    \n    this.setState({formData});\n  }\n\n  setSpecimenFormData(specimenFormData) {\n    let formData = this.state.formData;\n    formData.specimenForm = specimenFormData;\n  \n    this.setState({formData});\n  }\n}\n\nPoolSpecimenForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired,\n  refreshTable: React.PropTypes.func\n};\n\nexport default PoolSpecimenForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/poolSpecimenForm.js","\n/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenPreparationForm extends React.Component {\n  constructor() {\n    super();\n\n    this.getSpecimenProtocolFields = this.getSpecimenProtocolFields.bind(this);\n    this.setPreparation = this.setPreparation.bind(this);\n    this.addData = this.addData.bind(this);\n    this.setData = this.setData.bind(this);\n  }\n\n  setPreparation(name, value) {\n    let preparation = this.props.specimen.preparation;\n    preparation[name] = value;\n    this.props.setSpecimenData('preparation', preparation);\n  }\n\n  addData() {\n    let preparation = this.props.specimen.preparation;\n    preparation.data = {};\n    this.props.setSpecimenData('preparation', preparation);\n  }\n\n  setData(name, value) {\n    let data = this.props.specimen.preparation.data;\n    data[name] = value;\n    this.setPreparation('data', data);\n  }\n\n  // TODO: decouple this code from the collectionForm by make it a React Component\n  // This generates all the form fields for a given specimen protocol\n  getSpecimenProtocolFields(fieldsObject) {\n    let specimenProtocolFields = Object.keys(fieldsObject).map((attribute) => {\n      let datatype = this.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\n      if (datatype === \"text\" || datatype === \"number\") {\n        if (fieldsObject[attribute]['refTableId'] == null) {\n          return (\n            <TextboxElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              onUserInput={this.setData}\n              required={fieldsObject[attribute]['required']}\n              value={this.props.specimen.preparation.data[attribute]}\n            />\n          );\n        }\n\n        if (fieldsObject[attribute]['refTableId'] !== null) {\n          return (\n            <SelectElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              options={this.props.attributeOptions[fieldsObject[attribute]['refTableId']]}\n              onUserInput={this.setData}\n              required={fieldsObject[attribute]['required']}\n              value={this.props.specimen.preparation.data[attribute]}\n            />\n          );\n        }\n      }\n\n      if (datatype === \"datetime\") {\n        return (\n          <DateElement\n            name={attribute}\n            label={fieldsObject[attribute]['name']}\n            onUserInput={this.setData}\n            ref={attribute}\n            required={fieldsObject[attribute]['required']}\n            value={this.props.specimen.preparation.data[attribute]}\n          />\n        );\n      }\n\n      if (datatype === \"boolean\") {\n      }\n    });\n\n    return specimenProtocolFields;\n  }\n\n  render() {\n\n    let submitButton;\n    if (this.props.data.specimen.preparation) {\n      submitButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    } else {\n      submitButton = (\n        <ButtonElement label=\"Submit\"/>\n      );\n    }\n\n    let specimenProtocolFields;\n    if (this.props.specimen.preparation.protocolId) {\n      let specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.props.specimen.preparation.protocolId];\n\n      if (specimenProtocolFieldsObject) {\n        if (this.props.specimen.preparation.data) {\n          specimenProtocolFields = this.getSpecimenProtocolFields(specimenProtocolFieldsObject);\n        } else {\n          this.addData();\n        }\n      }\n    }\n\n    return (\n      <FormElement\n        name=\"specimenPreparation\"\n        onSubmit={this.props.saveSpecimen}\n        ref=\"form\"\n      >\n        <SelectElement\n          name=\"protocolId\"\n          label=\"Protocol\"\n          options={this.props.specimenProtocols}\n          onUserInput={this.setPreparation}\n          required={true}\n          value={this.props.specimen.preparation.protocolId}\n        />\n        {specimenProtocolFields}\n        <DateElement\n          name=\"date\"\n          label=\"Date\"\n          onUserInput={this.setPreparation}\n          required={true}\n          value={this.props.specimen.preparation.date}\n        />\n        <TimeElement\n          name=\"time\"\n          label=\"Time\"\n          onUserInput={this.setPreparation}\n          required={true}\n          value={this.props.specimen.preparation.time}\n        />\n        <TextareaElement\n          name=\"comments\"\n          label=\"Comments\"\n          onUserInput={this.setPreparation}\n          value={this.props.specimen.preparation.comments}\n        />\n        {submitButton} \n      </FormElement>\n    );\n  }\n\n}\n\nSpecimenPreparationForm.propTypes = {\n}\n\nexport default SpecimenPreparationForm;\n\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/preparationForm.js","import ContainerBarcodeForm from './containerBarcodeForm.js';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankContainerForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formErrors: {},\n      errorMessage: null,\n      containerList: {1: {}},\n      countContainers: 1,\n      collapsed: {1: true},\n      copyMultiplier: 1,\n    };\n\n    this.toggleCollapse = this.toggleCollapse.bind(this);\n    this.addContainer = this.addContainer.bind(this);\n    this.setContainer = this.setContainer.bind(this);\n    this.setCopyMultiplier = this.setCopyMultiplier.bind(this);\n    this.copyContainer = this.copyContainer.bind(this);\n    this.removeContainer = this.removeContainer.bind(this);\n    this.saveContainerList = this.saveContainerList.bind(this);\n  }\n\n  toggleCollapse(key) {\n    let collapsed = this.state.collapsed;\n    collapsed[key] = !collapsed[key];\n    this.setState({collapsed});\n  }\n\n  saveContainerList() {\n    let containerList = this.state.containerList;\n    let availableId = Object.keys(this.props.containerStati).find(\n      key => this.props.containerStati[key] === 'Available'\n    );\n\n    for (let container in containerList) {\n      containerList[container].statusId = availableId;\n      containerList[container].temperature = 20;\n      this.props.save(containerList[container], this.props.saveContainer).then(\n        () => {this.props.refreshParent();}\n      );\n    }\n  }\n\n  setContainer(name, value, key) {\n    this.props.onChange instanceof Function && this.props.onChange();\n    let siteId = this.state.siteId;\n    let containerList = this.state.containerList;\n    if (name === 'siteId') {\n       siteId = value;\n       for (let container in containerList) {\n         containerList[container].originId = siteId;\n         containerList[container].locationId = siteId;\n       }\n    } else {\n      containerList[key][name] = value;\n    }\n    this.setState({containerList, siteId});\n  }\n\n  addContainer() {\n    let containerList = this.state.containerList;\n    let count = this.state.countContainers;\n    let collapsed = this.state.collapsed;\n    let siteId = this.state.siteId;\n    let temperature = 20;\n\n    // get Id of available status\n    let statusId = Object.keys(this.props.containerStati).find(\n      key => this.props.containerStati[key] === 'Available'\n    );\n\n    containerList[count+1] = {\n      statusId: statusId,\n      originId: siteId,\n      locationId: siteId,\n      temperature: temperature\n    };\n\n    collapsed[count+1] = true;  \n\n    this.setState({\n      containerList: containerList,\n      countContainers: count + 1,\n      collapsed: collapsed,\n    });\n  }\n\n  setCopyMultiplier(e) {\n    let copyMultiplier = e.target.value;\n    this.setState({copyMultiplier});\n  }\n\n  copyContainer(key) {\n    let count = this.state.countContainers;\n    let collapsed = this.state.collapsed;\n    let nextKey = count+1;\n    let containerList = this.state.containerList;\n    let multiplier = this.state.copyMultiplier\n\n    for (let i=1; i<=multiplier; i++) {\n      containerList[nextKey] = JSON.parse(JSON.stringify(containerList[key]));\n      delete containerList[nextKey].barcode;\n      collapsed[nextKey] = true;\n      nextKey++;\n    }    \n\n    this.setState({\n      containerList: containerList,\n      countContainers: nextKey,\n      collapsed: collapsed\n    });\n  }\n\n  removeContainer(key) {\n    let containerList = this.state.containerList;\n    delete containerList[key];\n    this.setState({containerList});\n  }\n\n  render() {\n    //Generates new Barcode Form everytime the addContainer button is pressed\n    let containerListArray = Object.keys(this.state.containerList);\n    let containers = [];\n    let i = 1;\n    for (let key of containerListArray) {\n      containers.push(\n        <ContainerBarcodeForm\n          key={key}\n          containerKey={key}\n          id={i}\n          collapsed={this.state.collapsed[key]}\n          toggleCollapse={this.toggleCollapse}\n          container={this.state.containerList[key] || null}\n          removeContainer={containerListArray.length !== 1 ? () => this.removeContainer(key) : null}\n          addContainer={i == containerListArray.length ? this.addContainer : null}\n          setCopyMultiplier={this.setCopyMultiplier}\n          copyMultiplier={this.state.copyMultiplier}\n          copyContainer={i == containerListArray.length && this.state.containerList[key] ? this.copyContainer : null}\n          setContainer={this.setContainer}\n          onChange={this.props.onChange}\n          containerTypesNonPrimary={this.props.containerTypesNonPrimary}\n          containerBarcodesNonPrimary={this.props.containerBarcodesNonPrimary}\n        />\n      );\n     \n      i++;\n    }\n\n    return (\n      <FormElement\n        name=\"containerForm\"\n        onSubmit={this.saveContainerList}\n        ref=\"form\"\n      >\n        <br/>\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <SelectElement\n              name=\"siteId\"\n              label=\"Site\"\n              options={this.props.centers}\n              onUserInput={this.setContainer}\n              required={true}\n              value={this.state.siteId}\n            />\n          </div>\n        </div>\n        {containers}\n          <div className=\"col-xs-3 col-xs-offset-9\">\n            <ButtonElement label=\"Submit\"/>\n          </div>\n      </FormElement>\n    );\n  }\n}\n\nBiobankContainerForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  barcode: React.PropTypes.string,\n  refreshTable: React.PropTypes.func\n};\n\nexport default BiobankContainerForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerForm.js","/**\n * Container Barcode Form\n *\n * Acts a subform for ContainerForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass ContainerBarcodeForm extends React.Component {\n  constructor() {\n    super();\n   \n    this.setContainer = this.setContainer.bind(this);\n    this.copy = this.copy.bind(this);\n  }\n\n  copy() {\n    this.props.copyContainer(this.props.containerKey);\n  }\n\n  //TODO: change form.js so this isn't necessary\n  setContainer(name, value) {\n    this.props.setContainer(name, value, this.props.containerKey);\n  }\n\n  render() {\n    // HR TODO: All this CSS should eventually be moved\n    let addContainerButton;\n    let addContainerText;\n    let copyContainerButton;\n    let copyContainerText;\n    if (this.props.addContainer) {\n      addContainerButton = (\n        <span className='action'>\n          <div\n            className='action-button add'\n            onClick={this.props.addContainer}\n          >\n          +\n          </div>\n        </span>\n      );\n\n      addContainerText = (\n        <span className='action-title'>\n          New Entry\n        </span>\n      );\n    }   \n    \n    if (this.props.copyContainer) {\n      copyContainerButton = ( \n        <span className='action'>\n          <div\n            className='action-button add'\n            onClick={this.copy}\n          >   \n            <span className='glyphicon glyphicon-duplicate'/>\n          </div>\n        </span>\n      );  \n      copyContainerText = ( \n        <span className='action-title'>\n          <input \n            className='form-control input-sm'\n            type='number'\n            min='1'\n            max='50'\n            style={{width: 50, display: 'inline'}}\n            onChange={this.props.setCopyMultiplier}\n            value={this.props.copyMultiplier}\n          />  \n          Copies\n        </span>\n      );  \n    }   \n\n    let removeContainerButton;\n    if (this.props.removeContainer) {\n      const glyphStyle = { \n        color: '#DDDDDD',\n        marginLeft: 10, \n        cursor: 'pointer',\n        fontSize: 15\n      }   \n\n      removeContainerButton = ( \n        <span \n          className='glyphicon glyphicon-remove' \n          onClick={this.props.removeContainer}\n          style={glyphStyle}\n        />\n      );  \n    }\n\n    return (\n      <FormElement\n        name='container'\n      >\n        <div className='row'>\n          <div className='col-xs-11'>\n            <div>\n            <TextboxElement\n              name='barcode'\n              label={'Barcode ' + this.props.id}\n              onUserInput={this.setContainer}\n              ref='barcode'\n              required={true}\n              value={this.props.container.barcode}\n            />\n            </div>\n          </div>\n          <div className='col-xs-1' style={{paddingLeft:0, marginTop:10}}>\n            <span\n              className= {this.props.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up'}\n              style={{cursor: 'pointer', fontSize:15, position:'relative', right:40}}\n              data-toggle='collapse'\n              data-target={'#item-' + this.props.containerKey}\n              onClick={() => this.props.toggleCollapse(this.props.containerKey)}\n            />\n            {removeContainerButton}\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xs-2'/>\n          <div className='col-xs-9'>\n            <div id={'item-' + this.props.containerKey} className='collapse'>\n              <SelectElement\n                name='typeId'\n                label='Container Type'\n                options={this.props.containerTypesNonPrimary}\n                onUserInput={this.setContainer}\n                required={true}\n                value={this.props.container.typeId}\n              />\n            </div>\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xs-11'>\n            <div className='col-xs-3'/>\n            <div className='col-xs-4 action'>\n              {addContainerButton}\n              {addContainerText}\n            </div>\n            <div className='col-xs-4 action'>\n              {copyContainerButton}\n              {copyContainerText}\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n}\n\nContainerBarcodeForm.propTypes = {\n}\n\nexport default ContainerBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerBarcodeForm.js","/**\n * This file contains React components for Tabs component.\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\n/**\n * Tabs Component.\n * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n * and corresponding tab panes.\n *\n * ================================================\n * Usage:\n *\n * 1. Define an array of tabs with IDs and labels\n *\n * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n *\n * 2. Pass tabList as <Tab> property and <TabPane> as child\n *  ```\n * <Tabs tabs={tabList} defaultTab=\"tab1\">\n *   <TabPane TabId={tabList[0].id}>\n *     // Tab content goes here\n *   </TabPane>\n * </Tabs>\n * ```\n * =================================================\n *\n */\nclass Tabs extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    const hash = window.location.hash;\n    let activeTab = \"\";\n\n    /**\n     * Determine the initial active tab in this order\n     * 1. Try to infer from the URL, otherwise\n     * 2. Try to infer from the defaultTab prop, otherwise\n     * 3. Set to be the first tab of the list\n     */\n    if (this.props.updateURL && hash) {\n      activeTab = hash.substr(1);\n    } else if (this.props.defaultTab) {\n      activeTab = this.props.defaultTab;\n    } else if (this.props.tabs.length > 0) {\n      activeTab = this.props.tabs[0].id;\n    }\n\n    this.state = {\n      activeTab: activeTab\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.getTabs = this.getTabs.bind(this);\n    this.getTabPanes = this.getTabPanes.bind(this);\n  }\n\n  handleClick(tabId, e) {\n    this.setState({activeTab: tabId});\n    this.props.onTabChange(tabId);\n\n    // Add tab href to URL querystring and scroll the page to top\n    if (this.props.updateURL) {\n      const scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n      window.location.hash = e.target.hash;\n      $('html,body').scrollTop(scrollDistance);\n    }\n  }\n\n  getTabs() {\n    let tabs = (this.props.tabs).map(function(tab) {\n      let tabClass = this.state.activeTab === tab.id ? 'active' : null;\n      let href = \"#\" + tab.id;\n      let tabID = \"tab-\" + tab.id;\n      return (\n        <li\n          role=\"presentation\"\n          className={tabClass}\n          key={tab.id}\n        >\n          <a id={tabID}\n             href={href}\n             role=\"tab\"\n             data-toggle=\"tab\"\n             onClick={this.handleClick.bind(null, tab.id)}\n          >\n            {tab.label}\n          </a>\n        </li>\n      );\n    }.bind(this));\n\n    return tabs;\n  }\n\n  getTabPanes() {\n    let tabPanes = React.Children.map(this.props.children, function(child, key) {\n      if (child) {\n        return React.cloneElement(child, {\n          activeTab: this.state.activeTab,\n          key: key\n        });\n      }\n    }.bind(this));\n\n    return tabPanes;\n  }\n\n  render() {\n    let tabs = this.getTabs();\n    let tabPanes = this.getTabPanes();\n    let tabStyle = {\n      marginLeft: 0,\n      marginBottom: '5px'\n    };\n\n    return (\n      <div>\n        <ul className=\"nav nav-tabs\" role=\"tablist\" style={tabStyle}>\n          {tabs}\n        </ul>\n        <div className=\"tab-content\">\n          {tabPanes}\n        </div>\n      </div>\n    );\n  }\n}\nTabs.propTypes = {\n  tabs: React.PropTypes.array.isRequired,\n  defaultTab: React.PropTypes.string,\n  updateURL: React.PropTypes.bool\n};\nTabs.defaultProps = {\n  onTabChange: function() {},\n  // Set updateURL to default to true but allow for change\n  // Nested tabs should set this variable to false\n  updateURL: true\n};\n\n/**\n * Allows to dynamically render vertical tabs corresponding to tab panes.\n */\n\nclass VerticalTabs extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const hash = window.location.hash;\n    let activeTab = \"\";\n\n    /**\n     * Determine the initial active tab in this order\n     * 1. Try to infer from the URL, otherwise\n     * 2. Try to infer from the defaultTab prop, otherwise\n     * 3. Set to be the first tab of the list\n     */\n    if (this.props.updateURL && hash) {\n      activeTab = hash.substr(1);\n    } else if (this.props.defaultTab) {\n      activeTab = this.props.defaultTab;\n    } else if (this.props.tabs.length > 0) {\n      activeTab = this.props.tabs[0].id;\n    }\n\n    this.state = {\n      activeTab: activeTab\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.getTabs = this.getTabs.bind(this);\n    this.getTabPanes = this.getTabPanes.bind(this);\n  }\n\n  handleClick(tabId, e) {\n    this.setState({activeTab: tabId});\n    this.props.onTabChange(tabId);\n\n    // Add tab href to URL querystring and scroll the page to top\n    if (this.props.updateURL) {\n      const scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n      window.location.hash = e.target.hash;\n      $('html,body').scrollTop(scrollDistance);\n    }\n  }\n\n  getTabs() {\n    let tabs = (this.props.tabs).map(function(tab) {\n      let tabClass = this.state.activeTab === tab.id ? 'active' : null;\n      let href = \"#\" + tab.id;\n      let tabID = \"tab-\" + tab.id;\n      return (\n        <li\n          role=\"presentation\"\n          className={tabClass}\n          key={tab.id}\n        >\n          <a id={tabID}\n             href={href}\n             role=\"tab\"\n             data-toggle=\"tab\"\n             onClick={this.handleClick.bind(null, tab.id)}\n          >\n            {tab.label}\n          </a>\n        </li>\n      );\n    }.bind(this));\n\n    return tabs;\n  }\n\n  getTabPanes() {\n    let tabPanes = React.Children.map(this.props.children, function(child, key) {\n      if (child) {\n        return React.cloneElement(child, {\n          activeTab: this.state.activeTab,\n          key: key\n        });\n      }\n    }.bind(this));\n\n    return tabPanes;\n  }\n\n  render() {\n    let tabs = this.getTabs();\n    let tabPanes = this.getTabPanes();\n    let tabStyle = {\n      marginLeft: 0,\n      marginBottom: '5px'\n    };\n\n    return (\n      <div>\n        <div className=\"tabbable col-md-3 col-sm-3\">\n          <ul className=\"nav nav-pills nav-stacked\" role=\"tablist\" style={tabStyle}>\n            {tabs}\n          </ul>\n        </div>\n        <div className=\"tab-content col-md-9 col-sm-9\">\n          {tabPanes}\n        </div>\n      </div>\n    );\n  }\n}\nVerticalTabs.propTypes = {\n  tabs: React.PropTypes.array.isRequired,\n  defaultTab: React.PropTypes.string,\n  updateURL: React.PropTypes.bool\n};\nVerticalTabs.defaultProps = {\n  onTabChange: function() {},\n  // Set updateURL to default to true but allow for change\n  // Nested tabs should set this variable to false\n  updateURL: true\n};\n\n/*\n * TabPane component.\n * Used to wrap content for every tab.\n */\nclass TabPane extends React.Component {\n  render() {\n    let classList = \"tab-pane\";\n    let title;\n\n    if (this.props.TabId === this.props.activeTab) {\n      classList += \" active\";\n    }\n    if (this.props.Title) {\n      title = <h1>{this.props.Title}</h1>;\n    }\n\n    return (\n      <div role=\"tabpanel\" className={classList} id={this.props.TabId}>\n        {title}\n        {this.props.children}\n      </div>\n    );\n  }\n}\nTabPane.propTypes = {\n  TabId: React.PropTypes.string.isRequired,\n  Title: React.PropTypes.string,\n  activeTab: React.PropTypes.string\n};\n\nexport {\n  Tabs,\n  VerticalTabs,\n  TabPane\n};\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Tabs.js","/**\n * This file contains React components for Modal component.\n *\n * @author Henri Rabalais\n * @version 1.1.0\n *\n */\n\nimport Modal from './Modal';\n\n/**\n * Modal Component.\n * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n *\n * ================================================\n * Usage:\n *\n * =================================================\n *\n */\n\nclass FormModal extends React.Component {\n  constructor() {\n    super();\n    this.closeModal = this.closeModal.bind(this);\n    this.confirmClose = this.confirmClose.bind(this);\n  }\n\n  closeModal() {\n    this.props.closeAction instanceof Function && this.props.closeAction();\n    this.props.toggleModal();\n  }\n\n  confirmClose() {\n    if (this.props.throwWarning) {\n      swal({\n        title: \"Are You Sure?\",\n        text: \"Leaving the form will result in the loss of any information entered.\",\n        type: \"warning\",\n        showCancelButton: true,\n        confirmButtonText: 'Proceed',\n        cancelButtonText: 'Cancel',\n      },\n      function() {\n        this.closeModal();\n      }.bind(this));\n    } else {\n      this.closeModal();\n    }\n  }\n\n  render() {\n    return (\n      <Modal \n        closeModal={this.confirmClose} \n        show={this.props.show}\n        {...this.props} \n      >\n        {this.props.children}\n      </Modal>\n    );\n  }\n}\n\nFormModal.propTypes = {\n  closeAction: React.PropTypes.func,\n  togglemodal: React.PropTypes.func.isRequired,\n  throwWarning: React.PropTypes.bool.isRequired,\n};\n\nFormModal.defaultProps = {\n  throwWarning: true,\n}\n\nexport default FormModal;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/FormModal.js","/**\n * This file contains React components for Modal component.\n *\n * @author Henri Rabalais\n * @version 1.1.0\n *\n */\n\n/**\n * Modal Component.\n * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n *\n * ================================================\n * Usage:\n *\n * =================================================\n *\n */\nclass Modal extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n  }\n\n  render() {\n    // Black Background with Alpha Channel\n    const backdropStyle = {\n      position: 'fixed',\n      zIndex: 9998,\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundColor: 'rgba(0,0,0,0.3)',\n      padding: 50\n    };\n\n    // White Modal Window\n    const modalStyle = {\n      position: 'relative',\n      maxWidth: 1000,\n      maxHeight: '100%',\n      margin: '0 auto',\n      backgroundColor: '#fff',\n      borderRadius: 10,\n      overflowY: 'auto',\n      zIndex: 9999\n    };\n\n    const titleStyle = {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      background: '#093782',\n      height: '70px',\n      borderTopRightRadius: '10',\n      color: '#FFFFFF',\n      fontSize: 24,\n      padding: 20,\n    }\n\n    const glyphStyle = {\n      marginLeft: 'auto',\n      cursor: 'pointer'\n    }\n\n    const bodyStyle = {\n      padding: 15\n    }\n  \n    let modal;\n    if (this.props.show) {\n      modal = (\n        <div style={backdropStyle} onClick={this.props.closeModal}>\n          <div\n            style={modalStyle}\n            onClick={e => {\n              e.stopPropagation();\n            }}\n          >\n            <div\n              style={titleStyle}\n            >\n              {this.props.title}\n              <span \n                style={glyphStyle}\n                onClick={this.props.closeModal}\n              >\n                ×\n              </span>\n            </div>\n            <div\n              style={bodyStyle}\n            >\n              {this.props.children}\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {modal}\n      </div>\n    );\n  }\n}\n\nModal.propTypes = {\n  title: React.PropTypes.string,\n  show: React.PropTypes.bool.isRequired,\n  closeModal: React.PropTypes.func,\n  openModal: React.PropTypes.func\n};\n\nexport default Modal;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Modal.js","/**\n * This file contains React component for Loader\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n */\n\n/**\n * Loader component\n */\nclass Loader extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n\n    return (\n      <div className='loader-container'>\n        <div className=\"loader\"/>\n      </div>\n\n\n    );\n  }\n}\n\nexport default Loader;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Loader.js"],"sourceRoot":""}