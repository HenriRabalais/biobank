{"version":3,"sources":["webpack:///modules/biobank/js/biobankIndex.js","webpack:///webpack/bootstrap b6b4a650b31a4d88147b?f715*******","webpack:///./modules/biobank/jsx/biobankIndex.js","webpack:///./jsx/FilterForm.js","webpack:///./jsx/Panel.js","webpack:///./modules/biobank/jsx/specimenForm.js","webpack:///./modules/biobank/jsx/barcodeForm.js","webpack:///./modules/biobank/jsx/collectionForm.js","webpack:///./modules/biobank/jsx/containerParentForm.js","webpack:///./modules/biobank/jsx/containerDisplay.js","webpack:///./modules/biobank/jsx/poolSpecimenForm.js","webpack:///./modules/biobank/jsx/preparationForm.js","webpack:///./modules/biobank/jsx/containerForm.js","webpack:///./modules/biobank/jsx/containerBarcodeForm.js","webpack:///./jsx/Tabs.js","webpack:///./jsx/FormModal.js","webpack:///./jsx/Modal.js","webpack:///./jsx/Loader.js","webpack:///./modules/biobank/jsx/columnFormatterSpecimen.js","webpack:///./modules/biobank/jsx/columnFormatterContainer.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","_FilterForm","_FilterForm2","_specimenForm","_specimenForm2","_poolSpecimenForm","_poolSpecimenForm2","_containerForm","_containerForm2","_Tabs","_FormModal","_FormModal2","_Loader","_Loader2","_columnFormatterSpecimen","_columnFormatterSpecimen2","_columnFormatterContainer","_columnFormatterContainer2","BiobankIndex","_React$Component","this","_this","getPrototypeOf","state","isLoaded","specimenFilter","containerFilter","isOpen","formOptions","loadPage","bind","fetchSpecimenData","fetchFormOptions","fetchContainerData","updateSpecimenFilter","updateContainerFilter","resetFilters","mapFormOptions","$","ajax","specimenDataURL","method","dataType","success","data","setState","specimenData","error","console","containerDataURL","containerData","formDataURL","refs","biobankFilter","clearFilter","rawObject","targetAttribute","React","createElement","addSpecimenButton","poolSpecimenButton","addContainerButton","loris","userHasPermission","containerTypesPrimary","containerStati","candidates","sessions","title","buttonClass","buttonContent","style","display","candidateSessions","sessionCenters","specimenTypes","specimenTypeUnits","specimenTypeAttributes","attributeOptions","attributeDatatypes","containersNonPrimary","containerDimensions","containerCoordinates","refreshParent","saveBarcodeList","BaseURL","poolSpecimenButtonContent","className","specimenProtocols","specimenProtocolAttributes","capacities","specimenUnits","specimenRequest","saveSpecimen","saveContainer","containerTypesNonPrimary","centers","tabList","label","Tabs","tabs","defaultTab","updateURL","TabPane","TabId","Module","name","ref","columns","formElements","form","onUpdate","filter","StaticElement","ButtonElement","type","onUserInput","StaticDataTable","Data","Headers","Filter","getFormattedCell","Component","biobankIndex","ReactDOM","render","document","getElementById","_typeof","Symbol","iterator","_Panel","_Panel2","FilterForm","getFormChildren","setFilter","onElementUpdate","queryString","QueryString","get","keys","forEach","filterKey","exactMatch","clear","formChildren","Children","children","child","isValidElement","callbackFunc","callbackName","elementName","displayName","queryFieldName","filterValue","push","cloneElement","JSON","parse","stringify","fieldName","fieldValue","set","height","FormElement","defaultProps","warn","propTypes","PropTypes","string","isRequired","object","func","Panel","collapsed","initCollapsed","panelClass","toggleCollapsed","glyphClass","pencilGlyph","edit","marginRight","cursor","onClick","plusGlyph","add","removeGlyph","cancel","panelHeading","data-toggle","data-target","role","_barcodeForm","_barcodeForm2","BiobankSpecimenForm","formErrors","errorMessage","candidateId","sessionId","centerId","barcodeList","1","specimen","collection","container","count","copyMultiplier","toggleCollapse","setSpecimen","setContainer","addBarcode","setCopyMultiplier","copyBarcode","removeBarcode","save","_this2","availableId","find","barcode","statusId","temperature","locationId","originId","quantity","unitId","typeId","freezeThaw","fTCycle","candidate","CandID","session","ID","parentSpecimenId","log","then","onSuccess","url","_this3","Promise","resolve","cache","swal","err","textStatus","errorThrown","msg","responseJSON","message","onChange","Function","e","nextKey","multiplier","_this4","barcodeListArray","barcodes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","barcodeKey","units","_iterator","next","done","return","globalFields","remainingQuantityFields","text","PSCID","Visit_label","TextboxElement","setSpecimenData","required","SelectElement","options","emptyOption","placeHolder","disabled","onSubmit","columnSize","_collectionForm","_collectionForm2","_containerParentForm","_containerParentForm2","SpecimenBarcodeForm","copy","addBarcodeButton","addBarcodeText","copyBarcodeButton","copyBarcodeText","min","max","width","removeBarcodeButton","glyphStyle","color","marginLeft","fontSize","parentTypeId","paddingLeft","marginTop","position","right","setContainerData","SpecimenCollectionForm","getSpecimenTypeFields","setCollectionData","addData","setData","fieldsObject","specimenTypeFields","map","attribute","datatype","DateElement","updateButton","unit","specimenTypeFieldsObject","specimenFields","minYear","maxYear","date","TimeElement","time","TextareaElement","comments","_containerDisplay","_containerDisplay2","ContainerParentForm","apply","arguments","containerDisplay","containerBarcodesNonPrimary","parentContainerField","parentContainerId","dimensionId","dimensions","coordinatesTotal","dimension","coordinates","containerTypes","select","selectedCoordinate","coordinate","ContainerDisplay","redirectURL","drag","drop","tooltip","types","primary","window","location","href","preventDefault","dataTransfer","getData","newCoordinate","parseInt","saveChildContainer","column","row","y","x","nodeWidth","nodeStyle","nodeClass","tooltipTitle","dataHtml","dataToggle","dataPlacement","draggable","onDragStart","onDragOver","allowDrop","onDrop","status","coordinateDisplay","data-html","data-placement","data-original-title","rowHeight","rowStyle","_preparationForm","_preparationForm2","PoolSpecimenForm","formData","barcodeCount","preparation","step","handleSubmit","validateForm","setFormData","setPreparationFormData","setSpecimenFormData","submitForm","setBarcodeCount","previous","addPreparation","removePreparation","validate","formSwitch","preparationSwitch","runAjax","poolData","responseText","inputData","reject","field","inputForm","specimenForm","preparationButton","preparationForm","setParentFormData","insertAction","NumericElement","pscid","pSCIDs","visit","sessionData","visits","barcodesArray","values","barcodesString","join","parentSpecimenBarcodes","parentSpecimenIds","specimenIds","action","formElement","_this5","test","isNaN","currentContainerType","currentSpecimenType","formObj","FormData","append","contentType","processData","xhr","XMLHttpRequest","isValidForm","formRefs","requiredFields","visitLabel","hasError","forceUpdate","preparationFormData","specimenFormData","DataURL","refreshTable","SpecimenPreparationForm","getSpecimenProtocolFields","setPreparation","specimenProtocolFields","submitButton","protocolId","specimenProtocolFieldsObject","_containerBarcodeForm","_containerBarcodeForm2","BiobankContainerForm","containerList","countContainers","addContainer","copyContainer","removeContainer","saveContainerList","onSucces","siteId","containerListArray","containers","containerKey","ContainerBarcodeForm","addContainerText","copyContainerButton","copyContainerText","removeContainerButton","hash","activeTab","substr","handleClick","getTabs","getTabPanes","tabId","onTabChange","scrollDistance","scrollTop","tab","tabClass","tabID","tabPanes","tabStyle","marginBottom","array","bool","VerticalTabs","_React$Component2","_React$Component3","classList","Title","_extends","assign","source","hasOwnProperty","_Modal","_Modal2","FormModal","show","throwWarning","openModal","closeModal","confirmClose","setWarning","showCancelButton","confirmButtonText","cancelButtonText","renderChildren","buttonStyle","Modal","modal","backdropStyle","zIndex","top","bottom","left","backgroundColor","padding","modalStyle","maxWidth","maxHeight","margin","borderRadius","overflowY","titleStyle","flexDirection","alignItems","background","borderTopRightRadius","bodyStyle","button","stopPropagation","boolean","Loader","formatColumn","cell","rowData","rowHeaders","header","index","classes","specimenURL","containerURL"],"mappings":"CAAS,SAAUA,SCInB,QAAAC,qBAAAC,UAGA,GAAAC,iBAAAD,UACA,MAAAC,kBAAAD,UAAAE,OAGA,IAAAC,QAAAF,iBAAAD,WACAE,WACAE,GAAAJ,SACAK,QAAA,EAUA,OANAP,SAAAE,UAAAM,KAAAH,OAAAD,QAAAC,cAAAD,QAAAH,qBAGAI,OAAAE,QAAA,EAGAF,OAAAD,QAvBA,GAAAD,oBAqCA,OATAF,qBAAAQ,EAAAT,QAGAC,oBAAAS,EAAAP,iBAGAF,oBAAAU,EAAA,GAGAV,oBAAA,KDMM,SAASI,OAAQD,QAASH,qBAE/B,YAsCA,SAASW,wBAAuBC,KAAO,MAAOA,MAAOA,IAAIC,WAAaD,KAAQE,QAASF,KAEvF,QAASG,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YA1Cje,GAAIW,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBEhDjiB6B,YAAA9C,oBAAA,GFoDK+C,aAAepC,uBAAuBmC,aEnD3CE,cAAAhD,oBAAA,GFuDKiD,eAAiBtC,uBAAuBqC,eEtD7CE,kBAAAlD,oBAAA,GF0DKmD,mBAAqBxC,uBAAuBuC,mBEzDjDE,eAAApD,oBAAA,IF6DKqD,gBAAkB1C,uBAAuByC,gBE5D9CE,MAAAtD,oBAAA,IACAuD,WAAAvD,oBAAA,IFiEKwD,YAAc7C,uBAAuB4C,YEhE1CE,QAAAzD,oBAAA,IFoEK0D,SAAW/C,uBAAuB8C,SEnEvCE,yBAAA3D,oBAAA,IFuEK4D,0BAA4BjD,uBAAuBgD,0BEtExDE,0BAAA7D,oBAAA,IF0EK8D,2BAA6BnD,uBAAuBkD,2BExEnDE,aFkFc,SAAUC,kBEhF5B,QAAAD,gBAAchD,gBAAAkD,KAAAF,aAAA,IAAAG,OAAA/C,2BAAA8C,MAAAF,aAAA7B,WAAAR,OAAAyC,eAAAJ,eAAAxD,KAAA0D,MAAA,OAGZC,OAAKE,OACHC,UAAU,EACVC,kBACAC,mBACAC,QAAQ,EACRC,gBAIFP,MAAKQ,SAAWR,MAAKQ,SAASC,KAAdT,OAChBA,MAAKU,kBAAoBV,MAAKU,kBAAkBD,KAAvBT,OACzBA,MAAKW,iBAAmBX,MAAKW,iBAAiBF,KAAtBT,OACxBA,MAAKY,mBAAqBZ,MAAKY,mBAAmBH,KAAxBT,OAC1BA,MAAKa,qBAAuBb,MAAKa,qBAAqBJ,KAA1BT,OAC5BA,MAAKc,sBAAwBd,MAAKc,sBAAsBL,KAA3BT,OAC7BA,MAAKe,aAAef,MAAKe,aAAaN,KAAlBT,OACpBA,MAAKgB,eAAiBhB,MAAKgB,eAAeP,KAApBT,OAnBVA,MFubb,MAtWA5C,WAAUyC,aAAcC,kBA2BxB7B,aAAa4B,eACXpB,IAAK,oBACLd,MAAO,WEvFRoC,KAAKS,cF2FJ/B,IAAK,WACLd,MAAO,WExFRoC,KAAKW,oBACLX,KAAKY,mBACLZ,KAAKa,wBFmGJnC,IAAK,oBACLd,MAAO,WE3FRsD,EAAEC,KAAKnB,KAAK3B,MAAM+C,iBAChBC,OAAQ,MACRC,SAAU,OACVC,QAAS,SAASC,MAChBxB,KAAKyB,UACHC,aAAcF,KACdpB,UAAU,KAEZM,KAAKV,MACP2B,MAAO,SAASA,QACdC,QAAQD,MAAMA,cFiGjBjD,IAAK,qBACLd,MAAO,WE5FRsD,EAAEC,KAAKnB,KAAK3B,MAAMwD,kBAChBR,OAAQ,MACRC,SAAU,OACVC,QAAS,SAASC,MAChBxB,KAAKyB,UACHK,cAAeN,KACfpB,UAAU,KAEZM,KAAKV,MACP2B,MAAO,SAASA,SACdC,QAAQD,MAAMA,eFkGjBjD,IAAK,mBACLd,MAAO,WE7FRsD,EAAEC,KAAKnB,KAAK3B,MAAM0D,aAChBV,OAAQ,MACRC,SAAU,OACVC,QAAS,SAASC,MAChBxB,KAAKyB,UACHjB,YAAagB,KACbpB,UAAU,KAEZM,KAAKV,MACP2B,MAAO,SAASA,SACdC,QAAQD,MAAMA,eFmGjBjD,IAAK,uBACLd,MAAO,SE/FWyC,gBACnBL,KAAKyB,UAAUpB,mCFsGd3B,IAAK,wBACLd,MAAO,SElGY0C,iBACpBN,KAAKyB,UAAUnB,qCFqGd5B,IAAK,eACLd,MAAO,WElGRoC,KAAKgC,KAAKC,cAAcC,iBFyGvBxD,IAAK,iBACLd,MAAO,SEtGKuE,UAAWC,iBACxB,GAAIZ,QACJ,KAAK,GAAIpF,MAAM+F,WACbX,KAAKpF,IAAM+F,UAAU/F,IAAIgG,gBAG3B,OAAOZ,SFyGN9C,IAAK,SACLd,MAAO,WErGR,IAAKoC,KAAKG,MAAMC,SACd,MACEiC,OAAAC,cAAA7C,SAAA5C,QAAA,KAIJ,IAAI0F,0BACAC,0BACAC,yBACJ,IAAIC,MAAMC,kBAAkB,iBAAkB,CAK3C,GAAIC,uBAAwB5C,KAAKiB,eAAejB,KAAKG,MAAMK,YAAYoC,sBAAuB,SAC1FC,eAAiB7C,KAAKiB,eAAejB,KAAKG,MAAMK,YAAYqC,eAAgB,UAC5EC,WAAa9C,KAAKiB,eAAejB,KAAKG,MAAMK,YAAYsC,WAAY,SACpEC,SAAW/C,KAAKiB,eAAejB,KAAKG,MAAMK,YAAYuC,SAAU,QAEpER,mBACEF,MAAAC,cAAA/C,YAAA1C,SACEmG,MAAM,mBACNC,YAAY,oBACZC,cAAc,IACdC,OAAQC,QAAQ,iBAEhBf,MAAAC,cAAAtD,eAAAnC,SACEiG,WAAYA,WACZC,SAAUA,SACVM,kBAAmBrD,KAAKG,MAAMK,YAAY6C,kBAC1CC,eAAgBtD,KAAKG,MAAMK,YAAY8C,eACvCC,cAAevD,KAAKG,MAAMK,YAAY+C,cACtCC,kBAAmBxD,KAAKG,MAAMK,YAAYgD,kBAC1CC,uBAAwBzD,KAAKG,MAAMK,YAAYiD,uBAC/CC,iBAAkB1D,KAAKG,MAAMK,YAAYkD,iBACzCC,mBAAoB3D,KAAKG,MAAMK,YAAYmD,mBAC3Cf,sBAAuBA,sBACvBgB,qBAAsB5D,KAAKG,MAAMK,YAAYoD,qBAC7CC,oBAAqB7D,KAAKG,MAAMK,YAAYqD,oBAC5CC,qBAAsB9D,KAAKG,MAAMK,YAAYsD,qBAC7CjB,eAAgBA,eAChBkB,cAAe/D,KAAKS,SACpBQ,eAAgBjB,KAAKiB,eACrB+C,gBAAoBtB,MAAMuB,QAA1B,wDAKN,IAAIC,2BACF7B,MAAAC,cAAA,QAAM6B,UAAU,oCAGlB3B,oBACEH,MAAAC,cAAA/C,YAAA1C,SACEmG,MAAM,iBACNC,YAAY,qBACZC,cAAegB,0BACff,OAAQC,QAAQ,iBAEhBf,MAAAC,cAAApD,mBAAArC,SACE0G,cAAevD,KAAKG,MAAMK,YAAY+C,cACtCX,sBAAuBA,sBACvBgB,qBAAsB5D,KAAKG,MAAMK,YAAYoD,qBAC7CH,uBAAwBzD,KAAKG,MAAMK,YAAYiD,uBAC/CW,kBAAmBpE,KAAKG,MAAMK,YAAY4D,kBAC1CC,2BAA4BrE,KAAKG,MAAMK,YAAY6D,2BACnDV,mBAAoB3D,KAAKG,MAAMK,YAAYmD,mBAC3CD,iBAAkB1D,KAAKG,MAAMK,YAAYkD,iBACzCY,WAAYtE,KAAKG,MAAMK,YAAY8D,WACnCT,oBAAqB7D,KAAKG,MAAMK,YAAYqD,oBAC5CC,qBAAsB9D,KAAKG,MAAMK,YAAYsD,qBAC7CN,kBAAmBxD,KAAKG,MAAMK,YAAYgD,kBAC1Ce,cAAevE,KAAKG,MAAMK,YAAY+D,cACtCzB,WAAYA,WACZO,kBAAmBrD,KAAKG,MAAMK,YAAY6C,kBAC1CC,eAAgBtD,KAAKG,MAAMK,YAAY8C,eACvCkB,gBAAoB9B,MAAMuB,QAA1B,kEACAF,cAAe/D,KAAKS,SACpBQ,eAAgBjB,KAAKiB,eACrBwD,aAAiB/B,MAAMuB,QAAvB,mDACAS,cAAkBhC,MAAMuB,QAAxB,sDAKN,IAAIU,0BAA2B3E,KAAKiB,eAAejB,KAAKG,MAAMK,YAAYmE,yBAA0B,QAEpGlC,oBACEJ,MAAAC,cAAA/C,YAAA1C,SACEmG,MAAM,oBACNC,YAAY,oBACZC,cAAc,IACdC,OAAQC,QAAQ,iBAEhBf,MAAAC,cAAAlD,gBAAAvC,SACE8H,yBAA0BA,yBAC1BC,QAAS5E,KAAKG,MAAMK,YAAYoE,QAChC/B,eAAgBA,eAChBkB,cAAe/D,KAAKS,SACpBiE,cAAkBhC,MAAMuB,QAAxB,uDAOT,GAAIY,WACDzI,GAAI,YAAa0I,MAAO,cACxB1I,GAAI,aAAc0I,MAAO,cAG5B,OACAzC,OAAAC,cAAA,OAAKlG,GAAG,gBACNiG,MAAAC,cAAAjD,MAAA0F,MAAMC,KAAMH,QAASI,WAAW,YAAYC,WAAW,GACrD7C,MAAAC,cAAAjD,MAAA8F,SAASC,MAAOP,QAAQ,GAAGzI,IACzBiG,MAAAC,cAAA,OAAK6B,UAAU,OACb9B,MAAAC,cAAA,OAAK6B,UAAU,aACb9B,MAAAC,cAAAxD,aAAAjC,SACEwI,OAAO,UACPC,KAAK,kBACLlJ,GAAG,kBACHmJ,IAAI,iBACJC,QAAS,EACTC,aAAczF,KAAKG,MAAMuB,aAAagE,KACtCC,SAAU3F,KAAKc,qBACf8E,OAAQ5F,KAAKG,MAAME,gBAEnBgC,MAAAC,cAAA,WACAD,MAAAC,cAACuD,cAAD,MACAxD,MAAAC,cAACuD,cAAD,MACAxD,MAAAC,cAACwD,eAAchB,MAAM,gBAAgBiB,KAAK,QAAQC,YAAahG,KAAKgB,iBAGxEqB,MAAAC,cAAA,OAAK6B,UAAU,YACb9B,MAAAC,cAAA,QAAM6B,UAAU,UACb5B,kBACDF,MAAAC,cAAA,OAAK6B,UAAU,gBAAf,iBAIF9B,MAAAC,cAAA,WAAKD,MAAAC,cAAA,WACLD,MAAAC,cAAA,QAAM6B,UAAU,UACb3B,mBACDH,MAAAC,cAAA,OAAK6B,UAAU,gBAAf,qBAMN9B,MAAAC,cAAC2D,iBACCC,KAAMlG,KAAKG,MAAMuB,aAAawE,KAC9BC,QAASnG,KAAKG,MAAMuB,aAAayE,QACjCC,OAAQpG,KAAKG,MAAME,eACnBgG,iBAAA1G,0BAAA9C,WAGJwF,MAAAC,cAAAjD,MAAA8F,SAASC,MAAOP,QAAQ,GAAGzI,IACzBiG,MAAAC,cAAA,OAAK6B,UAAU,OACb9B,MAAAC,cAAA,OAAK6B,UAAU,aACb9B,MAAAC,cAAAxD,aAAAjC,SACEwI,OAAO,UACPC,KAAK,mBACLlJ,GAAG,mBACHmJ,IAAI,kBACJC,QAAS,EACTC,aAAczF,KAAKG,MAAM2B,cAAc4D,KACvCC,SAAU3F,KAAKe,sBACf6E,OAAQ5F,KAAKG,MAAMG,iBAEnB+B,MAAAC,cAAA,WACAD,MAAAC,cAACuD,cAAD,MACAxD,MAAAC,cAACuD,cAAD,MACAxD,MAAAC,cAACwD,eAAchB,MAAM,gBAAgBiB,KAAK,QAAQC,YAAahG,KAAKgB,iBAGxEqB,MAAAC,cAAA,OAAK6B,UAAU,YACb9B,MAAAC,cAAA,QAAM6B,UAAU,UACb1B,mBACDJ,MAAAC,cAAA,OAAK6B,UAAU,gBAAf,oBAMN9B,MAAAC,cAAC2D,iBACCC,KAAMlG,KAAKG,MAAM2B,cAAcoE,KAC/BC,QAASnG,KAAKG,MAAM2B,cAAcqE,QAClCC,OAAQpG,KAAKG,MAAMG,gBACnB+F,iBAAAxG,2BAAAhD,iBF4IFiD,cEzbiBuC,MAAMiE,UAsTjCpF,GAAE,WACA,GAAMqF,cACJlE,MAAAC,cAAA,OAAK6B,UAAU,gBACb9B,MAAAC,cAACxC,cACCsB,gBAAoBsB,MAAMuB,QAA1B,wBACApC,iBAAqBa,MAAMuB,QAA3B,8DACAlC,YAAgBW,MAAMuB,QAAtB,wDAKNuC,UAASC,OAAOF,aAAcG,SAASC,eAAe,sBF2IlD,SAASxK,OAAQD,QAASH,qBAE/B,YAcA,SAASW,wBAAuBC,KAAO,MAAOA,MAAOA,IAAIC,WAAaD,KAAQE,QAASF,KAEvF,QAASG,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAlBjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIgJ,SAA4B,kBAAXC,SAAoD,gBAApBA,QAAOC,SAAwB,SAAUnK,KAAO,aAAcA,MAAS,SAAUA,KAAO,MAAOA,MAAyB,kBAAXkK,SAAyBlK,IAAIgB,cAAgBkJ,QAAUlK,MAAQkK,OAAOrJ,UAAY,eAAkBb,MAElQuB,aAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBGxdjiB+J,OAAAhL,oBAAA,GH4dKiL,QAAUtK,uBAAuBqK,QG5chCE,WH0eY,SAAUlH,kBGxe1B,QAAAkH,YAAY5I,OAAOvB,gBAAAkD,KAAAiH,WAAA,IAAAhH,OAAA/C,2BAAA8C,MAAAiH,WAAAhJ,WAAAR,OAAAyC,eAAA+G,aAAA3K,KAAA0D,KACX3B,OADW,OAIjB4B,OAAKiC,YAAcjC,MAAKiC,YAAYxB,KAAjBT,OACnBA,MAAKiH,gBAAkBjH,MAAKiH,gBAAgBxG,KAArBT,OACvBA,MAAKkH,UAAYlH,MAAKkH,UAAUzG,KAAfT,OACjBA,MAAKmH,gBAAkBnH,MAAKmH,gBAAgB1G,KAArBT,OAIvBA,MAAKoH,YAAcC,YAAYC,MAXdtH,MHiqBlB,MAxLA5C,WAAU4J,WAAYlH,kBAmBtB7B,aAAa+I,aACXvI,IAAK,oBACLd,MAAO,WG/eR,GAAIgI,WACAyB,YAAcrH,KAAKqH,WAGvB5J,QAAO+J,KAAKH,aAAaI,QAAQ,SAAS/I,KACxC,GAAIgJ,WAAqB,gBAARhJ,IAAyB,SAAWA,GACrDkH,QAAO8B,YACL9J,MAAOyJ,YAAY3I,KACnBiJ,YAAY,KAKhB3H,KAAK3B,MAAMsH,SAASC,WHwfnBlH,IAAK,cACLd,MAAO,WGlfRoC,KAAKqH,YAAcC,YAAYM,MAAM5H,KAAK3B,MAAMgH,QAChDrF,KAAK3B,MAAMsH,gBH8fVjH,IAAK,kBACLd,MAAO,WGrfR,GAAIiK,gBAkCJ,OAjCAxF,OAAMyF,SAASL,QAAQzH,KAAK3B,MAAM0J,SAAU,SAASC,MAAOtJ,KAE1D,GAAI2D,MAAM4F,eAAeD,QACD,kBAAfA,OAAMjC,MACbiC,MAAM3J,MAAM2H,YACZ,CACA,GAAIkC,cAAeF,MAAM3J,MAAM2H,YAC3BmC,aAAeD,aAAa5C,KAC5B8C,YAAcJ,MAAMjC,KAAKsC,YACzBC,eAAuC,WAArBN,MAAM3J,MAAMiH,KAAqB,cAAgB0C,MAAM3J,MAAMiH,KAC/EiD,YAAcvI,KAAKqH,YAAYiB,eAGd,iBAAjBH,eAEAD,aADkB,kBAAhBE,aAAwD,UAArBJ,MAAM3J,MAAM0H,KAClC/F,KAAKkC,YAELlC,KAAKoH,gBAAgB1G,KAAK,KAAM0H,cAInDP,aAAaW,KAAKnG,MAAMoG,aAAaT,OACnChC,YAAakC,aACbtK,MAAO2K,YAAcA,YAAc,GACnC7J,IAAKA,OAGPsB,KAAKmH,UAAUiB,YAAaJ,MAAM3J,MAAMiH,KAAMiD,iBAE9CV,cAAaW,KAAKnG,MAAMoG,aAAaT,OAAQtJ,IAAKA,QAEpDgC,KAAKV,OAEA6H,gBHqgBNnJ,IAAK,YACLd,MAAO,SGtfAmI,KAAMrH,IAAKd,OACnB,GAAIgI,UAeJ,OAdI5F,MAAK3B,MAAMuH,SACbA,OAAS8C,KAAKC,MAAMD,KAAKE,UAAU5I,KAAK3B,MAAMuH,UAE5ClH,KACFkH,OAAOlH,QACc,IAAjBd,MAAMW,OACRqH,OAAOlH,KAAKd,MAAQ,GACXc,KAAOd,QAChBgI,OAAOlH,KAAKd,MAAQA,OAEtBgI,OAAOlH,KAAKiJ,WAAuB,kBAAT5B,MACjBH,QAAUlH,KAAiB,KAAVd,aACnBgI,QAAOlH,KAETkH,UHkgBNlH,IAAK,kBACLd,MAAO,SGzfMmI,KAAM8C,UAAWC,YAG/B,GAAyB,gBAAdD,aACgB,gBAAfC,aAAiD,YAAtB,mBAAOA,YAAP,YAAAlC,QAAOkC,cAD9C,CAMA,GAAIR,gBAAgC,WAAdO,UAA0B,cAAgBA,SAChE7I,MAAKqH,YAAcC,YAAYyB,IAAI/I,KAAKqH,YAAaiB,eAAgBQ,WAGrE,IAAIlD,QAAS5F,KAAKmH,UAAUpB,KAAM8C,UAAWC,WAC7C9I,MAAK3B,MAAMsH,SAASC,YH2fnBlH,IAAK,SACLd,MAAO,WGvfR,GAAIiK,cAAe7H,KAAKkH,kBACpBzB,aAAezF,KAAK3B,MAAMoH,YAU9B,OARIA,eACFhI,OAAO+J,KAAK/B,cAAcgC,QAAQ,SAASoB,WACzC,GAAIP,gBAAgC,WAAdO,UAA0B,cAAgBA,SAChEpD,cAAaoD,WAAW7C,YAAchG,KAAKoH,gBAAgB1G,KAAK,KAAMmI,WACtEpD,aAAaoD,WAAWjL,MAAQoC,KAAKqH,YAAYiB,iBACjD5H,KAAKV,OAIPqC,MAAAC,cAAA0E,QAAAnK,SACET,GAAI4D,KAAK3B,MAAMjC,GACf4M,OAAQhJ,KAAK3B,MAAM2K,OACnBhG,MAAOhD,KAAK3B,MAAM2E,OAElBX,MAAAC,cAAC2G,YAAgBjJ,KAAK3B,MACnBwJ,mBHkgBDZ,YGnqBe5E,MAAMiE,UAwK/BW,YAAWiC,cACT9M,GAAI,mBACJ4M,OAAQ,OACRhG,MAAO,mBACP2C,SAAU,WACR/D,QAAQuH,KAAK,qCAGjBlC,WAAWmC,WACT/D,OAAQhD,MAAMgH,UAAUC,OAAOC,WAC/B3D,OAAQvD,MAAMgH,UAAUG,OAAOD,WAC/BnN,GAAIiG,MAAMgH,UAAUC,OACpBN,OAAQ3G,MAAMgH,UAAUC,OACxBtG,MAAOX,MAAMgH,UAAUC,OACvB3D,SAAUtD,MAAMgH,UAAUI,MHigB3BvN,QAAQW,QG9fMoK,YHkgBT,SAAS9K,OAAQD,SAEtB,YAQA,SAASY,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAVjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBI/sB3hB0M,MJmuBO,SAAU3J,kBIjuBrB,QAAA2J,OAAYrL,OAAOvB,gBAAAkD,KAAA0J,MAAA,IAAAzJ,OAAA/C,2BAAA8C,MAAA0J,MAAAzL,WAAAR,OAAAyC,eAAAwJ,QAAApN,KAAA0D,KACX3B,OADW,OAGjB4B,OAAKE,OACHwJ,UAAW1J,MAAK5B,MAAMuL,eAIxB3J,MAAK4J,WACH5J,MAAK5B,MAAMuL,cACT,0BACA,6BAGJ3J,MAAK6J,gBAAkB7J,MAAK6J,gBAAgBpJ,KAArBT,OAdNA,MJ8zBlB,MA5FA5C,WAAUqM,MAAO3J,kBAkBjB7B,aAAawL,QACXhL,IAAK,kBACLd,MAAO,WIpuBRoC,KAAKyB,UAAUkI,WAAY3J,KAAKG,MAAMwJ,eJwuBrCjL,IAAK,SACLd,MAAO,WIpuBR,GAAImM,YACF/J,KAAKG,MAAMwJ,UACT,8CACA,4CAGAK,kBACAhK,MAAK3B,MAAM4L,OACbD,YACE3H,MAAAC,cAAA,QACE6B,UAAU,wCACVhB,OAAQ+G,YAAY,OAAQC,OAAQ,WACpCC,QAASpK,KAAK3B,MAAM4L,OAK1B,IAAII,iBACArK,MAAK3B,MAAMiM,MACbD,UACEhI,MAAAC,cAAA,QACE6B,UAAU,sCACVhB,OAAQ+G,YAAY,OAAQC,OAAQ,WACpCC,QAASpK,KAAK3B,MAAMiM,MAK1B,IAAIC,mBACAvK,MAAK3B,MAAMmM,SACbD,YACElI,MAAAC,cAAA,QACE6B,UAAU,wCACVhB,OAAQ+G,YAAY,OAAQC,OAAQ,WACpCC,QAASpK,KAAK3B,MAAMmM,SAM1B,IAAMC,cAAezK,KAAK3B,MAAM2E,MAC9BX,MAAAC,cAAA,OACE6B,UAAU,iBAEV9B,MAAAC,cAAA,QACE6B,UAAW4F,WACXK,QAASpK,KAAK8J,gBACdY,cAAY,WACZC,cAAa,IAAM3K,KAAK3B,MAAMjC,GAC9B+G,OAAQgH,OAAQ,aAEjBH,YACAK,UACAE,YACAvK,KAAK3B,MAAM2E,OAEZ,EAEJ,OACEX,OAAAC,cAAA,OAAK6B,UAAU,uBACZsG,aACDpI,MAAAC,cAAA,OAAKlG,GAAI4D,KAAK3B,MAAMjC,GAAI+H,UAAWnE,KAAK6J,WAAYe,KAAK,YACvDvI,MAAAC,cAAA,OAAK6B,UAAU,aAAahB,OAAQ6F,OAAQhJ,KAAK3B,MAAM2K,SACpDhJ,KAAK3B,MAAM0J,gBJwuBd2B,OIh0BUrH,MAAMiE,UAgG1BoD,OAAMN,WACJhN,GAAIiG,MAAMgH,UAAUC,OACpBN,OAAQ3G,MAAMgH,UAAUC,OACxBtG,MAAOX,MAAMgH,UAAUC,OACvBW,KAAM5H,MAAMgH,UAAUI,KACtBa,IAAKjI,MAAMgH,UAAUI,MAEvBC,MAAMR,cACJU,eAAe,EACfxN,GAAI,gBACJ4M,OAAQ,QJsuBT9M,QAAQW,QInuBM6M,OJuuBT,SAASvN,OAAQD,QAASH,qBAE/B,YAYA,SAASW,wBAAuBC,KAAO,MAAOA,MAAOA,IAAIC,WAAaD,KAAQE,QAASF,KAEvF,QAASG,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAhBjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBKx2BjiB6N,aAAA9O,oBAAA,GL42BK+O,cAAgBpO,uBAAuBmO,cKh2BtCE,oBLo3BqB,SAAUhL,kBKn3BnC,QAAAgL,uBAAcjO,gBAAAkD,KAAA+K,oBAAA,IAAA9K,OAAA/C,2BAAA8C,MAAA+K,oBAAA9M,WAAAR,OAAAyC,eAAA6K,sBAAAzO,KAAA0D,MAAA,OAGZC,OAAKE,OACH6K,cACAC,aAAc,KACdC,YAAa,KACbC,UAAW,KACXC,SAAU,KACVC,aAAcC,GAAIC,UAAWC,eAAiBC,eAC9CC,MAAO,EACP/B,WAAY2B,GAAG,GACfK,eAAgB,GAGlB1L,MAAK2L,eAAiB3L,MAAK2L,eAAelL,KAApBT,OACtBA,MAAK4L,YAAc5L,MAAK4L,YAAYnL,KAAjBT,OACnBA,MAAK6L,aAAe7L,MAAK6L,aAAapL,KAAlBT,OACpBA,MAAK8L,WAAa9L,MAAK8L,WAAWrL,KAAhBT,OAClBA,MAAK+L,kBAAoB/L,MAAK+L,kBAAkBtL,KAAvBT,OACzBA,MAAKgM,YAAchM,MAAKgM,YAAYvL,KAAjBT,OACnBA,MAAKiM,cAAgBjM,MAAKiM,cAAcxL,KAAnBT,OACrBA,MAAK+D,gBAAkB/D,MAAK+D,gBAAgBtD,KAArBT,OACvBA,MAAKkM,KAAOlM,MAAKkM,KAAKzL,KAAVT,OAvBAA,ML+tCb,MA3WA5C,WAAU0N,oBAAqBhL,kBA+B/B7B,aAAa6M,sBACXrM,IAAK,iBACLd,MAAO,SK33BKc,KACb,GAAIiL,WAAY3J,KAAKG,MAAMwJ,SAC3BA,WAAUjL,MAAQiL,UAAUjL,KAC5BsB,KAAKyB,UAAUkI,yBL83BdjL,IAAK,kBACLd,MAAO,WK53BQ,GAAAwO,QAAApM,KACZqL,YAAc3C,KAAKC,MAAMD,KAAKE,UAAU5I,KAAKG,MAAMkL,cACnDgB,YAAc5O,OAAO+J,KAAKxH,KAAK3B,MAAMwE,gBAAgByJ,KACvD,SAAA5N,KAAA,MAA0C,cAAnC0N,OAAK/N,MAAMwE,eAAenE,MAGnC,KAAK,GAAI6N,WAAWlB,aAAa,CAE/B,GAAII,WAAYJ,YAAYkB,SAASd,SACrCA,WAAUe,SAAWH,YACrBZ,UAAUgB,YAAc,GACxBhB,UAAUiB,WAAa1M,KAAKG,MAAMiL,SAClCK,UAAUkB,SAAW3M,KAAKG,MAAMiL,QAGhC,IAAIG,UAAWF,YAAYkB,SAAShB,QACpCA,UAASL,YAAclL,KAAKG,MAAM+K,YAClCK,SAASJ,UAAYnL,KAAKG,MAAMgL,UAChCI,SAASqB,SAAWrB,SAASC,WAAWoB,SACxCrB,SAASsB,OAAStB,SAASC,WAAWqB,OACtCtB,SAASC,WAAWkB,WAAa1M,KAAKG,MAAMiL,SACiB,IAAzDpL,KAAK3B,MAAMkF,cAAcgI,SAASuB,QAAQC,aAC5CxB,SAASyB,QAAU,GAKjBhN,KAAK3B,MAAMmD,OACb+J,SAASL,YAAclL,KAAK3B,MAAMmD,KAAKyL,UAAUC,OACjD3B,SAASJ,UAAYnL,KAAK3B,MAAMmD,KAAK2L,QAAQC,GAC7C7B,SAAS8B,iBAAmBrN,KAAK3B,MAAMmD,KAAK+J,SAASnP,GACrDmP,SAASC,WAAWkB,WAAa1M,KAAK3B,MAAMmD,KAAKiK,UAAUiB,WAC3DjB,UAAUiB,WAAa1M,KAAK3B,MAAMmD,KAAKiK,UAAUiB,WACjDjB,UAAUkB,SAAW3M,KAAK3B,MAAMmD,KAAKiK,UAAUiB,YAGjDrB,YAAYkB,SAASd,UAAYA,UACjCJ,YAAYkB,SAAShB,SAAWA,SAElC3J,QAAQ0L,IAAIjC,aAEZrL,KAAKmM,KAAKd,YAAarL,KAAK3B,MAAM2F,iBAAiBuJ,KACjD,WAAOnB,OAAK/N,MAAM0F,gBAAiBqI,OAAK/N,MAAMmP,iBLk4B/C9O,IAAK,OACLd,MAAO,SK/3BL4D,KAAMiM,KAAK,GAAAC,QAAA1N,IACd,OAAO,IAAI2N,SAAQ,SAAAC,SACjB1M,EAAEC,MACA4E,KAAM,OACN0H,IAAKA,IACLjM,MAAOA,KAAMkH,KAAKE,UAAUpH,OAC5BqM,OAAO,EACPtM,QAAS,WACPqM,UACAE,KAAK,mBAAoB,GAAI,YAE/BnM,MAAO,SAACoM,IAAKC,WAAYC,aACvB,GAAIC,KAAMH,IAAII,aAAeJ,IAAII,aAAaC,QAAU,iBACxDV,QAAKjM,UACHwJ,aAAciD,MAEhBJ,KAAKI,IAAK,GAAI,iBLu4BnBxP,IAAK,cACLd,MAAO,SKl4BE0H,KAAM1H,MAAOc,KACvBsB,KAAK3B,MAAMgQ,mBAAoBC,WAAYtO,KAAK3B,MAAMgQ,UACtD,IAAIjD,UAAWpL,KAAKG,MAAMiL,SACtBF,YAAclL,KAAKG,MAAM+K,YACzBC,UAAYnL,KAAKG,MAAMgL,UACvBE,YAAcrL,KAAKG,MAAMkL,WAEhB,iBAAT/F,KACF4F,YAActN,MACI,cAAT0H,MACT6F,UAAYvN,MACZwN,SAAWpL,KAAK3B,MAAMiF,eAAe6H,WAAWC,WAGnC,WAAT9F,OACF+F,YAAY3M,KAAK6M,UAAYC,gBAE/BH,YAAY3M,KAAK6M,SAASjG,MAAQ1H,OAGpCoC,KAAKyB,UAAU4J,wBAAaD,kBAAUF,wBAAaC,yBLq4BlDzM,IAAK,eACLd,MAAO,SKn4BG0H,KAAM1H,MAAOc,KACxBsB,KAAK3B,MAAMgQ,mBAAoBC,WAAYtO,KAAK3B,MAAMgQ,UACtD,IAAIhD,aAAcrL,KAAKG,MAAMkL,WAC7BA,aAAY3M,KAAK+M,UAAUnG,MAAQ1H,MACnCoC,KAAKyB,UAAU4J,6BLs4Bd3M,IAAK,aACLd,MAAO,WKn4BR,GAAIyN,aAAcrL,KAAKG,MAAMkL,YACzBK,MAAQ1L,KAAKG,MAAMuL,MACnB/B,UAAY3J,KAAKG,MAAMwJ,SAE3B0B,aAAYK,MAAM,IAAMH,YAAcE,WAAYD,gBAClD7B,UAAU+B,MAAM,IAAK,EACrBA,OAAc,EAEd1L,KAAKyB,UAAU4J,wBAAa1B,oBAAW+B,iBLu4BtChN,IAAK,oBACLd,MAAO,SKr4BQ2Q,GAChB,GAAI5C,gBAAiB4C,EAAEnQ,OAAOR,KAC9BoC,MAAKyB,UAAUkK,mCLw4BdjN,IAAK,cACLd,MAAO,SKt4BEc,KAOV,IAAK,GANDgN,OAAQ1L,KAAKG,MAAMuL,MACnB/B,UAAY3J,KAAKG,MAAMwJ,UACvB6E,QAAU9C,MAAM,EAChBL,YAAcrL,KAAKG,MAAMkL,YACzBoD,WAAazO,KAAKG,MAAMwL,eAEnBrN,EAAE,EAAGA,GAAGmQ,WAAYnQ,IAC3B+M,YAAYmD,SAAW9F,KAAKC,MAAMD,KAAKE,UAAUyC,YAAY3M,aACtD2M,aAAYmD,SAAS/C,UAAUc,QACtC5C,UAAU6E,UAAW,EACrBA,SAGFxO,MAAKyB,UACH4J,YAAaA,YACbK,MAAO8C,QACP7E,UAAWA,eL04BZjL,IAAK,gBACLd,MAAO,SKv4BIc,KACZ,GAAI2M,aAAcrL,KAAKG,MAAMkL,kBACtBA,aAAY3M,KACnBsB,KAAKyB,UAAU4J,YAAaA,iBL04B3B3M,IAAK,SACLd,MAAO,WKx4BD,GAAA8Q,QAAA1O,KAEH2O,iBAAmBlR,OAAO+J,KAAKxH,KAAKG,MAAMkL,aAC1CuD,YACAtQ,EAAI,EAJDuQ,2BAAA,EAAAC,mBAAA,EAAAC,eAAAC,MAAA,KAKP,OAAAC,OALOC,MAAA,cAKExQ,KALFuQ,MAAArR,KAMLgR,UAASpG,KACPnG,MAAAC,cAAAwI,cAAAjO,SACE2E,KAAMkN,OAAKrQ,MAAMmD,MAAQ,KACzB9C,IAAKA,IACLyQ,WAAYzQ,IACZtC,GAAIkC,EACJqL,UAAW+E,OAAKvO,MAAMwJ,UAAUjL,KAChCkN,eAAgB8C,OAAK9C,eACrB3K,eAAgByN,OAAKrQ,MAAM4C,eAC3BwK,UAAWiD,OAAKvO,MAAMkL,YAAY3M,KAAK+M,WAAa,KACpDF,SAAUmD,OAAKvO,MAAMkL,YAAY3M,KAAK6M,UAAY,KAClDW,cAA2C,IAA5ByC,iBAAiBpQ,OAC9B,iBAAMmQ,QAAKxC,cAAcxN,MAAO,KAClCqN,WAAYzN,GAAKqQ,iBAAiBpQ,OAASmQ,OAAK3C,WAAa,KAC7DC,kBAAmB0C,OAAK1C,kBACxBL,eAAgB+C,OAAKvO,MAAMwL,eAC3BM,YAAa3N,GAAKqQ,iBAAiBpQ,QAAUmQ,OAAKvO,MAAMkL,YAAY3M,KAClEgQ,OAAKzC,YAAc,KACrBH,aAAc4C,OAAK5C,aACnBD,YAAa6C,OAAK7C,YAClBwC,SAAUK,OAAKrQ,MAAMgQ,SACrB9K,cAAemL,OAAKrQ,MAAMkF,cAC1BX,sBAAuB8L,OAAKrQ,MAAMuE,sBAClCgB,qBAAsB8K,OAAKrQ,MAAMuF,qBACjCH,uBAAwBiL,OAAKrQ,MAAMoF,uBACnCE,mBAAoB+K,OAAKrQ,MAAMsF,mBAC/BD,iBAAkBgL,OAAKrQ,MAAMqF,iBAC7BY,WAAYoK,OAAKrQ,MAAMiG,WACvBT,oBAAqB6K,OAAKrQ,MAAMwF,oBAChCC,qBAAsB4K,OAAKrQ,MAAMyF,qBACjCN,kBAAmBkL,OAAKrQ,MAAMmF,kBAC9B4L,MAAOV,OAAKrQ,MAAM+Q,SAItB9Q,KApCF+Q,UAAgBV,iBAAhB9H,OAAAC,cAAA+H,2BAAAI,MAAAI,UAAAC,QAAAC,MAAAV,2BAAA,EAAkCK,QAL3B,MAAAnB,KAAAe,mBAAA,EAAAC,eAAAhB,IAAA,aAAAc,2BAAAQ,UAAAG,QAAAH,UAAAG,SAAA,WAAAV,kBAAA,KAAAC,iBA4CP,GAAIU,qBACAC,8BACJ,IAAI1P,KAAK3B,MAAMmD,KACbiO,aACEpN,MAAAC,cAAA,WACED,MAAAC,cAACuD,eACCf,MAAM,kBACN6K,KAAM3P,KAAK3B,MAAMmD,KAAKiK,UAAUc,UAElClK,MAAAC,cAACuD,eACCf,MAAM,QACN6K,KAAM3P,KAAK3B,MAAMmD,KAAKyL,UAAU2C,QAElCvN,MAAAC,cAACuD,eACCf,MAAM,cACN6K,KAAM3P,KAAK3B,MAAMmD,KAAK2L,QAAQ0C,eAKpCH,wBACErN,MAAAC,cAAA,WACED,MAAAC,cAACwN,gBACCxK,KAAK,WACLR,MAAM,qBACNkB,YAAahG,KAAK3B,MAAM0R,gBACxBC,UAAU,EACVpS,MAAOoC,KAAK3B,MAAMkN,SAASqB,WAE7BvK,MAAAC,cAAC2N,eACC3K,KAAK,SACLR,MAAM,OACNoL,QAASlQ,KAAK3B,MAAMkG,cACpByB,YAAahG,KAAK3B,MAAM0R,gBACxBI,aAAa,EACbH,UAAU,EACVpS,MAAOoC,KAAK3B,MAAMkN,SAASsB,cAI5B,CACN,GAAI9J,YACA/C,MAAKG,MAAM+K,cACbnI,SAAW/C,KAAK3B,MAAM4C,eAAejB,KAAK3B,MAAMgF,kBAAkBrD,KAAKG,MAAM+K,aAAc,UAG5FuE,aACEpN,MAAAC,cAAA,WACED,MAAAC,cAAC2N,eACC3K,KAAK,cACLR,MAAM,QACNoL,QAASlQ,KAAK3B,MAAMyE,WACpBkD,YAAahG,KAAK6L,YAClBmE,UAAU,EACVpS,MAAOoC,KAAKG,MAAM+K,YAClBkF,YAAY,uBAEd/N,MAAAC,cAAC2N,eACC3K,KAAK,YACLR,MAAM,cACNoL,QAASnN,SACTiD,YAAahG,KAAK6L,YAClBmE,UAAU,EACVpS,MAAOoC,KAAKG,MAAMgL,UAClBkF,UAAUrQ,KAAKG,MAAM+K,eAM7B,MACE7I,OAAAC,cAAC2G,aACC3D,KAAK,eACLlJ,GAAG,eACHkU,SAAU,WACR5B,OAAK1K,kBACL0K,OAAKrQ,MAAMoG,uBAAwB6J,WAAYI,OAAKrQ,MAAMoG,gBAC5Dc,IAAI,QAEJlD,MAAAC,cAAA,OAAK6B,UAAU,OACb9B,MAAAC,cAAA,OAAK6B,UAAU,4BACZsL,aACAC,0BAGJd,SACDvM,MAAAC,cAACwD,eACChB,MAAM,SACNyL,WAAW,mCL66BXxF,qBKhuCwB1I,MAAMiE,UA0TxCyE,qBAAoB3B,aL26BnBlN,QAAQW,QKx6BMkO,qBL46BT,SAAS5O,OAAQD,QAASH,qBAE/B,YAgBA,SAASW,wBAAuBC,KAAO,MAAOA,MAAOA,IAAIC,WAAaD,KAAQE,QAASF,KAEvF,QAASG,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YApBjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B;AAAqB5B,gBM7vCjiBwT,gBAAAzU,oBAAA,GNiwCK0U,iBAAmB/T,uBAAuB8T,iBMhwC/CE,qBAAA3U,oBAAA,GNowCK4U,sBAAwBjU,uBAAuBgU,sBMxvC9CE,oBN4wCqB,SAAU7Q,kBM3wCnC,QAAA6Q,uBAAc9T,gBAAAkD,KAAA4Q,oBAAA,IAAA3Q,OAAA/C,2BAAA8C,MAAA4Q,oBAAA3S,WAAAR,OAAAyC,eAAA0Q,sBAAAtU,KAAA0D,MAAA,OAEZC,OAAK6L,aAAe7L,MAAK6L,aAAapL,KAAlBT,OACpBA,MAAK4L,YAAc5L,MAAK4L,YAAYnL,KAAjBT,OACnBA,MAAK4Q,KAAO5Q,MAAK4Q,KAAKnQ,KAAVT,OAJAA,MN2+Cb,MA/NA5C,WAAUuT,oBAAqB7Q,kBAa/B7B,aAAa0S,sBACXlS,IAAK,eACLd,MAAO,SMpxCG0H,KAAM1H,OACjBoC,KAAK3B,MAAMyN,aAAaxG,KAAM1H,MAAOoC,KAAK3B,MAAM8Q,eNuxC/CzQ,IAAK,cACLd,MAAO,SMrxCE0H,KAAM1H,OAChBoC,KAAK3B,MAAMwN,YAAYvG,KAAM1H,MAAOoC,KAAK3B,MAAM8Q,eNwxC9CzQ,IAAK,OACLd,MAAO,WMrxCRoC,KAAK3B,MAAM4N,YAAYjM,KAAK3B,MAAMsN,mBNyxCjCjN,IAAK,SACLd,MAAO,WMvxCD,GAAAwO,QAAApM,KACH8Q,wBACAC,sBACAC,yBACAC,sBACAjR,MAAK3B,MAAM0N,aACb+E,iBACEzO,MAAAC,cAAA,QAAM6B,UAAU,UACd9B,MAAAC,cAAA,OACE6B,UAAU,oBACViG,QAASpK,KAAK3B,MAAM0N,YAFtB,MASJgF,eACE1O,MAAAC,cAAA,QAAM6B,UAAU,gBAAhB,cAMAnE,KAAK3B,MAAM4N,cACb+E,kBACE3O,MAAAC,cAAA,QAAM6B,UAAU,UACd9B,MAAAC,cAAA,OACE6B,UAAU,oBACViG,QAASpK,KAAK6Q,MAEdxO,MAAAC,cAAA,QAAM6B,UAAU,oCAItB8M,gBACE5O,MAAAC,cAAA,QAAM6B,UAAU,gBACd9B,MAAAC,cAAA,SACE6B,UAAU,wBACV4B,KAAK,SACLmL,IAAI,IACJC,IAAI,KACJhO,OAAQiO,MAAO,GAAIhO,QAAS,UAC5BiL,SAAUrO,KAAK3B,MAAM2N,kBACrBpO,MAAOoC,KAAK3B,MAAMsN,iBARtB,UAeJ,IAAI0F,2BACJ,IAAIrR,KAAK3B,MAAM6N,cAAe,CAC5B,GAAMoF,aACJC,MAAO,UACPC,WAAY,GACZrH,OAAQ,UACRsH,SAAU,GAGZJ,qBACEhP,MAAAC,cAAA,QACE6B,UAAU,6BACViG,QAASpK,KAAK3B,MAAM6N,cACpB/I,MAAOmO,aAKb,GAAI/N,iBACJ,IAAIvD,KAAK3B,MAAMmD,KACb,IAAK,GAAIpF,MAAM4D,MAAK3B,MAAMkF,cAElBvD,KAAK3B,MAAMkF,cAAcnH,IAAIsV,cAC9B1R,KAAK3B,MAAMmD,KAAK+J,SAASuB,QACxB1Q,IAAM4D,KAAK3B,MAAMmD,KAAK+J,SAASuB,SAEnCvJ,cAAcnH,IAAM4D,KAAK3B,MAAMkF,cAAcnH,IAAzB,UAIxBmH,eAAgBvD,KAAK3B,MAAM4C,eAAejB,KAAK3B,MAAMkF,cAAe,OAGtE,OACElB,OAAAC,cAAC2G,aACC3D,KAAK,kBAELjD,MAAAC,cAAA,OAAK6B,UAAU,OACb9B,MAAAC,cAAA,OAAK6B,UAAU,4BACb9B,MAAAC,cAAA,WACED,MAAAC,cAACwN,gBACCxK,KAAK,UACLR,MAAO,WAAa9E,KAAK3B,MAAMjC,GAC/B4J,YAAahG,KAAK8L,aAClBkE,UAAU,EACVpS,MAAOoC,KAAK3B,MAAMoN,UAAUc,YAIlClK,MAAAC,cAAA,OAAK6B,UAAU,WAAWhB,OAAQwO,YAAY,EAAGC,UAAU,KACzDvP,MAAAC,cAAA,QACE6B,UAAYnE,KAAK3B,MAAMsL,UAAY,mCAAqC,iCACxExG,OAAQgH,OAAQ,UAAWsH,SAAS,GAAII,SAAS,WAAYC,MAAM,IACnEpH,cAAY,WACZC,cAAa,SAAW3K,KAAK3B,MAAM8Q,WACnC/E,QAAS,iBAAMgC,QAAK/N,MAAMuN,eAAeQ,OAAK/N,MAAM8Q,eAErDkC,sBAGLhP,MAAAC,cAAA,OAAK6B,UAAU,OACb9B,MAAAC,cAAA,OAAK6B,UAAU,aACf9B,MAAAC,cAAA,OAAK6B,UAAU,YACb9B,MAAAC,cAAA,OAAKlG,GAAI,QAAU4D,KAAK3B,MAAM8Q,WAAYhL,UAAU,YAClD9B,MAAAC,cAAC2N,eACC3K,KAAK,SACLR,MAAM,gBACNoL,QAAS3M,cACTyC,YAAahG,KAAK6L,YAClBmE,UAAU,EACVpS,MAAOoC,KAAK3B,MAAMkN,SAASuB,SAE7BzK,MAAAC,cAAC2N,eACC3K,KAAK,SACLR,MAAM,iBACNoL,QAASlQ,KAAK3B,MAAMuE,sBACpBoD,YAAahG,KAAK8L,aAClBvG,IAAI,gBACJyK,UAAU,EACVpS,MAAOoC,KAAK3B,MAAMoN,UAAUqB,SAE9BzK,MAAAC,cAAAmO,iBAAA5T,SACE0O,SAAUvL,KAAK3B,MAAMkN,SACrBwE,gBAAiB/P,KAAK6L,YACtBrI,kBAAmBxD,KAAK3B,MAAMmF,kBAC9BC,uBAAwBzD,KAAK3B,MAAMoF,uBACnCE,mBAAoB3D,KAAK3B,MAAMsF,mBAC/BD,iBAAkB1D,KAAK3B,MAAMqF,mBAE/BrB,MAAAC,cAAAqO,sBAAA9T,SACEkV,iBAAkB/R,KAAK8L,aACvB7K,eAAgBjB,KAAK3B,MAAM4C,eAC3BwK,UAAWzL,KAAK3B,MAAMoN,UACtB7H,qBAAsB5D,KAAK3B,MAAMuF,qBACjCC,oBAAqB7D,KAAK3B,MAAMwF,oBAChCC,qBAAsB9D,KAAK3B,MAAMyF,0BAKzCzB,MAAAC,cAAA,OAAK6B,UAAU,OACb9B,MAAAC,cAAA,OAAK6B,UAAU,aACb9B,MAAAC,cAAA,OAAK6B,UAAU,aACf9B,MAAAC,cAAA,OAAK6B,UAAU,mBACZ2M,iBACAC,gBAEH1O,MAAAC,cAAA,OAAK6B,UAAU,mBACZ6M,kBACAC,wBNwzCLL,qBM5+CwBvO,MAAMiE,UA6LxCsK,qBAAoBxH,aNozCnBlN,QAAQW,QMjzCM+T,qBNqzCT,SAASzU,OAAQD,SAEtB,YAQA,SAASY,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAVjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBOhgD3hBgV,uBPkhDwB,SAAUjS,kBOjhDtC,QAAAiS,0BAAclV,gBAAAkD,KAAAgS,uBAAA,IAAA/R,OAAA/C,2BAAA8C,MAAAgS,uBAAA/T,WAAAR,OAAAyC,eAAA8R,yBAAA1V,KAAA0D,MAAA,OAGZC,OAAKgS,sBAAwBhS,MAAKgS,sBAAsBvR,KAA3BT,OAC7BA,MAAKiS,kBAAoBjS,MAAKiS,kBAAkBxR,KAAvBT,OACzBA,MAAKkS,QAAUlS,MAAKkS,QAAQzR,KAAbT,OACfA,MAAKmS,QAAUnS,MAAKmS,QAAQ1R,KAAbT,OANHA,MPqsDb,MAnLA5C,WAAU2U,uBAAwBjS,kBAclC7B,aAAa8T,yBACXtT,IAAK,oBACLd,MAAO,SOzhDQ0H,KAAM1H,OACtB,GAAI4N,YAAaxL,KAAK3B,MAAMkN,SAASC,UACrCA,YAAWlG,MAAQ1H,MACnBoC,KAAK3B,MAAM0R,gBAAgB,aAAcvE,eP+hDxC9M,IAAK,UACLd,MAAO,WO3hDR,GAAI4N,YAAaxL,KAAK3B,MAAMkN,SAASC,UACrCA,YAAWhK,QACXxB,KAAK3B,MAAM0R,gBAAgB,aAAcvE,eP+hDxC9M,IAAK,UACLd,MAAO,SO7hDF0H,KAAM1H,OACZ,GAAI4D,MAAOxB,KAAK3B,MAAMkN,SAASC,WAAWhK,IAC1CA,MAAK8D,MAAQ1H,MACboC,KAAKkS,kBAAkB,OAAQ1Q,SPmiD9B9C,IAAK,wBACLd,MAAO,SOhiDYyU,cAAc,GAAAjG,QAAApM,KAC9BsS,mBAAqB7U,OAAO+J,KAAK6K,cAAcE,IAAI,SAACC,WACtD,GAAIC,UAAWrG,OAAK/N,MAAMsF,mBAAmB0O,aAAaG,WAAb,YAAuCC,QACpF,IAAiB,SAAbA,UAAoC,WAAbA,SAAuB,CAEhD,GAA6C,MAAzCJ,aAAaG,WAAb,WACF,MACEnQ,OAAAC,cAACwN,gBACCxK,KAAMkN,UACN1N,MAAOuN,aAAaG,WAAb,KACPxM,YAAaoG,OAAKgG,QAClBpC,SAAUqC,aAAaG,WAAb,SACV5U,MAAOwO,OAAK/N,MAAMkN,SAASC,WAAWhK,KAAKgR,YAKjD,IAA8C,OAA1CH,aAAaG,WAAb,WACF,MACEnQ,OAAAC,cAAC2N,eACC3K,KAAMkN,UACN1N,MAAOuN,aAAaG,WAAb,KACPtC,QAAS9D,OAAK/N,MAAMqF,iBAAiB2O,aAAaG,WAAb,YACrCxM,YAAaoG,OAAKgG,QAClBpC,SAAUqC,aAAaG,WAAb,SACV5U,MAAOwO,OAAK/N,MAAMkN,SAASC,WAAWhK,KAAKgR,aAMnD,GAAiB,aAAbC,SACF,MACEpQ,OAAAC,cAACoQ,aACCpN,KAAMkN,UACN1N,MAAOuN,aAAaG,WAAb,KACPxM,YAAaoG,OAAKgG,QAClB7M,IAAKiN,UACLxC,SAAUqC,aAAaG,WAAb,SACV5U,MAAOwO,OAAK/N,MAAMkN,SAASC,WAAWhK,KAAKgR,cAWnD,OAAOF,uBP+hDN5T,IAAK,SACLd,MAAO,WO5hDR,GAAI+U,uBACE3S,KAAK3B,MAAMmD,UAAU+J,cAAcC,aACvCmH,aACEtQ,MAAAC,cAACwD,eAAchB,MAAM,WAIzB,IAAItB,sBACA8O,yBACJ,IAAItS,KAAK3B,MAAMkN,SAASuB,OAAQ,CAI9B,IAAK,GAAI1Q,MAAM4D,MAAK3B,MAAMmF,kBAAkBxD,KAAK3B,MAAMkN,SAASuB,QAC9DtJ,kBAAkBpH,IAAM4D,KAAK3B,MAAMmF,kBAAkBxD,KAAK3B,MAAMkN,SAASuB,QAAQ1Q,IAAIwW,IAGvF,IAAIC,0BAA2B7S,KAAK3B,MAAMoF,uBAAuBzD,KAAK3B,MAAMkN,SAASuB,OACjF+F,8BACI7S,KAAK3B,MAAMkN,cAAcC,gBAAgBhK,KAC7C8Q,mBAAqBtS,KAAKiS,sBAAsBY,0BAEhD7S,KAAKmS,WAKX,GAAIW,sBA+CJ,OA9CI9S,MAAK3B,MAAMkN,SAASuB,SACtBgG,eACEzQ,MAAAC,cAAA,WACED,MAAAC,cAACwN,gBACCxK,KAAK,WACLR,MAAM,WACNkB,YAAahG,KAAKkS,kBAClBlC,UAAU,EACVpS,MAAOoC,KAAK3B,MAAMkN,SAASC,WAAWoB,WAExCvK,MAAAC,cAAC2N,eACC3K,KAAK,SACLR,MAAM,OACNoL,QAAS1M,kBACTwC,YAAahG,KAAKkS,kBAClBlC,UAAU,EACVpS,MAAOoC,KAAK3B,MAAMkN,SAASC,WAAWqB,SAEvCyF,mBACDjQ,MAAAC,cAACoQ,aACCpN,KAAK,OACLR,MAAM,OACNiO,QAAQ,OACRC,QAAQ,OACRhN,YAAahG,KAAKkS,kBAClBlC,UAAU,EACVpS,MAAOoC,KAAK3B,MAAMkN,SAASC,WAAWyH,OAExC5Q,MAAAC,cAAC4Q,aACC5N,KAAK,OACLR,MAAM,OACNkB,YAAahG,KAAKkS,kBAClBlC,UAAU,EACVpS,MAAOoC,KAAK3B,MAAMkN,SAASC,WAAW2H,OAExC9Q,MAAAC,cAAC8Q,iBACC9N,KAAK,WACLR,MAAM,WACNkB,YAAahG,KAAKkS,kBAClB3M,IAAI,WACJ3H,MAAOoC,KAAK3B,MAAMkN,SAASC,WAAW6H,aAO5ChR,MAAAC,cAAC2G,aACC3D,KAAK,kBACLgL,SAAUtQ,KAAK3B,MAAMoG,aACrBc,IAAI,QAEHuN,eACAH,kBPiiDCX,wBOtsD2B3P,MAAMiE,UA4K3C0L,wBAAuB5I,WACrB2G,gBAAiB1N,MAAMgH,UAAUI,KAAKF,WACtC9E,aAAcpC,MAAMgH,UAAUI,KAC9B8B,SAAUlJ,MAAMgH,UAAUG,OAAOD,WACjC5F,mBAAoBtB,MAAMgH,UAAUG,OAAOD,WAC3C7F,iBAAkBrB,MAAMgH,UAAUG,OAAOD,WACzC/F,kBAAmBnB,MAAMgH,UAAUG,OAAOD,WAC1C9F,uBAAwBpB,MAAMgH,UAAUG,OAAOD,YPgiDhDrN,QAAQW,QO7hDMmV,wBPiiDT,SAAS7V,OAAQD,QAASH,qBAE/B,YAYA,SAASW,wBAAuBC,KAAO,MAAOA,MAAOA,IAAIC,WAAaD,KAAQE,QAASF,KAEvF,QAASG,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAhBjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBQ9tDjiBsW,kBAAAvX,oBAAA,GRkuDKwX,mBAAqB7W,uBAAuB4W,mBQhuD3CE,oBRmvDqB,SAAUzT,kBAGlC,QAASyT,uBAGP,MAFA1W,iBAAgBkD,KAAMwT,qBAEftW,2BAA2B8C,MAAOwT,oBAAoBvV,WAAaR,OAAOyC,eAAesT,sBAAsBC,MAAMzT,KAAM0T,YA8EpI,MAnFArW,WAAUmW,oBAAqBzT,kBAQ/B7B,aAAasV,sBACX9U,IAAK,SACLd,MAAO,WQ3vDR,GAAI+V,yBACAC,4BAA8B5T,KAAK3B,MAAM4C,eAC3CjB,KAAK3B,MAAMuF,qBAAsB,WAE/BiQ,qBACFxR,MAAAC,cAAC2N,eACC3K,KAAK,oBACLR,MAAM,2BACNoL,QAAS0D,4BACT5N,YAAahG,KAAK3B,MAAM0T,iBACxB/B,UAAU,EACVpS,MAAOoC,KAAK3B,MAAMoN,UAAUqI,mBAIhC,IAAI9T,KAAK3B,MAAMoN,UAAUqI,kBAAmB,CAC1C,GAAIC,aAAc/T,KAAK3B,MAAMuF,qBAC3B5D,KAAK3B,MAAMoN,UAAUqI,mBACrBC,WAEF,IAAIA,YAAa,CAEf,GAAIC,YAAahU,KAAK3B,MAAMwF,oBAAoBkQ,aAG5CE,iBAAmB,CACvB,KAAK,GAAIC,aAAaF,YACpBC,kBAAsCD,WAAWE,UAKnD,KAAK,GADDC,gBACK7V,EAAI,EAAGA,GAAK2V,iBAAkB3V,IAGjC0B,KAAK3B,MAAMyF,qBAAqB9D,KAAK3B,MAAMoN,UAAUqI,oBACnD9T,KAAK3B,MAAMyF,qBAAqB9D,KAAK3B,MAAMoN,UAAUqI,mBAAmBxV,KAK9E6V,YAAY7V,GAAKA,EAGnBqV,kBACEtR,MAAAC,cAAAiR,mBAAA1W,SACEmX,WACEhU,KAAK3B,MAAMwF,oBACT7D,KAAK3B,MAAMuF,qBACT5D,KAAK3B,MAAMoN,UAAUqI,mBACrBC,aAGNI,YACEnU,KAAK3B,MAAMyF,qBAAqB9D,KAAK3B,MAAMoN,UAAUqI,mBAEvDM,eAAkBpU,KAAK3B,MAAM+V,eAC7BvR,eAAkB7C,KAAK3B,MAAMwE,eAC7BwR,QAAU,EACVC,mBAAsBtU,KAAK3B,MAAMoN,UAAU8I,WAC3CxC,iBAAoB/R,KAAK3B,MAAM0T,oBAMvC,GAAIY,oBAUJ,QATK3S,KAAK3B,MAAMmD,UAAUiK,YACxBkH,aACEtQ,MAAAC,cAAA,WACED,MAAAC,cAAA,WACAD,MAAAC,cAACwD,eAAchB,MAAM,aAMzBzC,MAAAC,cAAC2G,aACCqH,SAAUtQ,KAAK3B,MAAMqG,eAEpBmP,qBACAF,iBACAhB,kBRkvDCa,qBQv0DwBnR,MAAMiE,UA2FxCkN,qBAAoBpK,WAClBnI,eAAgBoB,MAAMgH,UAAUI,KAAKF,WACrCwI,iBAAkB1P,MAAMgH,UAAUI,KAAKF,WACvC7E,cAAerC,MAAMgH,UAAUI,KAC/BjI,KAAMa,MAAMgH,UAAUG,OACtBiC,UAAWpJ,MAAMgH,UAAUG,OAAOD,WAClC3F,qBAAsBvB,MAAMgH,UAAUG,OAAOD,WAC7C1F,oBAAqBxB,MAAMgH,UAAUG,OAAOD,WAC5CzF,qBAAsBzB,MAAMgH,UAAUG,OAAOD,WAC7C6K,eAAgB/R,MAAMgH,UAAUG,OAChC3G,eAAgBR,MAAMgH,UAAUG,QRkvDjCtN,QAAQW,QQ/uDM2W,qBRmvDT,SAASrX,OAAQD,SAEtB,YAQA,SAASY,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAVjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBSx2D3hBwX,iBTw3DkB,SAAUzU,kBSv3DhC,QAAAyU,oBAAc1X,gBAAAkD,KAAAwU,iBAAA,IAAAvU,OAAA/C,2BAAA8C,MAAAwU,iBAAAvW,WAAAR,OAAAyC,eAAAsU,mBAAAlY,KAAA0D,MAAA,OAGZC,OAAKwU,YAAcxU,MAAKwU,YAAY/T,KAAjBT,OACnBA,MAAKyU,KAAOzU,MAAKyU,KAAKhU,KAAVT,OACZA,MAAK0U,KAAO1U,MAAK0U,KAAKjU,KAAVT,OALAA,MTkjEb,MA1LA5C,WAAUmX,iBAAkBzU,kBAa5B7B,aAAasW,mBACX9V,IAAK,oBACLd,MAAO,WS93DRsD,EAAE,2BAA2B0T,aTk4D5BlW,IAAK,oBACLd,MAAO,WS/3DRsD,EAAE,2BAA2B0T,aTm4D5BlW,IAAK,cACLd,MAAO,SSj4DE2Q,GACV,GAAIgG,YAAahG,EAAEnQ,OAAOhC,EAC1B,IAAI4D,KAAK3B,MAAM8V,YAAYI,YAAa,CACtC,GAAIxO,MAAO/F,KAAK3B,MAAMwW,MACpB7U,KAAK3B,MAAM0J,SAAS/H,KAAK3B,MAAM8V,YAAYI,aAAazH,QACxDgI,QAAU,WAAa,YACrBrH,IAAM/K,MAAMuB,QAAQ,YAAY8B,KAAK,aACvC/F,KAAK3B,MAAM0J,SAAS/H,KAAK3B,MAAM8V,YAAYI,aAAahI,OAE1DwI,QAAOC,SAASC,KAAOxH,QTk4DxB/O,IAAK,YACLd,MAAO,SS/3DA2Q,GACNA,EAAE2G,oBTk4DHxW,IAAK,OACLd,MAAO,SSh4DL2Q,GACD,GAAI9C,WAAY/C,KAAKE,UACnB5I,KAAK3B,MAAM0J,SAAS/H,KAAK3B,MAAM8V,YAAY5F,EAAEnQ,OAAOhC,KAEtDmS,GAAE4G,aAAa/C,QAAQ,aAAc3G,cTi4DtC/M,IAAK,OACLd,MAAO,SS/3DL2Q,GACHA,EAAE2G,gBAEF,IAAIzJ,WAAY/C,KAAKC,MAAM4F,EAAE4G,aAAaC,QAAQ,eAC9CC,cAAgBC,SAAS/G,EAAEnQ,OAAOhC,GAEtCqP,WAAU8I,WAAac,cAEvBrV,KAAK3B,MAAMkX,mBAAmB9J,cTk4D7B/M,IAAK,SACLd,MAAO,WSh4DD,GAAAwO,QAAApM,KAELwV,UACAC,OACArS,eACAmR,WAAa,CACjB,IAAIvU,KAAK3B,MAAM2V,WAAY,CACzB,IAAK,GAAI0B,GAAE,EAAGA,EAAI1V,KAAK3B,MAAM2V,WAAW0B,EAAGA,IAAK,CAC9CF,SACA,KAAK,GAAIG,GAAE,EAAGA,GAAK3V,KAAK3B,MAAM2V,WAAW2B,EAAGA,IAAK,CAE/C,GAAIC,WAAa,IAAI5V,KAAK3B,MAAM2V,WAAW2B,EAAM,IAAI3V,KAAK3B,MAAM2V,WAAW2B,EAAI,IAC3EE,WAAazE,MAAOwE,WACpBE,UAAY,OACZC,aAAe,KACfC,SAAW,QACXC,WAAa,KACbC,cAAgB,KAChBC,UAAY,QACZC,YAAc,KACdC,WAAarW,KAAKsW,UAClBC,OAASvW,KAAK2U,KACdvK,QAAU,IAETpK,MAAK3B,MAAMgW,QAEVrU,KAAK3B,MAAM8V,aACTnU,KAAK3B,MAAM8V,YAAYI,cACzBuB,UAAY,gBACZE,SAAW,OACXC,WAAa,UACbC,cAAgB,MAChBH,aACF,OAAS/V,KAAK3B,MAAM0J,SAAS/H,KAAK3B,MAAM8V,YAAYI,aAAahI,QAAU,YAClEvM,KAAK3B,MAAM+V,eAAepU,KAAK3B,MAAM0J,SAAS/H,KAAK3B,MAAM8V,YAAYI,aAAazH,QAAQhI,MAAQ,YAClG9E,KAAK3B,MAAMwE,eAAe7C,KAAK3B,MAAM0J,SAAS/H,KAAK3B,MAAM8V,YAAYI,aAAa/H,UAAUgK,OAAS,QAC5GL,UAAY,OACZC,YAAcpW,KAAK0U,KACnB2B,WAAa,KACbE,OAAS,KACTnM,QAAUpK,KAAKyU,aAKjBzU,KAAK3B,MAAMgW,SACTE,YAAcvU,KAAK3B,MAAMiW,mBAC3BwB,UAAY,gBAEJ9V,KAAK3B,MAAM8V,YAIZnU,KAAK3B,MAAM8V,cACbnU,KAAK3B,MAAM8V,YAAYI,YAInBvU,KAAK3B,MAAM8V,YAAYI,aAH9BuB,UAAY,iBACrB1L,QAAU,SAACmE,GAAD,MAAOnC,QAAK/N,MAAM0T,iBAAiB,aAAcxD,EAAEnQ,OAAOhC,QAN7D0Z,UAAY,iBACZ1L,QAAU,SAACmE,GAAD,MAAOnC,QAAK/N,MAAM0T,iBAAiB,aAAcxD,EAAEnQ,OAAOhC,MAoBxE,IAAIqa,yBAEFA,mBAAoBd,EAAK3V,KAAK3B,MAAM2V,WAAW2B,EAAID,EAKrDF,OAAOhN,KACLnG,MAAAC,cAAA,OACElG,GAAImY,WACJpQ,UAAW2R,UACXY,YAAWV,SACXtL,cAAauL,WACbU,iBAAgBT,cAChBU,sBAAqBb,aACrB5S,MAAO0S,UACPzL,QAASA,QACT+L,UAAWA,UACXC,YAAaA,YACbC,WAAYA,WACZE,OAAQA,QAEPE,oBAILlC,aAGF,GAAIsC,WAAa,IAAI7W,KAAK3B,MAAM2V,WAAW0B,EAAM,IAAI1V,KAAK3B,MAAM2V,WAAW0B,EAAI,IAE3EoB,UADa,IAAI9W,KAAK3B,MAAM2V,WAAW0B,EAAI,KAE7C1M,OAAQ6N,WAGVpB,KAAIjN,KACFnG,MAAAC,cAAA,OACE6B,UAAU,MACVhB,MAAO2T,UAENtB,SAKPpS,QAAUqS,IAGV,MACEpT,OAAAC,cAAA,OAAK6B,UAAU,WACZf,aTs4DCoR,kBSnjEqBnS,MAAMiE,UAmLrCkO,kBAAiBpL,aTq4DhBlN,QAAQW,QSl4DM2X,kBTs4DT,SAASrY,OAAQD,QAASH,qBAE/B,YAoBA,SAASW,wBAAuBC,KAAO,MAAOA,MAAOA,IAAIC,WAAaD,KAAQE,QAASF,KAEvF,QAASG,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAxBjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBU5kEjiB6N,aAAA9O,oBAAA,GACAgD,eV+kEqBrC,uBAAuBmO,cU/kE5C9O,oBAAA,IVmlEKiD,eAAiBtC,uBAAuBqC,eUllE7CgY,iBAAAhb,oBAAA,GVslEKib,kBAAoBta,uBAAuBqa,kBU1kE1CE,iBV8lEkB,SAAUlX,kBU7lEhC,QAAAkX,kBAAY5Y,OAAOvB,gBAAAkD,KAAAiX,iBAAA,IAAAhX,OAAA/C,2BAAA8C,MAAAiX,iBAAAhZ,WAAAR,OAAAyC,eAAA+W,mBAAA3a,KAAA0D,KACX3B,OADW,OAGjB4B,OAAKE,OACH+W,YACA7L,eACAJ,aAAc,KACdD,cACAmM,aAAc,EACdC,aAAa,EACbC,KAAM,GAGRpX,MAAKqX,aAAerX,MAAKqX,aAAa5W,KAAlBT,OACpBA,MAAKsX,aAAetX,MAAKsX,aAAa7W,KAAlBT,OACpBA,MAAKuX,YAAcvX,MAAKuX,YAAY9W,KAAjBT,OACnBA,MAAKwX,uBAAyBxX,MAAKwX,uBAAuB/W,KAA5BT,OAC9BA,MAAKyX,oBAAsBzX,MAAKyX,oBAAoBhX,KAAzBT,OAC3BA,MAAK0X,WAAa1X,MAAK0X,WAAWjX,KAAhBT,OAClBA,MAAK2X,gBAAkB3X,MAAK2X,gBAAgBlX,KAArBT,OACvBA,MAAKqP,KAAOrP,MAAKqP,KAAK5O,KAAVT,OACZA,MAAK4X,SAAW5X,MAAK4X,SAASnX,KAAdT,OAChBA,MAAK6X,eAAiB7X,MAAK6X,eAAepX,KAApBT,OACtBA,MAAK8X,kBAAoB9X,MAAK8X,kBAAkBrX,KAAvBT,OACzBA,MAAK+X,SAAW/X,MAAK+X,SAAStX,KAAdT,OAChBA,MAAKgY,WAAahY,MAAKgY,WAAWvX,KAAhBT,OAClBA,MAAKiY,kBAAoBjY,MAAKiY,kBAAkBxX,KAAvBT,OACzBA,MAAKkY,QAAUlY,MAAKkY,QAAQzX,KAAbT,OA3BEA,MVopFlB,MAtjBA5C,WAAU4Z,iBAAkBlX,kBAmC5B7B,aAAa+Y,mBACXvY,IAAK,OACLd,MAAO,WUrmEH,GAAAwO,QAAApM,IACLA,MAAKgY,WAAWzK,KACd,SAAA/L,MACE4K,OAAK3K,UACH2W,SAAU5W,KACV6V,KAAMjL,OAAKjM,MAAMkX,KAAK,KAG1B,SAAA1V,OACEmM,KAAK,QAASnM,MAAM0W,aAAc,cVymErC3Z,IAAK,WACLd,MAAO,WUpmERoC,KAAKyB,UACH4V,KAAMrX,KAAKG,MAAMkX,KAAK,OVymEvB3Y,IAAK,WACLd,MAAO,WUrmER,MAAOoC,MAAKmY,QAAQnY,KAAK3B,MAAMmG,iBAAkB6G,YAAarL,KAAKG,MAAMkL,iBVymExE3M,IAAK,UACLd,MAAO,SUvmEF6P,IAAK6K,WAAW,GAAA5K,QAAA1N,IACtB,OAAO,IAAI2N,SAAQ,SAACC,QAAS2K,QAC3BrX,EAAEC,KAAKsM,KACLpM,OAAQ,MACRC,SAAU,OACVE,KAAM8W,UACN/W,QAAS,SAASC,MAChBoM,QAAQpM,OACRd,KAFOgN,QAGT/L,MAAO,SAASA,OAAOqM,WAAYC,aACjCsK,OAAO5W,QACPC,QAAQD,MAAMA,gBV+mEnBjD,IAAK,kBACLd,MAAO,SU1mEM4a,MAAO5a,OACrB,GAAIuZ,cAAevZ,MACfyN,YAAcrL,KAAKG,MAAMkL,WAC7B,KAAK,GAAIkB,WAAWlB,aACdkB,QAAU4K,oBACL9L,aAAYkB,QAIvBvM,MAAKyB,UAAU0V,0BAAc9L,6BV6mE5B3M,IAAK,aACLd,MAAO,SU3mEC6a,UAAWC,cACpB,OAAO1Y,KAAKG,MAAMkX,MAChB,IAAK,GACH,MAAOoB,UACT,KAAK,GACH,MAAOC,kBV+mEVha,IAAK,oBACLd,MAAO,SU5mEQ+a,kBAAmBC,iBACnC,OAAO5Y,KAAKG,MAAMiX,aAChB,KAAK,EACH,MAAOuB,kBACT,MAAK,EACH,MAAOC,qBVgnEVla,IAAK,iBACLd,MAAO,WU7mEO,GAAA8Q,QAAA1O,IACfA,MAAKgY,WAAWzK,KACd,SAAA/L,MACEkN,OAAKjN,UACH2W,SAAU5W,KACV4V,aAAa,KAGjB,SAAAzV,OACEmM,KAAK,SAAUnM,MAAM0W,aAAc,cVinEtC3Z,IAAK,oBACLd,MAAO,WU5mER,GAAIsZ,UAAWlX,KAAKG,MAAM+W,QAE1BA,UAAS0B,mBACT5Y,KAAKyB,UACH2V,aAAa,EACbF,uBVinEDxY,IAAK,SACLd,MAAO,WU3mER,IAAK,GADDgR,aACKtQ,EAAE,EAAGA,GAAG0B,KAAKG,MAAMgX,aAAc7Y,IACxCsQ,SAASpG,KACPnG,MAAAC,cAACwN,gBACCxK,KAAMhH,EACNwG,MAAO,WAAaxG,EACpB0H,YAAahG,KAAKwX,YAClBxH,UAAU,EACVpS,MAAOoC,KAAKG,MAAMkL,YAAY/M,GAC9B2M,aAAcjL,KAAKG,MAAM6K,WAAW1M,KAK1C,IAAIqa,mBACFtW,MAAAC,cAAA,OAAK6B,UAAU,OACb9B,MAAAC,cAAA,OAAK6B,UAAU,aACf9B,MAAAC,cAAA,OAAK6B,UAAU,mBACX9B,MAAAC,cAAA,QAAM6B,UAAU,UAChB9B,MAAAC,cAAA,OACE6B,UAAU,oBACViG,QAASpK,KAAK8X,gBAFhB,MAOAzV,MAAAC,cAAA,OAAK6B,UAAU,gBAAf,qBAOJyU,sBACJ,IAAI5Y,KAAKG,MAAMiY,SAAU,CAEvB,GAAM/T,4BAA6BrE,KAAK3B,MAAMgG,2BAA2BrE,KAAKG,MAAMiY,SAAStL,QAEzF1I,oBACJ,KAAK,GAAIhI,MAAMiI,4BACbD,kBAAkBhI,IAAM4D,KAAK3B,MAAM+F,kBAAkBhI,GAEvDgI,mBAAoBpE,KAAK3B,MAAM4C,eAAemD,kBAAmB,YAEjEwU,gBACEvW,MAAAC,cAAA,OAAK6B,UAAU,OACb9B,MAAAC,cAAA,OAAK6B,UAAU,4BACb9B,MAAAC,cAAA0U,kBAAAna,SACEqa,SAAUlX,KAAKG,MAAM+W,SAAS0B,gBAC9BxU,kBAAmBA,kBACnBC,2BAA4BA,2BAC5BV,mBAAoB3D,KAAK3B,MAAMsF,mBAC/BD,iBAAkB1D,KAAK3B,MAAMqF,iBAC7BmV,kBAAmB7Y,KAAKyX,uBACxBqB,aAAiBpW,MAAMuB,QAAvB,kEAEF5B,MAAAC,cAAA,KAAG6B,UAAU,aAAahB,OAAQgH,OAAO,WAAYC,QAASpK,KAAK+X,mBAAnE,wBAMR,GAAIU,WACFpW,MAAAC,cAAA,WACED,MAAAC,cAAA,OAAK6B,UAAU,OACb9B,MAAAC,cAAA,OAAK6B,UAAU,4BACb9B,MAAAC,cAACuD,eACCf,MAAM,eACN6K,KAAK,mIAGPtN,MAAAC,cAACyW,gBACCjU,MAAM,iBACNoM,IAAI,IACJC,IAAI,MACJvT,MAAOoC,KAAKG,MAAMgX,aAClBnR,YAAahG,KAAK4X,kBAEnBhJ,WAGJ5O,KAAKkY,kBAAkBS,kBAAmBC,iBAC3CvW,MAAAC,cAAA,OAAK6B,UAAU,mCACb9B,MAAAC,cAAA,OAAK6B,UAAU,gBAAf,QAGA9B,MAAAC,cAAA,QAAM6B,UAAU,UACd9B,MAAAC,cAAA,OACE6B,UAAU,uBACViG,QAASpK,KAAKsP,MAEdjN,MAAAC,cAAA,QAAM6B,UAAU,0CAQtBuU,mBACJ,IAAI1Y,KAAKG,MAAMiY,SAAU,CAGvB,GAAI7U,iBACAvD,MAAKG,MAAMiY,SAAStL,SACtBvJ,cAAcvD,KAAKG,MAAMiY,SAAStL,QAAU9M,KAAK3B,MAAMkF,cAAcvD,KAAKG,MAAMiY,SAAStL,QAG3F,IAAIkM,OAAQhZ,KAAK3B,MAAM4a,OAAOjZ,KAAKG,MAAMiY,SAASlN,aAC9CgO,MAAQlZ,KAAK3B,MAAM8a,YAAYH,OAAOI,OAAOpZ,KAAKG,MAAMiY,SAASjN,WAEjEkO,cAAgB5b,OAAO6b,OAAOtZ,KAAKG,MAAMkL,aACzCkO,eAAiBF,cAAcG,KAAK,MAIpCjV,cAAgBvE,KAAK3B,MAAM4C,eAAejB,KAAK3B,MAAMkG,cAAe,OAExEmU,cACErW,MAAAC,cAAA,OAAK6B,UAAU,OACb9B,MAAAC,cAAA,OAAK6B,UAAU,aACb9B,MAAAC,cAAAtD,eAAAnC,SACEqa,SAAUlX,KAAKG,MAAM+W,SAASwB,aAC9BxN,YAAalL,KAAKG,MAAMiY,SAASlN,YACjC8N,MAAOA,MACP7N,UAAWnL,KAAKG,MAAMiY,SAASjN,UAC/B+N,MAAOA,MACPO,uBAAwBF,eACxBG,kBAAmB1Z,KAAKG,MAAMiY,SAASuB,YACvCpW,cAAeA,cACfC,kBAAmBxD,KAAK3B,MAAMmF,kBAC9Be,cAAeA,cACf3B,sBAAuB5C,KAAK3B,MAAMuE,sBAClCgB,qBAAsB5D,KAAK3B,MAAMuF,qBACjCH,uBAAwBzD,KAAK3B,MAAMoF,uBACnCE,mBAAoB3D,KAAK3B,MAAMsF,mBAC/BD,iBAAkB1D,KAAK3B,MAAMqF,iBAC7BY,WAAYtE,KAAK3B,MAAMiG,WACvBT,oBAAqB7D,KAAK3B,MAAMwF,oBAChCC,qBAAsB9D,KAAK3B,MAAMyF,qBACjC+U,kBAAmB7Y,KAAK0X,oBACxBkC,OAAWlX,MAAMuB,QAAjB,qDACAF,cAAe/D,KAAK3B,MAAM0F,gBAE5B1B,MAAAC,cAACwD,eACChB,MAAM,YAGVzC,MAAAC,cAAA,OAAK6B,UAAU,mCACb9B,MAAAC,cAAA,QAAM6B,UAAU,UACd9B,MAAAC,cAAA,OACE6B,UAAU,uBACViG,QAASpK,KAAK6X,UAEdxV,MAAAC,cAAA,QAAM6B,UAAU,uCAGpB9B,MAAAC,cAAA,OAAK6B,UAAU,gBAAf,cAQR,MACE9B,OAAAC,cAAC2G,aACC3D,KAAK,mBACLlJ,GAAG,mBACHkU,SAAUtQ,KAAKsX,aACf/R,IAAI,QAEHvF,KAAKiY,WAAWQ,UAAWC,kBVypE/Bha,IAAK,eACLd,MAAO,SUhpEGic,YAAajc,OAAO,GAAAkc,QAAA9Z,KAC3BgL,WAAahL,KAAKG,MAAM6K,UAGR,aAAhB6O,aAAuC,KAAVjc,QACzB,SAASmc,KAAK/Z,KAAKG,MAAM+W,SAAS3K,SAGtCvB,WAAWuB,SAAU,EAFrBvB,WAAWuB,SAAU,GAOL,aAAhBsN,aAAwC,KAAVjc,QAC5Boc,MAAMpc,QAAWA,MAAQoC,KAAK3B,MAAMiG,WAAWtE,KAAKG,MAAM8Z,sBAC5DjP,WAAW4B,UAAW,EAEtB5B,WAAW4B,UAAW,EAK1B,IAAIiG,0BAA2B7S,KAAK3B,MAAMoF,uBAAuBzD,KAAKG,MAAM+Z,oBACnDzc,QAAO+J,KAAKqL,0BAA0BN,IAAI,SAACC,WAElE,GAAIC,UAAWqH,OAAKzb,MAAMsF,mBAAmBkP,yBAAyBL,WAAzB,YAAmDC,QAC/E,YAAbA,UACEoH,cAAgBrH,YACdwH,MAAMpc,QAAoB,KAAVA,MAClBoN,WAAWwH,YAAa,EAExBxH,WAAWwH,YAAa,IAMhCxS,MAAKyB,UACHuJ,WAAYA,gBV4pEbtM,IAAK,eACLd,MAAO,SUppEG2Q,GACXA,EAAE2G,iBAEFlV,KAAK2X,gBV4pEJjZ,IAAK,aACLd,MAAO,WUrpER,GAAIsZ,UAAWlX,KAAKG,MAAM+W,SACtB0B,gBAAkB5Y,KAAKG,MAAM+W,SAAS0B,gBACtCF,aAAe1Y,KAAKG,MAAM+W,SAASwB,YACvCxB,UAAA,gBAA8BxO,KAAKE,UAAUgQ,iBAC7C1B,SAAA,aAA2BxO,KAAKE,UAAU8P,cAE1C9W,QAAQ0L,IAAI4J,SAASwB,cACrB9W,QAAQ0L,IAAI4J,SAAS0B,gBAErB,IAAIuB,SAAU,GAAIC,SAClB,KAAK,GAAI1b,OAAOwY,UACQ,KAAlBA,SAASxY,MACXyb,QAAQE,OAAO3b,IAAKwY,SAASxY,KAIjCwC,GAAEC,MACA4E,KAAM,OACN0H,IAAKzN,KAAK3B,MAAMub,OAChBpY,KAAM2Y,QACNtM,OAAO,EACPyM,aAAa,EACbC,aAAa,EACbC,IAAK,WACH,GAAIA,KAAM,GAAIzF,QAAO0F,cACrB,OAAOD,MACP9Z,KAAKV,MACPuB,QAAS,WAEPuM,KAAK,+BAAgC,GAAI,WACzC9N,KAAK3B,MAAMmP,aACX9M,KAAKV,MACP2B,MAAO,SAASoM,KACdnM,QAAQD,MAAMoM,IACd,IAAIG,KAAMH,IAAII,aAAeJ,IAAII,aAAaC,QAAU,iBACxDpO,MAAKyB,UACHwJ,aAAciD,MAEhBJ,KAAKI,IAAK,GAAI,UACdxN,KAAKV,WVorERtB,IAAK,cACLd,MAAO,QAAS8c,aU1pEPC,SAAUzD,UACpB,GAAIwD,cAAc,EAEdE,gBACF5B,MAAO,KACP6B,WAAY,KAad,OAVApd,QAAO+J,KAAKoT,gBAAgBrI,IAAI,SAASiG,OACnCtB,SAASsB,OACXoC,eAAepC,OAAStB,SAASsB,OACxBmC,SAASnC,SAClBmC,SAASnC,OAAOna,MAAMyc,UAAW,EACjCJ,aAAc,KAGlB1a,KAAK+a,cAEEL,eVqqENhc,IAAK,cACLd,MAAO,SU7pEEic,YAAajc,OAIvBoC,KAAK3B,MAAMgQ,mBAAoBC,WAAYtO,KAAK3B,MAAMgQ,WAElC,UAAhBwL,aAAqC,KAAVjc,OAA0BoR,SAAVpR,QAC7CoC,KAAKG,MAAMiZ,OAASpZ,KAAK3B,MAAM8a,YAAYnZ,KAAK3B,MAAM4a,OAAOrb,QAAQwb,OAGvE,IAAIlC,UAAWlX,KAAKG,MAAM+W,SACtB7L,YAAcrL,KAAKG,MAAMkL,WAGzB2O,OAAMH,aACR3C,SAAS2C,aAAejc,MAExByN,YAAYwO,aAAejc,MAG7BoC,KAAKyB,UACHyV,kBACA7L,6BViqED3M,IAAK,yBACLd,MAAO,SU9pEaod;AACrB,GAAI9D,UAAWlX,KAAKG,MAAM+W,QAC1BA,UAAS0B,gBAAkBoC,oBAE3Bhb,KAAKyB,UAAUyV,uBViqEdxY,IAAK,sBACLd,MAAO,SU/pEUqd,kBAClB,GAAI/D,UAAWlX,KAAKG,MAAM+W,QAC1BA,UAASwB,aAAeuC,iBAExBjb,KAAKyB,UAAUyV,wBVmqETD,kBUrpFqB5U,MAAMiE,UAsfrC2Q,kBAAiB7N,WACf8R,QAAS7Y,MAAMgH,UAAUC,OAAOC,WAChCqQ,OAAQvX,MAAMgH,UAAUC,OAAOC,WAC/B4R,aAAc9Y,MAAMgH,UAAUI,MVqqE/BvN,QAAQW,QUlqEMoa,kBVsqET,SAAS9a,OAAQD,SAEtB,YAQA,SAASY,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAVjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBW7qF3hBoe,wBX+rFyB,SAAUrb,kBW9rFvC,QAAAqb,2BAActe,gBAAAkD,KAAAob,wBAAA,IAAAnb,OAAA/C,2BAAA8C,MAAAob,wBAAAnd,WAAAR,OAAAyC,eAAAkb,0BAAA9e,KAAA0D,MAAA,OAGZC,OAAKob,0BAA4Bpb,MAAKob,0BAA0B3a,KAA/BT,OACjCA,MAAKqb,eAAiBrb,MAAKqb,eAAe5a,KAApBT,OACtBA,MAAKkS,QAAUlS,MAAKkS,QAAQzR,KAAbT,OACfA,MAAKmS,QAAUnS,MAAKmS,QAAQ1R,KAAbT,OANHA,MXs1Fb,MAvJA5C,WAAU+d,wBAAyBrb,kBAcnC7B,aAAakd,0BACX1c,IAAK,iBACLd,MAAO,SWtsFK0H,KAAM1H,OACnB,GAAIwZ,aAAcpX,KAAK3B,MAAMkN,SAAS6L,WACtCA,aAAY9R,MAAQ1H,MACpBoC,KAAK3B,MAAM0R,gBAAgB,cAAeqH,gBXysFzC1Y,IAAK,UACLd,MAAO,WWtsFR,GAAIwZ,aAAcpX,KAAK3B,MAAMkN,SAAS6L,WACtCA,aAAY5V,QACZxB,KAAK3B,MAAM0R,gBAAgB,cAAeqH,gBX0sFzC1Y,IAAK,UACLd,MAAO,SWxsFF0H,KAAM1H,OACZ,GAAI4D,MAAOxB,KAAK3B,MAAMkN,SAAS6L,YAAY5V,IAC3CA,MAAK8D,MAAQ1H,MACboC,KAAKsb,eAAe,OAAQ9Z,SX+sF3B9C,IAAK,4BACLd,MAAO,SW3sFgByU,cAAc,GAAAjG,QAAApM,KAClCub,uBAAyB9d,OAAO+J,KAAK6K,cAAcE,IAAI,SAACC,WAC1D,GAAIC,UAAWrG,OAAK/N,MAAMsF,mBAAmB0O,aAAaG,WAAb,YAAuCC,QAEpF,IAAiB,SAAbA,UAAoC,WAAbA,SAAuB,CAChD,GAA6C,MAAzCJ,aAAaG,WAAb,WACF,MACEnQ,OAAAC,cAACwN,gBACCxK,KAAMkN,UACN1N,MAAOuN,aAAaG,WAAb,KACPxM,YAAaoG,OAAKgG,QAClBpC,SAAUqC,aAAaG,WAAb,SACV5U,MAAOwO,OAAK/N,MAAMkN,SAAS6L,YAAY5V,KAAKgR,YAKlD,IAA8C,OAA1CH,aAAaG,WAAb,WACF,MACEnQ,OAAAC,cAAC2N,eACC3K,KAAMkN,UACN1N,MAAOuN,aAAaG,WAAb,KACPtC,QAAS9D,OAAK/N,MAAMqF,iBAAiB2O,aAAaG,WAAb,YACrCxM,YAAaoG,OAAKgG,QAClBpC,SAAUqC,aAAaG,WAAb,SACV5U,MAAOwO,OAAK/N,MAAMkN,SAAS6L,YAAY5V,KAAKgR,aAMpD,GAAiB,aAAbC,SACF,MACEpQ,OAAAC,cAACoQ,aACCpN,KAAMkN,UACN1N,MAAOuN,aAAaG,WAAb,KACPxM,YAAaoG,OAAKgG,QAClB7M,IAAKiN,UACLxC,SAAUqC,aAAaG,WAAb,SACV5U,MAAOwO,OAAK/N,MAAMkN,SAAS6L,YAAY5V,KAAKgR,cASpD,OAAO+I,2BXysFN7c,IAAK,SACLd,MAAO,WWrsFR,GAAI4d,oBAEFA,cADExb,KAAK3B,MAAMmD,KAAK+J,SAAS6L,YAEzB/U,MAAAC,cAACwD,eAAchB,MAAM,WAIrBzC,MAAAC,cAACwD,eAAchB,MAAM,UAIzB,IAAIyW,8BACJ,IAAIvb,KAAK3B,MAAMkN,SAAS6L,YAAYqE,WAAY,CAC9C,GAAIC,8BAA+B1b,KAAK3B,MAAMgG,2BAA2BrE,KAAK3B,MAAMkN,SAAS6L,YAAYqE,WAErGC,gCACE1b,KAAK3B,MAAMkN,SAAS6L,YAAY5V,KAClC+Z,uBAAyBvb,KAAKqb,0BAA0BK,8BAExD1b,KAAKmS,WAKX,MACE9P,OAAAC,cAAC2G,aACC3D,KAAK,sBACLgL,SAAUtQ,KAAK3B,MAAMoG,aACrBc,IAAI,QAEJlD,MAAAC,cAAC2N,eACC3K,KAAK,aACLR,MAAM,WACNoL,QAASlQ,KAAK3B,MAAM+F,kBACpB4B,YAAahG,KAAKsb,eAClBtL,UAAU,EACVpS,MAAOoC,KAAK3B,MAAMkN,SAAS6L,YAAYqE,aAExCF,uBACDlZ,MAAAC,cAACoQ,aACCpN,KAAK,OACLR,MAAM,OACNkB,YAAahG,KAAKsb,eAClBtL,UAAU,EACVpS,MAAOoC,KAAK3B,MAAMkN,SAAS6L,YAAYnE,OAEzC5Q,MAAAC,cAAC4Q,aACC5N,KAAK,OACLR,MAAM,OACNkB,YAAahG,KAAKsb,eAClBtL,UAAU,EACVpS,MAAOoC,KAAK3B,MAAMkN,SAAS6L,YAAYjE,OAEzC9Q,MAAAC,cAAC8Q,iBACC9N,KAAK,WACLR,MAAM,WACNkB,YAAahG,KAAKsb,eAClB1d,MAAOoC,KAAK3B,MAAMkN,SAAS6L,YAAY/D,WAExCmI,kBXysFCJ,yBWv1F4B/Y,MAAMiE,UAqJ5C8U,yBAAwBhS,aXusFvBlN,QAAQW,QWpsFMue,yBXwsFT,SAASjf,OAAQD,QAASH,qBAE/B,YAYA,SAASW,wBAAuBC,KAAO,MAAOA,MAAOA,IAAIC,WAAaD,KAAQE,QAASF,KAEvF,QAASG,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAhBjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBYn3FjiB2e,sBAAA5f,oBAAA,IZu3FK6f,uBAAyBlf,uBAAuBif,uBY32F/CE,qBZ+3FsB,SAAU9b,kBY93FpC,QAAA8b,sBAAYxd,OAAOvB,gBAAAkD,KAAA6b,qBAAA,IAAA5b,OAAA/C,2BAAA8C,MAAA6b,qBAAA5d,WAAAR,OAAAyC,eAAA2b,uBAAAvf,KAAA0D,KACX3B,OADW,OAGjB4B,OAAKE,OACH6K,cACAC,aAAc,KACd6Q,eAAgBxQ,MAChByQ,gBAAiB,EACjBpS,WAAY2B,GAAG,GACfK,eAAgB,GAGlB1L,MAAK2L,eAAiB3L,MAAK2L,eAAelL,KAApBT,OACtBA,MAAK+b,aAAe/b,MAAK+b,aAAatb,KAAlBT,OACpBA,MAAK6L,aAAe7L,MAAK6L,aAAapL,KAAlBT,OACpBA,MAAK+L,kBAAoB/L,MAAK+L,kBAAkBtL,KAAvBT,OACzBA,MAAKgc,cAAgBhc,MAAKgc,cAAcvb,KAAnBT,OACrBA,MAAKic,gBAAkBjc,MAAKic,gBAAgBxb,KAArBT,OACvBA,MAAKkc,kBAAoBlc,MAAKkc,kBAAkBzb,KAAvBT,OACzBA,MAAKkM,KAAOlM,MAAKkM,KAAKzL,KAAVT,OAnBKA,MZ4nGlB,MA7PA5C,WAAUwe,qBAAsB9b,kBA2BhC7B,aAAa2d,uBACXnd,IAAK,iBACLd,MAAO,SYt4FKc,KACb,GAAIiL,WAAY3J,KAAKG,MAAMwJ,SAC3BA,WAAUjL,MAAQiL,UAAUjL,KAC5BsB,KAAKyB,UAAUkI,yBZy4FdjL,IAAK,oBACLd,MAAO,WYv4FU,GAAAwO,QAAApM,KACd8b,cAAgB9b,KAAKG,MAAM2b,cAC3BzP,YAAc5O,OAAO+J,KAAKxH,KAAK3B,MAAMwE,gBAAgByJ,KACvD,SAAA5N,KAAA,MAA0C,cAAnC0N,OAAK/N,MAAMwE,eAAenE,MAGnC,KAAK,GAAI+M,aAAaqQ,eACpBA,cAAcrQ,WAAWe,SAAWH,YACpCyP,cAAcrQ,WAAWgB,YAAc,GACvCzM,KAAKmM,KAAK2P,cAAcrQ,WAAYzL,KAAK3B,MAAMqG,eAAe6I,KAC5D,WAAOnB,OAAK/N,MAAM0F,gBAAiBqI,OAAK/N,MAAM+d,gBZ84FjD1d,IAAK,OACLd,MAAO,SY14FL4D,KAAMiM,KAAK,GAAAC,QAAA1N,IACd,OAAO,IAAI2N,SAAQ,SAAAC,SACjB1M,EAAEC,MACA4E,KAAM,OACN0H,IAAKA,IACLjM,MAAOA,KAAMkH,KAAKE,UAAUpH,OAC5BqM,OAAO,EACPtM,QAAS,WACPqM,UACAE,KAAK,mCAAoC,GAAI,YAE/CnM,MAAO,SAASoM,KACdnM,QAAQD,MAAMoM,IACd,IAAIG,KAAMH,IAAII,aAAeJ,IAAII,aAAaC,QAAU,iBACxDpO,MAAKyB,UACHwJ,aAAciD,MAEhBJ,KAAKI,IAAK,GAAI,UACdxN,KAPKgN,eZw5FVhP,IAAK,eACLd,MAAO,SY74FG0H,KAAM1H,MAAOc,KACxBsB,KAAK3B,MAAMgQ,mBAAoBC,WAAYtO,KAAK3B,MAAMgQ,UACtD,IAAIgO,QAASrc,KAAKG,MAAMkc,OACpBP,cAAgB9b,KAAKG,MAAM2b,aAC/B,IAAa,WAATxW,KAAmB,CACpB+W,OAASze,KACT,KAAK,GAAI6N,aAAaqQ,eACpBA,cAAcrQ,WAAWkB,SAAW0P,OACpCP,cAAcrQ,WAAWiB,WAAa2P,WAGzCP,eAAcpd,KAAK4G,MAAQ1H,KAE7BoC,MAAKyB,UAAUqa,4BAAeO,mBZg5F7B3d,IAAK,eACLd,MAAO,WY94FK,GAAA8Q,QAAA1O,KACT8b,cAAgB9b,KAAKG,MAAM2b,cAC3BpQ,MAAQ1L,KAAKG,MAAM4b,gBACnBpS,UAAY3J,KAAKG,MAAMwJ,UACvB0S,OAASrc,KAAKG,MAAMkc,OACpB5P,YAAc,GAGdD,SAAW/O,OAAO+J,KAAKxH,KAAK3B,MAAMwE,gBAAgByJ,KACpD,SAAA5N,KAAA,MAA0C,cAAnCgQ,OAAKrQ,MAAMwE,eAAenE,MAGnCod,eAAcpQ,MAAM,IAClBc,SAAUA,SACVG,SAAU0P,OACV3P,WAAY2P,OACZ5P,YAAaA,aAGf9C,UAAU+B,MAAM,IAAK,EAErB1L,KAAKyB,UACHqa,cAAeA,cACfC,gBAAiBrQ,MAAQ,EACzB/B,UAAWA,eZo5FZjL,IAAK,oBACLd,MAAO,SYj5FQ2Q,GAChB,GAAI5C,gBAAiB4C,EAAEnQ,OAAOR,KAC9BoC,MAAKyB,UAAUkK,mCZo5FdjN,IAAK,gBACLd,MAAO,SYl5FIc,KAOZ,IAAK,GANDgN,OAAQ1L,KAAKG,MAAM4b,gBACnBpS,UAAY3J,KAAKG,MAAMwJ,UACvB6E,QAAU9C,MAAM,EAChBoQ,cAAgB9b,KAAKG,MAAM2b,cAC3BrN,WAAazO,KAAKG,MAAMwL,eAEnBrN,EAAE,EAAGA,GAAGmQ,WAAYnQ,IAC3Bwd,cAActN,SAAW9F,KAAKC,MAAMD,KAAKE,UAAUkT,cAAcpd,aAC1Dod,eAActN,SAASjC,QAC9B5C,UAAU6E,UAAW,EACrBA,SAGFxO,MAAKyB,UACHqa,cAAeA,cACfC,gBAAiBvN,QACjB7E,UAAWA,eZs5FZjL,IAAK,kBACLd,MAAO,SYn5FMc,KACd,GAAIod,eAAgB9b,KAAKG,MAAM2b,oBACxBA,eAAcpd,KACrBsB,KAAKyB,UAAUqa,iCZs5Fdpd,IAAK,SACLd,MAAO,WYp5FD,GAAAkc,QAAA9Z,KAEHsc,mBAAqB7e,OAAO+J,KAAKxH,KAAKG,MAAM2b,eAC5CS,cACAje,EAAI,EAJDuQ,2BAAA,EAAAC,mBAAA,EAAAC,eAAAC,MAAA,KAKP,OAAAC,OALOC,MAAA,cAKExQ,KALFuQ,MAAArR,KAML2e,YAAW/T,KACTnG,MAAAC,cAAAsZ,uBAAA/e,SACE6B,IAAKA,IACL8d,aAAc9d,IACdtC,GAAIkC,EACJqL,UAAWmQ,OAAK3Z,MAAMwJ,UAAUjL,KAChCkN,eAAgBkO,OAAKlO,eACrBH,UAAWqO,OAAK3Z,MAAM2b,cAAcpd,MAAQ,KAC5Cwd,gBAA+C,IAA9BI,mBAAmB/d,OAAe,iBAAMub,QAAKoC,gBAAgBxd,MAAO,KACrFsd,aAAc1d,GAAKge,mBAAmB/d,OAASub,OAAKkC,aAAe,KACnEhQ,kBAAmB8N,OAAK9N,kBACxBL,eAAgBmO,OAAK3Z,MAAMwL,eAC3BsQ,cAAe3d,GAAKge,mBAAmB/d,QAAUub,OAAK3Z,MAAM2b,cAAcpd,KAAOob,OAAKmC,cAAgB,KACtGnQ,aAAcgO,OAAKhO,aACnBuC,SAAUyL,OAAKzb,MAAMgQ,SACrB1J,yBAA0BmV,OAAKzb,MAAMsG,yBACrCiP,4BAA6BkG,OAAKzb,MAAMuV,+BAI5CtV,KArBF+Q,UAAgBiN,mBAAhBzV,OAAAC,cAAA+H,2BAAAI,MAAAI,UAAAC,QAAAC,MAAAV,2BAAA,EAAoCK,QAL7B,MAAAnB,KAAAe,mBAAA,EAAAC,eAAAhB,IAAA,aAAAc,2BAAAQ,UAAAG,QAAAH,UAAAG,SAAA,WAAAV,kBAAA,KAAAC,iBA6BP,MACE1M,OAAAC,cAAC2G,aACC3D,KAAK,gBACLgL,SAAUtQ,KAAKmc,kBACf5W,IAAI,QAEJlD,MAAAC,cAAA,WACAD,MAAAC,cAAA,OAAK6B,UAAU,OACb9B,MAAAC,cAAA,OAAK6B,UAAU,aACb9B,MAAAC,cAAC2N,eACC3K,KAAK,SACLR,MAAM,OACNoL,QAASlQ,KAAK3B,MAAMuG,QACpBoB,YAAahG,KAAK8L,aAClBkE,UAAU,EACVpS,MAAOoC,KAAKG,MAAMkc,WAIvBE,WACCla,MAAAC,cAAA,OAAK6B,UAAU,4BACb9B,MAAAC,cAACwD,eAAchB,MAAM,iBZ47FvB+W,sBY7nGyBxZ,MAAMiE,UAwMzCuV,sBAAqBzS,WACnB8R,QAAS7Y,MAAMgH,UAAUC,OAAOC,WAChCgD,QAASlK,MAAMgH,UAAUC,OACzB6R,aAAc9Y,MAAMgH,UAAUI,MZ27F/BvN,QAAQW,QYx7FMgf,sBZ47FT,SAAS1f,OAAQD,SAEtB,YAQA,SAASY,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAVjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBappG3hByf,qBbsqGsB,SAAU1c,kBarqGpC,QAAA0c,wBAAc3f,gBAAAkD,KAAAyc,qBAAA,IAAAxc,OAAA/C,2BAAA8C,MAAAyc,qBAAAxe,WAAAR,OAAAyC,eAAAuc,uBAAAngB,KAAA0D,MAAA,OAGZC,OAAK6L,aAAe7L,MAAK6L,aAAapL,KAAlBT,OACpBA,MAAK4Q,KAAO5Q,MAAK4Q,KAAKnQ,KAAVT,OAJAA,Mbg2Gb,MA1LA5C,WAAUof,qBAAsB1c,kBAYhC7B,aAAaue,uBACX/d,IAAK,OACLd,MAAO,Wa5qGRoC,KAAK3B,MAAM4d,cAAcjc,KAAK3B,MAAMme,iBbmrGnC9d,IAAK,eACLd,MAAO,SahrGG0H,KAAM1H,OACjBoC,KAAK3B,MAAMyN,aAAaxG,KAAM1H,MAAOoC,KAAK3B,MAAMme,iBbmrG/C9d,IAAK,SACLd,MAAO,WajrGD,GAAAwO,QAAApM,KAEHyC,0BACAia,wBACAC,2BACAC,wBACA5c,MAAK3B,MAAM2d,eACbvZ,mBACEJ,MAAAC,cAAA,QAAM6B,UAAU,UACd9B,MAAAC,cAAA,OACE6B,UAAU,oBACViG,QAASpK,KAAK3B,MAAM2d,cAFtB,MASJU,iBACEra,MAAAC,cAAA,QAAM6B,UAAU,gBAAhB,cAMAnE,KAAK3B,MAAM4d,gBACbU,oBACEta,MAAAC,cAAA,QAAM6B,UAAU,UACd9B,MAAAC,cAAA,OACE6B,UAAU,oBACViG,QAASpK,KAAK6Q,MAEdxO,MAAAC,cAAA,QAAM6B,UAAU,oCAItByY,kBACEva,MAAAC,cAAA,QAAM6B,UAAU,gBACd9B,MAAAC,cAAA,SACE6B,UAAU,wBACV4B,KAAK,SACLmL,IAAI,IACJC,IAAI,KACJhO,OAAQiO,MAAO,GAAIhO,QAAS,UAC5BiL,SAAUrO,KAAK3B,MAAM2N,kBACrBpO,MAAOoC,KAAK3B,MAAMsN,iBARtB,UAeJ,IAAIkR,6BACJ,IAAI7c,KAAK3B,MAAM6d,gBAAiB,CAC9B,GAAM5K,aACJC,MAAO,UACPC,WAAY,GACZrH,OAAQ,UACRsH,SAAU,GAGZoL,uBACExa,MAAAC,cAAA,QACE6B,UAAU,6BACViG,QAASpK,KAAK3B,MAAM6d,gBACpB/Y,MAAOmO,aAKb,MACEjP,OAAAC,cAAC2G,aACC3D,KAAK,aAELjD,MAAAC,cAAA,OAAK6B,UAAU,OACb9B,MAAAC,cAAA,OAAK6B,UAAU,aACb9B,MAAAC,cAAA,WACAD,MAAAC,cAACwN,gBACCxK,KAAK,UACLR,MAAO,WAAa9E,KAAK3B,MAAMjC,GAC/B4J,YAAahG,KAAK8L,aAClBvG,IAAI,UACJyK,UAAU,EACVpS,MAAOoC,KAAK3B,MAAMoN,UAAUc,YAIhClK,MAAAC,cAAA,OAAK6B,UAAU,WAAWhB,OAAQwO,YAAY,EAAGC,UAAU,KACzDvP,MAAAC,cAAA,QACE6B,UAAYnE,KAAK3B,MAAMsL,UAAY,mCAAqC,iCACxExG,OAAQgH,OAAQ,UAAWsH,SAAS,GAAII,SAAS,WAAYC,MAAM,IACnEpH,cAAY,WACZC,cAAa,SAAW3K,KAAK3B,MAAMme,aACnCpS,QAAS,iBAAMgC,QAAK/N,MAAMuN,eAAeQ,OAAK/N,MAAMme,iBAErDK,wBAGLxa,MAAAC,cAAA,OAAK6B,UAAU,OACb9B,MAAAC,cAAA,OAAK6B,UAAU,aACf9B,MAAAC,cAAA,OAAK6B,UAAU,YACb9B,MAAAC,cAAA,OAAKlG,GAAI,QAAU4D,KAAK3B,MAAMme,aAAcrY,UAAU,YACpD9B,MAAAC,cAAC2N,eACC3K,KAAK,SACLR,MAAM,iBACNoL,QAASlQ,KAAK3B,MAAMsG,yBACpBqB,YAAahG,KAAK8L,aAClBkE,UAAU,EACVpS,MAAOoC,KAAK3B,MAAMoN,UAAUqB,YAKpCzK,MAAAC,cAAA,OAAK6B,UAAU,OACb9B,MAAAC,cAAA,OAAK6B,UAAU,aACb9B,MAAAC,cAAA,OAAK6B,UAAU,aACf9B,MAAAC,cAAA,OAAK6B,UAAU,mBACZ1B,mBACAia,kBAEHra,MAAAC,cAAA,OAAK6B,UAAU,mBACZwY,oBACAC,0BbstGLH,sBaj2GyBpa,MAAMiE,UAoJzCmW,sBAAqBrT,abktGpBlN,QAAQW,Qa/sGM4f,sBbmtGT,SAAStgB,OAAQD,SAEtB,YAQA,SAASY,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAVjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBc71G3hB+H,Kdo4GM,SAAUhF,kBcl4GpB,QAAAgF,MAAY1G,OAAOvB,gBAAAkD,KAAA+E,KAAA,IAAA9E,OAAA/C,2BAAA8C,MAAA+E,KAAA9G,WAAAR,OAAAyC,eAAA6E,OAAAzI,KAAA0D,KACX3B,QAEAye,KAAO/H,OAAOC,SAAS8H,KACzBC,UAAY,EAJC,OAYb9c,OAAK5B,MAAM6G,WAAa4X,KAC1BC,UAAYD,KAAKE,OAAO,GACf/c,MAAK5B,MAAM4G,WACpB8X,UAAY9c,MAAK5B,MAAM4G,WACdhF,MAAK5B,MAAM2G,KAAKzG,OAAS,IAClCwe,UAAY9c,MAAK5B,MAAM2G,KAAK,GAAG5I,IAGjC6D,MAAKE,OACH4c,UAAWA,WAGb9c,MAAKgd,YAAchd,MAAKgd,YAAYvc,KAAjBT,OACnBA,MAAKid,QAAUjd,MAAKid,QAAQxc,KAAbT,OACfA,MAAKkd,YAAcld,MAAKkd,YAAYzc,KAAjBT,OA1BFA,Mdw/GlB,MArHA5C,WAAU0H,KAAMhF,kBAkChB7B,aAAa6G,OACXrG,IAAK,cACLd,MAAO,Sc14GEwf,MAAO7O,GAKjB,GAJAvO,KAAKyB,UAAUsb,UAAWK,QAC1Bpd,KAAK3B,MAAMgf,YAAYD,OAGnBpd,KAAK3B,MAAM6G,UAAW,CACxB,GAAMoY,gBAAiBpc,EAAE,QAAQqc,aAAerc,EAAE,QAAQqc,WAC1DxI,QAAOC,SAAS8H,KAAOvO,EAAEnQ,OAAO0e,KAChC5b,EAAE,aAAaqc,UAAUD,oBd84G1B5e,IAAK,UACLd,MAAO,Wc14GR,GAAIoH,MAAQhF,KAAK3B,MAAM2G,KAAMuN,IAAI,SAASiL,KACxC,GAAIC,UAAWzd,KAAKG,MAAM4c,YAAcS,IAAIphB,GAAK,SAAW,KACxD6Y,KAAO,IAAMuI,IAAIphB,GACjBshB,MAAQ,OAASF,IAAIphB,EACzB,OACEiG,OAAAC,cAAA,MACEsI,KAAK,eACLzG,UAAWsZ,SACX/e,IAAK8e,IAAIphB,IAETiG,MAAAC,cAAA,KAAGlG,GAAIshB,MACJzI,KAAMA,KACNrK,KAAK,MACLF,cAAY,MACZN,QAASpK,KAAKid,YAAYvc,KAAK,KAAM8c,IAAIphB,KAEzCohB,IAAI1Y,SAIXpE,KAAKV,MAEP,OAAOgF,Sdg5GNtG,IAAK,cACLd,MAAO,Wc74GR,GAAI+f,UAAWtb,MAAMyF,SAASyK,IAAIvS,KAAK3B,MAAM0J,SAAU,SAASC,MAAOtJ,KACrE,GAAIsJ,MACF,MAAO3F,OAAMoG,aAAaT,OACxB+U,UAAW/c,KAAKG,MAAM4c,UACtBre,IAAKA,OAGTgC,KAAKV,MAEP,OAAO2d,adi5GNjf,IAAK,SACLd,MAAO,Wc94GR,GAAIoH,MAAOhF,KAAKkd,UACZS,SAAW3d,KAAKmd,cAChBS,UACFpM,WAAY,EACZqM,aAAc,MAGhB,OACExb,OAAAC,cAAA,WACED,MAAAC,cAAA,MAAI6B,UAAU,eAAeyG,KAAK,UAAUzH,MAAOya,UAChD5Y,MAEH3C,MAAAC,cAAA,OAAK6B,UAAU,eACZwZ,ed05GD5Y,Mc1/GS1C,MAAMiE,UAsGzBvB,MAAKqE,WACHpE,KAAM3C,MAAMgH,UAAUyU,MAAMvU,WAC5BtE,WAAY5C,MAAMgH,UAAUC,OAC5BpE,UAAW7C,MAAMgH,UAAU0U,MAE7BhZ,KAAKmE,cACHmU,YAAa,aAGbnY,WAAW,Ed85GZ,Icv5GK8Y,cdu5Gc,SAAUC,mBct5G5B,QAAAD,cAAY3f,OAAOvB,gBAAAkD,KAAAge,aAAA,IAAA5R,QAAAlP,2BAAA8C,MAAAge,aAAA/f,WAAAR,OAAAyC,eAAA8d,eAAA1hB,KAAA0D,KACX3B,QAEAye,KAAO/H,OAAOC,SAAS8H,KACzBC,UAAY,EAJC,OAYb3Q,QAAK/N,MAAM6G,WAAa4X,KAC1BC,UAAYD,KAAKE,OAAO,GACf5Q,OAAK/N,MAAM4G,WACpB8X,UAAY3Q,OAAK/N,MAAM4G,WACdmH,OAAK/N,MAAM2G,KAAKzG,OAAS,IAClCwe,UAAY3Q,OAAK/N,MAAM2G,KAAK,GAAG5I,IAGjCgQ,OAAKjM,OACH4c,UAAWA,WAGb3Q,OAAK6Q,YAAc7Q,OAAK6Q,YAAYvc,KAAjB0L,QACnBA,OAAK8Q,QAAU9Q,OAAK8Q,QAAQxc,KAAb0L,QACfA,OAAK+Q,YAAc/Q,OAAK+Q,YAAYzc,KAAjB0L,QA1BFA,OdghHlB,MAzHA/O,WAAU2gB,aAAcC,mBAkCxB/f,aAAa8f,eACXtf,IAAK,cACLd,MAAO,Sc95GEwf,MAAO7O,GAKjB,GAJAvO,KAAKyB,UAAUsb,UAAWK,QAC1Bpd,KAAK3B,MAAMgf,YAAYD,OAGnBpd,KAAK3B,MAAM6G,UAAW,CACxB,GAAMoY,gBAAiBpc,EAAE,QAAQqc,aAAerc,EAAE,QAAQqc,WAC1DxI,QAAOC,SAAS8H,KAAOvO,EAAEnQ,OAAO0e,KAChC5b,EAAE,aAAaqc,UAAUD,oBdk6G1B5e,IAAK,UACLd,MAAO,Wc95GR,GAAIoH,MAAQhF,KAAK3B,MAAM2G,KAAMuN,IAAI,SAASiL,KACxC,GAAIC,UAAWzd,KAAKG,MAAM4c,YAAcS,IAAIphB,GAAK,SAAW,KACxD6Y,KAAO,IAAMuI,IAAIphB,GACjBshB,MAAQ,OAASF,IAAIphB,EACzB,OACEiG,OAAAC,cAAA,MACEsI,KAAK,eACLzG,UAAWsZ,SACX/e,IAAK8e,IAAIphB,IAETiG,MAAAC,cAAA,KAAGlG,GAAIshB,MACJzI,KAAMA,KACNrK,KAAK,MACLF,cAAY,MACZN,QAASpK,KAAKid,YAAYvc,KAAK,KAAM8c,IAAIphB,KAEzCohB,IAAI1Y,SAIXpE,KAAKV,MAEP,OAAOgF,Sdo6GNtG,IAAK,cACLd,MAAO,Wcj6GR,GAAI+f,UAAWtb,MAAMyF,SAASyK,IAAIvS,KAAK3B,MAAM0J,SAAU,SAASC,MAAOtJ,KACrE,GAAIsJ,MACF,MAAO3F,OAAMoG,aAAaT,OACxB+U,UAAW/c,KAAKG,MAAM4c,UACtBre,IAAKA,OAGTgC,KAAKV,MAEP,OAAO2d,adq6GNjf,IAAK,SACLd,MAAO,Wcl6GR,GAAIoH,MAAOhF,KAAKkd,UACZS,SAAW3d,KAAKmd,cAChBS,UACFpM,WAAY,EACZqM,aAAc,MAGhB,OACExb,OAAAC,cAAA,WACED,MAAAC,cAAA,OAAK6B,UAAU,8BACb9B,MAAAC,cAAA,MAAI6B,UAAU,4BAA4ByG,KAAK,UAAUzH,MAAOya,UAC7D5Y,OAGL3C,MAAAC,cAAA,OAAK6B,UAAU,iCACZwZ,edg7GDK,ccjhHiB3b,MAAMiE,UAuGjC0X,cAAa5U,WACXpE,KAAM3C,MAAMgH,UAAUyU,MAAMvU,WAC5BtE,WAAY5C,MAAMgH,UAAUC,OAC5BpE,UAAW7C,MAAMgH,UAAU0U,MAE7BC,aAAa9U,cACXmU,YAAa,aAGbnY,WAAW,Edq7GZ,Ic96GKC,Sd86GS,SAAU+Y,mBAGtB,QAAS/Y,WAGP,MAFArI,iBAAgBkD,KAAMmF,SAEfjI,2BAA2B8C,MAAOmF,QAAQlH,WAAaR,OAAOyC,eAAeiF,UAAUsO,MAAMzT,KAAM0T,YA6B5G,MAlCArW,WAAU8H,QAAS+Y,mBAQnBhgB,aAAaiH,UACXzG,IAAK,SACLd,MAAO,Wcv7GR,GAAIugB,WAAY,WACZnb,YASJ,OAPIhD,MAAK3B,MAAM+G,QAAUpF,KAAK3B,MAAM0e,YAClCoB,WAAa,WAEXne,KAAK3B,MAAM+f,QACbpb,MAAQX,MAAAC,cAAA,UAAKtC,KAAK3B,MAAM+f,QAIxB/b,MAAAC,cAAA,OAAKsI,KAAK,WAAWzG,UAAWga,UAAW/hB,GAAI4D,KAAK3B,MAAM+G,OACvDpC,MACAhD,KAAK3B,MAAM0J,cdk8GV5C,Scj9GY9C,MAAMiE,UAoB5BnB,SAAQiE,WACNhE,MAAO/C,MAAMgH,UAAUC,OAAOC,WAC9B6U,MAAO/b,MAAMgH,UAAUC,OACvByT,UAAW1a,MAAMgH,UAAUC,Qdm8G5BpN,Qc/7GC6I,Udg8GD7I,Qc/7GC8hB,0Bdg8GD9hB,Qc/7GCiJ,iBdm8GI,SAAShJ,OAAQD,QAASH,qBAE/B,YAcA,SAASW,wBAAuBC,KAAO,MAAOA,MAAOA,IAAIC,WAAaD,KAAQE,QAASF,KAEvF,QAASG,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAlBjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIygB,UAAW5gB,OAAO6gB,QAAU,SAAUlgB,QAAU,IAAK,GAAIE,GAAI,EAAGA,EAAIoV,UAAUnV,OAAQD,IAAK,CAAE,GAAIigB,QAAS7K,UAAUpV,EAAI,KAAK,GAAII,OAAO6f,QAAc9gB,OAAOD,UAAUghB,eAAeliB,KAAKiiB,OAAQ7f,OAAQN,OAAOM,KAAO6f,OAAO7f,MAAY,MAAON,SAEnPF,aAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBe9uHjiByhB,OAAA1iB,oBAAA,IfkvHK2iB,QAAUhiB,uBAAuB+hB,QeruHhCE,UfgwHW,SAAU5e,kBe/vHzB,QAAA4e,WAAYtgB,OAAOvB,gBAAAkD,KAAA2e,UAAA,IAAA1e,OAAA/C,2BAAA8C,MAAA2e,UAAA1gB,WAAAR,OAAAyC,eAAAye,YAAAriB,KAAA0D,KACX3B,OADW,OAEjB4B,OAAKE,OAAUye,MAAM,EAAOC,cAAc,GAE1C5e,MAAK6e,UAAY7e,MAAK6e,UAAUpe,KAAfT,OACjBA,MAAK8e,WAAa9e,MAAK8e,WAAWre,KAAhBT,OAClBA,MAAK+e,aAAe/e,MAAK+e,aAAate,KAAlBT,OACpBA,MAAKgf,WAAahf,MAAKgf,WAAWve,KAAhBT,OAPDA,Mfg1HlB,MAhFA5C,WAAUshB,UAAW5e,kBAgBrB7B,aAAaygB,YACXjgB,IAAK,iBACLd,MAAO,WexwHO,GAAAwO,QAAApM,IACf,OAAOqC,OAAMyF,SAASyK,IAAIvS,KAAK3B,MAAM0J,SAAU,SAAAC,OAC7C,MAAO3F,OAAMoG,aAAaT,OAASwF,UAAWpB,OAAK2S,WAAY1Q,SAAUjC,OAAK6S,kBf8wH/EvgB,IAAK,YACLd,MAAO,We1wHRoC,KAAKyB,UACHmd,MAAM,Of+wHPlgB,IAAK,aACLd,MAAO,We3wHRoC,KAAKyB,UACHod,cAAc,OfgxHfngB,IAAK,eACLd,MAAO,We5wHJoC,KAAKG,MAAM0e,aACb/Q,MACE9K,MAAO,gBACP2M,KAAM,uEACN5J,KAAM,UACNmZ,kBAAkB,EAClBC,kBAAmB,UACnBC,iBAAkB,UAEpB,WACEpf,KAAK+e,cACLre,KAAKV,OAEPA,KAAK+e,gBfgxHNrgB,IAAK,aACLd,MAAO,We5wHRoC,KAAKyB,UACHmd,MAAM,EACNC,cAAc,OfixHfngB,IAAK,SACLd,MAAO,We7wHR,MACEyE,OAAAC,cAAAoc,QAAA7hB,QAAAwhB,UACEU,WAAY/e,KAAKgf,aACjBF,UAAW9e,KAAK8e,UAChBF,KAAM5e,KAAKG,MAAMye,MACb5e,KAAK3B,OAER2B,KAAKqf,sBfmxHJV,Wej1Hctc,MAAMiE,UAoE9BqY,WAAUvV,WACRpG,MAAOX,MAAMgH,UAAUC,OACvBrG,YAAaZ,MAAMgH,UAAUC,OAC7BgW,YAAajd,MAAMgH,UAAUG,OAC7BtG,cAAeb,MAAMgH,UAAUG,QAEjCmV,UAAUzV,cACRjG,YAAa,mBfmxHd/G,QAAQW,QehxHM8hB,WfoxHT,SAASxiB,OAAQD,SAEtB,YAQA,SAASY,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAVjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBgB72H3hBuiB,MhBu4HO,SAAUxf,kBgBr4HrB,QAAAwf,OAAYlhB,OAAO,MAAAvB,iBAAAkD,KAAAuf,OAAAriB,2BAAA8C,MAAAuf,MAAAthB,WAAAR,OAAAyC,eAAAqf,QAAAjjB,KAAA0D,KACX3B,QhBs/HP,MAjHAhB,WAAUkiB,MAAOxf,kBAQjB7B,aAAaqhB,QACX7gB,IAAK,SACLd,MAAO,WgBz4HR,GAqDI4hB,OArDEC,eACJ5N,SAAU,QACV6N,OAAQ,KACRC,IAAK,EACLC,OAAQ,EACRC,KAAM,EACN/N,MAAO,EACPgO,gBAAiB,kBACjBC,QAAS,IAILC,YACJnO,SAAU,WACVoO,SAAU,IACVC,UAAW,OACXC,OAAQ,SACRL,gBAAiB,OACjBM,aAAc,GACdC,UAAW,OACXX,OAAQ,MAGJY,YACJld,QAAS,OACTmd,cAAe,MACfC,WAAY,SACZC,WAAY,UACZzX,OAAQ,OACR0X,qBAAsB,KACtBnP,MAAO,UACPE,SAAU,GACVsO,QAAS,IAGLzO,YACJE,WAAY,OACZrH,OAAQ,WAGJwW,WACJZ,QAAS,IAGPa,OACFve,MAAAC,cAAA,OACE6B,UAAWnE,KAAK3B,MAAM4E,YACtBmH,QAASpK,KAAK3B,MAAMygB,WAEnB9e,KAAK3B,MAAM6E,cAmChB,OA9BIlD,MAAK3B,MAAMugB,OACbY,MACEnd,MAAAC,cAAA,OAAKa,MAAOsc,cAAerV,QAASpK,KAAK3B,MAAM0gB,YAC7C1c,MAAAC,cAAA,OACEa,MAAO6c,WACP5V,QAAS,SAAAmE,GACPA,EAAEsS,oBAGJxe,MAAAC,cAAA,OACEa,MAAOmd,YAENtgB,KAAK3B,MAAM2E,MACZX,MAAAC,cAAA,QACEa,MAAOmO,WACPlH,QAASpK,KAAK3B,MAAM0gB,YAFtB,MAOF1c,MAAAC,cAAA,OACEa,MAAOwd,WAEN3gB,KAAK3B,MAAM0J,aAQpB1F,MAAAC,cAAA,OAAKa,MAAOnD,KAAK3B,MAAM8E,OACpByd,OACApB,WhBy5HCD,OgBz/HUld,MAAMiE,UAsG1BiZ,OAAMnW,WACJpG,MAAOX,MAAMgH,UAAUC,OACvBrG,YAAaZ,MAAMgH,UAAUC,OAC7BgW,YAAajd,MAAMgH,UAAUG,OAC7BtG,cAAeb,MAAMgH,UAAUG,OAC/BoV,KAAMvc,MAAMgH,UAAUyX,QACtB/B,WAAY1c,MAAMgH,UAAUI,KAC5BqV,UAAWzc,MAAMgH,UAAUI,MAE7B8V,MAAMrW,cACJjG,YAAa,mBhBy5Hd/G,QAAQW,QgBt5HM0iB,OhB05HT,SAASpjB,OAAQD,SAEtB,YAQA,SAASY,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAVjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC;AAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBiB5hI3hB+jB,OjB+iIQ,SAAUhhB,kBiB7iItB,QAAAghB,QAAY1iB,OAAO,MAAAvB,iBAAAkD,KAAA+gB,QAAA7jB,2BAAA8C,MAAA+gB,OAAA9iB,WAAAR,OAAAyC,eAAA6gB,SAAAzkB,KAAA0D,KACX3B,QjBikIP,MApBAhB,WAAU0jB,OAAQhhB,kBAQlB7B,aAAa6iB,SACXriB,IAAK,SACLd,MAAO,WiBljIR,MACEyE,OAAAC,cAAA,OAAK6B,UAAU,oBACb9B,MAAAC,cAAA,OAAK6B,UAAU,gBjB0jIb4c,QiBpkIW1e,MAAMiE,UjBukI1BpK,SAAQW,QiBrjIMkkB,QjByjIT,SAAS5kB,OAAQD,SAEtB,YkBhlID,SAAS8kB,cAAaxL,OAAQyL,KAAMC,QAASC,YAO3C,GAAI1L,OACJ0L,YAAW1Z,QAAQ,SAAS2Z,OAAQC,OAClC5L,IAAI2L,QAAUF,QAAQG,QACrBrhB,KAGH,IAAIshB,WAMJ,IAHAA,QAAUA,QAAQ9H,KAAK,KAGR,YAAXhE,OAAsB,CACxB,GAAI+L,aAAc7e,MAAMuB,QAAU,8BAAgCwR,IAAA,OAClE,OAAOpT,OAAAC,cAAA,MAAI6B,UAAYmd,SAASjf,MAAAC,cAAA,KAAG2S,KAAMsM,aAAcN,OAGzD,GAAe,mBAAXzL,OAA6B,CAC/B,GAAI+L,aAAc7e,MAAMuB,QAAU,8BAAgCwR,IAAI,iBACtE,OAAOpT,OAAAC,cAAA,MAAI6B,UAAYmd,SAASjf,MAAAC,cAAA,KAAG2S,KAAMsM,aAAcN,OAGzD,GAAe,sBAAXzL,OAAgC,CAClC,GAAIgM,cAAe9e,MAAMuB,QAAU,+BAAiCwR,IAAI,oBACxE,OAAOpT,OAAAC,cAAA,MAAI6B,UAAYmd,SAASjf,MAAAC,cAAA,KAAG2S,KAAMuM,cAAeP,OAgB1D,MAAO5e,OAAAC,cAAA,MAAI6B,UAAWmd,SAAUL,MlBmiIjCxjB,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,IAwFT1B,QAAQW,QkBznIMmkB,clB6nIT,SAAS7kB,OAAQD,SAEtB,YmBjrID,SAAS8kB,cAAaxL,OAAQyL,KAAMC,QAASC,YAO3C,GAAI1L,OACJ0L,YAAW1Z,QAAQ,SAAS2Z,OAAQC,OAClC5L,IAAI2L,QAAUF,QAAQG,QACrBrhB,KAGH,IAAIshB,WAMJ,IAHAA,QAAUA,QAAQ9H,KAAK,KAGR,YAAXhE,OAAsB,CACxB,GAAIgM,cAAe9e,MAAMuB,QAAU,+BAAiCwR,IAAA,OACpE,OAAOpT,OAAAC,cAAA,MAAI6B,UAAYmd,SAASjf,MAAAC,cAAA,KAAG2S,KAAMuM,cAAeP,OAG1D,GAAe,mBAAXzL,OAA6B,CACb9S,MAAMuB,QAAU,+BAAiCwR,IAAI,iBACvE,OAAOpT,OAAAC,cAAA,MAAI6B,UAAYmd,SAASjf,MAAAC,cAAA,KAAG2S,KAAMuM,cAAeP,OAgB1D,MAAO5e,OAAAC,cAAA,MAAI6B,UAAWmd,SAAUL,MnByoIjCxjB,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,IA2ET1B,QAAQW,QmBltIMmkB","file":"./modules/biobank/js/biobankIndex.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _FilterForm = __webpack_require__(1);\n\t\n\tvar _FilterForm2 = _interopRequireDefault(_FilterForm);\n\t\n\tvar _specimenForm = __webpack_require__(3);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tvar _poolSpecimenForm = __webpack_require__(8);\n\t\n\tvar _poolSpecimenForm2 = _interopRequireDefault(_poolSpecimenForm);\n\t\n\tvar _containerForm = __webpack_require__(10);\n\t\n\tvar _containerForm2 = _interopRequireDefault(_containerForm);\n\t\n\tvar _Tabs = __webpack_require__(12);\n\t\n\tvar _FormModal = __webpack_require__(13);\n\t\n\tvar _FormModal2 = _interopRequireDefault(_FormModal);\n\t\n\tvar _Loader = __webpack_require__(15);\n\t\n\tvar _Loader2 = _interopRequireDefault(_Loader);\n\t\n\tvar _columnFormatterSpecimen = __webpack_require__(16);\n\t\n\tvar _columnFormatterSpecimen2 = _interopRequireDefault(_columnFormatterSpecimen);\n\t\n\tvar _columnFormatterContainer = __webpack_require__(17);\n\t\n\tvar _columnFormatterContainer2 = _interopRequireDefault(_columnFormatterContainer);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar BiobankIndex = function (_React$Component) {\n\t  _inherits(BiobankIndex, _React$Component);\n\t\n\t  function BiobankIndex() {\n\t    _classCallCheck(this, BiobankIndex);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankIndex.__proto__ || Object.getPrototypeOf(BiobankIndex)).call(this));\n\t\n\t    _this.state = {\n\t      isLoaded: false,\n\t      specimenFilter: {},\n\t      containerFilter: {},\n\t      isOpen: false,\n\t      formOptions: {}\n\t    };\n\t\n\t    // Bind component instance to custom methods\n\t    _this.loadPage = _this.loadPage.bind(_this);\n\t    _this.fetchSpecimenData = _this.fetchSpecimenData.bind(_this);\n\t    _this.fetchFormOptions = _this.fetchFormOptions.bind(_this);\n\t    _this.fetchContainerData = _this.fetchContainerData.bind(_this);\n\t    _this.updateSpecimenFilter = _this.updateSpecimenFilter.bind(_this);\n\t    _this.updateContainerFilter = _this.updateContainerFilter.bind(_this);\n\t    _this.resetFilters = _this.resetFilters.bind(_this);\n\t    _this.mapFormOptions = _this.mapFormOptions.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankIndex, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      this.loadPage();\n\t    }\n\t  }, {\n\t    key: 'loadPage',\n\t    value: function loadPage() {\n\t      this.fetchSpecimenData();\n\t      this.fetchFormOptions();\n\t      this.fetchContainerData();\n\t    }\n\t\n\t    /**\n\t     * Retrieve data from the provided URL and save it in state\n\t     * Additionaly add hiddenHeaders to global loris variable\n\t     * for easy access by columnFormatter.\n\t     */\n\t\n\t  }, {\n\t    key: 'fetchSpecimenData',\n\t    value: function fetchSpecimenData() {\n\t      $.ajax(this.props.specimenDataURL, {\n\t        method: \"GET\",\n\t        dataType: 'json',\n\t        success: function (data) {\n\t          this.setState({\n\t            specimenData: data,\n\t            isLoaded: true\n\t          });\n\t        }.bind(this),\n\t        error: function error(_error) {\n\t          console.error(_error);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'fetchContainerData',\n\t    value: function fetchContainerData() {\n\t      $.ajax(this.props.containerDataURL, {\n\t        method: \"GET\",\n\t        dataType: 'json',\n\t        success: function (data) {\n\t          this.setState({\n\t            containerData: data,\n\t            isLoaded: true\n\t          });\n\t        }.bind(this),\n\t        error: function error(_error2) {\n\t          console.error(_error2);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'fetchFormOptions',\n\t    value: function fetchFormOptions() {\n\t      $.ajax(this.props.formDataURL, {\n\t        method: \"GET\",\n\t        dataType: 'json',\n\t        success: function (data) {\n\t          this.setState({\n\t            formOptions: data,\n\t            isLoaded: true\n\t          });\n\t        }.bind(this),\n\t        error: function error(_error3) {\n\t          console.error(_error3);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'updateSpecimenFilter',\n\t    value: function updateSpecimenFilter(specimenFilter) {\n\t      this.setState({ specimenFilter: specimenFilter });\n\t    }\n\t\n\t    // This works,\n\t    // but there must be a way to do this with just one updateFilter function\n\t\n\t  }, {\n\t    key: 'updateContainerFilter',\n\t    value: function updateContainerFilter(containerFilter) {\n\t      this.setState({ containerFilter: containerFilter });\n\t    }\n\t  }, {\n\t    key: 'resetFilters',\n\t    value: function resetFilters() {\n\t      this.refs.biobankFilter.clearFilter();\n\t    }\n\t\n\t    //map options for forms\n\t\n\t  }, {\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(rawObject, targetAttribute) {\n\t      var data = {};\n\t      for (var id in rawObject) {\n\t        data[id] = rawObject[id][targetAttribute];\n\t      }\n\t\n\t      return data;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Waiting for async data to load\n\t      if (!this.state.isLoaded) {\n\t        return React.createElement(_Loader2.default, null);\n\t      }\n\t\n\t      var addSpecimenButton = void 0;\n\t      var poolSpecimenButton = void 0;\n\t      var addContainerButton = void 0;\n\t      if (loris.userHasPermission('biobank_write')) {\n\t\n\t        /**\n\t         * Map Options for Form Select Elements of Specimen Form\n\t         */\n\t        var containerTypesPrimary = this.mapFormOptions(this.state.formOptions.containerTypesPrimary, 'label');\n\t        var containerStati = this.mapFormOptions(this.state.formOptions.containerStati, 'status');\n\t        var candidates = this.mapFormOptions(this.state.formOptions.candidates, 'pscid');\n\t        var sessions = this.mapFormOptions(this.state.formOptions.sessions, 'label');\n\t\n\t        addSpecimenButton = React.createElement(\n\t          _FormModal2.default,\n\t          {\n\t            title: 'Add New Specimen',\n\t            buttonClass: 'action-button add',\n\t            buttonContent: '+',\n\t            style: { display: 'inline-block' }\n\t          },\n\t          React.createElement(_specimenForm2.default, {\n\t            candidates: candidates,\n\t            sessions: sessions,\n\t            candidateSessions: this.state.formOptions.candidateSessions,\n\t            sessionCenters: this.state.formOptions.sessionCenters,\n\t            specimenTypes: this.state.formOptions.specimenTypes,\n\t            specimenTypeUnits: this.state.formOptions.specimenTypeUnits,\n\t            specimenTypeAttributes: this.state.formOptions.specimenTypeAttributes,\n\t            attributeOptions: this.state.formOptions.attributeOptions,\n\t            attributeDatatypes: this.state.formOptions.attributeDatatypes,\n\t            containerTypesPrimary: containerTypesPrimary,\n\t            containersNonPrimary: this.state.formOptions.containersNonPrimary,\n\t            containerDimensions: this.state.formOptions.containerDimensions,\n\t            containerCoordinates: this.state.formOptions.containerCoordinates,\n\t            containerStati: containerStati,\n\t            refreshParent: this.loadPage,\n\t            mapFormOptions: this.mapFormOptions,\n\t            saveBarcodeList: loris.BaseURL + '/biobank/ajax/submitData.php?action=saveBarcodeList'\n\t          })\n\t        );\n\t\n\t        var poolSpecimenButtonContent = React.createElement('span', { className: 'glyphicon glyphicon-resize-small' });\n\t\n\t        poolSpecimenButton = React.createElement(\n\t          _FormModal2.default,\n\t          {\n\t            title: 'Pool Specimens',\n\t            buttonClass: 'action-button pool',\n\t            buttonContent: poolSpecimenButtonContent,\n\t            style: { display: 'inline-block' }\n\t          },\n\t          React.createElement(_poolSpecimenForm2.default, {\n\t            specimenTypes: this.state.formOptions.specimenTypes,\n\t            containerTypesPrimary: containerTypesPrimary,\n\t            containersNonPrimary: this.state.formOptions.containersNonPrimary,\n\t            specimenTypeAttributes: this.state.formOptions.specimenTypeAttributes,\n\t            specimenProtocols: this.state.formOptions.specimenProtocols,\n\t            specimenProtocolAttributes: this.state.formOptions.specimenProtocolAttributes,\n\t            attributeDatatypes: this.state.formOptions.attributeDatatypes,\n\t            attributeOptions: this.state.formOptions.attributeOptions,\n\t            capacities: this.state.formOptions.capacities,\n\t            containerDimensions: this.state.formOptions.containerDimensions,\n\t            containerCoordinates: this.state.formOptions.containerCoordinates,\n\t            specimenTypeUnits: this.state.formOptions.specimenTypeUnits,\n\t            specimenUnits: this.state.formOptions.specimenUnits,\n\t            candidates: candidates,\n\t            candidateSessions: this.state.formOptions.candidateSessions,\n\t            sessionCenters: this.state.formOptions.sessionCenters,\n\t            specimenRequest: loris.BaseURL + '/biobank/ajax/requestData.php?action=getSpecimenDataFromBarcode',\n\t            refreshParent: this.loadPage,\n\t            mapFormOptions: this.mapFormOptions,\n\t            saveSpecimen: loris.BaseURL + '/biobank/ajax/submitData.php?action=saveSpecimen',\n\t            saveContainer: loris.BaseURL + '/biobank/ajax/submitData.php?action=saveContainer'\n\t          })\n\t        );\n\t\n\t        var containerTypesNonPrimary = this.mapFormOptions(this.state.formOptions.containerTypesNonPrimary, 'label');\n\t\n\t        addContainerButton = React.createElement(\n\t          _FormModal2.default,\n\t          {\n\t            title: 'Add New Container',\n\t            buttonClass: 'action-button add',\n\t            buttonContent: '+',\n\t            style: { display: 'inline-block' }\n\t          },\n\t          React.createElement(_containerForm2.default, {\n\t            containerTypesNonPrimary: containerTypesNonPrimary,\n\t            centers: this.state.formOptions.centers,\n\t            containerStati: containerStati,\n\t            refreshParent: this.loadPage,\n\t            saveContainer: loris.BaseURL + '/biobank/ajax/submitData.php?action=saveContainer'\n\t          })\n\t        );\n\t      }\n\t\n\t      //Look at CCNA code from Zaliqa to modify this to be more streamline\n\t      var tabList = [{ id: \"specimens\", label: \"Specimens\" }, { id: \"containers\", label: \"Containers\" }];\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { id: 'biobank-page' },\n\t        React.createElement(\n\t          _Tabs.Tabs,\n\t          { tabs: tabList, defaultTab: 'specimens', updateURL: true },\n\t          React.createElement(\n\t            _Tabs.TabPane,\n\t            { TabId: tabList[0].id },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'row' },\n\t              React.createElement(\n\t                'div',\n\t                { className: 'col-lg-10' },\n\t                React.createElement(\n\t                  _FilterForm2.default,\n\t                  {\n\t                    Module: 'biobank',\n\t                    name: 'specimen_filter',\n\t                    id: 'specimen_filter',\n\t                    ref: 'specimenFilter',\n\t                    columns: 3,\n\t                    formElements: this.state.specimenData.form,\n\t                    onUpdate: this.updateSpecimenFilter,\n\t                    filter: this.state.specimenFilter\n\t                  },\n\t                  React.createElement('br', null),\n\t                  React.createElement(StaticElement, null),\n\t                  React.createElement(StaticElement, null),\n\t                  React.createElement(ButtonElement, { label: 'Clear Filters', type: 'reset', onUserInput: this.resetFilters })\n\t                )\n\t              ),\n\t              React.createElement(\n\t                'div',\n\t                { className: 'col-lg-2' },\n\t                React.createElement(\n\t                  'span',\n\t                  { className: 'action' },\n\t                  addSpecimenButton,\n\t                  React.createElement(\n\t                    'div',\n\t                    { className: 'action-title' },\n\t                    'Add Specimen'\n\t                  )\n\t                ),\n\t                React.createElement('br', null),\n\t                React.createElement('br', null),\n\t                React.createElement(\n\t                  'span',\n\t                  { className: 'action' },\n\t                  poolSpecimenButton,\n\t                  React.createElement(\n\t                    'div',\n\t                    { className: 'action-title' },\n\t                    'Pool Specimens'\n\t                  )\n\t                )\n\t              )\n\t            ),\n\t            React.createElement(StaticDataTable, {\n\t              Data: this.state.specimenData.Data,\n\t              Headers: this.state.specimenData.Headers,\n\t              Filter: this.state.specimenFilter,\n\t              getFormattedCell: _columnFormatterSpecimen2.default\n\t            })\n\t          ),\n\t          React.createElement(\n\t            _Tabs.TabPane,\n\t            { TabId: tabList[1].id },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'row' },\n\t              React.createElement(\n\t                'div',\n\t                { className: 'col-lg-10' },\n\t                React.createElement(\n\t                  _FilterForm2.default,\n\t                  {\n\t                    Module: 'biobank',\n\t                    name: 'container_filter',\n\t                    id: 'container_filter',\n\t                    ref: 'containerFilter',\n\t                    columns: 3,\n\t                    formElements: this.state.containerData.form,\n\t                    onUpdate: this.updateContainerFilter,\n\t                    filter: this.state.containerFilter\n\t                  },\n\t                  React.createElement('br', null),\n\t                  React.createElement(StaticElement, null),\n\t                  React.createElement(StaticElement, null),\n\t                  React.createElement(ButtonElement, { label: 'Clear Filters', type: 'reset', onUserInput: this.resetFilters })\n\t                )\n\t              ),\n\t              React.createElement(\n\t                'div',\n\t                { className: 'col-lg-2' },\n\t                React.createElement(\n\t                  'span',\n\t                  { className: 'action' },\n\t                  addContainerButton,\n\t                  React.createElement(\n\t                    'div',\n\t                    { className: 'action-title' },\n\t                    'New Container'\n\t                  )\n\t                )\n\t              )\n\t            ),\n\t            React.createElement(StaticDataTable, {\n\t              Data: this.state.containerData.Data,\n\t              Headers: this.state.containerData.Headers,\n\t              Filter: this.state.containerFilter,\n\t              getFormattedCell: _columnFormatterContainer2.default\n\t            })\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return BiobankIndex;\n\t}(React.Component);\n\t\n\t$(function () {\n\t  var biobankIndex = React.createElement(\n\t    'div',\n\t    { className: 'page-biobank' },\n\t    React.createElement(BiobankIndex, {\n\t      specimenDataURL: loris.BaseURL + '/biobank/?format=json',\n\t      containerDataURL: loris.BaseURL + '/biobank/ajax/requestData.php?action=getContainerFilterData',\n\t      formDataURL: loris.BaseURL + '/biobank/ajax/requestData.php?action=getFormOptions'\n\t    })\n\t  );\n\t\n\t  ReactDOM.render(biobankIndex, document.getElementById(\"lorisworkspace\"));\n\t});\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Panel = __webpack_require__(2);\n\t\n\tvar _Panel2 = _interopRequireDefault(_Panel);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file contains React component for FilterForm\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Loris Team\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.1.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/**\n\t * FilterForm component.\n\t * A wrapper for form elements inside a selection filter.\n\t *\n\t * Adds necessary filter callbacks to all children and passes them to FormElement\n\t * for proper rendering.\n\t *\n\t * Keeps track of filter object and sends it to parent on every update.\n\t *\n\t * //HACK/NOTE: Loris has special behaviour for `candID` attribute in the query string,\n\t * making it impossible to use it for selection filters. This components renames\n\t * all `candID` fields to `candidateID` automatically before appending them to URL.\n\t *\n\t */\n\tvar FilterForm = function (_React$Component) {\n\t  _inherits(FilterForm, _React$Component);\n\t\n\t  function FilterForm(props) {\n\t    _classCallCheck(this, FilterForm);\n\t\n\t    // Bind component instance to custom methods\n\t    var _this = _possibleConstructorReturn(this, (FilterForm.__proto__ || Object.getPrototypeOf(FilterForm)).call(this, props));\n\t\n\t    _this.clearFilter = _this.clearFilter.bind(_this);\n\t    _this.getFormChildren = _this.getFormChildren.bind(_this);\n\t    _this.setFilter = _this.setFilter.bind(_this);\n\t    _this.onElementUpdate = _this.onElementUpdate.bind(_this);\n\t\n\t    // Keeps track of querystring values\n\t    // Saved as class variable instead of keeping in state\n\t    _this.queryString = QueryString.get();\n\t    return _this;\n\t  }\n\t\n\t  _createClass(FilterForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var filter = {};\n\t      var queryString = this.queryString;\n\t\n\t      // Initiaze filter using querystring value\n\t      Object.keys(queryString).forEach(function (key) {\n\t        var filterKey = key === 'candidateID' ? 'candID' : key;\n\t        filter[filterKey] = {\n\t          value: queryString[key],\n\t          exactMatch: false\n\t        };\n\t      });\n\t\n\t      // Update parent component\n\t      this.props.onUpdate(filter);\n\t    }\n\t\n\t    /**\n\t     * Clear the filter object, querystring and input fields\n\t     */\n\t\n\t  }, {\n\t    key: 'clearFilter',\n\t    value: function clearFilter() {\n\t      this.queryString = QueryString.clear(this.props.Module);\n\t      this.props.onUpdate({});\n\t    }\n\t\n\t    /**\n\t     * Itterates through FilterForm children, sets necessary callback functions\n\t     * and initializes filterTable\n\t     *\n\t     * @return {Array} formChildren - array of children with necessary props\n\t     */\n\t\n\t  }, {\n\t    key: 'getFormChildren',\n\t    value: function getFormChildren() {\n\t      var formChildren = [];\n\t      React.Children.forEach(this.props.children, function (child, key) {\n\t        // If child is a React component (i.e not a simple DOM element)\n\t        if (React.isValidElement(child) && typeof child.type === \"function\" && child.props.onUserInput) {\n\t          var callbackFunc = child.props.onUserInput;\n\t          var callbackName = callbackFunc.name;\n\t          var elementName = child.type.displayName;\n\t          var queryFieldName = child.props.name === 'candID' ? 'candidateID' : child.props.name;\n\t          var filterValue = this.queryString[queryFieldName];\n\t          // If callback function was not set, set it to onElementUpdate() for form\n\t          // elements and to clearFilter() for <ButtonElement type='reset'/>.\n\t          if (callbackName === \"onUserInput\") {\n\t            if (elementName === \"ButtonElement\" && child.props.type === \"reset\") {\n\t              callbackFunc = this.clearFilter;\n\t            } else {\n\t              callbackFunc = this.onElementUpdate.bind(null, elementName);\n\t            }\n\t          }\n\t          // Pass onUserInput and value props to all children\n\t          formChildren.push(React.cloneElement(child, {\n\t            onUserInput: callbackFunc,\n\t            value: filterValue ? filterValue : '',\n\t            key: key\n\t          }));\n\t          // Initialize filter for StaticDataTable\n\t          this.setFilter(elementName, child.props.name, filterValue);\n\t        } else {\n\t          formChildren.push(React.cloneElement(child, { key: key }));\n\t        }\n\t      }.bind(this));\n\t\n\t      return formChildren;\n\t    }\n\t\n\t    /**\n\t     * Appends entry to filter object or deletes it if value is\n\t     * empty.\n\t     *\n\t     * Sets exactMatch to true for all SelectElements (i.e dropdowns)\n\t     * in order to force StaticDataTable to do exact comparaison\n\t     *\n\t     * @param {string} type - form element type (i.e component name)\n\t     * @param {string} key - the name of the form element\n\t     * @param {string} value - the value of the form element\n\t     *\n\t     * @return {{}} filter - filterData\n\t     */\n\t\n\t  }, {\n\t    key: 'setFilter',\n\t    value: function setFilter(type, key, value) {\n\t      var filter = {};\n\t      if (this.props.filter) {\n\t        filter = JSON.parse(JSON.stringify(this.props.filter));\n\t      }\n\t      if (key) {\n\t        filter[key] = {};\n\t        if (value.length === 0) {\n\t          filter[key].value = '';\n\t        } else if (key && value) {\n\t          filter[key].value = value;\n\t        }\n\t        filter[key].exactMatch = type === \"SelectElement\";\n\t      } else if (filter && key && value === '') {\n\t        delete filter[key];\n\t      }\n\t      return filter;\n\t    }\n\t\n\t    /**\n\t     * Sets filter object and querystring to reflect values of input fields\n\t     *\n\t     * @param {string} type - form element type (i.e component name)\n\t     * @param {string} fieldName - the name of the form element\n\t     * @param {string} fieldValue - the value of the form element\n\t     */\n\t\n\t  }, {\n\t    key: 'onElementUpdate',\n\t    value: function onElementUpdate(type, fieldName, fieldValue) {\n\t      // Make sure key is of string type and value is of string or object type\n\t      // before sending them to querystring\n\t      if (typeof fieldName !== 'string' || typeof fieldValue !== 'string' && (typeof fieldValue === 'undefined' ? 'undefined' : _typeof(fieldValue)) !== 'object') {\n\t        return;\n\t      }\n\t\n\t      // Update query string\n\t      var queryFieldName = fieldName === 'candID' ? 'candidateID' : fieldName;\n\t      this.queryString = QueryString.set(this.queryString, queryFieldName, fieldValue);\n\t\n\t      // Update filter and get new filter object\n\t      var filter = this.setFilter(type, fieldName, fieldValue);\n\t      this.props.onUpdate(filter);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Get formatted children\n\t      var formChildren = this.getFormChildren();\n\t      var formElements = this.props.formElements;\n\t\n\t      if (formElements) {\n\t        Object.keys(formElements).forEach(function (fieldName) {\n\t          var queryFieldName = fieldName === 'candID' ? 'candidateID' : fieldName;\n\t          formElements[fieldName].onUserInput = this.onElementUpdate.bind(null, fieldName);\n\t          formElements[fieldName].value = this.queryString[queryFieldName];\n\t        }.bind(this));\n\t      }\n\t\n\t      return React.createElement(\n\t        _Panel2.default,\n\t        {\n\t          id: this.props.id,\n\t          height: this.props.height,\n\t          title: this.props.title\n\t        },\n\t        React.createElement(\n\t          FormElement,\n\t          this.props,\n\t          formChildren\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return FilterForm;\n\t}(React.Component);\n\t\n\tFilterForm.defaultProps = {\n\t  id: 'selection-filter',\n\t  height: '100%',\n\t  title: 'Selection Filter',\n\t  onUpdate: function onUpdate() {\n\t    console.warn('onUpdate() callback is not set!');\n\t  }\n\t};\n\tFilterForm.propTypes = {\n\t  Module: React.PropTypes.string.isRequired,\n\t  filter: React.PropTypes.object.isRequired,\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  onUpdate: React.PropTypes.func\n\t};\n\t\n\texports.default = FilterForm;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Panel\n\t *\n\t * @author Alex I.\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Panel component\n\t * Wraps children in a collapsible bootstrap panel\n\t */\n\tvar Panel = function (_React$Component) {\n\t  _inherits(Panel, _React$Component);\n\t\n\t  function Panel(props) {\n\t    _classCallCheck(this, Panel);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).call(this, props));\n\t\n\t    _this.state = {\n\t      collapsed: _this.props.initCollapsed\n\t    };\n\t\n\t    // Initialize panel class based on collapsed status\n\t    _this.panelClass = _this.props.initCollapsed ? \"panel-collapse collapse\" : \"panel-collapse collapse in\";\n\t\n\t    _this.toggleCollapsed = _this.toggleCollapsed.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Panel, [{\n\t    key: \"toggleCollapsed\",\n\t    value: function toggleCollapsed() {\n\t      this.setState({ collapsed: !this.state.collapsed });\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      // Change arrow direction based on collapse status\n\t      var glyphClass = this.state.collapsed ? \"glyphicon pull-right glyphicon-chevron-down\" : \"glyphicon pull-right glyphicon-chevron-up\";\n\t\n\t      var pencilGlyph = void 0;\n\t      if (this.props.edit) {\n\t        pencilGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-pencil\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.edit\n\t        });\n\t      }\n\t\n\t      var plusGlyph = void 0;\n\t      if (this.props.add) {\n\t        plusGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-plus\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.add\n\t        });\n\t      }\n\t\n\t      var removeGlyph = void 0;\n\t      if (this.props.cancel) {\n\t        removeGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-remove\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.cancel\n\t        });\n\t      }\n\t\n\t      // Add panel header, if title is set\n\t      var panelHeading = this.props.title ? React.createElement(\n\t        \"div\",\n\t        {\n\t          className: \"panel-heading\"\n\t        },\n\t        React.createElement(\"span\", {\n\t          className: glyphClass,\n\t          onClick: this.toggleCollapsed,\n\t          \"data-toggle\": \"collapse\",\n\t          \"data-target\": '#' + this.props.id,\n\t          style: { cursor: 'pointer' }\n\t        }),\n\t        pencilGlyph,\n\t        plusGlyph,\n\t        removeGlyph,\n\t        this.props.title\n\t      ) : '';\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"panel panel-primary\" },\n\t        panelHeading,\n\t        React.createElement(\n\t          \"div\",\n\t          { id: this.props.id, className: this.panelClass, role: \"tabpanel\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"panel-body\", style: { height: this.props.height } },\n\t            this.props.children\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Panel;\n\t}(React.Component);\n\t\n\tPanel.propTypes = {\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  edit: React.PropTypes.func,\n\t  add: React.PropTypes.func\n\t};\n\tPanel.defaultProps = {\n\t  initCollapsed: false,\n\t  id: 'default-panel',\n\t  height: '100%'\n\t};\n\t\n\texports.default = Panel;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _barcodeForm = __webpack_require__(4);\n\t\n\tvar _barcodeForm2 = _interopRequireDefault(_barcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankSpecimenForm = function (_React$Component) {\n\t  _inherits(BiobankSpecimenForm, _React$Component);\n\t\n\t  function BiobankSpecimenForm() {\n\t    _classCallCheck(this, BiobankSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimenForm.__proto__ || Object.getPrototypeOf(BiobankSpecimenForm)).call(this));\n\t\n\t    _this.state = {\n\t      formErrors: {},\n\t      errorMessage: null,\n\t      candidateId: null,\n\t      sessionId: null,\n\t      centerId: null,\n\t      barcodeList: { 1: { specimen: { collection: {} }, container: {} } },\n\t      count: 1,\n\t      collapsed: { 1: true },\n\t      copyMultiplier: 1\n\t    };\n\t\n\t    _this.toggleCollapse = _this.toggleCollapse.bind(_this);\n\t    _this.setSpecimen = _this.setSpecimen.bind(_this);\n\t    _this.setContainer = _this.setContainer.bind(_this);\n\t    _this.addBarcode = _this.addBarcode.bind(_this);\n\t    _this.setCopyMultiplier = _this.setCopyMultiplier.bind(_this);\n\t    _this.copyBarcode = _this.copyBarcode.bind(_this);\n\t    _this.removeBarcode = _this.removeBarcode.bind(_this);\n\t    _this.saveBarcodeList = _this.saveBarcodeList.bind(_this);\n\t    _this.save = _this.save.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimenForm, [{\n\t    key: 'toggleCollapse',\n\t    value: function toggleCollapse(key) {\n\t      var collapsed = this.state.collapsed;\n\t      collapsed[key] = !collapsed[key];\n\t      this.setState({ collapsed: collapsed });\n\t    }\n\t  }, {\n\t    key: 'saveBarcodeList',\n\t    value: function saveBarcodeList() {\n\t      var _this2 = this;\n\t\n\t      var barcodeList = JSON.parse(JSON.stringify(this.state.barcodeList));\n\t      var availableId = Object.keys(this.props.containerStati).find(function (key) {\n\t        return _this2.props.containerStati[key] === 'Available';\n\t      });\n\t\n\t      for (var barcode in barcodeList) {\n\t        //set container values\n\t        var container = barcodeList[barcode].container;\n\t        container.statusId = availableId;\n\t        container.temperature = 20;\n\t        container.locationId = this.state.centerId;\n\t        container.originId = this.state.centerId;\n\t\n\t        //set specimen values\n\t        var specimen = barcodeList[barcode].specimen;\n\t        specimen.candidateId = this.state.candidateId;\n\t        specimen.sessionId = this.state.sessionId;\n\t        specimen.quantity = specimen.collection.quantity;\n\t        specimen.unitId = specimen.collection.unitId;\n\t        specimen.collection.locationId = this.state.centerId;\n\t        if (this.props.specimenTypes[specimen.typeId].freezeThaw === 1) {\n\t          specimen.fTCycle = 0;\n\t        }\n\t\n\t        //if this is an aliquot form, reset some of the values.\n\t        //TODO: these will eventually be higher level states.\n\t        if (this.props.data) {\n\t          specimen.candidateId = this.props.data.candidate.CandID;\n\t          specimen.sessionId = this.props.data.session.ID;\n\t          specimen.parentSpecimenId = this.props.data.specimen.id;\n\t          specimen.collection.locationId = this.props.data.container.locationId;\n\t          container.locationId = this.props.data.container.locationId;\n\t          container.originId = this.props.data.container.locationId;\n\t        }\n\t\n\t        barcodeList[barcode].container = container;\n\t        barcodeList[barcode].specimen = specimen;\n\t      }\n\t      console.log(barcodeList);\n\t\n\t      this.save(barcodeList, this.props.saveBarcodeList).then(function () {\n\t        _this2.props.refreshParent();_this2.props.onSuccess();\n\t      });\n\t    }\n\t  }, {\n\t    key: 'save',\n\t    value: function save(data, url) {\n\t      var _this3 = this;\n\t\n\t      return new Promise(function (resolve) {\n\t        $.ajax({\n\t          type: 'POST',\n\t          url: url,\n\t          data: { data: JSON.stringify(data) },\n\t          cache: false,\n\t          success: function success() {\n\t            resolve();\n\t            swal(\"Save Successful!\", \"\", \"success\");\n\t          },\n\t          error: function error(err, textStatus, errorThrown) {\n\t            var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t            _this3.setState({\n\t              errorMessage: msg\n\t            });\n\t            swal(msg, \"\", \"error\");\n\t          }\n\t        });\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setSpecimen',\n\t    value: function setSpecimen(name, value, key) {\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t      var centerId = this.state.centerId;\n\t      var candidateId = this.state.candidateId;\n\t      var sessionId = this.state.sessionId;\n\t      var barcodeList = this.state.barcodeList;\n\t\n\t      if (name === 'candidateId') {\n\t        candidateId = value;\n\t      } else if (name === 'sessionId') {\n\t        sessionId = value;\n\t        centerId = this.props.sessionCenters[sessionId].centerId;\n\t      } else {\n\t        //this is eliminate values if specimen type is changed\n\t        if (name === 'typeId') {\n\t          barcodeList[key].specimen = { collection: {} };\n\t        }\n\t        barcodeList[key].specimen[name] = value;\n\t      }\n\t\n\t      this.setState({ barcodeList: barcodeList, centerId: centerId, candidateId: candidateId, sessionId: sessionId });\n\t    }\n\t  }, {\n\t    key: 'setContainer',\n\t    value: function setContainer(name, value, key) {\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t      var barcodeList = this.state.barcodeList;\n\t      barcodeList[key].container[name] = value;\n\t      this.setState({ barcodeList: barcodeList });\n\t    }\n\t  }, {\n\t    key: 'addBarcode',\n\t    value: function addBarcode() {\n\t      var barcodeList = this.state.barcodeList;\n\t      var count = this.state.count;\n\t      var collapsed = this.state.collapsed;\n\t\n\t      barcodeList[count + 1] = { specimen: {}, container: { collection: {} } };\n\t      collapsed[count + 1] = true;\n\t      count = count + 1;\n\t\n\t      this.setState({ barcodeList: barcodeList, collapsed: collapsed, count: count });\n\t    }\n\t  }, {\n\t    key: 'setCopyMultiplier',\n\t    value: function setCopyMultiplier(e) {\n\t      var copyMultiplier = e.target.value;\n\t      this.setState({ copyMultiplier: copyMultiplier });\n\t    }\n\t  }, {\n\t    key: 'copyBarcode',\n\t    value: function copyBarcode(key) {\n\t      var count = this.state.count;\n\t      var collapsed = this.state.collapsed;\n\t      var nextKey = count + 1;\n\t      var barcodeList = this.state.barcodeList;\n\t      var multiplier = this.state.copyMultiplier;\n\t\n\t      for (var i = 1; i <= multiplier; i++) {\n\t        barcodeList[nextKey] = JSON.parse(JSON.stringify(barcodeList[key]));\n\t        delete barcodeList[nextKey].container.barcode;\n\t        collapsed[nextKey] = true;\n\t        nextKey++;\n\t      }\n\t\n\t      this.setState({\n\t        barcodeList: barcodeList,\n\t        count: nextKey,\n\t        collapsed: collapsed\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removeBarcode',\n\t    value: function removeBarcode(key) {\n\t      var barcodeList = this.state.barcodeList;\n\t      delete barcodeList[key];\n\t      this.setState({ barcodeList: barcodeList });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this4 = this;\n\t\n\t      //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n\t      var barcodeListArray = Object.keys(this.state.barcodeList);\n\t      var barcodes = [];\n\t      var i = 1;\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        var _loop = function _loop() {\n\t          var key = _step.value;\n\t\n\t          barcodes.push(React.createElement(_barcodeForm2.default, {\n\t            data: _this4.props.data || null,\n\t            key: key,\n\t            barcodeKey: key,\n\t            id: i,\n\t            collapsed: _this4.state.collapsed[key],\n\t            toggleCollapse: _this4.toggleCollapse,\n\t            mapFormOptions: _this4.props.mapFormOptions,\n\t            container: _this4.state.barcodeList[key].container || null,\n\t            specimen: _this4.state.barcodeList[key].specimen || null,\n\t            removeBarcode: barcodeListArray.length !== 1 ? function () {\n\t              return _this4.removeBarcode(key);\n\t            } : null,\n\t            addBarcode: i == barcodeListArray.length ? _this4.addBarcode : null,\n\t            setCopyMultiplier: _this4.setCopyMultiplier,\n\t            copyMultiplier: _this4.state.copyMultiplier,\n\t            copyBarcode: i == barcodeListArray.length && _this4.state.barcodeList[key] ? _this4.copyBarcode : null,\n\t            setContainer: _this4.setContainer,\n\t            setSpecimen: _this4.setSpecimen,\n\t            onChange: _this4.props.onChange,\n\t            specimenTypes: _this4.props.specimenTypes,\n\t            containerTypesPrimary: _this4.props.containerTypesPrimary,\n\t            containersNonPrimary: _this4.props.containersNonPrimary,\n\t            specimenTypeAttributes: _this4.props.specimenTypeAttributes,\n\t            attributeDatatypes: _this4.props.attributeDatatypes,\n\t            attributeOptions: _this4.props.attributeOptions,\n\t            capacities: _this4.props.capacities,\n\t            containerDimensions: _this4.props.containerDimensions,\n\t            containerCoordinates: _this4.props.containerCoordinates,\n\t            specimenTypeUnits: _this4.props.specimenTypeUnits,\n\t            units: _this4.props.units\n\t          }));\n\t\n\t          i++;\n\t        };\n\t\n\t        for (var _iterator = barcodeListArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          _loop();\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t\n\t      var globalFields = void 0;\n\t      var remainingQuantityFields = void 0;\n\t      if (this.props.data) {\n\t        globalFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(StaticElement, {\n\t            label: 'Parent Specimen',\n\t            text: this.props.data.container.barcode\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'PSCID',\n\t            text: this.props.data.candidate.PSCID\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Visit Label',\n\t            text: this.props.data.session.Visit_label\n\t          })\n\t        );\n\t\n\t        remainingQuantityFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Remaining Quantity',\n\t            onUserInput: this.props.setSpecimenData,\n\t            required: true,\n\t            value: this.props.specimen.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: this.props.specimenUnits,\n\t            onUserInput: this.props.setSpecimenData,\n\t            emptyOption: false,\n\t            required: true,\n\t            value: this.props.specimen.unitId\n\t          })\n\t        );\n\t      } else {\n\t        var sessions = {};\n\t        if (this.state.candidateId) {\n\t          sessions = this.props.mapFormOptions(this.props.candidateSessions[this.state.candidateId], 'label');\n\t        }\n\t        //TODO: not sure why, but I'm now having trouble with the SearchableDropdown\n\t        globalFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'candidateId',\n\t            label: 'PSCID',\n\t            options: this.props.candidates,\n\t            onUserInput: this.setSpecimen,\n\t            required: true,\n\t            value: this.state.candidateId,\n\t            placeHolder: 'Search for a PSCID'\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'sessionId',\n\t            label: 'Visit Label',\n\t            options: sessions,\n\t            onUserInput: this.setSpecimen,\n\t            required: true,\n\t            value: this.state.sessionId,\n\t            disabled: this.state.candidateId ? false : true\n\t          })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenForm',\n\t          id: 'specimenForm',\n\t          onSubmit: function onSubmit() {\n\t            _this4.saveBarcodeList();\n\t            _this4.props.saveSpecimen instanceof Function && _this4.props.saveSpecimen();\n\t          },\n\t          ref: 'form'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-9 col-xs-offset-1' },\n\t            globalFields,\n\t            remainingQuantityFields\n\t          )\n\t        ),\n\t        barcodes,\n\t        React.createElement(ButtonElement, {\n\t          label: 'Submit',\n\t          columnSize: 'col-sm-2 col-sm-offset-10'\n\t        })\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimenForm;\n\t}(React.Component);\n\t\n\tBiobankSpecimenForm.propTypes = {};\n\t\n\texports.default = BiobankSpecimenForm;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _collectionForm = __webpack_require__(5);\n\t\n\tvar _collectionForm2 = _interopRequireDefault(_collectionForm);\n\t\n\tvar _containerParentForm = __webpack_require__(6);\n\t\n\tvar _containerParentForm2 = _interopRequireDefault(_containerParentForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Barcode Form\n\t *\n\t * Acts a subform for BiobankSpecimenForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenBarcodeForm = function (_React$Component) {\n\t  _inherits(SpecimenBarcodeForm, _React$Component);\n\t\n\t  function SpecimenBarcodeForm() {\n\t    _classCallCheck(this, SpecimenBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenBarcodeForm.__proto__ || Object.getPrototypeOf(SpecimenBarcodeForm)).call(this));\n\t\n\t    _this.setContainer = _this.setContainer.bind(_this);\n\t    _this.setSpecimen = _this.setSpecimen.bind(_this);\n\t    _this.copy = _this.copy.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenBarcodeForm, [{\n\t    key: 'setContainer',\n\t    value: function setContainer(name, value) {\n\t      this.props.setContainer(name, value, this.props.barcodeKey);\n\t    }\n\t  }, {\n\t    key: 'setSpecimen',\n\t    value: function setSpecimen(name, value) {\n\t      this.props.setSpecimen(name, value, this.props.barcodeKey);\n\t    }\n\t  }, {\n\t    key: 'copy',\n\t    value: function copy() {\n\t      this.props.copyBarcode(this.props.copyMultiplier);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      var addBarcodeButton = void 0;\n\t      var addBarcodeText = void 0;\n\t      var copyBarcodeButton = void 0;\n\t      var copyBarcodeText = void 0;\n\t      if (this.props.addBarcode) {\n\t        addBarcodeButton = React.createElement(\n\t          'span',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: this.props.addBarcode\n\t            },\n\t            '+'\n\t          )\n\t        );\n\t\n\t        addBarcodeText = React.createElement(\n\t          'span',\n\t          { className: 'action-title' },\n\t          'New Entry'\n\t        );\n\t      }\n\t\n\t      if (this.props.copyBarcode) {\n\t        copyBarcodeButton = React.createElement(\n\t          'span',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: this.copy\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-duplicate' })\n\t          )\n\t        );\n\t        copyBarcodeText = React.createElement(\n\t          'span',\n\t          { className: 'action-title' },\n\t          React.createElement('input', {\n\t            className: 'form-control input-sm',\n\t            type: 'number',\n\t            min: '1',\n\t            max: '50',\n\t            style: { width: 50, display: 'inline' },\n\t            onChange: this.props.setCopyMultiplier,\n\t            value: this.props.copyMultiplier\n\t          }),\n\t          'Copies'\n\t        );\n\t      }\n\t\n\t      var removeBarcodeButton = void 0;\n\t      if (this.props.removeBarcode) {\n\t        var glyphStyle = {\n\t          color: '#DDDDDD',\n\t          marginLeft: 10,\n\t          cursor: 'pointer',\n\t          fontSize: 15\n\t        };\n\t\n\t        removeBarcodeButton = React.createElement('span', {\n\t          className: 'glyphicon glyphicon-remove',\n\t          onClick: this.props.removeBarcode,\n\t          style: glyphStyle\n\t        });\n\t      }\n\t\n\t      var specimenTypes = {};\n\t      if (this.props.data) {\n\t        for (var id in this.props.specimenTypes) {\n\t          if (this.props.specimenTypes[id].parentTypeId == this.props.data.specimen.typeId || id == this.props.data.specimen.typeId) {\n\t            specimenTypes[id] = this.props.specimenTypes[id]['type'];\n\t          }\n\t        }\n\t      } else {\n\t        specimenTypes = this.props.mapFormOptions(this.props.specimenTypes, 'type');\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankBarcode'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-9 col-xs-offset-1' },\n\t            React.createElement(\n\t              'div',\n\t              null,\n\t              React.createElement(TextboxElement, {\n\t                name: 'barcode',\n\t                label: 'Barcode ' + this.props.id,\n\t                onUserInput: this.setContainer,\n\t                required: true,\n\t                value: this.props.container.barcode\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-1', style: { paddingLeft: 0, marginTop: 10 } },\n\t            React.createElement('span', {\n\t              className: this.props.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up',\n\t              style: { cursor: 'pointer', fontSize: 15, position: 'relative', right: 40 },\n\t              'data-toggle': 'collapse',\n\t              'data-target': '#item-' + this.props.barcodeKey,\n\t              onClick: function onClick() {\n\t                return _this2.props.toggleCollapse(_this2.props.barcodeKey);\n\t              }\n\t            }),\n\t            removeBarcodeButton\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement('div', { className: 'col-xs-2' }),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-8' },\n\t            React.createElement(\n\t              'div',\n\t              { id: 'item-' + this.props.barcodeKey, className: 'collapse' },\n\t              React.createElement(SelectElement, {\n\t                name: 'typeId',\n\t                label: 'Specimen Type',\n\t                options: specimenTypes,\n\t                onUserInput: this.setSpecimen,\n\t                required: true,\n\t                value: this.props.specimen.typeId\n\t              }),\n\t              React.createElement(SelectElement, {\n\t                name: 'typeId',\n\t                label: 'Container Type',\n\t                options: this.props.containerTypesPrimary,\n\t                onUserInput: this.setContainer,\n\t                ref: 'containerType',\n\t                required: true,\n\t                value: this.props.container.typeId\n\t              }),\n\t              React.createElement(_collectionForm2.default, {\n\t                specimen: this.props.specimen,\n\t                setSpecimenData: this.setSpecimen,\n\t                specimenTypeUnits: this.props.specimenTypeUnits,\n\t                specimenTypeAttributes: this.props.specimenTypeAttributes,\n\t                attributeDatatypes: this.props.attributeDatatypes,\n\t                attributeOptions: this.props.attributeOptions\n\t              }),\n\t              React.createElement(_containerParentForm2.default, {\n\t                setContainerData: this.setContainer,\n\t                mapFormOptions: this.props.mapFormOptions,\n\t                container: this.props.container,\n\t                containersNonPrimary: this.props.containersNonPrimary,\n\t                containerDimensions: this.props.containerDimensions,\n\t                containerCoordinates: this.props.containerCoordinates\n\t              })\n\t            )\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement('div', { className: 'col-xs-4' }),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-3 action' },\n\t              addBarcodeButton,\n\t              addBarcodeText\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-3 action' },\n\t              copyBarcodeButton,\n\t              copyBarcodeText\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return SpecimenBarcodeForm;\n\t}(React.Component);\n\t\n\tSpecimenBarcodeForm.propTypes = {};\n\t\n\texports.default = SpecimenBarcodeForm;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenCollectionForm = function (_React$Component) {\n\t  _inherits(SpecimenCollectionForm, _React$Component);\n\t\n\t  function SpecimenCollectionForm() {\n\t    _classCallCheck(this, SpecimenCollectionForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenCollectionForm.__proto__ || Object.getPrototypeOf(SpecimenCollectionForm)).call(this));\n\t\n\t    _this.getSpecimenTypeFields = _this.getSpecimenTypeFields.bind(_this);\n\t    _this.setCollectionData = _this.setCollectionData.bind(_this);\n\t    _this.addData = _this.addData.bind(_this);\n\t    _this.setData = _this.setData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenCollectionForm, [{\n\t    key: 'setCollectionData',\n\t    value: function setCollectionData(name, value) {\n\t      var collection = this.props.specimen.collection;\n\t      collection[name] = value;\n\t      this.props.setSpecimenData('collection', collection);\n\t    }\n\t\n\t    //TODO: this function may not be necessary\n\t\n\t  }, {\n\t    key: 'addData',\n\t    value: function addData() {\n\t      var collection = this.props.specimen.collection;\n\t      collection.data = {};\n\t      this.props.setSpecimenData('collection', collection);\n\t    }\n\t  }, {\n\t    key: 'setData',\n\t    value: function setData(name, value) {\n\t      var data = this.props.specimen.collection.data;\n\t      data[name] = value;\n\t      this.setCollectionData('data', data);\n\t    }\n\t\n\t    // This generates all the form fields for a given specimen type\n\t\n\t  }, {\n\t    key: 'getSpecimenTypeFields',\n\t    value: function getSpecimenTypeFields(fieldsObject) {\n\t      var _this2 = this;\n\t\n\t      var specimenTypeFields = Object.keys(fieldsObject).map(function (attribute) {\n\t        var datatype = _this2.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"text\" || datatype === \"number\") {\n\t\n\t          if (fieldsObject[attribute]['refTableId'] == null) {\n\t            return React.createElement(TextboxElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              onUserInput: _this2.setData,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this2.props.specimen.collection.data[attribute]\n\t            });\n\t          }\n\t\n\t          if (fieldsObject[attribute]['refTableId'] !== null) {\n\t            return React.createElement(SelectElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              options: _this2.props.attributeOptions[fieldsObject[attribute]['refTableId']],\n\t              onUserInput: _this2.setData,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this2.props.specimen.collection.data[attribute]\n\t            });\n\t          }\n\t        }\n\t\n\t        if (datatype === \"datetime\") {\n\t          return React.createElement(DateElement, {\n\t            name: attribute,\n\t            label: fieldsObject[attribute]['name'],\n\t            onUserInput: _this2.setData,\n\t            ref: attribute,\n\t            required: fieldsObject[attribute]['required'],\n\t            value: _this2.props.specimen.collection.data[attribute]\n\t          });\n\t        }\n\t\n\t        if (datatype === \"boolean\") {\n\t          // There is currently no CheckboxElement or RadioElement in loris/jsx/Form.js and therefore\n\t          // this is not possible.     \n\t        }\n\t      });\n\t\n\t      return specimenTypeFields;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var updateButton = void 0;\n\t      if (((this.props.data || {}).specimen || {}).collection) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      }\n\t\n\t      var specimenTypeUnits = {};\n\t      var specimenTypeFields = void 0;\n\t      if (this.props.specimen.typeId) {\n\t\n\t        //This modifies the selections for unit drop down based on the chosen\n\t        //specimen type \n\t        for (var id in this.props.specimenTypeUnits[this.props.specimen.typeId]) {\n\t          specimenTypeUnits[id] = this.props.specimenTypeUnits[this.props.specimen.typeId][id].unit;\n\t        }\n\t\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.props.specimen.typeId];\n\t        if (specimenTypeFieldsObject) {\n\t          if (((this.props.specimen || {}).collection || {}).data) {\n\t            specimenTypeFields = this.getSpecimenTypeFields(specimenTypeFieldsObject);\n\t          } else {\n\t            this.addData();\n\t          }\n\t        }\n\t      }\n\t\n\t      var specimenFields = void 0;\n\t      if (this.props.specimen.typeId) {\n\t        specimenFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Quantity',\n\t            onUserInput: this.setCollectionData,\n\t            required: true,\n\t            value: this.props.specimen.collection.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: specimenTypeUnits,\n\t            onUserInput: this.setCollectionData,\n\t            required: true,\n\t            value: this.props.specimen.collection.unitId\n\t          }),\n\t          specimenTypeFields,\n\t          React.createElement(DateElement, {\n\t            name: 'date',\n\t            label: 'Date',\n\t            minYear: '2000',\n\t            maxYear: '2018',\n\t            onUserInput: this.setCollectionData,\n\t            required: true,\n\t            value: this.props.specimen.collection.date\n\t          }),\n\t          React.createElement(TimeElement, {\n\t            name: 'time',\n\t            label: 'Time',\n\t            onUserInput: this.setCollectionData,\n\t            required: true,\n\t            value: this.props.specimen.collection.time\n\t          }),\n\t          React.createElement(TextareaElement, {\n\t            name: 'comments',\n\t            label: 'Comments',\n\t            onUserInput: this.setCollectionData,\n\t            ref: 'comments',\n\t            value: this.props.specimen.collection.comments\n\t          })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankSpecimen',\n\t          onSubmit: this.props.saveSpecimen,\n\t          ref: 'form'\n\t        },\n\t        specimenFields,\n\t        updateButton\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return SpecimenCollectionForm;\n\t}(React.Component);\n\t\n\tSpecimenCollectionForm.propTypes = {\n\t  setSpecimenData: React.PropTypes.func.isRequired,\n\t  saveSpecimen: React.PropTypes.func,\n\t  specimen: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  attributeOptions: React.PropTypes.object.isRequired,\n\t  specimenTypeUnits: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = SpecimenCollectionForm;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _containerDisplay = __webpack_require__(7);\n\t\n\tvar _containerDisplay2 = _interopRequireDefault(_containerDisplay);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Biobank Container Parent Form\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Fetches data from Loris backend and displays a form allowing\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * to specimen a biobank file attached to a specific instrument\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Henri Rabalais\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.0.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\tn\t\n\tvar ContainerParentForm = function (_React$Component) {\n\t  _inherits(ContainerParentForm, _React$Component);\n\t\n\t  function ContainerParentForm() {\n\t    _classCallCheck(this, ContainerParentForm);\n\t\n\t    return _possibleConstructorReturn(this, (ContainerParentForm.__proto__ || Object.getPrototypeOf(ContainerParentForm)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(ContainerParentForm, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var containerDisplay = void 0;\n\t      var containerBarcodesNonPrimary = this.props.mapFormOptions(this.props.containersNonPrimary, 'barcode');\n\t      var parentContainerField = React.createElement(SelectElement, {\n\t        name: 'parentContainerId',\n\t        label: 'Parent Container Barcode',\n\t        options: containerBarcodesNonPrimary,\n\t        onUserInput: this.props.setContainerData,\n\t        required: true,\n\t        value: this.props.container.parentContainerId\n\t      });\n\t\n\t      if (this.props.container.parentContainerId) {\n\t        var dimensionId = this.props.containersNonPrimary[this.props.container.parentContainerId].dimensionId;\n\t\n\t        if (dimensionId) {\n\t          // This will eventually become unecessary\n\t          var dimensions = this.props.containerDimensions[dimensionId];\n\t\n\t          // Total coordinates is determined by the product of the dimensions\n\t          var coordinatesTotal = 1;\n\t          for (var dimension in dimensions) {\n\t            coordinatesTotal = coordinatesTotal * dimensions[dimension];\n\t          }\n\t\n\t          // Mapping of options for the SelectElement\n\t          var coordinates = {};\n\t          for (var i = 1; i <= coordinatesTotal; i++) {\n\t            // If the coordinate is already taken, skip it.\n\t            // this doubling of if statements seems unnecessary\n\t            if (this.props.containerCoordinates[this.props.container.parentContainerId]) {\n\t              if (this.props.containerCoordinates[this.props.container.parentContainerId][i]) {\n\t                continue;\n\t              }\n\t            }\n\t\n\t            coordinates[i] = i;\n\t          }\n\t\n\t          containerDisplay = React.createElement(_containerDisplay2.default, {\n\t            dimensions: this.props.containerDimensions[this.props.containersNonPrimary[this.props.container.parentContainerId].dimensionId],\n\t            coordinates: this.props.containerCoordinates[this.props.container.parentContainerId],\n\t            containerTypes: this.props.containerTypes,\n\t            containerStati: this.props.containerStati,\n\t            select: true,\n\t            selectedCoordinate: this.props.container.coordinate,\n\t            setContainerData: this.props.setContainerData\n\t          });\n\t        }\n\t      }\n\t\n\t      var updateButton = void 0;\n\t      if ((this.props.data || {}).container) {\n\t        updateButton = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement('br', null),\n\t          React.createElement(ButtonElement, { label: 'Update' })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          onSubmit: this.props.saveContainer\n\t        },\n\t        parentContainerField,\n\t        containerDisplay,\n\t        updateButton\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return ContainerParentForm;\n\t}(React.Component);\n\t\n\tContainerParentForm.propTypes = {\n\t  mapFormOptions: React.PropTypes.func.isRequired,\n\t  setContainerData: React.PropTypes.func.isRequired,\n\t  saveContainer: React.PropTypes.func,\n\t  data: React.PropTypes.object,\n\t  container: React.PropTypes.object.isRequired,\n\t  containersNonPrimary: React.PropTypes.object.isRequired,\n\t  containerDimensions: React.PropTypes.object.isRequired,\n\t  containerCoordinates: React.PropTypes.object.isRequired,\n\t  containerTypes: React.PropTypes.object,\n\t  containerStati: React.PropTypes.object\n\t};\n\t\n\texports.default = ContainerParentForm;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * ContainerDisplay\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar ContainerDisplay = function (_React$Component) {\n\t  _inherits(ContainerDisplay, _React$Component);\n\t\n\t  function ContainerDisplay() {\n\t    _classCallCheck(this, ContainerDisplay);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ContainerDisplay.__proto__ || Object.getPrototypeOf(ContainerDisplay)).call(this));\n\t\n\t    _this.redirectURL = _this.redirectURL.bind(_this);\n\t    _this.drag = _this.drag.bind(_this);\n\t    _this.drop = _this.drop.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ContainerDisplay, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      $('[data-toggle=\"tooltip\"]').tooltip();\n\t    }\n\t  }, {\n\t    key: 'componenDidUpdate',\n\t    value: function componenDidUpdate() {\n\t      $('[data-toggle=\"tooltip\"]').tooltip();\n\t    }\n\t  }, {\n\t    key: 'redirectURL',\n\t    value: function redirectURL(e) {\n\t      var coordinate = e.target.id;\n\t      if (this.props.coordinates[coordinate]) {\n\t        var type = this.props.types[this.props.children[this.props.coordinates[coordinate]].typeId].primary ? 'specimen' : 'container';\n\t        var url = loris.BaseURL + '/biobank/' + type + '/?barcode=' + this.props.children[this.props.coordinates[coordinate]].barcode;\n\t\n\t        window.location.href = url;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'allowDrop',\n\t    value: function allowDrop(e) {\n\t      e.preventDefault();\n\t    }\n\t  }, {\n\t    key: 'drag',\n\t    value: function drag(e) {\n\t      var container = JSON.stringify(this.props.children[this.props.coordinates[e.target.id]]);\n\t      e.dataTransfer.setData(\"text/plain\", container);\n\t    }\n\t  }, {\n\t    key: 'drop',\n\t    value: function drop(e) {\n\t      e.preventDefault();\n\t\n\t      var container = JSON.parse(e.dataTransfer.getData(\"text/plain\"));\n\t      var newCoordinate = parseInt(e.target.id);\n\t\n\t      container.coordinate = newCoordinate;\n\t\n\t      this.props.saveChildContainer(container);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      // This is eventually need to be reworked and cleaned up\n\t      var column = [];\n\t      var row = [];\n\t      var display = void 0;\n\t      var coordinate = 1;\n\t      if (this.props.dimensions) {\n\t        for (var y = 0; y < this.props.dimensions.y; y++) {\n\t          column = [];\n\t          for (var x = 1; x <= this.props.dimensions.x; x++) {\n\t\n\t            var nodeWidth = 500 / this.props.dimensions.x - 500 / this.props.dimensions.x * 0.08;\n\t            var nodeStyle = { width: nodeWidth };\n\t            var nodeClass = 'node';\n\t            var tooltipTitle = null;\n\t            var dataHtml = 'false';\n\t            var dataToggle = null;\n\t            var dataPlacement = null;\n\t            var draggable = 'false';\n\t            var onDragStart = null;\n\t            var onDragOver = this.allowDrop;\n\t            var onDrop = this.drop;\n\t            var onClick = null;\n\t\n\t            if (!this.props.select) {\n\t              // This double if statement doesn't sound great\n\t              if (this.props.coordinates) {\n\t                if (this.props.coordinates[coordinate]) {\n\t                  nodeClass = 'node occupied';\n\t                  dataHtml = 'true';\n\t                  dataToggle = 'tooltip';\n\t                  dataPlacement = 'top';\n\t                  tooltipTitle = '<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + '<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + '<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n\t                  draggable = 'true';\n\t                  onDragStart = this.drag;\n\t                  onDragOver = null;\n\t                  onDrop = null;\n\t                  onClick = this.redirectURL;\n\t                }\n\t              }\n\t            }\n\t\n\t            if (this.props.select) {\n\t              if (coordinate == this.props.selectedCoordinate) {\n\t                nodeClass = 'node occupied';\n\t              } else if (!this.props.coordinates) {\n\t                nodeClass = 'node available';\n\t                onClick = function onClick(e) {\n\t                  return _this2.props.setContainerData('coordinate', e.target.id);\n\t                };\n\t              } else if (this.props.coordinates) {\n\t                if (!this.props.coordinates[coordinate]) {\n\t                  nodeClass = 'node available';\n\t                  onClick = function onClick(e) {\n\t                    return _this2.props.setContainerData('coordinate', e.target.id);\n\t                  };\n\t                } else if (this.props.coordinates[coordinate]) {\n\t                  // TODO: --- This is currently not working ---\n\t                  //  dataHtml = 'true';\n\t                  //  dataToggle = 'tooltip';\n\t                  //  dataPlacement = 'top';\n\t                  //  tooltipTitle = \n\t                  //'<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + \n\t                  //'<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + \n\t                  //'<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n\t                }\n\t              }\n\t            }\n\t\n\t            var coordinateDisplay = void 0;\n\t            if (true) {\n\t              coordinateDisplay = x + this.props.dimensions.x * y;\n\t            } else if (false) {\n\t              coordinateDisplay = String.fromCharCode(65 + y) + '' + x;\n\t            }\n\t\n\t            column.push(React.createElement(\n\t              'div',\n\t              {\n\t                id: coordinate,\n\t                className: nodeClass,\n\t                'data-html': dataHtml,\n\t                'data-toggle': dataToggle,\n\t                'data-placement': dataPlacement,\n\t                'data-original-title': tooltipTitle,\n\t                style: nodeStyle,\n\t                onClick: onClick,\n\t                draggable: draggable,\n\t                onDragStart: onDragStart,\n\t                onDragOver: onDragOver,\n\t                onDrop: onDrop\n\t              },\n\t              coordinateDisplay\n\t            ));\n\t\n\t            coordinate++;\n\t          }\n\t\n\t          var rowHeight = 500 / this.props.dimensions.y - 500 / this.props.dimensions.y * 0.08;\n\t          var rowMargin = 500 / this.props.dimensions.y * 0.04;\n\t          var rowStyle = {\n\t            height: rowHeight\n\t          };\n\t\n\t          row.push(React.createElement(\n\t            'div',\n\t            {\n\t              className: 'row',\n\t              style: rowStyle\n\t            },\n\t            column\n\t          ));\n\t        }\n\t\n\t        display = row;\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { className: 'display' },\n\t        display\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return ContainerDisplay;\n\t}(React.Component);\n\t\n\tContainerDisplay.propTypes = {};\n\t\n\texports.default = ContainerDisplay;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _barcodeForm = __webpack_require__(4);\n\t\n\tvar _barcodeForm2 = _interopRequireDefault(_barcodeForm);\n\t\n\tvar _specimenForm = __webpack_require__(3);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tvar _preparationForm = __webpack_require__(9);\n\t\n\tvar _preparationForm2 = _interopRequireDefault(_preparationForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Pool Specimen Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\tvar PoolSpecimenForm = function (_React$Component) {\n\t  _inherits(PoolSpecimenForm, _React$Component);\n\t\n\t  function PoolSpecimenForm(props) {\n\t    _classCallCheck(this, PoolSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (PoolSpecimenForm.__proto__ || Object.getPrototypeOf(PoolSpecimenForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      barcodeList: {},\n\t      errorMessage: null,\n\t      formErrors: {},\n\t      barcodeCount: 2,\n\t      preparation: false,\n\t      step: 1\n\t    };\n\t\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    _this.validateForm = _this.validateForm.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setPreparationFormData = _this.setPreparationFormData.bind(_this);\n\t    _this.setSpecimenFormData = _this.setSpecimenFormData.bind(_this);\n\t    _this.submitForm = _this.submitForm.bind(_this);\n\t    _this.setBarcodeCount = _this.setBarcodeCount.bind(_this);\n\t    _this.next = _this.next.bind(_this);\n\t    _this.previous = _this.previous.bind(_this);\n\t    _this.addPreparation = _this.addPreparation.bind(_this);\n\t    _this.removePreparation = _this.removePreparation.bind(_this);\n\t    _this.validate = _this.validate.bind(_this);\n\t    _this.formSwitch = _this.formSwitch.bind(_this);\n\t    _this.preparationSwitch = _this.preparationSwitch.bind(_this);\n\t    _this.runAjax = _this.runAjax.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(PoolSpecimenForm, [{\n\t    key: 'next',\n\t    value: function next() {\n\t      var _this2 = this;\n\t\n\t      this.validate().then(function (data) {\n\t        _this2.setState({\n\t          poolData: data,\n\t          step: _this2.state.step + 1\n\t        });\n\t      }, function (error) {\n\t        swal(\"Oops!\", error.responseText, \"error\");\n\t      });\n\t    }\n\t  }, {\n\t    key: 'previous',\n\t    value: function previous() {\n\t      this.setState({\n\t        step: this.state.step - 1\n\t      });\n\t    }\n\t  }, {\n\t    key: 'validate',\n\t    value: function validate() {\n\t      return this.runAjax(this.props.specimenRequest, { barcodeList: this.state.barcodeList });\n\t    }\n\t  }, {\n\t    key: 'runAjax',\n\t    value: function runAjax(url, inputData) {\n\t      var _this3 = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        $.ajax(url, {\n\t          method: \"GET\",\n\t          dataType: 'json',\n\t          data: inputData,\n\t          success: function (data) {\n\t            resolve(data);\n\t          }.bind(_this3),\n\t          error: function error(_error, textStatus, errorThrown) {\n\t            reject(_error);\n\t            console.error(_error);\n\t          }\n\t        });\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setBarcodeCount',\n\t    value: function setBarcodeCount(field, value) {\n\t      var barcodeCount = value;\n\t      var barcodeList = this.state.barcodeList;\n\t      for (var barcode in barcodeList) {\n\t        if (barcode > barcodeCount) {\n\t          delete barcodeList[barcode];\n\t        }\n\t      }\n\t\n\t      this.setState({ barcodeCount: barcodeCount, barcodeList: barcodeList });\n\t    }\n\t  }, {\n\t    key: 'formSwitch',\n\t    value: function formSwitch(inputForm, specimenForm) {\n\t      switch (this.state.step) {\n\t        case 1:\n\t          return inputForm;\n\t        case 2:\n\t          return specimenForm;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'preparationSwitch',\n\t    value: function preparationSwitch(preparationButton, preparationForm) {\n\t      switch (this.state.preparation) {\n\t        case false:\n\t          return preparationButton;\n\t        case true:\n\t          return preparationForm;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'addPreparation',\n\t    value: function addPreparation() {\n\t      var _this4 = this;\n\t\n\t      this.validate().then(function (data) {\n\t        _this4.setState({\n\t          poolData: data,\n\t          preparation: true\n\t        });\n\t      }, function (error) {\n\t        swal('Oh no!', error.responseText, 'error');\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removePreparation',\n\t    value: function removePreparation() {\n\t      var formData = this.state.formData;\n\t      //TODO: is it better to set it to empty, or delete it?\n\t      formData.preparationForm = {};\n\t      this.setState({\n\t        preparation: false,\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      //Generates barcodes\n\t      var barcodes = [];\n\t      for (var i = 1; i <= this.state.barcodeCount; i++) {\n\t        barcodes.push(React.createElement(TextboxElement, {\n\t          name: i,\n\t          label: 'Barcode ' + i,\n\t          onUserInput: this.setFormData,\n\t          required: true,\n\t          value: this.state.barcodeList[i],\n\t          errorMessage: this.state.formErrors[i]\n\t        }));\n\t      }\n\t\n\t      var preparationButton = React.createElement(\n\t        'div',\n\t        { className: 'row' },\n\t        React.createElement('div', { className: 'col-xs-4' }),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-xs 4 action' },\n\t          React.createElement(\n\t            'span',\n\t            { className: 'action' },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                className: 'action-button add',\n\t                onClick: this.addPreparation\n\t              },\n\t              '+'\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'action-title' },\n\t            'Add Preparation'\n\t          )\n\t        )\n\t      );\n\t\n\t      var preparationForm = void 0;\n\t      if (this.state.poolData) {\n\t\n\t        var specimenProtocolAttributes = this.props.specimenProtocolAttributes[this.state.poolData.typeId];\n\t\n\t        var specimenProtocols = {};\n\t        for (var id in specimenProtocolAttributes) {\n\t          specimenProtocols[id] = this.props.specimenProtocols[id];\n\t        }\n\t        specimenProtocols = this.props.mapFormOptions(specimenProtocols, 'protocol');\n\t\n\t        preparationForm = React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-sm-9 col-sm-offset-1' },\n\t            React.createElement(_preparationForm2.default, {\n\t              formData: this.state.formData.preparationForm,\n\t              specimenProtocols: specimenProtocols,\n\t              specimenProtocolAttributes: specimenProtocolAttributes,\n\t              attributeDatatypes: this.props.attributeDatatypes,\n\t              attributeOptions: this.props.attributeOptions,\n\t              setParentFormData: this.setPreparationFormData,\n\t              insertAction: loris.BaseURL + '/biobank/ajax/submitData.php?action=insertSpecimenPreparation'\n\t            }),\n\t            React.createElement(\n\t              'a',\n\t              { className: 'pull-right', style: { cursor: 'pointer' }, onClick: this.removePreparation },\n\t              'Cancel Preparation'\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      var inputForm = React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-sm-9 col-sm-offset-1' },\n\t            React.createElement(StaticElement, {\n\t              label: 'Pooling Note',\n\t              text: 'Select or Scan the specimens to be pooled. Please ensure that they are the same type, and share the same PSCID and Visit Label'\n\t            }),\n\t            React.createElement(NumericElement, {\n\t              label: '\\u2116 of Specimens',\n\t              min: '2',\n\t              max: '100',\n\t              value: this.state.barcodeCount,\n\t              onUserInput: this.setBarcodeCount\n\t            }),\n\t            barcodes\n\t          )\n\t        ),\n\t        this.preparationSwitch(preparationButton, preparationForm),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-sm-3 col-xs-offset-9 action' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'action-title' },\n\t            'Next'\n\t          ),\n\t          React.createElement(\n\t            'span',\n\t            { className: 'action' },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                className: 'action-button update',\n\t                onClick: this.next\n\t              },\n\t              React.createElement('span', { className: 'glyphicon glyphicon-chevron-right' })\n\t            )\n\t          )\n\t        )\n\t      );\n\t\n\t      //TODO: Things here need to be in the proper order!!!\n\t      var specimenForm = void 0;\n\t      if (this.state.poolData) {\n\t\n\t        // This is to provide the options for the output specimens\n\t        var specimenTypes = {};\n\t        if (this.state.poolData.typeId) {\n\t          specimenTypes[this.state.poolData.typeId] = this.props.specimenTypes[this.state.poolData.typeId];\n\t        }\n\t\n\t        var pscid = this.props.pSCIDs[this.state.poolData.candidateId];\n\t        var visit = this.props.sessionData[pscid].visits[this.state.poolData.sessionId];\n\t\n\t        var barcodesArray = Object.values(this.state.barcodeList);\n\t        var barcodesString = barcodesArray.join(', ');\n\t\n\t        // TODO: rather than all specimen units this should really be specific to the\n\t        // type\n\t        var specimenUnits = this.props.mapFormOptions(this.props.specimenUnits, 'unit');\n\t\n\t        specimenForm = React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-12' },\n\t            React.createElement(_specimenForm2.default, {\n\t              formData: this.state.formData.specimenForm,\n\t              candidateId: this.state.poolData.candidateId,\n\t              pscid: pscid,\n\t              sessionId: this.state.poolData.sessionId,\n\t              visit: visit,\n\t              parentSpecimenBarcodes: barcodesString,\n\t              parentSpecimenIds: this.state.poolData.specimenIds,\n\t              specimenTypes: specimenTypes,\n\t              specimenTypeUnits: this.props.specimenTypeUnits,\n\t              specimenUnits: specimenUnits,\n\t              containerTypesPrimary: this.props.containerTypesPrimary,\n\t              containersNonPrimary: this.props.containersNonPrimary,\n\t              specimenTypeAttributes: this.props.specimenTypeAttributes,\n\t              attributeDatatypes: this.props.attributeDatatypes,\n\t              attributeOptions: this.props.attributeOptions,\n\t              capacities: this.props.capacities,\n\t              containerDimensions: this.props.containerDimensions,\n\t              containerCoordinates: this.props.containerCoordinates,\n\t              setParentFormData: this.setSpecimenFormData,\n\t              action: loris.BaseURL + '/biobank/ajax/submitData.php?action=submitSpecimen',\n\t              refreshParent: this.props.refreshParent\n\t            }),\n\t            React.createElement(ButtonElement, {\n\t              label: 'Submit'\n\t            })\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-sm-3 col-xs-offset-2 action' },\n\t            React.createElement(\n\t              'span',\n\t              { className: 'action' },\n\t              React.createElement(\n\t                'div',\n\t                {\n\t                  className: 'action-button update',\n\t                  onClick: this.previous\n\t                },\n\t                React.createElement('span', { className: 'glyphicon glyphicon-chevron-left' })\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'action-title' },\n\t              'Previous'\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'poolSpecimenForm',\n\t          id: 'poolSpecimenForm',\n\t          onSubmit: this.handleSubmit,\n\t          ref: 'form'\n\t        },\n\t        this.formSwitch(inputForm, specimenForm)\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t  }, {\n\t    key: 'validateForm',\n\t    value: function validateForm(formElement, value) {\n\t      var _this5 = this;\n\t\n\t      var formErrors = this.state.formErrors;\n\t\n\t      //validate barcode regex\n\t      if (formElement === \"barcode\" && value !== \"\") {\n\t        if (!/^hello/.test(this.state.formData.barcode)) {\n\t          formErrors.barcode = true;\n\t        } else {\n\t          formErrors.barcode = false;\n\t        }\n\t      }\n\t\n\t      //validate that quantity is a number and less than capacity\n\t      if (formElement === \"quantity\" && value !== \"\") {\n\t        if (isNaN(value) || value > this.props.capacities[this.state.currentContainerType]) {\n\t          formErrors.quantity = true;\n\t        } else {\n\t          formErrors.quantity = false;\n\t        }\n\t      }\n\t\n\t      //validate datatypes and regex of generated type attributes\n\t      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t      var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t\n\t        var datatype = _this5.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"number\") {\n\t          if (formElement === attribute) {\n\t            if (isNaN(value) && value !== \"\") {\n\t              formErrors[attribute] = true;\n\t            } else {\n\t              formErrors[attribute] = false;\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      this.setState({\n\t        formErrors: formErrors\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Handle form submission\n\t     * @param {object} e - Form submission event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      this.submitForm();\n\t    }\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'submitForm',\n\t    value: function submitForm() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var preparationForm = this.state.formData.preparationForm;\n\t      var specimenForm = this.state.formData.specimenForm;\n\t      formData['preparationForm'] = JSON.stringify(preparationForm);\n\t      formData['specimenForm'] = JSON.stringify(specimenForm);\n\t\n\t      console.log(formData.specimenForm);\n\t      console.log(formData.preparationForm);\n\t\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          //this.props.refreshParent();\n\t          swal(\"Specimens Pooled Successful!\", \"\", \"success\");\n\t          this.props.onSuccess();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Checks if the inputted file name is valid\n\t     *\n\t     * @param {string} requiredFileName - Required file name\n\t     * @param {string} fileName - Provided file name\n\t     * @return {boolean} - true if fileName starts with requiredFileName, false\n\t     *   otherwise\n\t     */\n\t    //  isValidFileName(requiredFileName, fileName) {\n\t    //    if (fileName === null || requiredFileName === null) {\n\t    //      return false;\n\t    //    }\n\t    //\n\t    //    return (fileName.indexOf(requiredFileName) === 0);\n\t    //  }\n\t\n\t    /**\n\t     * Validate the form\n\t     *\n\t     * @param {object} formRefs - Object containing references to React form elements\n\t     * @param {object} formData - Object containing form data inputed by user\n\t     * @return {boolean} - true if all required fields are filled, false otherwise\n\t     */\n\t\n\t  }, {\n\t    key: 'isValidForm',\n\t    value: function isValidForm(formRefs, formData) {\n\t      var isValidForm = true;\n\t\n\t      var requiredFields = {\n\t        pscid: null,\n\t        visitLabel: null\n\t      };\n\t\n\t      Object.keys(requiredFields).map(function (field) {\n\t        if (formData[field]) {\n\t          requiredFields[field] = formData[field];\n\t        } else if (formRefs[field]) {\n\t          formRefs[field].props.hasError = true;\n\t          isValidForm = false;\n\t        }\n\t      });\n\t      this.forceUpdate();\n\t\n\t      return isValidForm;\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      // This lets the modal window know that there is formData\n\t      // and will cause a warning to be thrown of the modal window\n\t      // is exited\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t\n\t      if (formElement === \"pscid\" && value !== \"\" && value !== undefined) {\n\t        this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n\t      }\n\t\n\t      var formData = this.state.formData;\n\t      var barcodeList = this.state.barcodeList;\n\t\n\t      //TODO: there must be a better way to do this\n\t      if (isNaN(formElement)) {\n\t        formData[formElement] = value;\n\t      } else {\n\t        barcodeList[formElement] = value;\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData,\n\t        barcodeList: barcodeList\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setPreparationFormData',\n\t    value: function setPreparationFormData(preparationFormData) {\n\t      var formData = this.state.formData;\n\t      formData.preparationForm = preparationFormData;\n\t\n\t      this.setState({ formData: formData });\n\t    }\n\t  }, {\n\t    key: 'setSpecimenFormData',\n\t    value: function setSpecimenFormData(specimenFormData) {\n\t      var formData = this.state.formData;\n\t      formData.specimenForm = specimenFormData;\n\t\n\t      this.setState({ formData: formData });\n\t    }\n\t  }]);\n\t\n\t  return PoolSpecimenForm;\n\t}(React.Component);\n\t\n\tPoolSpecimenForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired,\n\t  refreshTable: React.PropTypes.func\n\t};\n\t\n\texports.default = PoolSpecimenForm;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenPreparationForm = function (_React$Component) {\n\t  _inherits(SpecimenPreparationForm, _React$Component);\n\t\n\t  function SpecimenPreparationForm() {\n\t    _classCallCheck(this, SpecimenPreparationForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenPreparationForm.__proto__ || Object.getPrototypeOf(SpecimenPreparationForm)).call(this));\n\t\n\t    _this.getSpecimenProtocolFields = _this.getSpecimenProtocolFields.bind(_this);\n\t    _this.setPreparation = _this.setPreparation.bind(_this);\n\t    _this.addData = _this.addData.bind(_this);\n\t    _this.setData = _this.setData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenPreparationForm, [{\n\t    key: 'setPreparation',\n\t    value: function setPreparation(name, value) {\n\t      var preparation = this.props.specimen.preparation;\n\t      preparation[name] = value;\n\t      this.props.setSpecimenData('preparation', preparation);\n\t    }\n\t  }, {\n\t    key: 'addData',\n\t    value: function addData() {\n\t      var preparation = this.props.specimen.preparation;\n\t      preparation.data = {};\n\t      this.props.setSpecimenData('preparation', preparation);\n\t    }\n\t  }, {\n\t    key: 'setData',\n\t    value: function setData(name, value) {\n\t      var data = this.props.specimen.preparation.data;\n\t      data[name] = value;\n\t      this.setPreparation('data', data);\n\t    }\n\t\n\t    // TODO: decouple this code from the collectionForm by make it a React Component\n\t    // This generates all the form fields for a given specimen protocol\n\t\n\t  }, {\n\t    key: 'getSpecimenProtocolFields',\n\t    value: function getSpecimenProtocolFields(fieldsObject) {\n\t      var _this2 = this;\n\t\n\t      var specimenProtocolFields = Object.keys(fieldsObject).map(function (attribute) {\n\t        var datatype = _this2.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\t\n\t        if (datatype === \"text\" || datatype === \"number\") {\n\t          if (fieldsObject[attribute]['refTableId'] == null) {\n\t            return React.createElement(TextboxElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              onUserInput: _this2.setData,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this2.props.specimen.preparation.data[attribute]\n\t            });\n\t          }\n\t\n\t          if (fieldsObject[attribute]['refTableId'] !== null) {\n\t            return React.createElement(SelectElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              options: _this2.props.attributeOptions[fieldsObject[attribute]['refTableId']],\n\t              onUserInput: _this2.setData,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this2.props.specimen.preparation.data[attribute]\n\t            });\n\t          }\n\t        }\n\t\n\t        if (datatype === \"datetime\") {\n\t          return React.createElement(DateElement, {\n\t            name: attribute,\n\t            label: fieldsObject[attribute]['name'],\n\t            onUserInput: _this2.setData,\n\t            ref: attribute,\n\t            required: fieldsObject[attribute]['required'],\n\t            value: _this2.props.specimen.preparation.data[attribute]\n\t          });\n\t        }\n\t\n\t        if (datatype === \"boolean\") {}\n\t      });\n\t\n\t      return specimenProtocolFields;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      var submitButton = void 0;\n\t      if (this.props.data.specimen.preparation) {\n\t        submitButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      } else {\n\t        submitButton = React.createElement(ButtonElement, { label: 'Submit' });\n\t      }\n\t\n\t      var specimenProtocolFields = void 0;\n\t      if (this.props.specimen.preparation.protocolId) {\n\t        var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.props.specimen.preparation.protocolId];\n\t\n\t        if (specimenProtocolFieldsObject) {\n\t          if (this.props.specimen.preparation.data) {\n\t            specimenProtocolFields = this.getSpecimenProtocolFields(specimenProtocolFieldsObject);\n\t          } else {\n\t            this.addData();\n\t          }\n\t        }\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenPreparation',\n\t          onSubmit: this.props.saveSpecimen,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(SelectElement, {\n\t          name: 'protocolId',\n\t          label: 'Protocol',\n\t          options: this.props.specimenProtocols,\n\t          onUserInput: this.setPreparation,\n\t          required: true,\n\t          value: this.props.specimen.preparation.protocolId\n\t        }),\n\t        specimenProtocolFields,\n\t        React.createElement(DateElement, {\n\t          name: 'date',\n\t          label: 'Date',\n\t          onUserInput: this.setPreparation,\n\t          required: true,\n\t          value: this.props.specimen.preparation.date\n\t        }),\n\t        React.createElement(TimeElement, {\n\t          name: 'time',\n\t          label: 'Time',\n\t          onUserInput: this.setPreparation,\n\t          required: true,\n\t          value: this.props.specimen.preparation.time\n\t        }),\n\t        React.createElement(TextareaElement, {\n\t          name: 'comments',\n\t          label: 'Comments',\n\t          onUserInput: this.setPreparation,\n\t          value: this.props.specimen.preparation.comments\n\t        }),\n\t        submitButton\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return SpecimenPreparationForm;\n\t}(React.Component);\n\t\n\tSpecimenPreparationForm.propTypes = {};\n\t\n\texports.default = SpecimenPreparationForm;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _containerBarcodeForm = __webpack_require__(11);\n\t\n\tvar _containerBarcodeForm2 = _interopRequireDefault(_containerBarcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankContainerForm = function (_React$Component) {\n\t  _inherits(BiobankContainerForm, _React$Component);\n\t\n\t  function BiobankContainerForm(props) {\n\t    _classCallCheck(this, BiobankContainerForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankContainerForm.__proto__ || Object.getPrototypeOf(BiobankContainerForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formErrors: {},\n\t      errorMessage: null,\n\t      containerList: { 1: {} },\n\t      countContainers: 1,\n\t      collapsed: { 1: true },\n\t      copyMultiplier: 1\n\t    };\n\t\n\t    _this.toggleCollapse = _this.toggleCollapse.bind(_this);\n\t    _this.addContainer = _this.addContainer.bind(_this);\n\t    _this.setContainer = _this.setContainer.bind(_this);\n\t    _this.setCopyMultiplier = _this.setCopyMultiplier.bind(_this);\n\t    _this.copyContainer = _this.copyContainer.bind(_this);\n\t    _this.removeContainer = _this.removeContainer.bind(_this);\n\t    _this.saveContainerList = _this.saveContainerList.bind(_this);\n\t    _this.save = _this.save.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankContainerForm, [{\n\t    key: 'toggleCollapse',\n\t    value: function toggleCollapse(key) {\n\t      var collapsed = this.state.collapsed;\n\t      collapsed[key] = !collapsed[key];\n\t      this.setState({ collapsed: collapsed });\n\t    }\n\t  }, {\n\t    key: 'saveContainerList',\n\t    value: function saveContainerList() {\n\t      var _this2 = this;\n\t\n\t      var containerList = this.state.containerList;\n\t      var availableId = Object.keys(this.props.containerStati).find(function (key) {\n\t        return _this2.props.containerStati[key] === 'Available';\n\t      });\n\t\n\t      for (var container in containerList) {\n\t        containerList[container].statusId = availableId;\n\t        containerList[container].temperature = 20;\n\t        this.save(containerList[container], this.props.saveContainer).then(function () {\n\t          _this2.props.refreshParent();_this2.props.onSucces();\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'save',\n\t    value: function save(data, url) {\n\t      var _this3 = this;\n\t\n\t      return new Promise(function (resolve) {\n\t        $.ajax({\n\t          type: 'POST',\n\t          url: url,\n\t          data: { data: JSON.stringify(data) },\n\t          cache: false,\n\t          success: function success() {\n\t            resolve();\n\t            swal(\"Container Submission Successful!\", \"\", \"success\");\n\t          },\n\t          error: function (err) {\n\t            console.error(err);\n\t            var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t            this.setState({\n\t              errorMessage: msg\n\t            });\n\t            swal(msg, \"\", \"error\");\n\t          }.bind(_this3)\n\t        });\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setContainer',\n\t    value: function setContainer(name, value, key) {\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t      var siteId = this.state.siteId;\n\t      var containerList = this.state.containerList;\n\t      if (name === 'siteId') {\n\t        siteId = value;\n\t        for (var container in containerList) {\n\t          containerList[container].originId = siteId;\n\t          containerList[container].locationId = siteId;\n\t        }\n\t      } else {\n\t        containerList[key][name] = value;\n\t      }\n\t      this.setState({ containerList: containerList, siteId: siteId });\n\t    }\n\t  }, {\n\t    key: 'addContainer',\n\t    value: function addContainer() {\n\t      var _this4 = this;\n\t\n\t      var containerList = this.state.containerList;\n\t      var count = this.state.countContainers;\n\t      var collapsed = this.state.collapsed;\n\t      var siteId = this.state.siteId;\n\t      var temperature = 20;\n\t\n\t      // get Id of available status\n\t      var statusId = Object.keys(this.props.containerStati).find(function (key) {\n\t        return _this4.props.containerStati[key] === 'Available';\n\t      });\n\t\n\t      containerList[count + 1] = {\n\t        statusId: statusId,\n\t        originId: siteId,\n\t        locationId: siteId,\n\t        temperature: temperature\n\t      };\n\t\n\t      collapsed[count + 1] = true;\n\t\n\t      this.setState({\n\t        containerList: containerList,\n\t        countContainers: count + 1,\n\t        collapsed: collapsed\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setCopyMultiplier',\n\t    value: function setCopyMultiplier(e) {\n\t      var copyMultiplier = e.target.value;\n\t      this.setState({ copyMultiplier: copyMultiplier });\n\t    }\n\t  }, {\n\t    key: 'copyContainer',\n\t    value: function copyContainer(key) {\n\t      var count = this.state.countContainers;\n\t      var collapsed = this.state.collapsed;\n\t      var nextKey = count + 1;\n\t      var containerList = this.state.containerList;\n\t      var multiplier = this.state.copyMultiplier;\n\t\n\t      for (var i = 1; i <= multiplier; i++) {\n\t        containerList[nextKey] = JSON.parse(JSON.stringify(containerList[key]));\n\t        delete containerList[nextKey].barcode;\n\t        collapsed[nextKey] = true;\n\t        nextKey++;\n\t      }\n\t\n\t      this.setState({\n\t        containerList: containerList,\n\t        countContainers: nextKey,\n\t        collapsed: collapsed\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removeContainer',\n\t    value: function removeContainer(key) {\n\t      var containerList = this.state.containerList;\n\t      delete containerList[key];\n\t      this.setState({ containerList: containerList });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this5 = this;\n\t\n\t      //Generates new Barcode Form everytime the addContainer button is pressed\n\t      var containerListArray = Object.keys(this.state.containerList);\n\t      var containers = [];\n\t      var i = 1;\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        var _loop = function _loop() {\n\t          var key = _step.value;\n\t\n\t          containers.push(React.createElement(_containerBarcodeForm2.default, {\n\t            key: key,\n\t            containerKey: key,\n\t            id: i,\n\t            collapsed: _this5.state.collapsed[key],\n\t            toggleCollapse: _this5.toggleCollapse,\n\t            container: _this5.state.containerList[key] || null,\n\t            removeContainer: containerListArray.length !== 1 ? function () {\n\t              return _this5.removeContainer(key);\n\t            } : null,\n\t            addContainer: i == containerListArray.length ? _this5.addContainer : null,\n\t            setCopyMultiplier: _this5.setCopyMultiplier,\n\t            copyMultiplier: _this5.state.copyMultiplier,\n\t            copyContainer: i == containerListArray.length && _this5.state.containerList[key] ? _this5.copyContainer : null,\n\t            setContainer: _this5.setContainer,\n\t            onChange: _this5.props.onChange,\n\t            containerTypesNonPrimary: _this5.props.containerTypesNonPrimary,\n\t            containerBarcodesNonPrimary: _this5.props.containerBarcodesNonPrimary\n\t          }));\n\t\n\t          i++;\n\t        };\n\t\n\t        for (var _iterator = containerListArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          _loop();\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'containerForm',\n\t          onSubmit: this.saveContainerList,\n\t          ref: 'form'\n\t        },\n\t        React.createElement('br', null),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement(SelectElement, {\n\t              name: 'siteId',\n\t              label: 'Site',\n\t              options: this.props.centers,\n\t              onUserInput: this.setContainer,\n\t              required: true,\n\t              value: this.state.siteId\n\t            })\n\t          )\n\t        ),\n\t        containers,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-xs-3 col-xs-offset-9' },\n\t          React.createElement(ButtonElement, { label: 'Submit' })\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return BiobankContainerForm;\n\t}(React.Component);\n\t\n\tBiobankContainerForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  barcode: React.PropTypes.string,\n\t  refreshTable: React.PropTypes.func\n\t};\n\t\n\texports.default = BiobankContainerForm;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Container Barcode Form\n\t *\n\t * Acts a subform for ContainerForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar ContainerBarcodeForm = function (_React$Component) {\n\t  _inherits(ContainerBarcodeForm, _React$Component);\n\t\n\t  function ContainerBarcodeForm() {\n\t    _classCallCheck(this, ContainerBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ContainerBarcodeForm.__proto__ || Object.getPrototypeOf(ContainerBarcodeForm)).call(this));\n\t\n\t    _this.setContainer = _this.setContainer.bind(_this);\n\t    _this.copy = _this.copy.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ContainerBarcodeForm, [{\n\t    key: 'copy',\n\t    value: function copy() {\n\t      this.props.copyContainer(this.props.containerKey);\n\t    }\n\t\n\t    //TODO: change form.js so this isn't necessary\n\t\n\t  }, {\n\t    key: 'setContainer',\n\t    value: function setContainer(name, value) {\n\t      this.props.setContainer(name, value, this.props.containerKey);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      // HR TODO: All this CSS should eventually be moved\n\t      var addContainerButton = void 0;\n\t      var addContainerText = void 0;\n\t      var copyContainerButton = void 0;\n\t      var copyContainerText = void 0;\n\t      if (this.props.addContainer) {\n\t        addContainerButton = React.createElement(\n\t          'span',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: this.props.addContainer\n\t            },\n\t            '+'\n\t          )\n\t        );\n\t\n\t        addContainerText = React.createElement(\n\t          'span',\n\t          { className: 'action-title' },\n\t          'New Entry'\n\t        );\n\t      }\n\t\n\t      if (this.props.copyContainer) {\n\t        copyContainerButton = React.createElement(\n\t          'span',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: this.copy\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-duplicate' })\n\t          )\n\t        );\n\t        copyContainerText = React.createElement(\n\t          'span',\n\t          { className: 'action-title' },\n\t          React.createElement('input', {\n\t            className: 'form-control input-sm',\n\t            type: 'number',\n\t            min: '1',\n\t            max: '50',\n\t            style: { width: 50, display: 'inline' },\n\t            onChange: this.props.setCopyMultiplier,\n\t            value: this.props.copyMultiplier\n\t          }),\n\t          'Copies'\n\t        );\n\t      }\n\t\n\t      var removeContainerButton = void 0;\n\t      if (this.props.removeContainer) {\n\t        var glyphStyle = {\n\t          color: '#DDDDDD',\n\t          marginLeft: 10,\n\t          cursor: 'pointer',\n\t          fontSize: 15\n\t        };\n\t\n\t        removeContainerButton = React.createElement('span', {\n\t          className: 'glyphicon glyphicon-remove',\n\t          onClick: this.props.removeContainer,\n\t          style: glyphStyle\n\t        });\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'container'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement(\n\t              'div',\n\t              null,\n\t              React.createElement(TextboxElement, {\n\t                name: 'barcode',\n\t                label: 'Barcode ' + this.props.id,\n\t                onUserInput: this.setContainer,\n\t                ref: 'barcode',\n\t                required: true,\n\t                value: this.props.container.barcode\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-1', style: { paddingLeft: 0, marginTop: 10 } },\n\t            React.createElement('span', {\n\t              className: this.props.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up',\n\t              style: { cursor: 'pointer', fontSize: 15, position: 'relative', right: 40 },\n\t              'data-toggle': 'collapse',\n\t              'data-target': '#item-' + this.props.containerKey,\n\t              onClick: function onClick() {\n\t                return _this2.props.toggleCollapse(_this2.props.containerKey);\n\t              }\n\t            }),\n\t            removeContainerButton\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement('div', { className: 'col-xs-2' }),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-9' },\n\t            React.createElement(\n\t              'div',\n\t              { id: 'item-' + this.props.containerKey, className: 'collapse' },\n\t              React.createElement(SelectElement, {\n\t                name: 'typeId',\n\t                label: 'Container Type',\n\t                options: this.props.containerTypesNonPrimary,\n\t                onUserInput: this.setContainer,\n\t                required: true,\n\t                value: this.props.container.typeId\n\t              })\n\t            )\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement('div', { className: 'col-xs-3' }),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-4 action' },\n\t              addContainerButton,\n\t              addContainerText\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-4 action' },\n\t              copyContainerButton,\n\t              copyContainerText\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return ContainerBarcodeForm;\n\t}(React.Component);\n\t\n\tContainerBarcodeForm.propTypes = {};\n\t\n\texports.default = ContainerBarcodeForm;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Tabs component.\n\t *\n\t * @author Loris Team\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Tabs Component.\n\t * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n\t * and corresponding tab panes.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * 1. Define an array of tabs with IDs and labels\n\t *\n\t * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n\t *\n\t * 2. Pass tabList as <Tab> property and <TabPane> as child\n\t *  ```\n\t * <Tabs tabs={tabList} defaultTab=\"tab1\">\n\t *   <TabPane TabId={tabList[0].id}>\n\t *     // Tab content goes here\n\t *   </TabPane>\n\t * </Tabs>\n\t * ```\n\t * =================================================\n\t *\n\t */\n\tvar Tabs = function (_React$Component) {\n\t  _inherits(Tabs, _React$Component);\n\t\n\t  function Tabs(props) {\n\t    _classCallCheck(this, Tabs);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call(this, props));\n\t\n\t    var hash = window.location.hash;\n\t    var activeTab = \"\";\n\t\n\t    /**\n\t     * Determine the initial active tab in this order\n\t     * 1. Try to infer from the URL, otherwise\n\t     * 2. Try to infer from the defaultTab prop, otherwise\n\t     * 3. Set to be the first tab of the list\n\t     */\n\t    if (_this.props.updateURL && hash) {\n\t      activeTab = hash.substr(1);\n\t    } else if (_this.props.defaultTab) {\n\t      activeTab = _this.props.defaultTab;\n\t    } else if (_this.props.tabs.length > 0) {\n\t      activeTab = _this.props.tabs[0].id;\n\t    }\n\t\n\t    _this.state = {\n\t      activeTab: activeTab\n\t    };\n\t\n\t    _this.handleClick = _this.handleClick.bind(_this);\n\t    _this.getTabs = _this.getTabs.bind(_this);\n\t    _this.getTabPanes = _this.getTabPanes.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Tabs, [{\n\t    key: 'handleClick',\n\t    value: function handleClick(tabId, e) {\n\t      this.setState({ activeTab: tabId });\n\t      this.props.onTabChange(tabId);\n\t\n\t      // Add tab href to URL querystring and scroll the page to top\n\t      if (this.props.updateURL) {\n\t        var scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n\t        window.location.hash = e.target.hash;\n\t        $('html,body').scrollTop(scrollDistance);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getTabs',\n\t    value: function getTabs() {\n\t      var tabs = this.props.tabs.map(function (tab) {\n\t        var tabClass = this.state.activeTab === tab.id ? 'active' : null;\n\t        var href = \"#\" + tab.id;\n\t        var tabID = \"tab-\" + tab.id;\n\t        return React.createElement(\n\t          'li',\n\t          {\n\t            role: 'presentation',\n\t            className: tabClass,\n\t            key: tab.id\n\t          },\n\t          React.createElement(\n\t            'a',\n\t            { id: tabID,\n\t              href: href,\n\t              role: 'tab',\n\t              'data-toggle': 'tab',\n\t              onClick: this.handleClick.bind(null, tab.id)\n\t            },\n\t            tab.label\n\t          )\n\t        );\n\t      }.bind(this));\n\t\n\t      return tabs;\n\t    }\n\t  }, {\n\t    key: 'getTabPanes',\n\t    value: function getTabPanes() {\n\t      var tabPanes = React.Children.map(this.props.children, function (child, key) {\n\t        if (child) {\n\t          return React.cloneElement(child, {\n\t            activeTab: this.state.activeTab,\n\t            key: key\n\t          });\n\t        }\n\t      }.bind(this));\n\t\n\t      return tabPanes;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var tabs = this.getTabs();\n\t      var tabPanes = this.getTabPanes();\n\t      var tabStyle = {\n\t        marginLeft: 0,\n\t        marginBottom: '5px'\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'ul',\n\t          { className: 'nav nav-tabs', role: 'tablist', style: tabStyle },\n\t          tabs\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tab-content' },\n\t          tabPanes\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Tabs;\n\t}(React.Component);\n\t\n\tTabs.propTypes = {\n\t  tabs: React.PropTypes.array.isRequired,\n\t  defaultTab: React.PropTypes.string,\n\t  updateURL: React.PropTypes.bool\n\t};\n\tTabs.defaultProps = {\n\t  onTabChange: function onTabChange() {},\n\t  // Set updateURL to default to true but allow for change\n\t  // Nested tabs should set this variable to false\n\t  updateURL: true\n\t};\n\t\n\t/**\n\t * Allows to dynamically render vertical tabs corresponding to tab panes.\n\t */\n\t\n\tvar VerticalTabs = function (_React$Component2) {\n\t  _inherits(VerticalTabs, _React$Component2);\n\t\n\t  function VerticalTabs(props) {\n\t    _classCallCheck(this, VerticalTabs);\n\t\n\t    var _this2 = _possibleConstructorReturn(this, (VerticalTabs.__proto__ || Object.getPrototypeOf(VerticalTabs)).call(this, props));\n\t\n\t    var hash = window.location.hash;\n\t    var activeTab = \"\";\n\t\n\t    /**\n\t     * Determine the initial active tab in this order\n\t     * 1. Try to infer from the URL, otherwise\n\t     * 2. Try to infer from the defaultTab prop, otherwise\n\t     * 3. Set to be the first tab of the list\n\t     */\n\t    if (_this2.props.updateURL && hash) {\n\t      activeTab = hash.substr(1);\n\t    } else if (_this2.props.defaultTab) {\n\t      activeTab = _this2.props.defaultTab;\n\t    } else if (_this2.props.tabs.length > 0) {\n\t      activeTab = _this2.props.tabs[0].id;\n\t    }\n\t\n\t    _this2.state = {\n\t      activeTab: activeTab\n\t    };\n\t\n\t    _this2.handleClick = _this2.handleClick.bind(_this2);\n\t    _this2.getTabs = _this2.getTabs.bind(_this2);\n\t    _this2.getTabPanes = _this2.getTabPanes.bind(_this2);\n\t    return _this2;\n\t  }\n\t\n\t  _createClass(VerticalTabs, [{\n\t    key: 'handleClick',\n\t    value: function handleClick(tabId, e) {\n\t      this.setState({ activeTab: tabId });\n\t      this.props.onTabChange(tabId);\n\t\n\t      // Add tab href to URL querystring and scroll the page to top\n\t      if (this.props.updateURL) {\n\t        var scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n\t        window.location.hash = e.target.hash;\n\t        $('html,body').scrollTop(scrollDistance);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getTabs',\n\t    value: function getTabs() {\n\t      var tabs = this.props.tabs.map(function (tab) {\n\t        var tabClass = this.state.activeTab === tab.id ? 'active' : null;\n\t        var href = \"#\" + tab.id;\n\t        var tabID = \"tab-\" + tab.id;\n\t        return React.createElement(\n\t          'li',\n\t          {\n\t            role: 'presentation',\n\t            className: tabClass,\n\t            key: tab.id\n\t          },\n\t          React.createElement(\n\t            'a',\n\t            { id: tabID,\n\t              href: href,\n\t              role: 'tab',\n\t              'data-toggle': 'tab',\n\t              onClick: this.handleClick.bind(null, tab.id)\n\t            },\n\t            tab.label\n\t          )\n\t        );\n\t      }.bind(this));\n\t\n\t      return tabs;\n\t    }\n\t  }, {\n\t    key: 'getTabPanes',\n\t    value: function getTabPanes() {\n\t      var tabPanes = React.Children.map(this.props.children, function (child, key) {\n\t        if (child) {\n\t          return React.cloneElement(child, {\n\t            activeTab: this.state.activeTab,\n\t            key: key\n\t          });\n\t        }\n\t      }.bind(this));\n\t\n\t      return tabPanes;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var tabs = this.getTabs();\n\t      var tabPanes = this.getTabPanes();\n\t      var tabStyle = {\n\t        marginLeft: 0,\n\t        marginBottom: '5px'\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tabbable col-md-3 col-sm-3' },\n\t          React.createElement(\n\t            'ul',\n\t            { className: 'nav nav-pills nav-stacked', role: 'tablist', style: tabStyle },\n\t            tabs\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tab-content col-md-9 col-sm-9' },\n\t          tabPanes\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return VerticalTabs;\n\t}(React.Component);\n\t\n\tVerticalTabs.propTypes = {\n\t  tabs: React.PropTypes.array.isRequired,\n\t  defaultTab: React.PropTypes.string,\n\t  updateURL: React.PropTypes.bool\n\t};\n\tVerticalTabs.defaultProps = {\n\t  onTabChange: function onTabChange() {},\n\t  // Set updateURL to default to true but allow for change\n\t  // Nested tabs should set this variable to false\n\t  updateURL: true\n\t};\n\t\n\t/*\n\t * TabPane component.\n\t * Used to wrap content for every tab.\n\t */\n\t\n\tvar TabPane = function (_React$Component3) {\n\t  _inherits(TabPane, _React$Component3);\n\t\n\t  function TabPane() {\n\t    _classCallCheck(this, TabPane);\n\t\n\t    return _possibleConstructorReturn(this, (TabPane.__proto__ || Object.getPrototypeOf(TabPane)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(TabPane, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var classList = \"tab-pane\";\n\t      var title = void 0;\n\t\n\t      if (this.props.TabId === this.props.activeTab) {\n\t        classList += \" active\";\n\t      }\n\t      if (this.props.Title) {\n\t        title = React.createElement(\n\t          'h1',\n\t          null,\n\t          this.props.Title\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { role: 'tabpanel', className: classList, id: this.props.TabId },\n\t        title,\n\t        this.props.children\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return TabPane;\n\t}(React.Component);\n\t\n\tTabPane.propTypes = {\n\t  TabId: React.PropTypes.string.isRequired,\n\t  Title: React.PropTypes.string,\n\t  activeTab: React.PropTypes.string\n\t};\n\t\n\texports.Tabs = Tabs;\n\texports.VerticalTabs = VerticalTabs;\n\texports.TabPane = TabPane;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Modal = __webpack_require__(14);\n\t\n\tvar _Modal2 = _interopRequireDefault(_Modal);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file contains React components for Modal component.\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Henri Rabalais\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.1.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/**\n\t * Modal Component.\n\t * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * =================================================\n\t *\n\t */\n\t\n\tvar FormModal = function (_React$Component) {\n\t  _inherits(FormModal, _React$Component);\n\t\n\t  function FormModal(props) {\n\t    _classCallCheck(this, FormModal);\n\t\n\t    var _this = _possibleConstructorReturn(this, (FormModal.__proto__ || Object.getPrototypeOf(FormModal)).call(this, props));\n\t\n\t    _this.state = { show: false, throwWarning: false };\n\t\n\t    _this.openModal = _this.openModal.bind(_this);\n\t    _this.closeModal = _this.closeModal.bind(_this);\n\t    _this.confirmClose = _this.confirmClose.bind(_this);\n\t    _this.setWarning = _this.setWarning.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(FormModal, [{\n\t    key: \"renderChildren\",\n\t    value: function renderChildren() {\n\t      var _this2 = this;\n\t\n\t      return React.Children.map(this.props.children, function (child) {\n\t        return React.cloneElement(child, { onSuccess: _this2.closeModal, onChange: _this2.setWarning });\n\t      });\n\t    }\n\t  }, {\n\t    key: \"openModal\",\n\t    value: function openModal() {\n\t      this.setState({\n\t        show: true\n\t      });\n\t    }\n\t  }, {\n\t    key: \"setWarning\",\n\t    value: function setWarning() {\n\t      this.setState({\n\t        throwWarning: true\n\t      });\n\t    }\n\t  }, {\n\t    key: \"confirmClose\",\n\t    value: function confirmClose() {\n\t      if (this.state.throwWarning) {\n\t        swal({\n\t          title: \"Are You Sure?\",\n\t          text: \"Leaving the form will result in the loss of any information entered.\",\n\t          type: \"warning\",\n\t          showCancelButton: true,\n\t          confirmButtonText: 'Proceed',\n\t          cancelButtonText: 'Cancel'\n\t        }, function () {\n\t          this.closeModal();\n\t        }.bind(this));\n\t      } else {\n\t        this.closeModal();\n\t      }\n\t    }\n\t  }, {\n\t    key: \"closeModal\",\n\t    value: function closeModal() {\n\t      this.setState({\n\t        show: false,\n\t        throwWarning: false\n\t      });\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      return React.createElement(\n\t        _Modal2.default,\n\t        _extends({\n\t          closeModal: this.confirmClose,\n\t          openModal: this.openModal,\n\t          show: this.state.show\n\t        }, this.props),\n\t        this.renderChildren()\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return FormModal;\n\t}(React.Component);\n\t\n\tFormModal.propTypes = {\n\t  title: React.PropTypes.string,\n\t  buttonClass: React.PropTypes.string,\n\t  buttonStyle: React.PropTypes.object,\n\t  buttonContent: React.PropTypes.object\n\t};\n\tFormModal.defaultProps = {\n\t  buttonClass: 'btn btn-primary'\n\t};\n\t\n\texports.default = FormModal;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Modal component.\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Modal Component.\n\t * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * =================================================\n\t *\n\t */\n\tvar Modal = function (_React$Component) {\n\t  _inherits(Modal, _React$Component);\n\t\n\t  function Modal(props) {\n\t    _classCallCheck(this, Modal);\n\t\n\t    return _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));\n\t  }\n\t\n\t  _createClass(Modal, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      // Black Background with Alpha Channel\n\t      var backdropStyle = {\n\t        position: 'fixed',\n\t        zIndex: 9998,\n\t        top: 0,\n\t        bottom: 0,\n\t        left: 0,\n\t        right: 0,\n\t        backgroundColor: 'rgba(0,0,0,0.3)',\n\t        padding: 50\n\t      };\n\t\n\t      // White Modal Window\n\t      var modalStyle = {\n\t        position: 'relative',\n\t        maxWidth: 1000,\n\t        maxHeight: '100%',\n\t        margin: '0 auto',\n\t        backgroundColor: '#fff',\n\t        borderRadius: 10,\n\t        overflowY: 'auto',\n\t        zIndex: 9999\n\t      };\n\t\n\t      var titleStyle = {\n\t        display: 'flex',\n\t        flexDirection: 'row',\n\t        alignItems: 'center',\n\t        background: '#093782',\n\t        height: '70px',\n\t        borderTopRightRadius: '10',\n\t        color: '#FFFFFF',\n\t        fontSize: 24,\n\t        padding: 20\n\t      };\n\t\n\t      var glyphStyle = {\n\t        marginLeft: 'auto',\n\t        cursor: 'pointer'\n\t      };\n\t\n\t      var bodyStyle = {\n\t        padding: 15\n\t      };\n\t\n\t      var button = React.createElement(\n\t        'div',\n\t        {\n\t          className: this.props.buttonClass,\n\t          onClick: this.props.openModal\n\t        },\n\t        this.props.buttonContent\n\t      );\n\t\n\t      var modal;\n\t      if (this.props.show) {\n\t        modal = React.createElement(\n\t          'div',\n\t          { style: backdropStyle, onClick: this.props.closeModal },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              style: modalStyle,\n\t              onClick: function onClick(e) {\n\t                e.stopPropagation();\n\t              }\n\t            },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                style: titleStyle\n\t              },\n\t              this.props.title,\n\t              React.createElement(\n\t                'span',\n\t                {\n\t                  style: glyphStyle,\n\t                  onClick: this.props.closeModal\n\t                },\n\t                '\\xD7'\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                style: bodyStyle\n\t              },\n\t              this.props.children\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { style: this.props.style },\n\t        button,\n\t        modal\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Modal;\n\t}(React.Component);\n\t\n\tModal.propTypes = {\n\t  title: React.PropTypes.string,\n\t  buttonClass: React.PropTypes.string,\n\t  buttonStyle: React.PropTypes.object,\n\t  buttonContent: React.PropTypes.object,\n\t  show: React.PropTypes.boolean,\n\t  closeModal: React.PropTypes.func,\n\t  openModal: React.PropTypes.func\n\t};\n\tModal.defaultProps = {\n\t  buttonClass: 'btn btn-primary'\n\t};\n\t\n\texports.default = Modal;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Loader\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Loader component\n\t */\n\tvar Loader = function (_React$Component) {\n\t  _inherits(Loader, _React$Component);\n\t\n\t  function Loader(props) {\n\t    _classCallCheck(this, Loader);\n\t\n\t    return _possibleConstructorReturn(this, (Loader.__proto__ || Object.getPrototypeOf(Loader)).call(this, props));\n\t  }\n\t\n\t  _createClass(Loader, [{\n\t    key: \"render\",\n\t    value: function render() {\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"loader-container\" },\n\t        React.createElement(\"div\", { className: \"loader\" })\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Loader;\n\t}(React.Component);\n\t\n\texports.default = Loader;\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\n\t * Modify behaviour of specified column cells in the Data Table component\n\t * @param {string} column - column name\n\t * @param {string} cell - cell content\n\t * @param {arrray} rowData - array of cell contents for a specific row\n\t * @param {arrray} rowHeaders - array of table headers (column names)\n\t * @return {*} a formated table cell for a given column\n\t */\n\tfunction formatColumn(column, cell, rowData, rowHeaders) {\n\t  // If a column if set as hidden, don't display it\n\t  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n\t  //  return null;\n\t  //}\n\t\n\t  // Create the mapping between rowHeaders and rowData in a row object.\n\t  var row = {};\n\t  rowHeaders.forEach(function (header, index) {\n\t    row[header] = rowData[index];\n\t  }, this);\n\t\n\t  // create array of classes to be added to td tag\n\t  var classes = [];\n\t\n\t  // convert array to string, with blank space separator\n\t  classes = classes.join(\" \");\n\t\n\t  //const hasWritePermission = loris.userHasPermission('media_read');\n\t  if (column === 'Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: specimenURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Parent Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Parent Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: specimenURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Container Barcode') {\n\t    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Container Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: containerURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  // if (column === 'Visit Label') {\n\t  //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n\t  //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n\t  //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n\t  //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n\t  //   }\n\t  // }\n\t\n\t  // if (column === 'Edit Metadata') {\n\t  //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n\t  //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n\t  // }\n\t\n\t  return React.createElement(\n\t    \"td\",\n\t    { className: classes },\n\t    cell\n\t  );\n\t}\n\t\n\texports.default = formatColumn;\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\n\t * Modify behaviour of specified column cells in the Data Table component\n\t * @param {string} column - column name\n\t * @param {string} cell - cell content\n\t * @param {arrray} rowData - array of cell contents for a specific row\n\t * @param {arrray} rowHeaders - array of table headers (column names)\n\t * @return {*} a formated table cell for a given column\n\t */\n\tfunction formatColumn(column, cell, rowData, rowHeaders) {\n\t  // If a column if set as hidden, don't display it\n\t  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n\t  //  return null;\n\t  //}\n\t\n\t  // Create the mapping between rowHeaders and rowData in a row object.\n\t  var row = {};\n\t  rowHeaders.forEach(function (header, index) {\n\t    row[header] = rowData[index];\n\t  }, this);\n\t\n\t  // create array of classes to be added to td tag\n\t  var classes = [];\n\t\n\t  // convert array to string, with blank space separator\n\t  classes = classes.join(\" \");\n\t\n\t  //const hasWritePermission = loris.userHasPermission('media_read');\n\t  if (column === 'Barcode') {\n\t    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: containerURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Parent Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Parent Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: containerURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  // if (column === 'Visit Label') {\n\t  //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n\t  //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n\t  //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n\t  //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n\t  //   }\n\t  // }\n\t\n\t  // if (column === 'Edit Metadata') {\n\t  //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n\t  //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n\t  // }\n\t\n\t  return React.createElement(\n\t    \"td\",\n\t    { className: classes },\n\t    cell\n\t  );\n\t}\n\t\n\texports.default = formatColumn;\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// modules/biobank/js/biobankIndex.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b6b4a650b31a4d88147b","import FilterForm from 'FilterForm';\nimport BiobankSpecimenForm from './specimenForm';\nimport PoolSpecimenForm from './poolSpecimenForm';\nimport BiobankContainerForm from './containerForm';\nimport {Tabs, TabPane} from 'Tabs';\nimport FormModal from 'FormModal';\nimport Loader from 'Loader';\nimport formatColumnSpecimen from './columnFormatterSpecimen';\nimport formatColumnContainer from './columnFormatterContainer';\n\nclass BiobankIndex extends React.Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      isLoaded: false,\n      specimenFilter: {},\n      containerFilter: {},\n      isOpen: false,\n      formOptions: {},\n    };\n\n    // Bind component instance to custom methods\n    this.loadPage = this.loadPage.bind(this);\n    this.fetchSpecimenData = this.fetchSpecimenData.bind(this);\n    this.fetchFormOptions = this.fetchFormOptions.bind(this);\n    this.fetchContainerData = this.fetchContainerData.bind(this);\n    this.updateSpecimenFilter = this.updateSpecimenFilter.bind(this);\n    this.updateContainerFilter = this.updateContainerFilter.bind(this);\n    this.resetFilters = this.resetFilters.bind(this);\n    this.mapFormOptions = this.mapFormOptions.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadPage();\n  }\n\n  loadPage() {\n    this.fetchSpecimenData();\n    this.fetchFormOptions();\n    this.fetchContainerData();\n  }\n\n  /**\n   * Retrieve data from the provided URL and save it in state\n   * Additionaly add hiddenHeaders to global loris variable\n   * for easy access by columnFormatter.\n   */\n  fetchSpecimenData() {\n    $.ajax(this.props.specimenDataURL, {\n      method: \"GET\",\n      dataType: 'json',\n      success: function(data) {\n        this.setState({\n          specimenData: data,\n          isLoaded: true\n        });\n      }.bind(this),\n      error: function(error) {\n        console.error(error);\n      }\n    });\n  }\n\n  fetchContainerData() {\n    $.ajax(this.props.containerDataURL, {\n      method: \"GET\",\n      dataType: 'json',\n      success: function(data) {\n        this.setState({\n          containerData: data,\n          isLoaded: true\n        });\n      }.bind(this),\n      error: function(error) {\n        console.error(error);\n      }\n    });\n  }\n\n  fetchFormOptions() {\n    $.ajax(this.props.formDataURL, {\n      method: \"GET\",\n      dataType: 'json',\n      success: function(data) {\n        this.setState({\n          formOptions: data,\n          isLoaded: true\n        });\n      }.bind(this),\n      error: function(error) {\n        console.error(error);\n      }\n    });\n  }\n\n  updateSpecimenFilter(specimenFilter) {\n    this.setState({specimenFilter});\n  }\n\n  // This works,\n  // but there must be a way to do this with just one updateFilter function\n  updateContainerFilter(containerFilter) {\n    this.setState({containerFilter});\n  }\n\n  resetFilters() {\n    this.refs.biobankFilter.clearFilter();\n  }\n\n //map options for forms\n  mapFormOptions(rawObject, targetAttribute) {\n    let data = {}; \n    for (let id in rawObject) {\n      data[id] = rawObject[id][targetAttribute];\n    }   \n\n    return data;\n  }\n\n  render() {\n    // Waiting for async data to load\n    if (!this.state.isLoaded) {\n      return (\n        <Loader/>\n      );\n    }\n\n    let addSpecimenButton;\n    let poolSpecimenButton;\n    let addContainerButton;\n    if (loris.userHasPermission('biobank_write')) {\n\n       /**\n        * Map Options for Form Select Elements of Specimen Form\n        */\n       let containerTypesPrimary = this.mapFormOptions(this.state.formOptions.containerTypesPrimary, 'label');\n       let containerStati = this.mapFormOptions(this.state.formOptions.containerStati, 'status');\n       let candidates = this.mapFormOptions(this.state.formOptions.candidates, 'pscid');\n       let sessions = this.mapFormOptions(this.state.formOptions.sessions, 'label');\n        \n       addSpecimenButton = (\n         <FormModal\n           title='Add New Specimen'\n           buttonClass='action-button add'\n           buttonContent='+'\n           style={{display:'inline-block'}}\n         >\n           <BiobankSpecimenForm\n             candidates={candidates}\n             sessions={sessions}\n             candidateSessions={this.state.formOptions.candidateSessions}\n             sessionCenters={this.state.formOptions.sessionCenters}\n             specimenTypes={this.state.formOptions.specimenTypes}\n             specimenTypeUnits={this.state.formOptions.specimenTypeUnits}\n             specimenTypeAttributes={this.state.formOptions.specimenTypeAttributes}\n             attributeOptions={this.state.formOptions.attributeOptions}\n             attributeDatatypes={this.state.formOptions.attributeDatatypes}\n             containerTypesPrimary={containerTypesPrimary}\n             containersNonPrimary={this.state.formOptions.containersNonPrimary}\n             containerDimensions={this.state.formOptions.containerDimensions}\n             containerCoordinates={this.state.formOptions.containerCoordinates}\n             containerStati={containerStati}\n             refreshParent={this.loadPage}\n             mapFormOptions={this.mapFormOptions}\n             saveBarcodeList={`${loris.BaseURL}/biobank/ajax/submitData.php?action=saveBarcodeList`}\n           />\n         </FormModal>\n       );\n\n       let poolSpecimenButtonContent = (\n         <span className='glyphicon glyphicon-resize-small'/>\n       )\n\n       poolSpecimenButton = (\n         <FormModal\n           title='Pool Specimens'\n           buttonClass='action-button pool'\n           buttonContent={poolSpecimenButtonContent}\n           style={{display:'inline-block'}}\n         >\n           <PoolSpecimenForm\n             specimenTypes={this.state.formOptions.specimenTypes}\n             containerTypesPrimary={containerTypesPrimary}\n             containersNonPrimary={this.state.formOptions.containersNonPrimary}\n             specimenTypeAttributes={this.state.formOptions.specimenTypeAttributes}\n             specimenProtocols={this.state.formOptions.specimenProtocols}\n             specimenProtocolAttributes={this.state.formOptions.specimenProtocolAttributes}\n             attributeDatatypes={this.state.formOptions.attributeDatatypes}\n             attributeOptions={this.state.formOptions.attributeOptions}\n             capacities={this.state.formOptions.capacities}\n             containerDimensions={this.state.formOptions.containerDimensions}\n             containerCoordinates={this.state.formOptions.containerCoordinates}\n             specimenTypeUnits={this.state.formOptions.specimenTypeUnits}\n             specimenUnits={this.state.formOptions.specimenUnits}\n             candidates={candidates}\n             candidateSessions={this.state.formOptions.candidateSessions}\n             sessionCenters={this.state.formOptions.sessionCenters}\n             specimenRequest={`${loris.BaseURL}/biobank/ajax/requestData.php?action=getSpecimenDataFromBarcode`}\n             refreshParent={this.loadPage}\n             mapFormOptions={this.mapFormOptions}\n             saveSpecimen={`${loris.BaseURL}/biobank/ajax/submitData.php?action=saveSpecimen`}\n             saveContainer={`${loris.BaseURL}/biobank/ajax/submitData.php?action=saveContainer`}\n           />\n         </FormModal>\n       );\n\n       let containerTypesNonPrimary = this.mapFormOptions(this.state.formOptions.containerTypesNonPrimary, 'label');\n\n       addContainerButton = (\n         <FormModal\n           title='Add New Container'\n           buttonClass='action-button add'\n           buttonContent='+'\n           style={{display:'inline-block'}}\n         >\n           <BiobankContainerForm\n             containerTypesNonPrimary={containerTypesNonPrimary}\n             centers={this.state.formOptions.centers}\n             containerStati={containerStati}\n             refreshParent={this.loadPage}\n             saveContainer={`${loris.BaseURL}/biobank/ajax/submitData.php?action=saveContainer`}\n           />\n         </FormModal>\n       ); \n    }\n\n    //Look at CCNA code from Zaliqa to modify this to be more streamline\n    var tabList = [\n      {id: \"specimens\", label: \"Specimens\"},\n      {id: \"containers\", label: \"Containers\"}\n    ];\n\n    return (\n    <div id='biobank-page'>\n      <Tabs tabs={tabList} defaultTab=\"specimens\" updateURL={true}>\n        <TabPane TabId={tabList[0].id}>\n          <div className='row'>\n            <div className='col-lg-10'>\n              <FilterForm\n                Module=\"biobank\"\n                name=\"specimen_filter\"\n                id=\"specimen_filter\"\n                ref=\"specimenFilter\"\n                columns={3}\n                formElements={this.state.specimenData.form}\n                onUpdate={this.updateSpecimenFilter}\n                filter={this.state.specimenFilter}\n              >\n                <br/>\n                <StaticElement/>\n                <StaticElement/>\n                <ButtonElement label=\"Clear Filters\" type=\"reset\" onUserInput={this.resetFilters}/>\n              </FilterForm>\n            </div>\n            <div className='col-lg-2'>\n              <span className='action'>\n                {addSpecimenButton}\n                <div className='action-title'>\n                  Add Specimen\n                </div>\n              </span>\n              <br/><br/>\n              <span className='action'>\n                {poolSpecimenButton}\n                <div className='action-title'>\n                  Pool Specimens\n                </div>\n              </span>\n            </div>\n          </div>\n          <StaticDataTable\n            Data={this.state.specimenData.Data}\n            Headers={this.state.specimenData.Headers}\n            Filter={this.state.specimenFilter}\n            getFormattedCell={formatColumnSpecimen}\n          />\n        </TabPane>\n        <TabPane TabId={tabList[1].id}>\n          <div className='row'>\n            <div className='col-lg-10'>\n              <FilterForm\n                Module=\"biobank\"\n                name=\"container_filter\"\n                id=\"container_filter\"\n                ref=\"containerFilter\"\n                columns={3}\n                formElements={this.state.containerData.form}\n                onUpdate={this.updateContainerFilter}\n                filter={this.state.containerFilter}\n\t\t          >\n                <br/>\n                <StaticElement/>\n                <StaticElement/>\n                <ButtonElement label=\"Clear Filters\" type=\"reset\" onUserInput={this.resetFilters}/>\n              </FilterForm>\t\t\t\n            </div>\n            <div className='col-lg-2'>\n              <span className='action'>\n                {addContainerButton}\n                <div className='action-title'>\n                  New Container\n                </div>\n              </span>\n            </div>\n          </div>\n          <StaticDataTable\n            Data={this.state.containerData.Data}\n            Headers={this.state.containerData.Headers}\n            Filter={this.state.containerFilter}\n            getFormattedCell={formatColumnContainer}\n          />\n        </TabPane>\n      </Tabs>\n      </div>\n    );\n  }\n}\n\n$(function() {\n  const biobankIndex = (\n    <div className=\"page-biobank\">\n      <BiobankIndex \n        specimenDataURL={`${loris.BaseURL}/biobank/?format=json`} \n        containerDataURL={`${loris.BaseURL}/biobank/ajax/requestData.php?action=getContainerFilterData`} \n        formDataURL={`${loris.BaseURL}/biobank/ajax/requestData.php?action=getFormOptions`}\n      />\n    </div>\n  );\n\n  ReactDOM.render(biobankIndex, document.getElementById(\"lorisworkspace\"));\n});\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/biobankIndex.js","/**\n * This file contains React component for FilterForm\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\nimport Panel from 'Panel';\n\n/**\n * FilterForm component.\n * A wrapper for form elements inside a selection filter.\n *\n * Adds necessary filter callbacks to all children and passes them to FormElement\n * for proper rendering.\n *\n * Keeps track of filter object and sends it to parent on every update.\n *\n * //HACK/NOTE: Loris has special behaviour for `candID` attribute in the query string,\n * making it impossible to use it for selection filters. This components renames\n * all `candID` fields to `candidateID` automatically before appending them to URL.\n *\n */\nclass FilterForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    // Bind component instance to custom methods\n    this.clearFilter = this.clearFilter.bind(this);\n    this.getFormChildren = this.getFormChildren.bind(this);\n    this.setFilter = this.setFilter.bind(this);\n    this.onElementUpdate = this.onElementUpdate.bind(this);\n\n    // Keeps track of querystring values\n    // Saved as class variable instead of keeping in state\n    this.queryString = QueryString.get();\n  }\n\n  componentDidMount() {\n    let filter = {};\n    let queryString = this.queryString;\n\n    // Initiaze filter using querystring value\n    Object.keys(queryString).forEach(function(key) {\n      let filterKey = (key === 'candidateID') ? 'candID' : key;\n      filter[filterKey] = {\n        value: queryString[key],\n        exactMatch: false\n      };\n    });\n\n    // Update parent component\n    this.props.onUpdate(filter);\n  }\n\n  /**\n   * Clear the filter object, querystring and input fields\n   */\n  clearFilter() {\n    this.queryString = QueryString.clear(this.props.Module);\n    this.props.onUpdate({});\n  }\n\n  /**\n   * Itterates through FilterForm children, sets necessary callback functions\n   * and initializes filterTable\n   *\n   * @return {Array} formChildren - array of children with necessary props\n   */\n  getFormChildren() {\n    let formChildren = [];\n    React.Children.forEach(this.props.children, function(child, key) {\n      // If child is a React component (i.e not a simple DOM element)\n      if (React.isValidElement(child) &&\n        typeof child.type === \"function\" &&\n        child.props.onUserInput\n      ) {\n        let callbackFunc = child.props.onUserInput;\n        let callbackName = callbackFunc.name;\n        let elementName = child.type.displayName;\n        let queryFieldName = (child.props.name === 'candID') ? 'candidateID' : child.props.name;\n        let filterValue = this.queryString[queryFieldName];\n        // If callback function was not set, set it to onElementUpdate() for form\n        // elements and to clearFilter() for <ButtonElement type='reset'/>.\n        if (callbackName === \"onUserInput\") {\n          if (elementName === \"ButtonElement\" && child.props.type === \"reset\") {\n            callbackFunc = this.clearFilter;\n          } else {\n            callbackFunc = this.onElementUpdate.bind(null, elementName);\n          }\n        }\n        // Pass onUserInput and value props to all children\n        formChildren.push(React.cloneElement(child, {\n          onUserInput: callbackFunc,\n          value: filterValue ? filterValue : '',\n          key: key\n        }));\n        // Initialize filter for StaticDataTable\n        this.setFilter(elementName, child.props.name, filterValue);\n      } else {\n        formChildren.push(React.cloneElement(child, {key: key}));\n      }\n    }.bind(this));\n\n    return formChildren;\n  }\n\n  /**\n   * Appends entry to filter object or deletes it if value is\n   * empty.\n   *\n   * Sets exactMatch to true for all SelectElements (i.e dropdowns)\n   * in order to force StaticDataTable to do exact comparaison\n   *\n   * @param {string} type - form element type (i.e component name)\n   * @param {string} key - the name of the form element\n   * @param {string} value - the value of the form element\n   *\n   * @return {{}} filter - filterData\n   */\n  setFilter(type, key, value) {\n    let filter = {};\n    if (this.props.filter) {\n      filter = JSON.parse(JSON.stringify(this.props.filter));\n    }\n    if (key) {\n      filter[key] = {};\n      if (value.length === 0) {\n        filter[key].value = '';\n      } else if (key && value) {\n        filter[key].value = value;\n      }\n      filter[key].exactMatch = (type === \"SelectElement\");\n    } else if (filter && key && value === '') {\n      delete filter[key];\n    }\n    return filter;\n  }\n\n  /**\n   * Sets filter object and querystring to reflect values of input fields\n   *\n   * @param {string} type - form element type (i.e component name)\n   * @param {string} fieldName - the name of the form element\n   * @param {string} fieldValue - the value of the form element\n   */\n  onElementUpdate(type, fieldName, fieldValue) {\n    // Make sure key is of string type and value is of string or object type\n    // before sending them to querystring\n    if (typeof fieldName !== 'string' ||\n        (typeof fieldValue !== 'string' && typeof fieldValue !== 'object')) {\n      return;\n    }\n\n    // Update query string\n    let queryFieldName = (fieldName === 'candID') ? 'candidateID' : fieldName;\n    this.queryString = QueryString.set(this.queryString, queryFieldName, fieldValue);\n\n    // Update filter and get new filter object\n    let filter = this.setFilter(type, fieldName, fieldValue);\n    this.props.onUpdate(filter);\n  }\n\n  render() {\n    // Get formatted children\n    let formChildren = this.getFormChildren();\n    let formElements = this.props.formElements;\n\n    if (formElements) {\n      Object.keys(formElements).forEach(function(fieldName) {\n        let queryFieldName = (fieldName === 'candID') ? 'candidateID' : fieldName;\n        formElements[fieldName].onUserInput = this.onElementUpdate.bind(null, fieldName);\n        formElements[fieldName].value = this.queryString[queryFieldName];\n      }.bind(this));\n    }\n\n    return (\n      <Panel\n        id={this.props.id}\n        height={this.props.height}\n        title={this.props.title}\n      >\n        <FormElement {...this.props}>\n          {formChildren}\n        </FormElement>\n      </Panel>\n    );\n  }\n}\n\nFilterForm.defaultProps = {\n  id: 'selection-filter',\n  height: '100%',\n  title: 'Selection Filter',\n  onUpdate: function() {\n    console.warn('onUpdate() callback is not set!');\n  }\n};\nFilterForm.propTypes = {\n  Module: React.PropTypes.string.isRequired,\n  filter: React.PropTypes.object.isRequired,\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  onUpdate: React.PropTypes.func\n};\n\nexport default FilterForm;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/FilterForm.js","/**\n * This file contains React component for Panel\n *\n * @author Alex I.\n * @version 1.0.0\n *\n */\n\n/**\n * Panel component\n * Wraps children in a collapsible bootstrap panel\n */\nclass Panel extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsed: this.props.initCollapsed\n    };\n\n    // Initialize panel class based on collapsed status\n    this.panelClass = (\n      this.props.initCollapsed ?\n        \"panel-collapse collapse\" :\n        \"panel-collapse collapse in\"\n    );\n\n    this.toggleCollapsed = this.toggleCollapsed.bind(this);\n  }\n\n  toggleCollapsed() {\n    this.setState({collapsed: !this.state.collapsed});\n  }\n\n  render() {\n    // Change arrow direction based on collapse status\n    let glyphClass = (\n      this.state.collapsed ?\n        \"glyphicon pull-right glyphicon-chevron-down\" :\n        \"glyphicon pull-right glyphicon-chevron-up\"\n    );\n\n    let pencilGlyph;\n    if (this.props.edit) {\n      pencilGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-pencil\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.edit}\n        /> \n      );\n    } \n\n    let plusGlyph;\n    if (this.props.add) {\n      plusGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-plus\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.add}\n        />\n      );\n    }\n\n    let removeGlyph;\n    if (this.props.cancel) {\n      removeGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-remove\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.cancel}\n        />\n      );\n    }\n\n    // Add panel header, if title is set\n    const panelHeading = this.props.title ? (\n      <div\n        className=\"panel-heading\"\n      >\n        <span \n          className={glyphClass}\n          onClick={this.toggleCollapsed}\n          data-toggle=\"collapse\"\n          data-target={'#' + this.props.id}\n          style={{cursor: 'pointer'}}\n        />\n        {pencilGlyph}\n        {plusGlyph}\n        {removeGlyph}\n        {this.props.title}\n      </div>\n    ) : '';\n\n    return (\n      <div className=\"panel panel-primary\">\n        {panelHeading}\n        <div id={this.props.id} className={this.panelClass} role=\"tabpanel\">\n          <div className=\"panel-body\" style={{height: this.props.height}}>\n            {this.props.children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPanel.propTypes = {\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  edit: React.PropTypes.func,\n  add: React.PropTypes.func\n};\nPanel.defaultProps = {\n  initCollapsed: false,\n  id: 'default-panel',\n  height: '100%'\n};\n\nexport default Panel;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Panel.js","import SpecimenBarcodeForm from './barcodeForm.js';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankSpecimenForm extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      formErrors: {},\n      errorMessage: null,\n      candidateId: null,\n      sessionId: null,\n      centerId: null,\n      barcodeList: {1: {specimen: {collection: {}}, container: {}}},\n      count: 1,\n      collapsed: {1: true},\n      copyMultiplier: 1,\n    };\n\n    this.toggleCollapse = this.toggleCollapse.bind(this);\n    this.setSpecimen = this.setSpecimen.bind(this);\n    this.setContainer = this.setContainer.bind(this);\n    this.addBarcode = this.addBarcode.bind(this);\n    this.setCopyMultiplier = this.setCopyMultiplier.bind(this);\n    this.copyBarcode = this.copyBarcode.bind(this);\n    this.removeBarcode = this.removeBarcode.bind(this);\n    this.saveBarcodeList = this.saveBarcodeList.bind(this);\n    this.save = this.save.bind(this);\n  }\n\n  toggleCollapse(key) {\n    let collapsed = this.state.collapsed;\n    collapsed[key] = !collapsed[key];\n    this.setState({collapsed});\n  }\n\n  saveBarcodeList() {\n    let barcodeList = JSON.parse(JSON.stringify(this.state.barcodeList));\n    let availableId = Object.keys(this.props.containerStati).find(\n      key => this.props.containerStati[key] === 'Available'\n    );\n\n    for (let barcode in barcodeList) {\n      //set container values\n      let container = barcodeList[barcode].container;\n      container.statusId = availableId;\n      container.temperature = 20;\n      container.locationId = this.state.centerId;\n      container.originId = this.state.centerId;\n\n      //set specimen values\n      let specimen = barcodeList[barcode].specimen;\n      specimen.candidateId = this.state.candidateId;\n      specimen.sessionId = this.state.sessionId;\n      specimen.quantity = specimen.collection.quantity;\n      specimen.unitId = specimen.collection.unitId;\n      specimen.collection.locationId = this.state.centerId;\n      if (this.props.specimenTypes[specimen.typeId].freezeThaw === 1) {\n        specimen.fTCycle = 0;\n      }\n\n      //if this is an aliquot form, reset some of the values.\n      //TODO: these will eventually be higher level states.\n      if (this.props.data) {\n        specimen.candidateId = this.props.data.candidate.CandID;\n        specimen.sessionId = this.props.data.session.ID;\n        specimen.parentSpecimenId = this.props.data.specimen.id;\n        specimen.collection.locationId = this.props.data.container.locationId;\n        container.locationId = this.props.data.container.locationId;\n        container.originId = this.props.data.container.locationId;\n      }\n    \n      barcodeList[barcode].container = container;\n      barcodeList[barcode].specimen = specimen;\n    }\n    console.log(barcodeList);\n\n    this.save(barcodeList, this.props.saveBarcodeList).then(\n      () => {this.props.refreshParent(); this.props.onSuccess();}\n    );\n  }\n\n  save(data, url) {\n    return new Promise(resolve => {\n      $.ajax({\n        type: 'POST',\n        url: url,\n        data: {data: JSON.stringify(data)},\n        cache: false,\n        success: () => {\n          resolve();\n          swal(\"Save Successful!\", \"\", \"success\");\n        },\n        error: (err, textStatus, errorThrown) => {\n          let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n          this.setState({\n            errorMessage: msg,\n          });\n          swal(msg, \"\", \"error\");\n        }\n      });\n    });\n  }\n\n  setSpecimen(name, value, key) {\n    this.props.onChange instanceof Function && this.props.onChange();\n    let centerId = this.state.centerId;\n    let candidateId = this.state.candidateId;\n    let sessionId = this.state.sessionId;\n    let barcodeList = this.state.barcodeList;\n\n    if (name === 'candidateId') {\n      candidateId = value;\n    } else if (name === 'sessionId') {\n      sessionId = value;\n      centerId = this.props.sessionCenters[sessionId].centerId;\n    } else {\n      //this is eliminate values if specimen type is changed\n      if (name === 'typeId') {\n        barcodeList[key].specimen = {collection:{}};\n      }\n      barcodeList[key].specimen[name] = value;\n    }\n\n    this.setState({barcodeList, centerId, candidateId, sessionId})\n  }\n\n  setContainer(name, value, key) {\n    this.props.onChange instanceof Function && this.props.onChange();\n    let barcodeList = this.state.barcodeList;\n    barcodeList[key].container[name] = value;\n    this.setState({barcodeList});\n  }\n\n  addBarcode() {\n    let barcodeList = this.state.barcodeList;\n    let count = this.state.count;\n    let collapsed = this.state.collapsed;\n\n    barcodeList[count+1] = {specimen: {}, container: {collection:{}}}; \n    collapsed[count+1] = true;\n    count = count+1\n\n    this.setState({barcodeList, collapsed, count});\n  }\n\n  setCopyMultiplier(e) {\n    let copyMultiplier = e.target.value;\n    this.setState({copyMultiplier});\n  }\n\n  copyBarcode(key) {\n    let count = this.state.count;\n    let collapsed = this.state.collapsed;\n    let nextKey = count+1;\n    let barcodeList = this.state.barcodeList;\n    let multiplier = this.state.copyMultiplier\n\n    for (let i=1; i<=multiplier; i++) {\n      barcodeList[nextKey] = JSON.parse(JSON.stringify(barcodeList[key])); \n      delete barcodeList[nextKey].container.barcode;\n      collapsed[nextKey] = true;\n      nextKey++;\n    }\n\n    this.setState({\n      barcodeList: barcodeList,\n      count: nextKey,\n      collapsed: collapsed,\n    });\n  }\n\n  removeBarcode(key) {\n    let barcodeList = this.state.barcodeList;\n    delete barcodeList[key];\n    this.setState({barcodeList: barcodeList});\n  }\n\n  render() {\n    //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n    let barcodeListArray = Object.keys(this.state.barcodeList);\n    let barcodes = [];\n    let i = 1;\n    for (let key of barcodeListArray) {\n      barcodes.push(\n        <SpecimenBarcodeForm\n          data={this.props.data || null}\n          key={key}\n          barcodeKey={key}\n          id={i} \n          collapsed={this.state.collapsed[key]}\n          toggleCollapse={this.toggleCollapse}\n          mapFormOptions={this.props.mapFormOptions}\n          container={this.state.barcodeList[key].container || null}\n          specimen={this.state.barcodeList[key].specimen || null}\n          removeBarcode={barcodeListArray.length !== 1 ?\n            () => this.removeBarcode(key) : null}\n          addBarcode={i == barcodeListArray.length ? this.addBarcode : null}\n          setCopyMultiplier={this.setCopyMultiplier}\n          copyMultiplier={this.state.copyMultiplier}\n          copyBarcode={i == barcodeListArray.length && this.state.barcodeList[key] ? \n            this.copyBarcode : null}\n          setContainer={this.setContainer}\n          setSpecimen={this.setSpecimen}\n          onChange={this.props.onChange}\n          specimenTypes={this.props.specimenTypes}\n          containerTypesPrimary={this.props.containerTypesPrimary}\n          containersNonPrimary={this.props.containersNonPrimary}\n          specimenTypeAttributes={this.props.specimenTypeAttributes}\n          attributeDatatypes={this.props.attributeDatatypes}\n          attributeOptions={this.props.attributeOptions}\n          capacities={this.props.capacities}\n          containerDimensions={this.props.containerDimensions}\n          containerCoordinates={this.props.containerCoordinates}\n          specimenTypeUnits={this.props.specimenTypeUnits}\n          units={this.props.units}\n        />\n      )\n      \n      i++;\n    }\n\n    let globalFields;\n    let remainingQuantityFields;\n    if (this.props.data) {\n      globalFields = (\n        <div>\n          <StaticElement\n            label=\"Parent Specimen\"\n            text={this.props.data.container.barcode}\n          />\n          <StaticElement\n            label=\"PSCID\"\n            text={this.props.data.candidate.PSCID}\n          />\n          <StaticElement\n            label=\"Visit Label\"\n            text={this.props.data.session.Visit_label}\n          />\n        </div>\n      );\n\n      remainingQuantityFields = (\n        <div>\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Remaining Quantity\"\n            onUserInput={this.props.setSpecimenData}\n            required={true}\n            value={this.props.specimen.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={this.props.specimenUnits}\n            onUserInput={this.props.setSpecimenData}\n            emptyOption={false}\n            required={true}\n            value={this.props.specimen.unitId}\n          />\n        </div>\n      );\n    } else {\n     let sessions = {};\n     if (this.state.candidateId) {\n       sessions = this.props.mapFormOptions(this.props.candidateSessions[this.state.candidateId], 'label'); \n     }\n      //TODO: not sure why, but I'm now having trouble with the SearchableDropdown\n      globalFields = (\n        <div>\n          <SelectElement\n            name=\"candidateId\"\n            label=\"PSCID\"\n            options={this.props.candidates}\n            onUserInput={this.setSpecimen}\n            required={true}\n            value={this.state.candidateId}\n            placeHolder='Search for a PSCID'\n          />\n          <SelectElement\n            name='sessionId'\n            label='Visit Label'\n            options={sessions}\n            onUserInput={this.setSpecimen}\n            required={true}\n            value={this.state.sessionId}\n            disabled={this.state.candidateId ? false : true}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"specimenForm\"\n        id='specimenForm'\n        onSubmit={() => {\n          this.saveBarcodeList();\n          this.props.saveSpecimen instanceof Function && this.props.saveSpecimen()}}\n        ref=\"form\"\n      >\n        <div className='row'>\n          <div className=\"col-xs-9 col-xs-offset-1\">\n            {globalFields}\n            {remainingQuantityFields}\n          </div>\n        </div>\n        {barcodes}\n        <ButtonElement\n          label='Submit'\n          columnSize='col-sm-2 col-sm-offset-10'\n        />\n      </FormElement>\n    );\n  }\n}\n\nBiobankSpecimenForm.propTypes = {\n};\n\nexport default BiobankSpecimenForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenForm.js","import SpecimenCollectionForm from './collectionForm'\nimport ContainerParentForm from './containerParentForm'\n\n/**\n * Biobank Barcode Form\n *\n * Acts a subform for BiobankSpecimenForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenBarcodeForm extends React.Component {\n  constructor() {\n    super();\n    this.setContainer = this.setContainer.bind(this);\n    this.setSpecimen = this.setSpecimen.bind(this);\n    this.copy = this.copy.bind(this);\n  }\n\n  setContainer(name, value) {\n    this.props.setContainer(name, value, this.props.barcodeKey);\n  }\n\n  setSpecimen(name, value) {\n    this.props.setSpecimen(name, value, this.props.barcodeKey);\n  }\n\n  copy() {\n    this.props.copyBarcode(this.props.copyMultiplier);\n  }\n\n  render() {\n    let addBarcodeButton;\n    let addBarcodeText;\n    let copyBarcodeButton;\n    let copyBarcodeText;\n    if (this.props.addBarcode) {\n      addBarcodeButton = (\n        <span className='action'>\n          <div\n            className='action-button add'\n            onClick={this.props.addBarcode}\n          >\n          +\n          </div>\n        </span>\n      );\n\n      addBarcodeText = (\n        <span className='action-title'>\n          New Entry\n        </span>\n      );\n    }\n\t\n    if (this.props.copyBarcode) {\n      copyBarcodeButton = (\n        <span className='action'>\n          <div\n            className='action-button add'\n            onClick={this.copy}\n          >\n            <span className='glyphicon glyphicon-duplicate'/>\n          </div>\n        </span>\n      );\n      copyBarcodeText = (\n        <span className='action-title'>\n          <input \n            className='form-control input-sm'\n            type='number'\n            min='1'\n            max='50'\n            style={{width: 50, display: 'inline'}}\n            onChange={this.props.setCopyMultiplier}\n            value={this.props.copyMultiplier}\n          />\n          Copies\n        </span>\n      );\n    }\n\n    let removeBarcodeButton;\n    if (this.props.removeBarcode) {\n      const glyphStyle = {\n        color: '#DDDDDD',\n        marginLeft: 10,\n        cursor: 'pointer',\n        fontSize: 15\n      }\n\n      removeBarcodeButton = (\n        <span \n          className='glyphicon glyphicon-remove' \n          onClick={this.props.removeBarcode}\n          style={glyphStyle}\n        />\n      );\n    }\n\n    let specimenTypes = {};\n    if (this.props.data) {\n      for (let id in this.props.specimenTypes) {\n        if (\n             (this.props.specimenTypes[id].parentTypeId ==\n             this.props.data.specimen.typeId) ||\n             (id == this.props.data.specimen.typeId)\n        ) {\n          specimenTypes[id] = this.props.specimenTypes[id]['type'];\n        }\n      }\n    } else {\n      specimenTypes = this.props.mapFormOptions(this.props.specimenTypes, 'type');\n    }\n\n    return (\n      <FormElement\n        name='biobankBarcode'\n      >\n        <div className='row'>\n          <div className='col-xs-9 col-xs-offset-1'>\n            <div>   \n              <TextboxElement\n                name='barcode'\n                label={'Barcode ' + this.props.id}\n                onUserInput={this.setContainer}\n                required={true}\n                value={this.props.container.barcode}\n              />\n            </div>\n          </div>\n          <div className='col-xs-1' style={{paddingLeft:0, marginTop:10}}>\n            <span \n              className= {this.props.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up'}\n              style={{cursor: 'pointer', fontSize:15, position:'relative', right:40}}\n              data-toggle='collapse' \n              data-target={'#item-' + this.props.barcodeKey}\n              onClick={() => this.props.toggleCollapse(this.props.barcodeKey)}\n            />\n            {removeBarcodeButton}\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xs-2'/>\n          <div className='col-xs-8'>\n            <div id={'item-' + this.props.barcodeKey} className='collapse'>\n              <SelectElement\n                name=\"typeId\"\n                label=\"Specimen Type\"\n                options={specimenTypes}\n                onUserInput={this.setSpecimen}\n                required={true}\n                value={this.props.specimen.typeId}\n              />\n              <SelectElement\n                name=\"typeId\"\n                label=\"Container Type\"                                              \n                options={this.props.containerTypesPrimary}                          \n                onUserInput={this.setContainer}\n                ref=\"containerType\"                                                 \n                required={true}                                                     \n                value={this.props.container.typeId}                           \n              />            \n              <SpecimenCollectionForm\n                specimen={this.props.specimen}\n                setSpecimenData={this.setSpecimen}\n                specimenTypeUnits={this.props.specimenTypeUnits}\n                specimenTypeAttributes={this.props.specimenTypeAttributes}\n                attributeDatatypes={this.props.attributeDatatypes}\n                attributeOptions={this.props.attributeOptions}\n              />\n              <ContainerParentForm                                                    \n                setContainerData={this.setContainer}\n                mapFormOptions={this.props.mapFormOptions}\n                container={this.props.container}\n                containersNonPrimary={this.props.containersNonPrimary}\n                containerDimensions={this.props.containerDimensions}\n                containerCoordinates={this.props.containerCoordinates}\n              />\n            </div>\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xs-11'>\n            <div className='col-xs-4'/>\n            <div className='col-xs-3 action'>\n              {addBarcodeButton}\n              {addBarcodeText}\n            </div>\n            <div className='col-xs-3 action'>\n              {copyBarcodeButton}\n              {copyBarcodeText}\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n}\n\nSpecimenBarcodeForm.propTypes = {\n}\n\nexport default SpecimenBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/barcodeForm.js","/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenCollectionForm extends React.Component {\n  constructor() {\n    super();\n    \n    this.getSpecimenTypeFields = this.getSpecimenTypeFields.bind(this);\n    this.setCollectionData = this.setCollectionData.bind(this);\n    this.addData = this.addData.bind(this);\n    this.setData = this.setData.bind(this);\n  }\n\n  setCollectionData(name, value) {\n    let collection = this.props.specimen.collection;\n    collection[name] = value;\n    this.props.setSpecimenData('collection', collection);\n  }\n\n  //TODO: this function may not be necessary\n  addData() {\n    let collection = this.props.specimen.collection;\n    collection.data = {};\n    this.props.setSpecimenData('collection', collection)\n  }\n\n  setData(name, value) {\n    let data = this.props.specimen.collection.data;\n    data[name] = value;\n    this.setCollectionData('data', data);\n  }\n\n  // This generates all the form fields for a given specimen type\n  getSpecimenTypeFields(fieldsObject) {\n    let specimenTypeFields = Object.keys(fieldsObject).map((attribute) => {\n      let datatype = this.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"text\" || datatype === \"number\") {\n\n        if (fieldsObject[attribute]['refTableId'] == null) {\n          return (\n            <TextboxElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              onUserInput={this.setData}\n              required={fieldsObject[attribute]['required']}\n              value={this.props.specimen.collection.data[attribute]}\n            />\n          );\n        }\n\n        if (fieldsObject[attribute]['refTableId'] !== null) {\n          return (\n            <SelectElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              options={this.props.attributeOptions[fieldsObject[attribute]['refTableId']]}\n              onUserInput={this.setData}\n              required={fieldsObject[attribute]['required']}\n              value={this.props.specimen.collection.data[attribute]}\n            />\n          );\n        }\n      }\n\n      if (datatype === \"datetime\") {\n        return (\n          <DateElement\n            name={attribute}\n            label={fieldsObject[attribute]['name']}\n            onUserInput={this.setData}\n            ref={attribute}\n            required={fieldsObject[attribute]['required']}\n            value={this.props.specimen.collection.data[attribute]}\n          />\n        );\n      }\n\n      if (datatype === \"boolean\") {\n        // There is currently no CheckboxElement or RadioElement in loris/jsx/Form.js and therefore\n        // this is not possible.     \n      }\n    })\n\n    return specimenTypeFields;\n  }\n\n  render() {\n    let updateButton;\n    if (((this.props.data||{}).specimen||{}).collection) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    }\n\n    let specimenTypeUnits = {};\n    let specimenTypeFields;\n    if (this.props.specimen.typeId) {\n      \n      //This modifies the selections for unit drop down based on the chosen\n      //specimen type \n      for (let id in this.props.specimenTypeUnits[this.props.specimen.typeId]) {\n        specimenTypeUnits[id] = this.props.specimenTypeUnits[this.props.specimen.typeId][id].unit;\n      }\n\n      let specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.props.specimen.typeId];\n      if (specimenTypeFieldsObject) {\n        if (((this.props.specimen||{}).collection||{}).data) {\n          specimenTypeFields = this.getSpecimenTypeFields(specimenTypeFieldsObject);\n        } else {\n          this.addData();\n        }\n      }\n    }\n\n    let specimenFields;\n    if (this.props.specimen.typeId) {\n      specimenFields = (\n        <div>\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Quantity\"\n            onUserInput={this.setCollectionData}\n            required={true}\n            value={this.props.specimen.collection.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={specimenTypeUnits}\n            onUserInput={this.setCollectionData}\n            required={true}\n            value={this.props.specimen.collection.unitId}\n          />\n          {specimenTypeFields}\n          <DateElement\n            name=\"date\"\n            label=\"Date\"\n            minYear=\"2000\"\n            maxYear=\"2018\"\n            onUserInput={this.setCollectionData}\n            required={true}\n            value={this.props.specimen.collection.date}\n          />\n          <TimeElement\n            name=\"time\"\n            label=\"Time\"\n            onUserInput={this.setCollectionData}\n            required={true}\n            value={this.props.specimen.collection.time}\n          />\n          <TextareaElement\n            name=\"comments\"\n            label=\"Comments\"\n            onUserInput={this.setCollectionData}\n            ref=\"comments\"\n            value={this.props.specimen.collection.comments}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"biobankSpecimen\"\n        onSubmit={this.props.saveSpecimen}\n        ref=\"form\"\n      >\n        {specimenFields}\n        {updateButton}\n      </FormElement>\n    );\n  }\n}\n\n\nSpecimenCollectionForm.propTypes = {\n  setSpecimenData: React.PropTypes.func.isRequired,\n  saveSpecimen: React.PropTypes.func,\n  specimen: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  attributeOptions: React.PropTypes.object.isRequired,\n  specimenTypeUnits: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n}\n\nexport default SpecimenCollectionForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/collectionForm.js","/**\n * Biobank Container Parent Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\n\nimport ContainerDisplay from './containerDisplay.js';\n\nclass ContainerParentForm extends React.Component {\n\n  render() {\n    let containerDisplay;\n    let containerBarcodesNonPrimary = this.props.mapFormOptions(\n      this.props.containersNonPrimary, 'barcode'\n    );\n    let parentContainerField = ( \n      <SelectElement\n        name=\"parentContainerId\"\n        label=\"Parent Container Barcode\"\n        options={containerBarcodesNonPrimary}\n        onUserInput={this.props.setContainerData}\n        required={true}\n        value={this.props.container.parentContainerId}\n      />  \n    );  \n\n    if (this.props.container.parentContainerId) {\n      let dimensionId = this.props.containersNonPrimary[\n        this.props.container.parentContainerId\n      ].dimensionId;\n\n      if (dimensionId) {\n        // This will eventually become unecessary\n        let dimensions = this.props.containerDimensions[dimensionId];\n\n        // Total coordinates is determined by the product of the dimensions\n        let coordinatesTotal = 1;\n        for (let dimension in dimensions) {\n          coordinatesTotal = coordinatesTotal * dimensions[dimension];\n        }\n\n        // Mapping of options for the SelectElement\n        let coordinates = {}; \n        for (let i = 1; i <= coordinatesTotal; i++) {\n          // If the coordinate is already taken, skip it.\n          // this doubling of if statements seems unnecessary\n          if (this.props.containerCoordinates[this.props.container.parentContainerId]) {\n            if (this.props.containerCoordinates[this.props.container.parentContainerId][i]) {\n              continue; \n            }\n          }\n\n          coordinates[i] = i;\n        }   \n\n        containerDisplay = (\n          <ContainerDisplay\n            dimensions = {\n              this.props.containerDimensions[\n                this.props.containersNonPrimary[\n                  this.props.container.parentContainerId\n                ].dimensionId\n              ]\n            }\n            coordinates = {\n              this.props.containerCoordinates[this.props.container.parentContainerId]\n            }\n            containerTypes = {this.props.containerTypes}\n            containerStati = {this.props.containerStati} \n            select = {true}\n            selectedCoordinate = {this.props.container.coordinate}\n            setContainerData = {this.props.setContainerData}\n          />\n        );\n      }\n    }   \n\n    let updateButton;\n    if ((this.props.data||{}).container) {\n      updateButton = (\n        <div>\n          <br/>\n          <ButtonElement label='Update'/>\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        onSubmit={this.props.saveContainer}\n      >\n        {parentContainerField}\n        {containerDisplay}\n        {updateButton}\n      </FormElement>\n    );\n  }\n}\n\nContainerParentForm.propTypes = {\n  mapFormOptions: React.PropTypes.func.isRequired,\n  setContainerData: React.PropTypes.func.isRequired,\n  saveContainer: React.PropTypes.func,\n  data: React.PropTypes.object,\n  container: React.PropTypes.object.isRequired,\n  containersNonPrimary: React.PropTypes.object.isRequired,\n  containerDimensions: React.PropTypes.object.isRequired,\n  containerCoordinates: React.PropTypes.object.isRequired,\n  containerTypes: React.PropTypes.object,\n  containerStati: React.PropTypes.object,\n};\n\nexport default ContainerParentForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerParentForm.js","/**\n * ContainerDisplay\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass ContainerDisplay extends React.Component {\n  constructor() {\n    super();\n   \n    this.redirectURL = this.redirectURL.bind(this);\n    this.drag = this.drag.bind(this);\n    this.drop = this.drop.bind(this);\n  }\n\n  componentDidMount() {\n    $('[data-toggle=\"tooltip\"]').tooltip();\n  }\n\n  componenDidUpdate() {\n    $('[data-toggle=\"tooltip\"]').tooltip();\n  }\n\n  redirectURL(e) {\n    let coordinate = e.target.id;\n    if (this.props.coordinates[coordinate]) {\n      let type = this.props.types[\n        this.props.children[this.props.coordinates[coordinate]].typeId\n      ].primary ? 'specimen' : 'container';\n      let url = loris.BaseURL+'/biobank/'+type+'/?barcode='+\n        this.props.children[this.props.coordinates[coordinate]].barcode;\n\n      window.location.href = url;\n    }\n  }\n\n  allowDrop(e) {\n      e.preventDefault();\n  }\n  \n  drag(e) {\n      let container = JSON.stringify(\n        this.props.children[this.props.coordinates[e.target.id]]\n      );\n      e.dataTransfer.setData(\"text/plain\", container);\n  }\n  \n  drop(e) {\n    e.preventDefault();\n\n    let container = JSON.parse(e.dataTransfer.getData(\"text/plain\"));\n    let newCoordinate = parseInt(e.target.id);\n   \n    container.coordinate = newCoordinate;\n\n    this.props.saveChildContainer(container);\n  }\n\n  render() {\n  // This is eventually need to be reworked and cleaned up\n  let column = [];\n  let row = [];\n  let display;\n  var coordinate = 1;\n  if (this.props.dimensions) {\n    for (let y=0; y < this.props.dimensions.y; y++) {\n      column = [];\n      for (let x=1; x <= this.props.dimensions.x; x++) {\n        \n        let nodeWidth = (500/this.props.dimensions.x) - (500/this.props.dimensions.x * 0.08);\n        let nodeStyle = {width: nodeWidth}\n        let nodeClass = 'node';\n        let tooltipTitle = null;\n        let dataHtml = 'false';\n        let dataToggle = null;\n        let dataPlacement = null;\n        let draggable = 'false';\n        let onDragStart = null;\n        let onDragOver = this.allowDrop;\n        let onDrop = this.drop;\n        let onClick = null;\n\n        if (!this.props.select) {\n          // This double if statement doesn't sound great\n          if (this.props.coordinates) {\n            if (this.props.coordinates[coordinate]) {\n              nodeClass = 'node occupied';\n              dataHtml = 'true';\n              dataToggle = 'tooltip';\n              dataPlacement = 'top';\n              tooltipTitle = \n            '<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + \n            '<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + \n            '<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n              draggable = 'true';\n              onDragStart = this.drag;\n              onDragOver = null;\n              onDrop = null;\n              onClick = this.redirectURL;\n            }\n          }\n        }\n      \n        if (this.props.select) {\n          if (coordinate == this.props.selectedCoordinate) {\n            nodeClass = 'node occupied';\n          }\n          else if (!this.props.coordinates) {\n            nodeClass = 'node available';\n            onClick = (e) => this.props.setContainerData('coordinate', e.target.id);\n          } \n          else if (this.props.coordinates) {\n            if (!this.props.coordinates[coordinate]) {\n              nodeClass = 'node available';\n\t\t\t  onClick = (e) => this.props.setContainerData('coordinate', e.target.id);\n            }\n            else if (this.props.coordinates[coordinate]){\n            // TODO: --- This is currently not working ---\n            //  dataHtml = 'true';\n            //  dataToggle = 'tooltip';\n            //  dataPlacement = 'top';\n            //  tooltipTitle = \n            //'<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + \n            //'<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + \n            //'<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n            }\n          }\n        }\n\n        let coordinateDisplay;\n        if (true) {\n          coordinateDisplay = x + (this.props.dimensions.x * y);\n        } else if (false) {\n          coordinateDisplay = String.fromCharCode(65+y)+''+x;\n        }\n\n        column.push(\n          <div\n            id={coordinate}\n            className={nodeClass}\n            data-html={dataHtml}\n            data-toggle={dataToggle}\n            data-placement={dataPlacement}\n            data-original-title={tooltipTitle}\n            style={nodeStyle}\n            onClick={onClick}\n            draggable={draggable}\n            onDragStart={onDragStart}\n            onDragOver={onDragOver}\n            onDrop={onDrop}\n          >\n            {coordinateDisplay}\n          </div>\n        );\n\n        coordinate++;\n      }\n\n      let rowHeight = (500/this.props.dimensions.y) - (500/this.props.dimensions.y * 0.08);\n      let rowMargin = (500/this.props.dimensions.y * 0.04);\n      let rowStyle = {\n        height: rowHeight,\n      }\n      \n      row.push(\n        <div\n          className='row'\n          style={rowStyle} \n        >\n          {column}\n        </div>\n      )\n    }\n    \n    display = row;\n  }\n \n    return (\n      <div className='display'>\n        {display}\n      </div>\n    );\n  }\n}\n\nContainerDisplay.propTypes = {\n}\n\nexport default ContainerDisplay;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerDisplay.js","import SpecimenBarcodeForm from './barcodeForm';\nimport BiobankSpecimenForm from './specimenForm';\nimport SpecimenPreparationForm from './preparationForm';\n\n/**\n * Biobank Pool Specimen Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\nclass PoolSpecimenForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      barcodeList: {},\n      errorMessage: null,\n      formErrors: {},\n      barcodeCount: 2,\n      preparation: false,\n      step: 1\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.setPreparationFormData = this.setPreparationFormData.bind(this);\n    this.setSpecimenFormData = this.setSpecimenFormData.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n    this.setBarcodeCount = this.setBarcodeCount.bind(this);\n    this.next = this.next.bind(this);\n    this.previous = this.previous.bind(this);\n    this.addPreparation = this.addPreparation.bind(this);\n    this.removePreparation = this.removePreparation.bind(this);\n    this.validate = this.validate.bind(this);\n    this.formSwitch = this.formSwitch.bind(this);\n    this.preparationSwitch = this.preparationSwitch.bind(this);\n    this.runAjax = this.runAjax.bind(this);\n  }\n\n  next() {\n    this.validate().then(\n      data => {\n        this.setState({\n          poolData: data,\n          step: this.state.step+1\n        });\n      }, \n      error => {\n        swal(\"Oops!\", error.responseText, \"error\");\n      }\n    );\n  }\n\n  previous() {\n    this.setState({\n      step: this.state.step-1\n    });\n  }\n\n  validate() {\n    return this.runAjax(this.props.specimenRequest, {barcodeList: this.state.barcodeList});\n  }\n\n  runAjax(url, inputData) {\n    return new Promise((resolve, reject) => {\n      $.ajax(url, {\n        method: \"GET\",\n        dataType: 'json',\n        data: inputData,\n        success: function(data) {\n          resolve(data);\n        }.bind(this),\n        error: function(error, textStatus, errorThrown) {\n          reject(error);\n          console.error(error);\n        }\n      });  \n    })\n  }\n\n  setBarcodeCount(field, value) {\n    let barcodeCount = value;\n    let barcodeList = this.state.barcodeList;\n    for (let barcode in barcodeList) {\n      if (barcode > barcodeCount) {\n        delete barcodeList[barcode];\n      }\n    }\n\n    this.setState({barcodeCount, barcodeList});\n  }\n\n  formSwitch(inputForm, specimenForm) {\n    switch(this.state.step) {\n      case 1:\n        return inputForm;\n      case 2:\n        return specimenForm;\n    }\n  }\n\n  preparationSwitch(preparationButton, preparationForm) {\n    switch(this.state.preparation) {\n      case false:\n        return preparationButton;\n      case true:\n        return preparationForm;\n    }\n  }\n\n  addPreparation() {\n    this.validate().then(\n      data => {\n        this.setState({\n          poolData: data,\n          preparation: true\n        });\n      },\n      error => {\n        swal('Oh no!', error.responseText, 'error');\n      }\n    );\n  }\n\n  removePreparation() {\n    let formData = this.state.formData;\n    //TODO: is it better to set it to empty, or delete it?\n    formData.preparationForm = {};\n    this.setState({\n      preparation: false,\n      formData\n    });\n  }\n\n  render() {\n    //Generates barcodes\n    let barcodes = [];\n    for (let i=1; i<=this.state.barcodeCount; i++) {\n      barcodes.push(\n        <TextboxElement\n          name={i}\n          label={'Barcode ' + i}\n          onUserInput={this.setFormData}\n          required={true}\n          value={this.state.barcodeList[i]}\n          errorMessage={this.state.formErrors[i]}\n        />\n      )\n    }\n    \n    let preparationButton = ( \n      <div className='row'>\n        <div className='col-xs-4'/>\n        <div className='col-xs 4 action'>\n            <span className='action'>\n            <div \n              className='action-button add'\n              onClick={this.addPreparation}\n            >\n              +\n            </div>\n            </span>\n            <div className='action-title'>\n              Add Preparation\n            </div>\n        </div>\n      </div>\n    );\n\n    let preparationForm;\n    if (this.state.poolData) {\n\n      const specimenProtocolAttributes = this.props.specimenProtocolAttributes[this.state.poolData.typeId]\n \n      let specimenProtocols = {};\n      for (let id in specimenProtocolAttributes) {\n        specimenProtocols[id] = this.props.specimenProtocols[id];\n      }\n      specimenProtocols = this.props.mapFormOptions(specimenProtocols, 'protocol');\n\n      preparationForm = (\n        <div className='row'>\n          <div className='col-sm-9 col-sm-offset-1'>\n            <SpecimenPreparationForm\n              formData={this.state.formData.preparationForm}\n              specimenProtocols={specimenProtocols}\n              specimenProtocolAttributes={specimenProtocolAttributes}\n              attributeDatatypes={this.props.attributeDatatypes}\n              attributeOptions={this.props.attributeOptions}\n              setParentFormData={this.setPreparationFormData}\n              insertAction={`${loris.BaseURL}/biobank/ajax/submitData.php?action=insertSpecimenPreparation`}\n            />\n            <a className='pull-right' style={{cursor:'pointer'}} onClick={this.removePreparation}>Cancel Preparation</a>\n          </div>\n        </div>\n      );\n    }\n\n    let inputForm = (\n      <div>\n        <div className='row'>\n          <div className='col-sm-9 col-sm-offset-1'>\n            <StaticElement\n              label='Pooling Note'\n              text='Select or Scan the specimens to be pooled. Please ensure that they\n                    are the same type, and share the same PSCID and Visit Label'\n            />\n            <NumericElement\n              label='№ of Specimens'\n              min='2'\n              max='100'\n              value={this.state.barcodeCount}\n              onUserInput={this.setBarcodeCount}\n            />\n            {barcodes}\n          </div>\n        </div>\n        {this.preparationSwitch(preparationButton, preparationForm)}\n        <div className='col-sm-3 col-xs-offset-9 action'>\n          <div className='action-title'>\n            Next\n          </div>\n          <span className='action'>\n            <div \n              className='action-button update'\n              onClick={this.next}\n            >\n              <span className='glyphicon glyphicon-chevron-right'/>\n            </div>\n          </span>\n        </div>\n      </div>\n    );\n\n    //TODO: Things here need to be in the proper order!!!\n    let specimenForm;\n    if (this.state.poolData) {\n\n      // This is to provide the options for the output specimens\n      let specimenTypes = {};\n      if (this.state.poolData.typeId) {\n        specimenTypes[this.state.poolData.typeId] = this.props.specimenTypes[this.state.poolData.typeId];\n      }\n  \n      let pscid = this.props.pSCIDs[this.state.poolData.candidateId];\n      let visit = this.props.sessionData[pscid].visits[this.state.poolData.sessionId];\n\n      let barcodesArray = Object.values(this.state.barcodeList); \n      let barcodesString = barcodesArray.join(', ');  \n\n      // TODO: rather than all specimen units this should really be specific to the\n      // type\n      let specimenUnits = this.props.mapFormOptions(this.props.specimenUnits, 'unit');\n\n      specimenForm = (\n        <div className='row'>\n          <div className='col-xs-12'>\n            <BiobankSpecimenForm\n              formData={this.state.formData.specimenForm}\n              candidateId={this.state.poolData.candidateId}\n              pscid={pscid}\n              sessionId={this.state.poolData.sessionId}\n              visit={visit}\n              parentSpecimenBarcodes={barcodesString}\n              parentSpecimenIds={this.state.poolData.specimenIds}\n              specimenTypes={specimenTypes}\n              specimenTypeUnits={this.props.specimenTypeUnits}\n              specimenUnits={specimenUnits}\n              containerTypesPrimary={this.props.containerTypesPrimary}\n              containersNonPrimary={this.props.containersNonPrimary}\n              specimenTypeAttributes={this.props.specimenTypeAttributes}\n              attributeDatatypes={this.props.attributeDatatypes}\n              attributeOptions={this.props.attributeOptions}\n              capacities={this.props.capacities}\n              containerDimensions={this.props.containerDimensions}\n              containerCoordinates={this.props.containerCoordinates}\n              setParentFormData={this.setSpecimenFormData}\n              action={`${loris.BaseURL}/biobank/ajax/submitData.php?action=submitSpecimen`}\n              refreshParent={this.props.refreshParent}\n            />\n            <ButtonElement\n              label='Submit'\n            />\n          </div>\n          <div className='col-sm-3 col-xs-offset-2 action'>\n            <span className='action'>\n              <div \n                className='action-button update'\n                onClick={this.previous}\n              >\n                <span className='glyphicon glyphicon-chevron-left'/>\n              </div>\n            </span>\n            <div className='action-title'>\n              Previous\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"poolSpecimenForm\"\n        id='poolSpecimenForm'\n        onSubmit={this.handleSubmit}\n        ref=\"form\"\n      >\n        {this.formSwitch(inputForm, specimenForm)}\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n\n  validateForm(formElement, value) {\n    let formErrors = this.state.formErrors;\n\n    //validate barcode regex\n    if (formElement === \"barcode\" && value !== \"\") {\n      if (!(/^hello/.test(this.state.formData.barcode))) {\n        formErrors.barcode = true;\n      } else {\n        formErrors.barcode = false;\n      }\n    }\n\n    //validate that quantity is a number and less than capacity\n    if (formElement === \"quantity\" && value !== \"\") {\n      if (isNaN(value) || (value > this.props.capacities[this.state.currentContainerType])) {\n        formErrors.quantity = true;\n      } else {\n        formErrors.quantity = false;\n      }\n    }\n\n    //validate datatypes and regex of generated type attributes\n    let specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n    let specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n\n      let datatype = this.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"number\") {\n        if (formElement === attribute) {\n          if (isNaN(value) && value !== \"\") {\n            formErrors[attribute] = true;\n          } else {\n            formErrors[attribute] = false;\n          }\n        }\n      }\n    })\n\n    this.setState({\n      formErrors: formErrors\n    });\n  }\n\n\n  /**\n   * Handle form submission\n   * @param {object} e - Form submission event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    this.submitForm();\n  }\n\n  /*\n   * Uploads the file to the server\n   */\n  submitForm() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let preparationForm = this.state.formData.preparationForm;\n    let specimenForm = this.state.formData.specimenForm;\n    formData['preparationForm'] = JSON.stringify(preparationForm);\n    formData['specimenForm'] = JSON.stringify(specimenForm);\n\n    console.log(formData.specimenForm);\n    console.log(formData.preparationForm);\n\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        //this.props.refreshParent();\n        swal(\"Specimens Pooled Successful!\", \"\", \"success\");\n        this.props.onSuccess();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Checks if the inputted file name is valid\n   *\n   * @param {string} requiredFileName - Required file name\n   * @param {string} fileName - Provided file name\n   * @return {boolean} - true if fileName starts with requiredFileName, false\n   *   otherwise\n   */\n//  isValidFileName(requiredFileName, fileName) {\n//    if (fileName === null || requiredFileName === null) {\n//      return false;\n//    }\n//\n//    return (fileName.indexOf(requiredFileName) === 0);\n//  }\n\n  /**\n   * Validate the form\n   *\n   * @param {object} formRefs - Object containing references to React form elements\n   * @param {object} formData - Object containing form data inputed by user\n   * @return {boolean} - true if all required fields are filled, false otherwise\n   */\n  isValidForm(formRefs, formData) {\n    let isValidForm = true;\n\n    let requiredFields = {\n      pscid: null,\n      visitLabel: null,\n    };\n\n    Object.keys(requiredFields).map(function(field) {\n      if (formData[field]) {\n        requiredFields[field] = formData[field];\n      } else if (formRefs[field]) {\n        formRefs[field].props.hasError = true;\n        isValidForm = false;\n      }\n    });\n    this.forceUpdate();\n\n    return isValidForm;\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    // This lets the modal window know that there is formData\n    // and will cause a warning to be thrown of the modal window\n    // is exited\n    this.props.onChange instanceof Function && this.props.onChange();\n  \n    if (formElement === \"pscid\" && value !== \"\" && value !== undefined) {\n      this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n    }\n\n    let formData = this.state.formData;\n    let barcodeList = this.state.barcodeList;\n \n    //TODO: there must be a better way to do this\n    if (isNaN(formElement)) {\n      formData[formElement] = value;\n    } else {\n      barcodeList[formElement] = value;\n    }\n\n    this.setState({\n      formData,\n      barcodeList\n    });\n  }\n\n  setPreparationFormData(preparationFormData) {\n    let formData = this.state.formData;\n    formData.preparationForm = preparationFormData;\n    \n    this.setState({formData});\n  }\n\n  setSpecimenFormData(specimenFormData) {\n    let formData = this.state.formData;\n    formData.specimenForm = specimenFormData;\n  \n    this.setState({formData});\n  }\n}\n\nPoolSpecimenForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired,\n  refreshTable: React.PropTypes.func\n};\n\nexport default PoolSpecimenForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/poolSpecimenForm.js","\n/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenPreparationForm extends React.Component {\n  constructor() {\n    super();\n\n    this.getSpecimenProtocolFields = this.getSpecimenProtocolFields.bind(this);\n    this.setPreparation = this.setPreparation.bind(this);\n    this.addData = this.addData.bind(this);\n    this.setData = this.setData.bind(this);\n  }\n\n  setPreparation(name, value) {\n    let preparation = this.props.specimen.preparation;\n    preparation[name] = value;\n    this.props.setSpecimenData('preparation', preparation);\n  }\n\n  addData() {\n    let preparation = this.props.specimen.preparation;\n    preparation.data = {};\n    this.props.setSpecimenData('preparation', preparation);\n  }\n\n  setData(name, value) {\n    let data = this.props.specimen.preparation.data;\n    data[name] = value;\n    this.setPreparation('data', data);\n  }\n\n  // TODO: decouple this code from the collectionForm by make it a React Component\n  // This generates all the form fields for a given specimen protocol\n  getSpecimenProtocolFields(fieldsObject) {\n    let specimenProtocolFields = Object.keys(fieldsObject).map((attribute) => {\n      let datatype = this.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\n      if (datatype === \"text\" || datatype === \"number\") {\n        if (fieldsObject[attribute]['refTableId'] == null) {\n          return (\n            <TextboxElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              onUserInput={this.setData}\n              required={fieldsObject[attribute]['required']}\n              value={this.props.specimen.preparation.data[attribute]}\n            />\n          );\n        }\n\n        if (fieldsObject[attribute]['refTableId'] !== null) {\n          return (\n            <SelectElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              options={this.props.attributeOptions[fieldsObject[attribute]['refTableId']]}\n              onUserInput={this.setData}\n              required={fieldsObject[attribute]['required']}\n              value={this.props.specimen.preparation.data[attribute]}\n            />\n          );\n        }\n      }\n\n      if (datatype === \"datetime\") {\n        return (\n          <DateElement\n            name={attribute}\n            label={fieldsObject[attribute]['name']}\n            onUserInput={this.setData}\n            ref={attribute}\n            required={fieldsObject[attribute]['required']}\n            value={this.props.specimen.preparation.data[attribute]}\n          />\n        );\n      }\n\n      if (datatype === \"boolean\") {\n      }\n    });\n\n    return specimenProtocolFields;\n  }\n\n  render() {\n\n    let submitButton;\n    if (this.props.data.specimen.preparation) {\n      submitButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    } else {\n      submitButton = (\n        <ButtonElement label=\"Submit\"/>\n      );\n    }\n\n    let specimenProtocolFields;\n    if (this.props.specimen.preparation.protocolId) {\n      let specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.props.specimen.preparation.protocolId];\n\n      if (specimenProtocolFieldsObject) {\n        if (this.props.specimen.preparation.data) {\n          specimenProtocolFields = this.getSpecimenProtocolFields(specimenProtocolFieldsObject);\n        } else {\n          this.addData();\n        }\n      }\n    }\n\n    return (\n      <FormElement\n        name=\"specimenPreparation\"\n        onSubmit={this.props.saveSpecimen}\n        ref=\"form\"\n      >\n        <SelectElement\n          name=\"protocolId\"\n          label=\"Protocol\"\n          options={this.props.specimenProtocols}\n          onUserInput={this.setPreparation}\n          required={true}\n          value={this.props.specimen.preparation.protocolId}\n        />\n        {specimenProtocolFields}\n        <DateElement\n          name=\"date\"\n          label=\"Date\"\n          onUserInput={this.setPreparation}\n          required={true}\n          value={this.props.specimen.preparation.date}\n        />\n        <TimeElement\n          name=\"time\"\n          label=\"Time\"\n          onUserInput={this.setPreparation}\n          required={true}\n          value={this.props.specimen.preparation.time}\n        />\n        <TextareaElement\n          name=\"comments\"\n          label=\"Comments\"\n          onUserInput={this.setPreparation}\n          value={this.props.specimen.preparation.comments}\n        />\n        {submitButton} \n      </FormElement>\n    );\n  }\n\n}\n\nSpecimenPreparationForm.propTypes = {\n}\n\nexport default SpecimenPreparationForm;\n\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/preparationForm.js","import ContainerBarcodeForm from './containerBarcodeForm.js';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankContainerForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formErrors: {},\n      errorMessage: null,\n      containerList: {1: {}},\n      countContainers: 1,\n      collapsed: {1: true},\n      copyMultiplier: 1,\n    };\n\n    this.toggleCollapse = this.toggleCollapse.bind(this);\n    this.addContainer = this.addContainer.bind(this);\n    this.setContainer = this.setContainer.bind(this);\n    this.setCopyMultiplier = this.setCopyMultiplier.bind(this);\n    this.copyContainer = this.copyContainer.bind(this);\n    this.removeContainer = this.removeContainer.bind(this);\n    this.saveContainerList = this.saveContainerList.bind(this);\n    this.save = this.save.bind(this);\n  }\n\n  toggleCollapse(key) {\n    let collapsed = this.state.collapsed;\n    collapsed[key] = !collapsed[key];\n    this.setState({collapsed});\n  }\n\n  saveContainerList() {\n    let containerList = this.state.containerList;\n    let availableId = Object.keys(this.props.containerStati).find(\n      key => this.props.containerStati[key] === 'Available'\n    );\n\n    for (let container in containerList) {\n      containerList[container].statusId = availableId;\n      containerList[container].temperature = 20;\n      this.save(containerList[container], this.props.saveContainer).then(\n        () => {this.props.refreshParent(); this.props.onSucces();}\n      );\n    }\n  }\n\n  save(data, url) {\n    return new Promise(resolve => {\n      $.ajax({\n        type: 'POST',\n        url: url,\n        data: {data: JSON.stringify(data)},\n        cache: false,\n        success: () => {\n          resolve();\n          swal(\"Container Submission Successful!\", \"\", \"success\");\n        },\n        error: function(err) {\n          console.error(err);\n          let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n          this.setState({\n            errorMessage: msg,\n          });\n          swal(msg, \"\", \"error\");\n        }.bind(this)\n      });\n    });\n  }\n\n  setContainer(name, value, key) {\n    this.props.onChange instanceof Function && this.props.onChange();\n    let siteId = this.state.siteId;\n    let containerList = this.state.containerList;\n    if (name === 'siteId') {\n       siteId = value;\n       for (let container in containerList) {\n         containerList[container].originId = siteId;\n         containerList[container].locationId = siteId;\n       }\n    } else {\n      containerList[key][name] = value;\n    }\n    this.setState({containerList, siteId});\n  }\n\n  addContainer() {\n    let containerList = this.state.containerList;\n    let count = this.state.countContainers;\n    let collapsed = this.state.collapsed;\n    let siteId = this.state.siteId;\n    let temperature = 20;\n\n    // get Id of available status\n    let statusId = Object.keys(this.props.containerStati).find(\n      key => this.props.containerStati[key] === 'Available'\n    );\n\n    containerList[count+1] = {\n      statusId: statusId,\n      originId: siteId,\n      locationId: siteId,\n      temperature: temperature\n    };\n\n    collapsed[count+1] = true;  \n\n    this.setState({\n      containerList: containerList,\n      countContainers: count + 1,\n      collapsed: collapsed,\n    });\n  }\n\n  setCopyMultiplier(e) {\n    let copyMultiplier = e.target.value;\n    this.setState({copyMultiplier});\n  }\n\n  copyContainer(key) {\n    let count = this.state.countContainers;\n    let collapsed = this.state.collapsed;\n    let nextKey = count+1;\n    let containerList = this.state.containerList;\n    let multiplier = this.state.copyMultiplier\n\n    for (let i=1; i<=multiplier; i++) {\n      containerList[nextKey] = JSON.parse(JSON.stringify(containerList[key]));\n      delete containerList[nextKey].barcode;\n      collapsed[nextKey] = true;\n      nextKey++;\n    }    \n\n    this.setState({\n      containerList: containerList,\n      countContainers: nextKey,\n      collapsed: collapsed\n    });\n  }\n\n  removeContainer(key) {\n    let containerList = this.state.containerList;\n    delete containerList[key];\n    this.setState({containerList});\n  }\n\n  render() {\n    //Generates new Barcode Form everytime the addContainer button is pressed\n    let containerListArray = Object.keys(this.state.containerList);\n    let containers = [];\n    let i = 1;\n    for (let key of containerListArray) {\n      containers.push(\n        <ContainerBarcodeForm\n          key={key}\n          containerKey={key}\n          id={i}\n          collapsed={this.state.collapsed[key]}\n          toggleCollapse={this.toggleCollapse}\n          container={this.state.containerList[key] || null}\n          removeContainer={containerListArray.length !== 1 ? () => this.removeContainer(key) : null}\n          addContainer={i == containerListArray.length ? this.addContainer : null}\n          setCopyMultiplier={this.setCopyMultiplier}\n          copyMultiplier={this.state.copyMultiplier}\n          copyContainer={i == containerListArray.length && this.state.containerList[key] ? this.copyContainer : null}\n          setContainer={this.setContainer}\n          onChange={this.props.onChange}\n          containerTypesNonPrimary={this.props.containerTypesNonPrimary}\n          containerBarcodesNonPrimary={this.props.containerBarcodesNonPrimary}\n        />\n      );\n     \n      i++;\n    }\n\n    return (\n      <FormElement\n        name=\"containerForm\"\n        onSubmit={this.saveContainerList}\n        ref=\"form\"\n      >\n        <br/>\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <SelectElement\n              name=\"siteId\"\n              label=\"Site\"\n              options={this.props.centers}\n              onUserInput={this.setContainer}\n              required={true}\n              value={this.state.siteId}\n            />\n          </div>\n        </div>\n        {containers}\n          <div className=\"col-xs-3 col-xs-offset-9\">\n            <ButtonElement label=\"Submit\"/>\n          </div>\n      </FormElement>\n    );\n  }\n}\n\nBiobankContainerForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  barcode: React.PropTypes.string,\n  refreshTable: React.PropTypes.func\n};\n\nexport default BiobankContainerForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerForm.js","/**\n * Container Barcode Form\n *\n * Acts a subform for ContainerForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass ContainerBarcodeForm extends React.Component {\n  constructor() {\n    super();\n   \n    this.setContainer = this.setContainer.bind(this);\n    this.copy = this.copy.bind(this);\n  }\n\n  copy() {\n    this.props.copyContainer(this.props.containerKey);\n  }\n\n  //TODO: change form.js so this isn't necessary\n  setContainer(name, value) {\n    this.props.setContainer(name, value, this.props.containerKey);\n  }\n\n  render() {\n    // HR TODO: All this CSS should eventually be moved\n    let addContainerButton;\n    let addContainerText;\n    let copyContainerButton;\n    let copyContainerText;\n    if (this.props.addContainer) {\n      addContainerButton = (\n        <span className='action'>\n          <div\n            className='action-button add'\n            onClick={this.props.addContainer}\n          >\n          +\n          </div>\n        </span>\n      );\n\n      addContainerText = (\n        <span className='action-title'>\n          New Entry\n        </span>\n      );\n    }   \n    \n    if (this.props.copyContainer) {\n      copyContainerButton = ( \n        <span className='action'>\n          <div\n            className='action-button add'\n            onClick={this.copy}\n          >   \n            <span className='glyphicon glyphicon-duplicate'/>\n          </div>\n        </span>\n      );  \n      copyContainerText = ( \n        <span className='action-title'>\n          <input \n            className='form-control input-sm'\n            type='number'\n            min='1'\n            max='50'\n            style={{width: 50, display: 'inline'}}\n            onChange={this.props.setCopyMultiplier}\n            value={this.props.copyMultiplier}\n          />  \n          Copies\n        </span>\n      );  \n    }   \n\n    let removeContainerButton;\n    if (this.props.removeContainer) {\n      const glyphStyle = { \n        color: '#DDDDDD',\n        marginLeft: 10, \n        cursor: 'pointer',\n        fontSize: 15\n      }   \n\n      removeContainerButton = ( \n        <span \n          className='glyphicon glyphicon-remove' \n          onClick={this.props.removeContainer}\n          style={glyphStyle}\n        />\n      );  \n    }\n\n    return (\n      <FormElement\n        name='container'\n      >\n        <div className='row'>\n          <div className='col-xs-11'>\n            <div>\n            <TextboxElement\n              name='barcode'\n              label={'Barcode ' + this.props.id}\n              onUserInput={this.setContainer}\n              ref='barcode'\n              required={true}\n              value={this.props.container.barcode}\n            />\n            </div>\n          </div>\n          <div className='col-xs-1' style={{paddingLeft:0, marginTop:10}}>\n            <span\n              className= {this.props.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up'}\n              style={{cursor: 'pointer', fontSize:15, position:'relative', right:40}}\n              data-toggle='collapse'\n              data-target={'#item-' + this.props.containerKey}\n              onClick={() => this.props.toggleCollapse(this.props.containerKey)}\n            />\n            {removeContainerButton}\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xs-2'/>\n          <div className='col-xs-9'>\n            <div id={'item-' + this.props.containerKey} className='collapse'>\n              <SelectElement\n                name='typeId'\n                label='Container Type'\n                options={this.props.containerTypesNonPrimary}\n                onUserInput={this.setContainer}\n                required={true}\n                value={this.props.container.typeId}\n              />\n            </div>\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xs-11'>\n            <div className='col-xs-3'/>\n            <div className='col-xs-4 action'>\n              {addContainerButton}\n              {addContainerText}\n            </div>\n            <div className='col-xs-4 action'>\n              {copyContainerButton}\n              {copyContainerText}\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n}\n\nContainerBarcodeForm.propTypes = {\n}\n\nexport default ContainerBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerBarcodeForm.js","/**\n * This file contains React components for Tabs component.\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\n/**\n * Tabs Component.\n * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n * and corresponding tab panes.\n *\n * ================================================\n * Usage:\n *\n * 1. Define an array of tabs with IDs and labels\n *\n * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n *\n * 2. Pass tabList as <Tab> property and <TabPane> as child\n *  ```\n * <Tabs tabs={tabList} defaultTab=\"tab1\">\n *   <TabPane TabId={tabList[0].id}>\n *     // Tab content goes here\n *   </TabPane>\n * </Tabs>\n * ```\n * =================================================\n *\n */\nclass Tabs extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    const hash = window.location.hash;\n    let activeTab = \"\";\n\n    /**\n     * Determine the initial active tab in this order\n     * 1. Try to infer from the URL, otherwise\n     * 2. Try to infer from the defaultTab prop, otherwise\n     * 3. Set to be the first tab of the list\n     */\n    if (this.props.updateURL && hash) {\n      activeTab = hash.substr(1);\n    } else if (this.props.defaultTab) {\n      activeTab = this.props.defaultTab;\n    } else if (this.props.tabs.length > 0) {\n      activeTab = this.props.tabs[0].id;\n    }\n\n    this.state = {\n      activeTab: activeTab\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.getTabs = this.getTabs.bind(this);\n    this.getTabPanes = this.getTabPanes.bind(this);\n  }\n\n  handleClick(tabId, e) {\n    this.setState({activeTab: tabId});\n    this.props.onTabChange(tabId);\n\n    // Add tab href to URL querystring and scroll the page to top\n    if (this.props.updateURL) {\n      const scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n      window.location.hash = e.target.hash;\n      $('html,body').scrollTop(scrollDistance);\n    }\n  }\n\n  getTabs() {\n    let tabs = (this.props.tabs).map(function(tab) {\n      let tabClass = this.state.activeTab === tab.id ? 'active' : null;\n      let href = \"#\" + tab.id;\n      let tabID = \"tab-\" + tab.id;\n      return (\n        <li\n          role=\"presentation\"\n          className={tabClass}\n          key={tab.id}\n        >\n          <a id={tabID}\n             href={href}\n             role=\"tab\"\n             data-toggle=\"tab\"\n             onClick={this.handleClick.bind(null, tab.id)}\n          >\n            {tab.label}\n          </a>\n        </li>\n      );\n    }.bind(this));\n\n    return tabs;\n  }\n\n  getTabPanes() {\n    let tabPanes = React.Children.map(this.props.children, function(child, key) {\n      if (child) {\n        return React.cloneElement(child, {\n          activeTab: this.state.activeTab,\n          key: key\n        });\n      }\n    }.bind(this));\n\n    return tabPanes;\n  }\n\n  render() {\n    let tabs = this.getTabs();\n    let tabPanes = this.getTabPanes();\n    let tabStyle = {\n      marginLeft: 0,\n      marginBottom: '5px'\n    };\n\n    return (\n      <div>\n        <ul className=\"nav nav-tabs\" role=\"tablist\" style={tabStyle}>\n          {tabs}\n        </ul>\n        <div className=\"tab-content\">\n          {tabPanes}\n        </div>\n      </div>\n    );\n  }\n}\nTabs.propTypes = {\n  tabs: React.PropTypes.array.isRequired,\n  defaultTab: React.PropTypes.string,\n  updateURL: React.PropTypes.bool\n};\nTabs.defaultProps = {\n  onTabChange: function() {},\n  // Set updateURL to default to true but allow for change\n  // Nested tabs should set this variable to false\n  updateURL: true\n};\n\n/**\n * Allows to dynamically render vertical tabs corresponding to tab panes.\n */\n\nclass VerticalTabs extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const hash = window.location.hash;\n    let activeTab = \"\";\n\n    /**\n     * Determine the initial active tab in this order\n     * 1. Try to infer from the URL, otherwise\n     * 2. Try to infer from the defaultTab prop, otherwise\n     * 3. Set to be the first tab of the list\n     */\n    if (this.props.updateURL && hash) {\n      activeTab = hash.substr(1);\n    } else if (this.props.defaultTab) {\n      activeTab = this.props.defaultTab;\n    } else if (this.props.tabs.length > 0) {\n      activeTab = this.props.tabs[0].id;\n    }\n\n    this.state = {\n      activeTab: activeTab\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.getTabs = this.getTabs.bind(this);\n    this.getTabPanes = this.getTabPanes.bind(this);\n  }\n\n  handleClick(tabId, e) {\n    this.setState({activeTab: tabId});\n    this.props.onTabChange(tabId);\n\n    // Add tab href to URL querystring and scroll the page to top\n    if (this.props.updateURL) {\n      const scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n      window.location.hash = e.target.hash;\n      $('html,body').scrollTop(scrollDistance);\n    }\n  }\n\n  getTabs() {\n    let tabs = (this.props.tabs).map(function(tab) {\n      let tabClass = this.state.activeTab === tab.id ? 'active' : null;\n      let href = \"#\" + tab.id;\n      let tabID = \"tab-\" + tab.id;\n      return (\n        <li\n          role=\"presentation\"\n          className={tabClass}\n          key={tab.id}\n        >\n          <a id={tabID}\n             href={href}\n             role=\"tab\"\n             data-toggle=\"tab\"\n             onClick={this.handleClick.bind(null, tab.id)}\n          >\n            {tab.label}\n          </a>\n        </li>\n      );\n    }.bind(this));\n\n    return tabs;\n  }\n\n  getTabPanes() {\n    let tabPanes = React.Children.map(this.props.children, function(child, key) {\n      if (child) {\n        return React.cloneElement(child, {\n          activeTab: this.state.activeTab,\n          key: key\n        });\n      }\n    }.bind(this));\n\n    return tabPanes;\n  }\n\n  render() {\n    let tabs = this.getTabs();\n    let tabPanes = this.getTabPanes();\n    let tabStyle = {\n      marginLeft: 0,\n      marginBottom: '5px'\n    };\n\n    return (\n      <div>\n        <div className=\"tabbable col-md-3 col-sm-3\">\n          <ul className=\"nav nav-pills nav-stacked\" role=\"tablist\" style={tabStyle}>\n            {tabs}\n          </ul>\n        </div>\n        <div className=\"tab-content col-md-9 col-sm-9\">\n          {tabPanes}\n        </div>\n      </div>\n    );\n  }\n}\nVerticalTabs.propTypes = {\n  tabs: React.PropTypes.array.isRequired,\n  defaultTab: React.PropTypes.string,\n  updateURL: React.PropTypes.bool\n};\nVerticalTabs.defaultProps = {\n  onTabChange: function() {},\n  // Set updateURL to default to true but allow for change\n  // Nested tabs should set this variable to false\n  updateURL: true\n};\n\n/*\n * TabPane component.\n * Used to wrap content for every tab.\n */\nclass TabPane extends React.Component {\n  render() {\n    let classList = \"tab-pane\";\n    let title;\n\n    if (this.props.TabId === this.props.activeTab) {\n      classList += \" active\";\n    }\n    if (this.props.Title) {\n      title = <h1>{this.props.Title}</h1>;\n    }\n\n    return (\n      <div role=\"tabpanel\" className={classList} id={this.props.TabId}>\n        {title}\n        {this.props.children}\n      </div>\n    );\n  }\n}\nTabPane.propTypes = {\n  TabId: React.PropTypes.string.isRequired,\n  Title: React.PropTypes.string,\n  activeTab: React.PropTypes.string\n};\n\nexport {\n  Tabs,\n  VerticalTabs,\n  TabPane\n};\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Tabs.js","/**\n * This file contains React components for Modal component.\n *\n * @author Henri Rabalais\n * @version 1.1.0\n *\n */\n\nimport Modal from './Modal';\n\n/**\n * Modal Component.\n * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n *\n * ================================================\n * Usage:\n *\n * =================================================\n *\n */\n\nclass FormModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { show: false, throwWarning: false }\n\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.confirmClose = this.confirmClose.bind(this);\n    this.setWarning = this.setWarning.bind(this);\n  }\n\n  renderChildren() {\n    return React.Children.map(this.props.children, child => {\n      return React.cloneElement(child, { onSuccess: this.closeModal, onChange: this.setWarning });\n    });\n  }\n\n  openModal() {\n    this.setState({\n      show: true\n    });\n  } \n\n  setWarning() {\n    this.setState({\n      throwWarning: true\n    });\n  }\n\n  confirmClose() {\n    if (this.state.throwWarning) {\n      swal({\n        title: \"Are You Sure?\",\n        text: \"Leaving the form will result in the loss of any information entered.\",\n        type: \"warning\",\n        showCancelButton: true,\n        confirmButtonText: 'Proceed',\n        cancelButtonText: 'Cancel',\n      },\n      function() {\n        this.closeModal();\n      }.bind(this));\n    } else {\n      this.closeModal();\n    }\n  }\n\n  closeModal() {\n    this.setState({\n      show: false,\n      throwWarning: false\n    });\n  }\n\n  render() {\n    return (\n      <Modal \n        closeModal={this.confirmClose} \n        openModal={this.openModal} \n        show={this.state.show}\n        {...this.props} \n      >\n        {this.renderChildren()}\n      </Modal>\n    );\n  }\n}\n\nFormModal.propTypes = {\n  title: React.PropTypes.string,\n  buttonClass: React.PropTypes.string,\n  buttonStyle: React.PropTypes.object,\n  buttonContent: React.PropTypes.object,\n};\nFormModal.defaultProps = {\n  buttonClass: 'btn btn-primary'\n};\n\nexport default FormModal;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/FormModal.js","/**\n * This file contains React components for Modal component.\n *\n * @author Henri Rabalais\n * @version 1.1.0\n *\n */\n\n/**\n * Modal Component.\n * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n *\n * ================================================\n * Usage:\n *\n * =================================================\n *\n */\nclass Modal extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n  }\n\n  render() {\n    // Black Background with Alpha Channel\n    const backdropStyle = {\n      position: 'fixed',\n      zIndex: 9998,\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundColor: 'rgba(0,0,0,0.3)',\n      padding: 50\n    };\n\n    // White Modal Window\n    const modalStyle = {\n      position: 'relative',\n      maxWidth: 1000,\n      maxHeight: '100%',\n      margin: '0 auto',\n      backgroundColor: '#fff',\n      borderRadius: 10,\n      overflowY: 'auto',\n      zIndex: 9999\n    };\n\n    const titleStyle = {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      background: '#093782',\n      height: '70px',\n      borderTopRightRadius: '10',\n      color: '#FFFFFF',\n      fontSize: 24,\n      padding: 20,\n    }\n\n    const glyphStyle = {\n      marginLeft: 'auto',\n      cursor: 'pointer'\n    }\n\n    const bodyStyle = {\n      padding: 15\n    }\n  \n    var button = (\n      <div\n        className={this.props.buttonClass}\n        onClick={this.props.openModal}\n      >\n        {this.props.buttonContent}\n      </div>\n    );\n\n    var modal;\n    if (this.props.show) {\n      modal = (\n        <div style={backdropStyle} onClick={this.props.closeModal}>\n          <div\n            style={modalStyle}\n            onClick={e => {\n              e.stopPropagation();\n            }}\n          >\n            <div\n              style={titleStyle}\n            >\n              {this.props.title}\n              <span \n                style={glyphStyle}\n                onClick={this.props.closeModal}\n              >\n                ×\n              </span>\n            </div>\n            <div\n              style={bodyStyle}\n            >\n              {this.props.children}\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div style={this.props.style}>\n        {button}\n        {modal}\n      </div>\n    );\n  }\n}\n\nModal.propTypes = {\n  title: React.PropTypes.string,\n  buttonClass: React.PropTypes.string,\n  buttonStyle: React.PropTypes.object,\n  buttonContent: React.PropTypes.object,\n  show: React.PropTypes.boolean,\n  closeModal: React.PropTypes.func,\n  openModal: React.PropTypes.func\n};\nModal.defaultProps = {\n  buttonClass: 'btn btn-primary'\n};\n\nexport default Modal;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Modal.js","/**\n * This file contains React component for Loader\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n */\n\n/**\n * Loader component\n */\nclass Loader extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n\n    return (\n      <div className='loader-container'>\n        <div className=\"loader\"/>\n      </div>\n\n\n    );\n  }\n}\n\nexport default Loader;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Loader.js","/**\n * Modify behaviour of specified column cells in the Data Table component\n * @param {string} column - column name\n * @param {string} cell - cell content\n * @param {arrray} rowData - array of cell contents for a specific row\n * @param {arrray} rowHeaders - array of table headers (column names)\n * @return {*} a formated table cell for a given column\n */\nfunction formatColumn(column, cell, rowData, rowHeaders) {\n  // If a column if set as hidden, don't display it\n  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n  //  return null;\n  //}\n\n  // Create the mapping between rowHeaders and rowData in a row object.\n  var row = {};\n  rowHeaders.forEach(function(header, index) {\n    row[header] = rowData[index];\n  }, this);\n\n  // create array of classes to be added to td tag\n  var classes = [];\n\n  // convert array to string, with blank space separator\n  classes = classes.join(\" \");\n\n  //const hasWritePermission = loris.userHasPermission('media_read');\n  if (column === 'Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Barcode'];\n    return <td className= {classes}><a href={specimenURL}>{cell}</a></td>;\n  }\n\n  if (column === 'Parent Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Parent Barcode'];\n    return <td className= {classes}><a href={specimenURL}>{cell}</a></td>; \n}\n\n  if (column === 'Container Barcode') {\n    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Container Barcode'];\n    return <td className= {classes}><a href={containerURL}>{cell}</a></td>;\n}\n\n // if (column === 'Visit Label') {\n //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n //   }\n // }\n\n // if (column === 'Edit Metadata') {\n //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n // }\n\n  return <td className={classes}>{cell}</td>;\n}\n\nexport default formatColumn;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/columnFormatterSpecimen.js","/**\n * Modify behaviour of specified column cells in the Data Table component\n * @param {string} column - column name\n * @param {string} cell - cell content\n * @param {arrray} rowData - array of cell contents for a specific row\n * @param {arrray} rowHeaders - array of table headers (column names)\n * @return {*} a formated table cell for a given column\n */\nfunction formatColumn(column, cell, rowData, rowHeaders) {\n  // If a column if set as hidden, don't display it\n  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n  //  return null;\n  //}\n\n  // Create the mapping between rowHeaders and rowData in a row object.\n  var row = {};\n  rowHeaders.forEach(function(header, index) {\n    row[header] = rowData[index];\n  }, this);\n\n  // create array of classes to be added to td tag\n  var classes = [];\n\n  // convert array to string, with blank space separator\n  classes = classes.join(\" \");\n\n  //const hasWritePermission = loris.userHasPermission('media_read');\n  if (column === 'Barcode') {\n    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Barcode'];\n    return <td className= {classes}><a href={containerURL}>{cell}</a></td>;\n  }\n\n  if (column === 'Parent Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Parent Barcode'];\n    return <td className= {classes}><a href={containerURL}>{cell}</a></td>; \n}\n\n // if (column === 'Visit Label') {\n //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n //   }\n // }\n\n // if (column === 'Edit Metadata') {\n //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n // }\n\n  return <td className={classes}>{cell}</td>;\n}\n\nexport default formatColumn;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/columnFormatterContainer.js"],"sourceRoot":""}