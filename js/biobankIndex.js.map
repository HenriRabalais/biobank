{"version":3,"sources":["webpack:///modules/biobank/js/biobankIndex.js","webpack:///webpack/bootstrap 68e3b314ce250beba595?4509*******","webpack:///./modules/biobank/jsx/biobankIndex.js","webpack:///./jsx/FilterForm.js","webpack:///./jsx/Panel.js","webpack:///./modules/biobank/jsx/specimenForm.js","webpack:///./modules/biobank/jsx/barcodeForm.js","webpack:///./modules/biobank/jsx/collectionForm.js","webpack:///./modules/biobank/jsx/poolSpecimenForm.js","webpack:///./modules/biobank/jsx/preparationForm.js","webpack:///./modules/biobank/jsx/containerForm.js","webpack:///./modules/biobank/jsx/containerBarcodeForm.js","webpack:///./jsx/Tabs.js","webpack:///./jsx/FormModal.js","webpack:///./jsx/Modal.js","webpack:///./jsx/Loader.js","webpack:///./modules/biobank/jsx/columnFormatterSpecimen.js","webpack:///./modules/biobank/jsx/columnFormatterContainer.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","_FilterForm","_FilterForm2","_specimenForm","_specimenForm2","_poolSpecimenForm","_poolSpecimenForm2","_containerForm","_containerForm2","_Tabs","_FormModal","_FormModal2","_Loader","_Loader2","_columnFormatterSpecimen","_columnFormatterSpecimen2","_columnFormatterContainer","_columnFormatterContainer2","BiobankIndex","_React$Component","this","_this","getPrototypeOf","state","isLoaded","specimenFilter","containerFilter","isOpen","formOptions","loadPage","bind","fetchSpecimenData","fetchFormOptions","fetchContainerData","updateSpecimenFilter","updateContainerFilter","resetFilters","mapFormOptions","$","ajax","specimenDataURL","method","dataType","success","data","setState","specimenData","error","console","containerDataURL","containerData","formDataURL","refs","biobankFilter","clearFilter","rawObject","targetAttribute","React","createElement","addSpecimenButton","poolSpecimenButton","addContainerButton","loris","userHasPermission","specimenTypes","containerTypesPrimary","title","buttonClass","buttonContent","style","display","containersNonPrimary","specimenTypeAttributes","attributeDatatypes","attributeOptions","capacities","containerDimensions","containerCoordinates","specimenTypeUnits","pSCIDs","visits","sessionData","action","BaseURL","refreshParent","poolSpecimenButtonContent","className","specimenProtocols","specimenProtocolAttributes","specimenUnits","specimenRequest","containerTypesNonPrimary","containerStati","sites","tabList","label","Tabs","tabs","defaultTab","updateURL","TabPane","TabId","Module","name","ref","columns","formElements","form","onUpdate","filter","StaticElement","ButtonElement","type","onUserInput","StaticDataTable","Data","Headers","Filter","getFormattedCell","Component","biobankIndex","ReactDOM","render","document","getElementById","_typeof","Symbol","iterator","_Panel","_Panel2","FilterForm","getFormChildren","setFilter","onElementUpdate","queryString","QueryString","get","keys","forEach","filterKey","exactMatch","clear","formChildren","Children","children","child","isValidElement","callbackFunc","callbackName","elementName","displayName","queryFieldName","filterValue","push","cloneElement","JSON","parse","stringify","fieldName","fieldValue","set","height","FormElement","defaultProps","warn","propTypes","PropTypes","string","isRequired","object","func","Panel","collapsed","initCollapsed","panelClass","toggleCollapsed","glyphClass","pencilGlyph","edit","marginRight","cursor","onClick","plusGlyph","add","removeGlyph","cancel","panelHeading","data-toggle","data-target","role","_barcodeForm","_barcodeForm2","BiobankSpecimenForm","availableId","find","errorMessage","formErrors","barcodeList","1","specimen","container","statusId","temperature","countBarcodes","saveBarcodeList","save","barcode","saveContainer","saveSpecimen","entity","url","entityObject","FormData","append","entityObj","cache","contentType","processData","xhr","window","XMLHttpRequest","swal","onSuccess","err","msg","responseJSON","message","siteId","containerList","barcodeData","barcodeKey","count","multiplier","nextKey","_this2","barcodeListArray","barcodeFormList","barcodes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","removeBarcode","addBarcode","copyBarcode","setParentFormData","setBarcodeList","onChange","units","_iterator","next","done","return","globalFields","remainingQuantityFields","parentSpecimenIds","text","parentSpecimenBarcodes","pscid","visit","TextboxElement","setFormData","required","formData","quantity","SelectElement","options","emptyOption","unitId","SearchableDropdown","placeHolder","visitLabel","disabled","onSubmit","columnSize","_collectionForm","_collectionForm2","SpecimenBarcodeForm","copyMultiplier","setChildFormData","toggleCollapse","setCopyMultiplier","copy","e","copyBarcodeForm","addBarcodeFormButton","addBarcodeFormText","copyBarcodeFormButton","copyBarcodeFormText","addBarcodeForm","min","max","width","removeBarcodeFormButton","removeBarcodeForm","glyphStyle","color","marginLeft","fontSize","paddingLeft","marginTop","position","right","specimenType","containerType","stati","ContainerParentForm","setContainerParentFormData","formElement","Function","collectionFormData","field","SpecimenCollectionForm","getSpecimenTypeFields","setCollectionData","setData","collection","setSpecimenData","fieldsObject","specimenTypeFields","map","attribute","datatype","DateElement","updateButton","typeId","unit","specimenTypeFieldsObject","specimenFields","minYear","maxYear","date","TimeElement","time","TextareaElement","comments","_preparationForm","_preparationForm2","PoolSpecimenForm","barcodeCount","preparation","step","handleSubmit","validateForm","setPreparationFormData","setSpecimenFormData","submitForm","setBarcodeCount","previous","addPreparation","removePreparation","validate","formSwitch","preparationSwitch","runAjax","originalObject","mappedObject","then","poolData","responseText","inputData","_this3","Promise","resolve","reject","textStatus","errorThrown","inputForm","specimenForm","preparationButton","preparationForm","_this4","insertAction","NumericElement","candidateId","sessionId","barcodesArray","values","barcodesString","join","specimenIds","_this5","test","isNaN","currentContainerType","currentSpecimenType","preventDefault","log","formObj","isValidForm","formRefs","requiredFields","hasError","forceUpdate","preparationFormData","specimenFormData","DataURL","refreshTable","SpecimenPreparationForm","getSpecimenProtocolFields","setPreparation","addData","specimenProtocolFields","submitButton","protocolId","specimenProtocolFieldsObject","_containerBarcodeForm","_containerBarcodeForm2","BiobankContainerForm","countContainers","addContainer","setContainer","copyContainer","removeContainer","saveContainerList","containerObj","originId","locationId","containerListArray","containers","containerKey","containerBarcodesNonPrimary","ContainerBarcodeForm","addContainerText","copyContainerButton","copyContainerText","removeContainerButton","hash","location","activeTab","substr","handleClick","getTabs","getTabPanes","tabId","onTabChange","scrollDistance","scrollTop","tab","tabClass","href","tabID","tabPanes","tabStyle","marginBottom","array","bool","VerticalTabs","_React$Component2","_React$Component3","apply","arguments","classList","Title","_extends","assign","source","hasOwnProperty","_Modal","_Modal2","FormModal","show","throwWarning","openModal","closeModal","confirmClose","setWarning","showCancelButton","confirmButtonText","cancelButtonText","renderChildren","buttonStyle","Modal","modal","backdropStyle","zIndex","top","bottom","left","backgroundColor","padding","modalStyle","maxWidth","maxHeight","margin","borderRadius","overflowY","titleStyle","flexDirection","alignItems","background","borderTopRightRadius","bodyStyle","button","stopPropagation","boolean","Loader","formatColumn","column","cell","rowData","rowHeaders","row","header","index","classes","specimenURL","containerURL"],"mappings":"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","file":"./modules/biobank/js/biobankIndex.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _FilterForm = __webpack_require__(1);\n\t\n\tvar _FilterForm2 = _interopRequireDefault(_FilterForm);\n\t\n\tvar _specimenForm = __webpack_require__(3);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tvar _poolSpecimenForm = __webpack_require__(6);\n\t\n\tvar _poolSpecimenForm2 = _interopRequireDefault(_poolSpecimenForm);\n\t\n\tvar _containerForm = __webpack_require__(8);\n\t\n\tvar _containerForm2 = _interopRequireDefault(_containerForm);\n\t\n\tvar _Tabs = __webpack_require__(10);\n\t\n\tvar _FormModal = __webpack_require__(11);\n\t\n\tvar _FormModal2 = _interopRequireDefault(_FormModal);\n\t\n\tvar _Loader = __webpack_require__(13);\n\t\n\tvar _Loader2 = _interopRequireDefault(_Loader);\n\t\n\tvar _columnFormatterSpecimen = __webpack_require__(14);\n\t\n\tvar _columnFormatterSpecimen2 = _interopRequireDefault(_columnFormatterSpecimen);\n\t\n\tvar _columnFormatterContainer = __webpack_require__(15);\n\t\n\tvar _columnFormatterContainer2 = _interopRequireDefault(_columnFormatterContainer);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar BiobankIndex = function (_React$Component) {\n\t  _inherits(BiobankIndex, _React$Component);\n\t\n\t  function BiobankIndex(props) {\n\t    _classCallCheck(this, BiobankIndex);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankIndex.__proto__ || Object.getPrototypeOf(BiobankIndex)).call(this, props));\n\t\n\t    _this.state = {\n\t      isLoaded: false,\n\t      specimenFilter: {},\n\t      containerFilter: {},\n\t      isOpen: false,\n\t      formOptions: {}\n\t    };\n\t\n\t    // Bind component instance to custom methods\n\t    _this.loadPage = _this.loadPage.bind(_this);\n\t    _this.fetchSpecimenData = _this.fetchSpecimenData.bind(_this);\n\t    _this.fetchFormOptions = _this.fetchFormOptions.bind(_this);\n\t    _this.fetchContainerData = _this.fetchContainerData.bind(_this);\n\t    _this.updateSpecimenFilter = _this.updateSpecimenFilter.bind(_this);\n\t    _this.updateContainerFilter = _this.updateContainerFilter.bind(_this);\n\t    _this.resetFilters = _this.resetFilters.bind(_this);\n\t    _this.mapFormOptions = _this.mapFormOptions.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankIndex, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      this.loadPage();\n\t    }\n\t  }, {\n\t    key: 'loadPage',\n\t    value: function loadPage() {\n\t      this.fetchSpecimenData();\n\t      this.fetchFormOptions();\n\t      this.fetchContainerData();\n\t    }\n\t\n\t    /**\n\t     * Retrieve data from the provided URL and save it in state\n\t     * Additionaly add hiddenHeaders to global loris variable\n\t     * for easy access by columnFormatter.\n\t     */\n\t\n\t  }, {\n\t    key: 'fetchSpecimenData',\n\t    value: function fetchSpecimenData() {\n\t      $.ajax(this.props.specimenDataURL, {\n\t        method: \"GET\",\n\t        dataType: 'json',\n\t        success: function (data) {\n\t          this.setState({\n\t            specimenData: data,\n\t            isLoaded: true\n\t          });\n\t        }.bind(this),\n\t        error: function error(_error) {\n\t          console.error(_error);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'fetchContainerData',\n\t    value: function fetchContainerData() {\n\t      $.ajax(this.props.containerDataURL, {\n\t        method: \"GET\",\n\t        dataType: 'json',\n\t        success: function (data) {\n\t          this.setState({\n\t            containerData: data,\n\t            isLoaded: true\n\t          });\n\t        }.bind(this),\n\t        error: function error(_error2) {\n\t          console.error(_error2);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'fetchFormOptions',\n\t    value: function fetchFormOptions() {\n\t      $.ajax(this.props.formDataURL, {\n\t        method: \"GET\",\n\t        dataType: 'json',\n\t        success: function (data) {\n\t          this.setState({\n\t            formOptions: data,\n\t            isLoaded: true\n\t          });\n\t        }.bind(this),\n\t        error: function error(_error3) {\n\t          console.error(_error3);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'updateSpecimenFilter',\n\t    value: function updateSpecimenFilter(specimenFilter) {\n\t      this.setState({ specimenFilter: specimenFilter });\n\t    }\n\t\n\t    // This works,\n\t    // but there must be a way to do this with just one updateFilter function\n\t\n\t  }, {\n\t    key: 'updateContainerFilter',\n\t    value: function updateContainerFilter(containerFilter) {\n\t      this.setState({ containerFilter: containerFilter });\n\t    }\n\t  }, {\n\t    key: 'resetFilters',\n\t    value: function resetFilters() {\n\t      this.refs.biobankFilter.clearFilter();\n\t    }\n\t\n\t    //map options for forms\n\t\n\t  }, {\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(rawObject, targetAttribute) {\n\t      var data = {};\n\t      for (var id in rawObject) {\n\t        data[id] = rawObject[id][targetAttribute];\n\t      }\n\t\n\t      return data;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Waiting for async data to load\n\t      if (!this.state.isLoaded) {\n\t        return React.createElement(_Loader2.default, null);\n\t      }\n\t\n\t      var addSpecimenButton = void 0;\n\t      var poolSpecimenButton = void 0;\n\t      var addContainerButton = void 0;\n\t      if (loris.userHasPermission('biobank_write')) {\n\t\n\t        /**\n\t         * Map Options for Form Select Elements of Specimen Form\n\t         */\n\t        var specimenTypes = this.mapFormOptions(this.state.formOptions.specimenTypes, 'type');\n\t        var containerTypesPrimary = this.mapFormOptions(this.state.formOptions.containerTypesPrimary, 'label');\n\t\n\t        addSpecimenButton = React.createElement(\n\t          _FormModal2.default,\n\t          {\n\t            title: 'Add New Specimen',\n\t            buttonClass: 'action-button add',\n\t            buttonContent: '+',\n\t            style: { display: 'inline-block' }\n\t          },\n\t          React.createElement(_specimenForm2.default, {\n\t            specimenTypes: specimenTypes,\n\t            containerTypesPrimary: containerTypesPrimary,\n\t            containersNonPrimary: this.state.formOptions.containersNonPrimary,\n\t            specimenTypeAttributes: this.state.formOptions.specimenTypeAttributes,\n\t            attributeDatatypes: this.state.formOptions.attributeDatatypes,\n\t            attributeOptions: this.state.formOptions.attributeOptions,\n\t            capacities: this.state.formOptions.capacities,\n\t            containerDimensions: this.state.formOptions.containerDimensions,\n\t            containerCoordinates: this.state.formOptions.containerCoordinates,\n\t            specimenTypeUnits: this.state.formOptions.specimenTypeUnits,\n\t            pSCIDs: this.state.formOptions.pSCIDs,\n\t            visits: this.state.formOptions.visits,\n\t            sessionData: this.state.formOptions.sessionData,\n\t            action: loris.BaseURL + '/biobank/ajax/submitData.php?action=submitSpecimenForm',\n\t            refreshParent: this.loadPage\n\t          })\n\t        );\n\t\n\t        var poolSpecimenButtonContent = React.createElement('span', { className: 'glyphicon glyphicon-resize-small' });\n\t\n\t        poolSpecimenButton = React.createElement(\n\t          _FormModal2.default,\n\t          {\n\t            title: 'Pool Specimens',\n\t            buttonClass: 'action-button pool',\n\t            buttonContent: poolSpecimenButtonContent,\n\t            style: { display: 'inline-block' }\n\t          },\n\t          React.createElement(_poolSpecimenForm2.default, {\n\t            specimenTypes: specimenTypes,\n\t            containerTypesPrimary: containerTypesPrimary,\n\t            containersNonPrimary: this.state.formOptions.containersNonPrimary,\n\t            specimenTypeAttributes: this.state.formOptions.specimenTypeAttributes,\n\t            specimenProtocols: this.state.formOptions.specimenProtocols,\n\t            specimenProtocolAttributes: this.state.formOptions.specimenProtocolAttributes,\n\t            attributeDatatypes: this.state.formOptions.attributeDatatypes,\n\t            attributeOptions: this.state.formOptions.attributeOptions,\n\t            capacities: this.state.formOptions.capacities,\n\t\n\t            containerDimensions: this.state.formOptions.containerDimensions,\n\t            containerCoordinates: this.state.formOptions.containerCoordinates,\n\t            specimenTypeUnits: this.state.formOptions.specimenTypeUnits,\n\t            specimenUnits: this.state.formOptions.specimenUnits,\n\t            pSCIDs: this.state.formOptions.pSCIDs,\n\t            sessionData: this.state.formOptions.sessionData,\n\t            specimenRequest: loris.BaseURL + '/biobank/ajax/requestData.php?action=getSpecimenDataFromBarcode',\n\t            refreshParent: this.loadPage,\n\t            action: loris.BaseURL + '/biobank/ajax/submitData.php?action=submitPoolForm'\n\t          })\n\t        );\n\t\n\t        var containerTypesNonPrimary = this.mapFormOptions(this.state.formOptions.containerTypesNonPrimary, 'label');\n\t        var containerStati = this.mapFormOptions(this.state.formOptions.containerStati, 'status');\n\t\n\t        addContainerButton = React.createElement(\n\t          _FormModal2.default,\n\t          {\n\t            title: 'Add New Container',\n\t            buttonClass: 'action-button add',\n\t            buttonContent: '+',\n\t            style: { display: 'inline-block' }\n\t          },\n\t          React.createElement(_containerForm2.default, {\n\t            containerTypesNonPrimary: containerTypesNonPrimary,\n\t            sites: this.state.formOptions.sites,\n\t            containerStati: containerStati,\n\t            action: loris.BaseURL + '/biobank/ajax/submitData.php?action=saveContainer',\n\t            refreshParent: this.loadPage\n\t          })\n\t        );\n\t      }\n\t\n\t      //Look at CCNA code from Zaliqa to modify this to be more streamline\n\t      var tabList = [{ id: \"specimens\", label: \"Specimens\" }, { id: \"containers\", label: \"Containers\" }];\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { id: 'biobank-page' },\n\t        React.createElement(\n\t          _Tabs.Tabs,\n\t          { tabs: tabList, defaultTab: 'specimens', updateURL: true },\n\t          React.createElement(\n\t            _Tabs.TabPane,\n\t            { TabId: tabList[0].id },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'row' },\n\t              React.createElement(\n\t                'div',\n\t                { className: 'col-lg-10' },\n\t                React.createElement(\n\t                  _FilterForm2.default,\n\t                  {\n\t                    Module: 'biobank',\n\t                    name: 'specimen_filter',\n\t                    id: 'specimen_filter',\n\t                    ref: 'specimenFilter',\n\t                    columns: 3,\n\t                    formElements: this.state.specimenData.form,\n\t                    onUpdate: this.updateSpecimenFilter,\n\t                    filter: this.state.specimenFilter\n\t                  },\n\t                  React.createElement('br', null),\n\t                  React.createElement(StaticElement, null),\n\t                  React.createElement(StaticElement, null),\n\t                  React.createElement(ButtonElement, { label: 'Clear Filters', type: 'reset', onUserInput: this.resetFilters })\n\t                )\n\t              ),\n\t              React.createElement(\n\t                'div',\n\t                { className: 'col-lg-2' },\n\t                React.createElement(\n\t                  'span',\n\t                  { className: 'action' },\n\t                  addSpecimenButton,\n\t                  React.createElement(\n\t                    'div',\n\t                    { className: 'action-title' },\n\t                    'Add Specimen'\n\t                  )\n\t                ),\n\t                React.createElement('br', null),\n\t                React.createElement('br', null),\n\t                React.createElement(\n\t                  'span',\n\t                  { className: 'action' },\n\t                  poolSpecimenButton,\n\t                  React.createElement(\n\t                    'div',\n\t                    { className: 'action-title' },\n\t                    'Pool Specimens'\n\t                  )\n\t                )\n\t              )\n\t            ),\n\t            React.createElement(StaticDataTable, {\n\t              Data: this.state.specimenData.Data,\n\t              Headers: this.state.specimenData.Headers,\n\t              Filter: this.state.specimenFilter,\n\t              getFormattedCell: _columnFormatterSpecimen2.default\n\t            })\n\t          ),\n\t          React.createElement(\n\t            _Tabs.TabPane,\n\t            { TabId: tabList[1].id },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'row' },\n\t              React.createElement(\n\t                'div',\n\t                { className: 'col-lg-10' },\n\t                React.createElement(\n\t                  _FilterForm2.default,\n\t                  {\n\t                    Module: 'biobank',\n\t                    name: 'container_filter',\n\t                    id: 'container_filter',\n\t                    ref: 'containerFilter',\n\t                    columns: 3,\n\t                    formElements: this.state.containerData.form,\n\t                    onUpdate: this.updateContainerFilter,\n\t                    filter: this.state.containerFilter\n\t                  },\n\t                  React.createElement('br', null),\n\t                  React.createElement(StaticElement, null),\n\t                  React.createElement(StaticElement, null),\n\t                  React.createElement(ButtonElement, { label: 'Clear Filters', type: 'reset', onUserInput: this.resetFilters })\n\t                )\n\t              ),\n\t              React.createElement(\n\t                'div',\n\t                { className: 'col-lg-2' },\n\t                React.createElement(\n\t                  'span',\n\t                  { className: 'action' },\n\t                  addContainerButton,\n\t                  React.createElement(\n\t                    'div',\n\t                    { className: 'action-title' },\n\t                    'New Container'\n\t                  )\n\t                )\n\t              )\n\t            ),\n\t            React.createElement(StaticDataTable, {\n\t              Data: this.state.containerData.Data,\n\t              Headers: this.state.containerData.Headers,\n\t              Filter: this.state.containerFilter,\n\t              getFormattedCell: _columnFormatterContainer2.default\n\t            })\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return BiobankIndex;\n\t}(React.Component);\n\t\n\t$(function () {\n\t  var biobankIndex = React.createElement(\n\t    'div',\n\t    { className: 'page-biobank' },\n\t    React.createElement(BiobankIndex, {\n\t      specimenDataURL: loris.BaseURL + '/biobank/?format=json',\n\t      containerDataURL: loris.BaseURL + '/biobank/ajax/requestData.php?action=getContainerFilterData',\n\t      formDataURL: loris.BaseURL + '/biobank/ajax/requestData.php?action=getFormOptions'\n\t    })\n\t  );\n\t\n\t  ReactDOM.render(biobankIndex, document.getElementById(\"lorisworkspace\"));\n\t});\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Panel = __webpack_require__(2);\n\t\n\tvar _Panel2 = _interopRequireDefault(_Panel);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file contains React component for FilterForm\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Loris Team\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.1.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/**\n\t * FilterForm component.\n\t * A wrapper for form elements inside a selection filter.\n\t *\n\t * Adds necessary filter callbacks to all children and passes them to FormElement\n\t * for proper rendering.\n\t *\n\t * Keeps track of filter object and sends it to parent on every update.\n\t *\n\t * //HACK/NOTE: Loris has special behaviour for `candID` attribute in the query string,\n\t * making it impossible to use it for selection filters. This components renames\n\t * all `candID` fields to `candidateID` automatically before appending them to URL.\n\t *\n\t */\n\tvar FilterForm = function (_React$Component) {\n\t  _inherits(FilterForm, _React$Component);\n\t\n\t  function FilterForm(props) {\n\t    _classCallCheck(this, FilterForm);\n\t\n\t    // Bind component instance to custom methods\n\t    var _this = _possibleConstructorReturn(this, (FilterForm.__proto__ || Object.getPrototypeOf(FilterForm)).call(this, props));\n\t\n\t    _this.clearFilter = _this.clearFilter.bind(_this);\n\t    _this.getFormChildren = _this.getFormChildren.bind(_this);\n\t    _this.setFilter = _this.setFilter.bind(_this);\n\t    _this.onElementUpdate = _this.onElementUpdate.bind(_this);\n\t\n\t    // Keeps track of querystring values\n\t    // Saved as class variable instead of keeping in state\n\t    _this.queryString = QueryString.get();\n\t    return _this;\n\t  }\n\t\n\t  _createClass(FilterForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var filter = {};\n\t      var queryString = this.queryString;\n\t\n\t      // Initiaze filter using querystring value\n\t      Object.keys(queryString).forEach(function (key) {\n\t        var filterKey = key === 'candidateID' ? 'candID' : key;\n\t        filter[filterKey] = {\n\t          value: queryString[key],\n\t          exactMatch: false\n\t        };\n\t      });\n\t\n\t      // Update parent component\n\t      this.props.onUpdate(filter);\n\t    }\n\t\n\t    /**\n\t     * Clear the filter object, querystring and input fields\n\t     */\n\t\n\t  }, {\n\t    key: 'clearFilter',\n\t    value: function clearFilter() {\n\t      this.queryString = QueryString.clear(this.props.Module);\n\t      this.props.onUpdate({});\n\t    }\n\t\n\t    /**\n\t     * Itterates through FilterForm children, sets necessary callback functions\n\t     * and initializes filterTable\n\t     *\n\t     * @return {Array} formChildren - array of children with necessary props\n\t     */\n\t\n\t  }, {\n\t    key: 'getFormChildren',\n\t    value: function getFormChildren() {\n\t      var formChildren = [];\n\t      React.Children.forEach(this.props.children, function (child, key) {\n\t        // If child is a React component (i.e not a simple DOM element)\n\t        if (React.isValidElement(child) && typeof child.type === \"function\" && child.props.onUserInput) {\n\t          var callbackFunc = child.props.onUserInput;\n\t          var callbackName = callbackFunc.name;\n\t          var elementName = child.type.displayName;\n\t          var queryFieldName = child.props.name === 'candID' ? 'candidateID' : child.props.name;\n\t          var filterValue = this.queryString[queryFieldName];\n\t          // If callback function was not set, set it to onElementUpdate() for form\n\t          // elements and to clearFilter() for <ButtonElement type='reset'/>.\n\t          if (callbackName === \"onUserInput\") {\n\t            if (elementName === \"ButtonElement\" && child.props.type === \"reset\") {\n\t              callbackFunc = this.clearFilter;\n\t            } else {\n\t              callbackFunc = this.onElementUpdate.bind(null, elementName);\n\t            }\n\t          }\n\t          // Pass onUserInput and value props to all children\n\t          formChildren.push(React.cloneElement(child, {\n\t            onUserInput: callbackFunc,\n\t            value: filterValue ? filterValue : '',\n\t            key: key\n\t          }));\n\t          // Initialize filter for StaticDataTable\n\t          this.setFilter(elementName, child.props.name, filterValue);\n\t        } else {\n\t          formChildren.push(React.cloneElement(child, { key: key }));\n\t        }\n\t      }.bind(this));\n\t\n\t      return formChildren;\n\t    }\n\t\n\t    /**\n\t     * Appends entry to filter object or deletes it if value is\n\t     * empty.\n\t     *\n\t     * Sets exactMatch to true for all SelectElements (i.e dropdowns)\n\t     * in order to force StaticDataTable to do exact comparaison\n\t     *\n\t     * @param {string} type - form element type (i.e component name)\n\t     * @param {string} key - the name of the form element\n\t     * @param {string} value - the value of the form element\n\t     *\n\t     * @return {{}} filter - filterData\n\t     */\n\t\n\t  }, {\n\t    key: 'setFilter',\n\t    value: function setFilter(type, key, value) {\n\t      var filter = {};\n\t      if (this.props.filter) {\n\t        filter = JSON.parse(JSON.stringify(this.props.filter));\n\t      }\n\t      if (key) {\n\t        filter[key] = {};\n\t        if (value.length === 0) {\n\t          filter[key].value = '';\n\t        } else if (key && value) {\n\t          filter[key].value = value;\n\t        }\n\t        filter[key].exactMatch = type === \"SelectElement\";\n\t      } else if (filter && key && value === '') {\n\t        delete filter[key];\n\t      }\n\t      return filter;\n\t    }\n\t\n\t    /**\n\t     * Sets filter object and querystring to reflect values of input fields\n\t     *\n\t     * @param {string} type - form element type (i.e component name)\n\t     * @param {string} fieldName - the name of the form element\n\t     * @param {string} fieldValue - the value of the form element\n\t     */\n\t\n\t  }, {\n\t    key: 'onElementUpdate',\n\t    value: function onElementUpdate(type, fieldName, fieldValue) {\n\t      // Make sure key is of string type and value is of string or object type\n\t      // before sending them to querystring\n\t      if (typeof fieldName !== 'string' || typeof fieldValue !== 'string' && (typeof fieldValue === 'undefined' ? 'undefined' : _typeof(fieldValue)) !== 'object') {\n\t        return;\n\t      }\n\t\n\t      // Update query string\n\t      var queryFieldName = fieldName === 'candID' ? 'candidateID' : fieldName;\n\t      this.queryString = QueryString.set(this.queryString, queryFieldName, fieldValue);\n\t\n\t      // Update filter and get new filter object\n\t      var filter = this.setFilter(type, fieldName, fieldValue);\n\t      this.props.onUpdate(filter);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Get formatted children\n\t      var formChildren = this.getFormChildren();\n\t      var formElements = this.props.formElements;\n\t\n\t      if (formElements) {\n\t        Object.keys(formElements).forEach(function (fieldName) {\n\t          var queryFieldName = fieldName === 'candID' ? 'candidateID' : fieldName;\n\t          formElements[fieldName].onUserInput = this.onElementUpdate.bind(null, fieldName);\n\t          formElements[fieldName].value = this.queryString[queryFieldName];\n\t        }.bind(this));\n\t      }\n\t\n\t      return React.createElement(\n\t        _Panel2.default,\n\t        {\n\t          id: this.props.id,\n\t          height: this.props.height,\n\t          title: this.props.title\n\t        },\n\t        React.createElement(\n\t          FormElement,\n\t          this.props,\n\t          formChildren\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return FilterForm;\n\t}(React.Component);\n\t\n\tFilterForm.defaultProps = {\n\t  id: 'selection-filter',\n\t  height: '100%',\n\t  title: 'Selection Filter',\n\t  onUpdate: function onUpdate() {\n\t    console.warn('onUpdate() callback is not set!');\n\t  }\n\t};\n\tFilterForm.propTypes = {\n\t  Module: React.PropTypes.string.isRequired,\n\t  filter: React.PropTypes.object.isRequired,\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  onUpdate: React.PropTypes.func\n\t};\n\t\n\texports.default = FilterForm;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Panel\n\t *\n\t * @author Alex I.\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Panel component\n\t * Wraps children in a collapsible bootstrap panel\n\t */\n\tvar Panel = function (_React$Component) {\n\t  _inherits(Panel, _React$Component);\n\t\n\t  function Panel(props) {\n\t    _classCallCheck(this, Panel);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).call(this, props));\n\t\n\t    _this.state = {\n\t      collapsed: _this.props.initCollapsed\n\t    };\n\t\n\t    // Initialize panel class based on collapsed status\n\t    _this.panelClass = _this.props.initCollapsed ? \"panel-collapse collapse\" : \"panel-collapse collapse in\";\n\t\n\t    _this.toggleCollapsed = _this.toggleCollapsed.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Panel, [{\n\t    key: \"toggleCollapsed\",\n\t    value: function toggleCollapsed() {\n\t      this.setState({ collapsed: !this.state.collapsed });\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      // Change arrow direction based on collapse status\n\t      var glyphClass = this.state.collapsed ? \"glyphicon pull-right glyphicon-chevron-down\" : \"glyphicon pull-right glyphicon-chevron-up\";\n\t\n\t      var pencilGlyph = void 0;\n\t      if (this.props.edit) {\n\t        pencilGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-pencil\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.edit\n\t        });\n\t      }\n\t\n\t      var plusGlyph = void 0;\n\t      if (this.props.add) {\n\t        plusGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-plus\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.add\n\t        });\n\t      }\n\t\n\t      var removeGlyph = void 0;\n\t      if (this.props.cancel) {\n\t        removeGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-remove\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.cancel\n\t        });\n\t      }\n\t\n\t      // Add panel header, if title is set\n\t      var panelHeading = this.props.title ? React.createElement(\n\t        \"div\",\n\t        {\n\t          className: \"panel-heading\"\n\t        },\n\t        React.createElement(\"span\", {\n\t          className: glyphClass,\n\t          onClick: this.toggleCollapsed,\n\t          \"data-toggle\": \"collapse\",\n\t          \"data-target\": '#' + this.props.id,\n\t          style: { cursor: 'pointer' }\n\t        }),\n\t        pencilGlyph,\n\t        plusGlyph,\n\t        removeGlyph,\n\t        this.props.title\n\t      ) : '';\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"panel panel-primary\" },\n\t        panelHeading,\n\t        React.createElement(\n\t          \"div\",\n\t          { id: this.props.id, className: this.panelClass, role: \"tabpanel\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"panel-body\", style: { height: this.props.height } },\n\t            this.props.children\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Panel;\n\t}(React.Component);\n\t\n\tPanel.propTypes = {\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  edit: React.PropTypes.func,\n\t  add: React.PropTypes.func\n\t};\n\tPanel.defaultProps = {\n\t  initCollapsed: false,\n\t  id: 'default-panel',\n\t  height: '100%'\n\t};\n\t\n\texports.default = Panel;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _barcodeForm = __webpack_require__(4);\n\t\n\tvar _barcodeForm2 = _interopRequireDefault(_barcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankSpecimenForm = function (_React$Component) {\n\t  _inherits(BiobankSpecimenForm, _React$Component);\n\t\n\t  function BiobankSpecimenForm(props) {\n\t    _classCallCheck(this, BiobankSpecimenForm);\n\t\n\t    // get Id of available status\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimenForm.__proto__ || Object.getPrototypeOf(BiobankSpecimenForm)).call(this, props));\n\t\n\t    var availableId = Object.keys(_this.props.containerStati).find(function (key) {\n\t      return _this.props.containerStati[key] === 'Availabale';\n\t    });\n\t\n\t    _this.state = {\n\t      errorMessage: null,\n\t      formErrors: {},\n\t      barcodeList: {\n\t        1: {\n\t          specimen: {},\n\t          container: { statusId: availableId, temperature: 20 }\n\t        }\n\t      },\n\t      countBarcodes: 1\n\t    };\n\t\n\t    _this.saveBarcodeList = _this.saveBarcodeList.bind(_this);\n\t    _this.save = _this.save.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimenForm, [{\n\t    key: 'saveBarcodeList',\n\t    value: function saveBarcodeList() {\n\t      var barcodeList = this.state.barcodeList;\n\t      for (var barcode in barcodeList) {\n\t        this.save(barcodeList[barcode].container, this.props.saveContainer);\n\t        this.save(barcodeList[barcode].specimen, this.props.saveSpecimen);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'save',\n\t    value: function save(entity, url) {\n\t      var entityObject = new FormData();\n\t      for (var key in entity) {\n\t        if (entity[key] !== \"\") {\n\t          entityObject.append(key, entity[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: url,\n\t        data: entityObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          this.props.refreshParent();\n\t          swal(\"Save Successful!\", \"\", \"success\");\n\t          this.props.onSuccess();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setContainer',\n\t    value: function setContainer(name, value) {\n\t      var siteId = this.state.siteId;\n\t      var containerList = this.state.containerList;\n\t\n\t      if (name === 'siteId') {\n\t        siteId = value;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'setSpecimen',\n\t    value: function setSpecimen(name, value) {}\n\t  }, {\n\t    key: 'setBarcodeList',\n\t    value: function setBarcodeList(barcodeData, barcodeKey) {\n\t      var barcodeList = this.state.barcodeList;\n\t      barcodeList[barcodeKey] = barcodeData;\n\t\n\t      this.setState({ barcodeList: barcodeList });\n\t    }\n\t  }, {\n\t    key: 'addBarcode',\n\t    value: function addBarcode() {\n\t      var barcodeList = this.state.barcodeList;\n\t      var count = this.state.countBarcodes;\n\t\n\t      barcodeList[count + 1] = {\n\t        specimen: {},\n\t        container: {}\n\t      };\n\t\n\t      this.setState({\n\t        barcodeList: barcodeList,\n\t        countBarcodes: count + 1\n\t      });\n\t    }\n\t  }, {\n\t    key: 'copyBarcode',\n\t    value: function copyBarcode(key, multiplier) {\n\t      var count = this.state.countBarcodes;\n\t      var nextKey = count + 1;\n\t      var barcodeList = this.state.barcodeList;\n\t\n\t      for (var i = 1; i <= multiplier; i++) {\n\t        barcodeList[nextKey] = JSON.parse(JSON.stringify(barcodeList[key]));\n\t        delete barcodeList[nextKey].barcode;\n\t        nextKey++;\n\t      }\n\t\n\t      this.setState({\n\t        barcodeList: barcodeList,\n\t        countBarcodes: nextKey\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removeBarcode',\n\t    value: function removeBarcode(key) {\n\t      var barcodeList = this.state.barcodeList;\n\t      delete barcodeList[key];\n\t\n\t      this.setState({\n\t        barcodeList: barcodeList\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n\t      var barcodeListArray = Object.keys(this.state.barcodeFormList);\n\t      var barcodes = [];\n\t      var i = 1;\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        var _loop = function _loop() {\n\t          var key = _step.value;\n\t\n\t          barcodes.push(React.createElement(_barcodeForm2.default, {\n\t            key: key,\n\t            barcodeKey: key,\n\t            id: i,\n\t            barcodeData: _this2.state.barcodeFormList[key] ? _this2.state.barcodeFormList[key] : null,\n\t            removeBarcode: barcodeListArray.length !== 1 ? function () {\n\t              return _this2.removeBarcode(key);\n\t            } : null,\n\t            addBarcode: i == barcodeListArray.length ? _this2.addBarcode : null,\n\t            copyBarcode: i == barcodeListArray.length && _this2.state.barcodeList[key] ? _this2.copyBarcode.bind(_this2, key) : null,\n\t            setParentFormData: _this2.setBarcodeList,\n\t            onChange: _this2.props.onChange,\n\t            specimenTypes: _this2.props.specimenTypes,\n\t            containerTypesPrimary: _this2.props.containerTypesPrimary,\n\t            containersNonPrimary: _this2.props.containersNonPrimary,\n\t            specimenTypeAttributes: _this2.props.specimenTypeAttributes,\n\t            attributeDatatypes: _this2.props.attributeDatatypes,\n\t            attributeOptions: _this2.props.attributeOptions,\n\t            capacities: _this2.props.capacities,\n\t            containerDimensions: _this2.props.containerDimensions,\n\t            containerCoordinates: _this2.props.containerCoordinates,\n\t            specimenTypeUnits: _this2.props.specimenTypeUnits,\n\t            units: _this2.props.units\n\t          }));\n\t\n\t          i++;\n\t        };\n\t\n\t        for (var _iterator = barcodeListArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          _loop();\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t\n\t      var globalFields = void 0;\n\t      var remainingQuantityFields = void 0;\n\t      if (this.props.parentSpecimenIds) {\n\t        globalFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(StaticElement, {\n\t            label: 'Parent Specimen',\n\t            text: this.props.parentSpecimenBarcodes\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'PSCID',\n\t            text: this.props.pscid\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Visit Label',\n\t            text: this.props.visit\n\t          })\n\t        );\n\t\n\t        //TODO: It may be wise to make unit static and forced, or atleast prepopulated --\n\t        remainingQuantityFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Remaining Quantity',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: this.props.specimenUnits,\n\t            onUserInput: this.setFormData,\n\t            emptyOption: false,\n\t            required: true,\n\t            value: this.state.formData.unitId\n\t          })\n\t        );\n\t      } else {\n\t        globalFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SearchableDropdown, {\n\t            name: 'pscid',\n\t            label: 'PSCID',\n\t            options: this.props.pSCIDs,\n\t            onUserInput: this.setFormData,\n\t            ref: 'pscid',\n\t            required: true,\n\t            value: this.state.formData.pscid,\n\t            placeHolder: 'Search for a PSCID'\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'visitLabel',\n\t            label: 'Visit Label',\n\t            options: this.state.visits,\n\t            onUserInput: this.setFormData,\n\t            ref: 'visitLabel',\n\t            required: true,\n\t            value: this.state.formData.visitLabel,\n\t            disabled: this.state.formData.pscid ? false : true\n\t          })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenForm',\n\t          id: 'specimenForm',\n\t          onSubmit: this.saveBarcodeList,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-9 col-xs-offset-1' },\n\t            globalFields,\n\t            remainingQuantityFields\n\t          )\n\t        ),\n\t        barcodes,\n\t        React.createElement(ButtonElement, {\n\t          label: 'Submit',\n\t          columnSize: 'col-sm-2 col-sm-offset-10'\n\t        })\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimenForm;\n\t}(React.Component);\n\t\n\tBiobankSpecimenForm.propTypes = {};\n\t\n\texports.default = BiobankSpecimenForm;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _collectionForm = __webpack_require__(5);\n\t\n\tvar _collectionForm2 = _interopRequireDefault(_collectionForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Barcode Form\n\t *\n\t * Acts a subform for BiobankSpecimenForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenBarcodeForm = function (_React$Component) {\n\t  _inherits(SpecimenBarcodeForm, _React$Component);\n\t\n\t  function SpecimenBarcodeForm(props) {\n\t    _classCallCheck(this, SpecimenBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenBarcodeForm.__proto__ || Object.getPrototypeOf(SpecimenBarcodeForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      formErrors: {},\n\t      collapsed: true,\n\t      copyMultiplier: 1\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setChildFormData = _this.setChildFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    _this.toggleCollapse = _this.toggleCollapse.bind(_this);\n\t    _this.setCopyMultiplier = _this.setCopyMultiplier.bind(_this);\n\t    _this.copy = _this.copy.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenBarcodeForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      if (this.props.formData) {\n\t        var formData = this.props.formData;\n\t\n\t        this.setState({\n\t          formData: formData\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'toggleCollapse',\n\t    value: function toggleCollapse() {\n\t      this.setState({ collapsed: !this.state.collapsed });\n\t    }\n\t  }, {\n\t    key: 'setCopyMultiplier',\n\t    value: function setCopyMultiplier(e) {\n\t      var copyMultiplier = e.target.value;\n\t\n\t      this.setState({\n\t        copyMultiplier: copyMultiplier\n\t      });\n\t    }\n\t  }, {\n\t    key: 'copy',\n\t    value: function copy() {\n\t      this.props.copyBarcodeForm(this.state.copyMultiplier);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var addBarcodeFormButton = void 0;\n\t      var addBarcodeFormText = void 0;\n\t      var copyBarcodeFormButton = void 0;\n\t      var copyBarcodeFormText = void 0;\n\t      if (this.props.addBarcodeForm) {\n\t        addBarcodeFormButton = React.createElement(\n\t          'span',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: this.props.addBarcodeForm\n\t            },\n\t            '+'\n\t          )\n\t        );\n\t\n\t        addBarcodeFormText = React.createElement(\n\t          'span',\n\t          { className: 'action-title' },\n\t          'New Entry'\n\t        );\n\t      }\n\t\n\t      if (this.props.copyBarcodeForm) {\n\t        copyBarcodeFormButton = React.createElement(\n\t          'span',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: this.copy\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-duplicate' })\n\t          )\n\t        );\n\t        copyBarcodeFormText = React.createElement(\n\t          'span',\n\t          { className: 'action-title' },\n\t          React.createElement('input', {\n\t            className: 'form-control input-sm',\n\t            type: 'number',\n\t            min: '1',\n\t            max: '50',\n\t            style: { width: 50, display: 'inline' },\n\t            onChange: this.setCopyMultiplier,\n\t            value: this.state.copyMultiplier\n\t          }),\n\t          'Copies'\n\t        );\n\t      }\n\t\n\t      var removeBarcodeFormButton = void 0;\n\t      if (this.props.removeBarcodeForm) {\n\t        var glyphStyle = {\n\t          color: '#DDDDDD',\n\t          marginLeft: 10,\n\t          cursor: 'pointer',\n\t          fontSize: 15\n\t        };\n\t\n\t        removeBarcodeFormButton = React.createElement('span', {\n\t          className: 'glyphicon glyphicon-remove',\n\t          onClick: this.props.removeBarcodeForm,\n\t          style: glyphStyle\n\t        });\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankBarcode'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-9 col-xs-offset-1' },\n\t            React.createElement(\n\t              'div',\n\t              null,\n\t              React.createElement(TextboxElement, {\n\t                name: 'barcode',\n\t                label: 'Barcode ' + this.props.id,\n\t                onUserInput: this.setFormData,\n\t                ref: 'barcode',\n\t                required: true,\n\t                value: this.state.formData.barcode\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-1', style: { paddingLeft: 0, marginTop: 10 } },\n\t            React.createElement('span', {\n\t              className: this.state.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up',\n\t              style: { cursor: 'pointer', fontSize: 15, position: 'relative', right: 40 },\n\t              'data-toggle': 'collapse',\n\t              'data-target': '#item-' + this.props.id,\n\t              onClick: this.toggleCollapse\n\t            }),\n\t            removeBarcodeFormButton\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement('div', { className: 'col-xs-2' }),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-8' },\n\t            React.createElement(\n\t              'div',\n\t              { id: 'item-' + this.props.id, className: 'collapse' },\n\t              React.createElement(SelectElement, {\n\t                name: 'specimenType',\n\t                label: 'Specimen Type',\n\t                options: this.props.specimenTypes,\n\t                onUserInput: this.setFormData,\n\t                ref: 'specimenType',\n\t                required: true,\n\t                value: this.state.formData.specimenType\n\t              }),\n\t              React.createElement(SelectElement, {\n\t                name: 'containerType',\n\t                label: 'Container Type',\n\t                options: this.props.containerTypesPrimary,\n\t                onUserInput: this.setFormData,\n\t                ref: 'containerType',\n\t                required: true,\n\t                value: this.state.formData.containerType\n\t              }),\n\t              React.createElement(_collectionForm2.default, {\n\t                formData: this.props.formData,\n\t                setParentFormData: this.setChildFormData,\n\t                onChange: this.props.onChange,\n\t                specimenTypes: this.props.specimenTypes,\n\t                specimenTypeAttributes: this.props.specimenTypeAttributes,\n\t                attributeDatatypes: this.props.attributeDatatypes,\n\t                attributeOptions: this.props.attributeOptions,\n\t                containerTypesPrimary: this.props.containerTypesPrimary,\n\t                containersNonPrimary: this.props.containersNonPrimary,\n\t                containerDimensions: this.props.containerDimensions,\n\t                containerCoordinates: this.props.containerCoordinates,\n\t                specimenTypeUnits: this.props.specimenTypeUnits,\n\t                stati: this.props.stati\n\t              }),\n\t              React.createElement(ContainerParentForm, {\n\t                setParentFormData: this.setContainerParentFormData,\n\t                containersNonPrimary: this.props.containersNonPrimary,\n\t                containerDimensions: this.props.containerDimensions,\n\t                containerCoordinates: this.props.containerCoordinates\n\t              })\n\t            )\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement('div', { className: 'col-xs-4' }),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-3 action' },\n\t              addBarcodeFormButton,\n\t              addBarcodeFormText\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-3 action' },\n\t              copyBarcodeFormButton,\n\t              copyBarcodeFormText\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setChildFormData',\n\t    value: function setChildFormData(collectionFormData) {\n\t      var formData = this.state.formData;\n\t\n\t      for (var field in collectionFormData) {\n\t        formData[field] = collectionFormData[field];\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      this.props.setParentFormData(this.state.formData, this.props.barcodeKey);\n\t    }\n\t  }]);\n\t\n\t  return SpecimenBarcodeForm;\n\t}(React.Component);\n\t\n\tSpecimenBarcodeForm.propTypes = {\n\t  id: React.PropTypes.string,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = SpecimenBarcodeForm;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenCollectionForm = function (_React$Component) {\n\t  _inherits(SpecimenCollectionForm, _React$Component);\n\t\n\t  function SpecimenCollectionForm() {\n\t    _classCallCheck(this, SpecimenCollectionForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenCollectionForm.__proto__ || Object.getPrototypeOf(SpecimenCollectionForm)).call(this));\n\t\n\t    _this.getSpecimenTypeFields = _this.getSpecimenTypeFields.bind(_this);\n\t    _this.setCollectionData = _this.setCollectionData.bind(_this);\n\t    _this.setData = _this.setData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenCollectionForm, [{\n\t    key: 'setCollectionData',\n\t    value: function setCollectionData(name, value) {\n\t      var collection = this.props.specimen.collection;\n\t      collection[name] = value;\n\t      this.props.setSpecimenData('collection', collection);\n\t    }\n\t  }, {\n\t    key: 'setData',\n\t    value: function setData(name, value) {\n\t      var data = this.props.specimen.collection.data;\n\t      data[name] = value;\n\t      this.setCollectionData('data', data);\n\t    }\n\t\n\t    // This generates all the form fields for a given specimen type\n\t\n\t  }, {\n\t    key: 'getSpecimenTypeFields',\n\t    value: function getSpecimenTypeFields(fieldsObject) {\n\t      var _this2 = this;\n\t\n\t      var specimenTypeFields = Object.keys(fieldsObject).map(function (attribute) {\n\t        var datatype = _this2.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"text\" || datatype === \"number\") {\n\t\n\t          if (fieldsObject[attribute]['refTableId'] == null) {\n\t            return React.createElement(TextboxElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              onUserInput: _this2.setData,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this2.props.specimen.collection.data[attribute]\n\t            });\n\t          }\n\t\n\t          if (fieldsObject[attribute]['refTableId'] !== null) {\n\t            return React.createElement(SelectElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              options: _this2.props.attributeOptions[fieldsObject[attribute]['refTableId']],\n\t              onUserInput: _this2.setData,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this2.props.specimen.collection.data[attribute]\n\t            });\n\t          }\n\t        }\n\t\n\t        if (datatype === \"datetime\") {\n\t          return React.createElement(DateElement, {\n\t            name: attribute,\n\t            label: fieldsObject[attribute]['name'],\n\t            onUserInput: _this2.setData,\n\t            ref: attribute,\n\t            required: fieldsObject[attribute]['required'],\n\t            value: _this2.props.specimen.collection.data[attribute]\n\t          });\n\t        }\n\t\n\t        if (datatype === \"boolean\") {\n\t          // There is currently no CheckboxElement or RadioElement in loris/jsx/Form.js and therefore\n\t          // this is not possible.     \n\t        }\n\t      });\n\t\n\t      return specimenTypeFields;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      var updateButton = void 0;\n\t      if (this.props.specimen) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      }\n\t\n\t      var specimenTypeUnits = {};\n\t      var specimenTypeFields = void 0;\n\t      if (this.props.specimen.typeId) {\n\t\n\t        //This modifies the selections for unit drop down based on the chosen specimen type \n\t        for (var id in this.props.specimenTypeUnits[this.props.specimen.typeId]) {\n\t          specimenTypeUnits[id] = this.props.specimenTypeUnits[this.props.specimen.typeId][id].unit;\n\t        }\n\t\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.props.specimen.typeId];\n\t        if (specimenTypeFieldsObject) {\n\t          specimenTypeFields = this.getSpecimenTypeFields(specimenTypeFieldsObject);\n\t        }\n\t      }\n\t\n\t      var specimenFields = void 0;\n\t      if (this.props.specimen.typeId) {\n\t        specimenFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Quantity',\n\t            onUserInput: this.setCollectionData,\n\t            required: true,\n\t            value: this.props.specimen.collection.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: specimenTypeUnits,\n\t            onUserInput: this.setCollectionData,\n\t            required: true,\n\t            value: this.props.specimen.collection.unitId\n\t          }),\n\t          specimenTypeFields,\n\t          React.createElement(DateElement, {\n\t            name: 'date',\n\t            label: 'Date',\n\t            minYear: '2000',\n\t            maxYear: '2018',\n\t            onUserInput: this.setCollectionData,\n\t            required: true,\n\t            value: this.props.specimen.collection.date\n\t          }),\n\t          React.createElement(TimeElement, {\n\t            name: 'time',\n\t            label: 'Time',\n\t            onUserInput: this.setCollectionData,\n\t            required: true,\n\t            value: this.props.specimen.collection.time\n\t          }),\n\t          React.createElement(TextareaElement, {\n\t            name: 'comments',\n\t            label: 'Comments',\n\t            onUserInput: this.setCollectionData,\n\t            ref: 'comments',\n\t            value: this.props.specimen.collection.comments\n\t          })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankSpecimen',\n\t          onSubmit: this.props.saveSpecimen,\n\t          ref: 'form'\n\t        },\n\t        specimenFields,\n\t        updateButton\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return SpecimenCollectionForm;\n\t}(React.Component);\n\t\n\tSpecimenCollectionForm.propTypes = {};\n\t\n\texports.default = SpecimenCollectionForm;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _barcodeForm = __webpack_require__(4);\n\t\n\tvar _barcodeForm2 = _interopRequireDefault(_barcodeForm);\n\t\n\tvar _specimenForm = __webpack_require__(3);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tvar _preparationForm = __webpack_require__(7);\n\t\n\tvar _preparationForm2 = _interopRequireDefault(_preparationForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\tvar PoolSpecimenForm = function (_React$Component) {\n\t  _inherits(PoolSpecimenForm, _React$Component);\n\t\n\t  function PoolSpecimenForm(props) {\n\t    _classCallCheck(this, PoolSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (PoolSpecimenForm.__proto__ || Object.getPrototypeOf(PoolSpecimenForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      barcodeList: {},\n\t      errorMessage: null,\n\t      formErrors: {},\n\t      barcodeCount: 2,\n\t      preparation: false,\n\t      step: 1\n\t    };\n\t\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    _this.validateForm = _this.validateForm.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setPreparationFormData = _this.setPreparationFormData.bind(_this);\n\t    _this.setSpecimenFormData = _this.setSpecimenFormData.bind(_this);\n\t    _this.submitForm = _this.submitForm.bind(_this);\n\t    _this.mapFormOptions = _this.mapFormOptions.bind(_this);\n\t    _this.setBarcodeCount = _this.setBarcodeCount.bind(_this);\n\t    _this.next = _this.next.bind(_this);\n\t    _this.previous = _this.previous.bind(_this);\n\t    _this.addPreparation = _this.addPreparation.bind(_this);\n\t    _this.removePreparation = _this.removePreparation.bind(_this);\n\t    _this.validate = _this.validate.bind(_this);\n\t    _this.formSwitch = _this.formSwitch.bind(_this);\n\t    _this.preparationSwitch = _this.preparationSwitch.bind(_this);\n\t    _this.runAjax = _this.runAjax.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  //TODO: map options for forms - this is used frequently and may need to be moved to a more global place\n\t\n\t\n\t  _createClass(PoolSpecimenForm, [{\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(originalObject, targetAttribute) {\n\t      var mappedObject = {};\n\t      for (var i in originalObject) {\n\t        mappedObject[i] = originalObject[i][targetAttribute];\n\t      }\n\t\n\t      return mappedObject;\n\t    }\n\t  }, {\n\t    key: 'next',\n\t    value: function next() {\n\t      var _this2 = this;\n\t\n\t      this.validate().then(function (data) {\n\t        _this2.setState({\n\t          poolData: data,\n\t          step: _this2.state.step + 1\n\t        });\n\t      }, function (error) {\n\t        swal(\"Oops!\", error.responseText, \"error\");\n\t      });\n\t    }\n\t  }, {\n\t    key: 'previous',\n\t    value: function previous() {\n\t      this.setState({\n\t        step: this.state.step - 1\n\t      });\n\t    }\n\t  }, {\n\t    key: 'validate',\n\t    value: function validate() {\n\t      return this.runAjax(this.props.specimenRequest, { barcodeList: this.state.barcodeList });\n\t    }\n\t  }, {\n\t    key: 'runAjax',\n\t    value: function runAjax(url, inputData) {\n\t      var _this3 = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        $.ajax(url, {\n\t          method: \"GET\",\n\t          dataType: 'json',\n\t          data: inputData,\n\t          success: function (data) {\n\t            resolve(data);\n\t          }.bind(_this3),\n\t          error: function error(_error, textStatus, errorThrown) {\n\t            reject(_error);\n\t            console.error(_error);\n\t          }\n\t        });\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setBarcodeCount',\n\t    value: function setBarcodeCount(field, value) {\n\t      var barcodeCount = value;\n\t      var barcodeList = this.state.barcodeList;\n\t      for (var barcode in barcodeList) {\n\t        if (barcode > barcodeCount) {\n\t          delete barcodeList[barcode];\n\t        }\n\t      }\n\t\n\t      this.setState({ barcodeCount: barcodeCount, barcodeList: barcodeList });\n\t    }\n\t  }, {\n\t    key: 'formSwitch',\n\t    value: function formSwitch(inputForm, specimenForm) {\n\t      switch (this.state.step) {\n\t        case 1:\n\t          return inputForm;\n\t        case 2:\n\t          return specimenForm;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'preparationSwitch',\n\t    value: function preparationSwitch(preparationButton, preparationForm) {\n\t      switch (this.state.preparation) {\n\t        case false:\n\t          return preparationButton;\n\t        case true:\n\t          return preparationForm;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'addPreparation',\n\t    value: function addPreparation() {\n\t      var _this4 = this;\n\t\n\t      this.validate().then(function (data) {\n\t        _this4.setState({\n\t          poolData: data,\n\t          preparation: true\n\t        });\n\t      }, function (error) {\n\t        swal('Oh no!', error.responseText, 'error');\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removePreparation',\n\t    value: function removePreparation() {\n\t      var formData = this.state.formData;\n\t      //TODO: is it better to set it to empty, or delete it?\n\t      formData.preparationForm = {};\n\t      this.setState({\n\t        preparation: false,\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      //Generates barcodes\n\t      var barcodes = [];\n\t      for (var i = 1; i <= this.state.barcodeCount; i++) {\n\t        barcodes.push(React.createElement(TextboxElement, {\n\t          name: i,\n\t          label: 'Barcode ' + i,\n\t          onUserInput: this.setFormData,\n\t          required: true,\n\t          value: this.state.barcodeList[i],\n\t          errorMessage: this.state.formErrors[i]\n\t        }));\n\t      }\n\t\n\t      var preparationButton = React.createElement(\n\t        'div',\n\t        { className: 'row' },\n\t        React.createElement('div', { className: 'col-xs-4' }),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-xs 4 action' },\n\t          React.createElement(\n\t            'span',\n\t            { className: 'action' },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                className: 'action-button add',\n\t                onClick: this.addPreparation\n\t              },\n\t              '+'\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'action-title' },\n\t            'Add Preparation'\n\t          )\n\t        )\n\t      );\n\t\n\t      var preparationForm = void 0;\n\t      if (this.state.poolData) {\n\t\n\t        var specimenProtocolAttributes = this.props.specimenProtocolAttributes[this.state.poolData.typeId];\n\t\n\t        var specimenProtocols = {};\n\t        for (var id in specimenProtocolAttributes) {\n\t          specimenProtocols[id] = this.props.specimenProtocols[id];\n\t        }\n\t        specimenProtocols = this.mapFormOptions(specimenProtocols, 'protocol');\n\t\n\t        preparationForm = React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-sm-9 col-sm-offset-1' },\n\t            React.createElement(_preparationForm2.default, {\n\t              formData: this.state.formData.preparationForm,\n\t              specimenProtocols: specimenProtocols,\n\t              specimenProtocolAttributes: specimenProtocolAttributes,\n\t              attributeDatatypes: this.props.attributeDatatypes,\n\t              attributeOptions: this.props.attributeOptions,\n\t              setParentFormData: this.setPreparationFormData,\n\t              insertAction: loris.BaseURL + '/biobank/ajax/submitData.php?action=insertSpecimenPreparation'\n\t            }),\n\t            React.createElement(\n\t              'a',\n\t              { className: 'pull-right', style: { cursor: 'pointer' }, onClick: this.removePreparation },\n\t              'Cancel Preparation'\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      var inputForm = React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-sm-9 col-sm-offset-1' },\n\t            React.createElement(StaticElement, {\n\t              label: 'Pooling Note',\n\t              text: 'Select or Scan the specimens to be pooled. Please ensure that they are the same type, and share the same PSCID and Visit Label'\n\t            }),\n\t            React.createElement(NumericElement, {\n\t              label: '\\u2116 of Specimens',\n\t              min: '2',\n\t              max: '100',\n\t              value: this.state.barcodeCount,\n\t              onUserInput: this.setBarcodeCount\n\t            }),\n\t            barcodes\n\t          )\n\t        ),\n\t        this.preparationSwitch(preparationButton, preparationForm),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-sm-3 col-xs-offset-9 action' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'action-title' },\n\t            'Next'\n\t          ),\n\t          React.createElement(\n\t            'span',\n\t            { className: 'action' },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                className: 'action-button update',\n\t                onClick: this.next\n\t              },\n\t              React.createElement('span', { className: 'glyphicon glyphicon-chevron-right' })\n\t            )\n\t          )\n\t        )\n\t      );\n\t\n\t      //TODO: Things here need to be in the proper order!!!\n\t      var specimenForm = void 0;\n\t      if (this.state.poolData) {\n\t\n\t        // This is to provide the options for the output specimens\n\t        var specimenTypes = {};\n\t        if (this.state.poolData.typeId) {\n\t          specimenTypes[this.state.poolData.typeId] = this.props.specimenTypes[this.state.poolData.typeId];\n\t        }\n\t\n\t        var pscid = this.props.pSCIDs[this.state.poolData.candidateId];\n\t        var visit = this.props.sessionData[pscid].visits[this.state.poolData.sessionId];\n\t\n\t        var barcodesArray = Object.values(this.state.barcodeList);\n\t        var barcodesString = barcodesArray.join(', ');\n\t\n\t        // TODO: rather than all specimen units this should really be specific to the\n\t        // type\n\t        var specimenUnits = this.mapFormOptions(this.props.specimenUnits, 'unit');\n\t\n\t        specimenForm = React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-12' },\n\t            React.createElement(_specimenForm2.default, {\n\t              formData: this.state.formData.specimenForm,\n\t              candidateId: this.state.poolData.candidateId,\n\t              pscid: pscid,\n\t              sessionId: this.state.poolData.sessionId,\n\t              visit: visit,\n\t              parentSpecimenBarcodes: barcodesString,\n\t              parentSpecimenIds: this.state.poolData.specimenIds,\n\t              specimenTypes: specimenTypes,\n\t              specimenTypeUnits: this.props.specimenTypeUnits,\n\t              specimenUnits: specimenUnits,\n\t              containerTypesPrimary: this.props.containerTypesPrimary,\n\t              containersNonPrimary: this.props.containersNonPrimary,\n\t              specimenTypeAttributes: this.props.specimenTypeAttributes,\n\t              attributeDatatypes: this.props.attributeDatatypes,\n\t              attributeOptions: this.props.attributeOptions,\n\t              capacities: this.props.capacities,\n\t              containerDimensions: this.props.containerDimensions,\n\t              containerCoordinates: this.props.containerCoordinates,\n\t              setParentFormData: this.setSpecimenFormData,\n\t              action: loris.BaseURL + '/biobank/ajax/submitData.php?action=submitSpecimen',\n\t              refreshParent: this.props.refreshParent\n\t            }),\n\t            React.createElement(ButtonElement, {\n\t              label: 'Submit'\n\t            })\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-sm-3 col-xs-offset-2 action' },\n\t            React.createElement(\n\t              'span',\n\t              { className: 'action' },\n\t              React.createElement(\n\t                'div',\n\t                {\n\t                  className: 'action-button update',\n\t                  onClick: this.previous\n\t                },\n\t                React.createElement('span', { className: 'glyphicon glyphicon-chevron-left' })\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'action-title' },\n\t              'Previous'\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'poolSpecimenForm',\n\t          id: 'poolSpecimenForm',\n\t          onSubmit: this.handleSubmit,\n\t          ref: 'form'\n\t        },\n\t        this.formSwitch(inputForm, specimenForm)\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t  }, {\n\t    key: 'validateForm',\n\t    value: function validateForm(formElement, value) {\n\t      var _this5 = this;\n\t\n\t      var formErrors = this.state.formErrors;\n\t\n\t      //validate barcode regex\n\t      if (formElement === \"barcode\" && value !== \"\") {\n\t        if (!/^hello/.test(this.state.formData.barcode)) {\n\t          formErrors.barcode = true;\n\t        } else {\n\t          formErrors.barcode = false;\n\t        }\n\t      }\n\t\n\t      //validate that quantity is a number and less than capacity\n\t      if (formElement === \"quantity\" && value !== \"\") {\n\t        if (isNaN(value) || value > this.props.capacities[this.state.currentContainerType]) {\n\t          formErrors.quantity = true;\n\t        } else {\n\t          formErrors.quantity = false;\n\t        }\n\t      }\n\t\n\t      //validate datatypes and regex of generated type attributes\n\t      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t      var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t\n\t        var datatype = _this5.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"number\") {\n\t          if (formElement === attribute) {\n\t            if (isNaN(value) && value !== \"\") {\n\t              formErrors[attribute] = true;\n\t            } else {\n\t              formErrors[attribute] = false;\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      this.setState({\n\t        formErrors: formErrors\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Handle form submission\n\t     * @param {object} e - Form submission event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      this.submitForm();\n\t    }\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'submitForm',\n\t    value: function submitForm() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var preparationForm = this.state.formData.preparationForm;\n\t      var specimenForm = this.state.formData.specimenForm;\n\t      formData['preparationForm'] = JSON.stringify(preparationForm);\n\t      formData['specimenForm'] = JSON.stringify(specimenForm);\n\t\n\t      console.log(formData.specimenForm);\n\t      console.log(formData.preparationForm);\n\t\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          //this.props.refreshParent();\n\t          swal(\"Specimens Pooled Successful!\", \"\", \"success\");\n\t          this.props.onSuccess();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Checks if the inputted file name is valid\n\t     *\n\t     * @param {string} requiredFileName - Required file name\n\t     * @param {string} fileName - Provided file name\n\t     * @return {boolean} - true if fileName starts with requiredFileName, false\n\t     *   otherwise\n\t     */\n\t    //  isValidFileName(requiredFileName, fileName) {\n\t    //    if (fileName === null || requiredFileName === null) {\n\t    //      return false;\n\t    //    }\n\t    //\n\t    //    return (fileName.indexOf(requiredFileName) === 0);\n\t    //  }\n\t\n\t    /**\n\t     * Validate the form\n\t     *\n\t     * @param {object} formRefs - Object containing references to React form elements\n\t     * @param {object} formData - Object containing form data inputed by user\n\t     * @return {boolean} - true if all required fields are filled, false otherwise\n\t     */\n\t\n\t  }, {\n\t    key: 'isValidForm',\n\t    value: function isValidForm(formRefs, formData) {\n\t      var isValidForm = true;\n\t\n\t      var requiredFields = {\n\t        pscid: null,\n\t        visitLabel: null\n\t      };\n\t\n\t      Object.keys(requiredFields).map(function (field) {\n\t        if (formData[field]) {\n\t          requiredFields[field] = formData[field];\n\t        } else if (formRefs[field]) {\n\t          formRefs[field].props.hasError = true;\n\t          isValidForm = false;\n\t        }\n\t      });\n\t      this.forceUpdate();\n\t\n\t      return isValidForm;\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      // This lets the modal window know that there is formData\n\t      // and will cause a warning to be thrown of the modal window\n\t      // is exited\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t\n\t      if (formElement === \"pscid\" && value !== \"\" && value !== undefined) {\n\t        this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n\t      }\n\t\n\t      var formData = this.state.formData;\n\t      var barcodeList = this.state.barcodeList;\n\t\n\t      //TODO: there must be a better way to do this\n\t      if (isNaN(formElement)) {\n\t        formData[formElement] = value;\n\t      } else {\n\t        barcodeList[formElement] = value;\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData,\n\t        barcodeList: barcodeList\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setPreparationFormData',\n\t    value: function setPreparationFormData(preparationFormData) {\n\t      var formData = this.state.formData;\n\t      formData.preparationForm = preparationFormData;\n\t\n\t      this.setState({ formData: formData });\n\t    }\n\t  }, {\n\t    key: 'setSpecimenFormData',\n\t    value: function setSpecimenFormData(specimenFormData) {\n\t      var formData = this.state.formData;\n\t      formData.specimenForm = specimenFormData;\n\t\n\t      this.setState({ formData: formData });\n\t    }\n\t  }]);\n\t\n\t  return PoolSpecimenForm;\n\t}(React.Component);\n\t\n\tPoolSpecimenForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired,\n\t  refreshTable: React.PropTypes.func\n\t};\n\t\n\texports.default = PoolSpecimenForm;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenPreparationForm = function (_React$Component) {\n\t  _inherits(SpecimenPreparationForm, _React$Component);\n\t\n\t  function SpecimenPreparationForm() {\n\t    _classCallCheck(this, SpecimenPreparationForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenPreparationForm.__proto__ || Object.getPrototypeOf(SpecimenPreparationForm)).call(this));\n\t\n\t    _this.getSpecimenProtocolFields = _this.getSpecimenProtocolFields.bind(_this);\n\t    _this.setPreparation = _this.setPreparation.bind(_this);\n\t    _this.addData = _this.addData.bind(_this);\n\t    _this.setData = _this.setData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenPreparationForm, [{\n\t    key: 'setPreparation',\n\t    value: function setPreparation(name, value) {\n\t      var preparation = this.props.specimen.preparation;\n\t      preparation[name] = value;\n\t      this.props.setSpecimenData('preparation', preparation);\n\t    }\n\t  }, {\n\t    key: 'addData',\n\t    value: function addData() {\n\t      var preparation = this.props.specimen.preparation;\n\t      preparation.data = {};\n\t      this.props.setSpecimenData('preparation', preparation);\n\t    }\n\t  }, {\n\t    key: 'setData',\n\t    value: function setData(name, value) {\n\t      var data = this.props.specimen.preparation.data;\n\t      data[name] = value;\n\t      this.setPreparation('data', data);\n\t    }\n\t\n\t    // TODO: decouple this code from the collectionForm by make it a React Component\n\t    // This generates all the form fields for a given specimen protocol\n\t\n\t  }, {\n\t    key: 'getSpecimenProtocolFields',\n\t    value: function getSpecimenProtocolFields(fieldsObject) {\n\t      var _this2 = this;\n\t\n\t      var specimenProtocolFields = Object.keys(fieldsObject).map(function (attribute) {\n\t        var datatype = _this2.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\t\n\t        if (datatype === \"text\" || datatype === \"number\") {\n\t          if (fieldsObject[attribute]['refTableId'] == null) {\n\t            return React.createElement(TextboxElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              onUserInput: _this2.setData,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this2.props.specimen.preparation.data[attribute]\n\t            });\n\t          }\n\t\n\t          if (fieldsObject[attribute]['refTableId'] !== null) {\n\t            return React.createElement(SelectElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              options: _this2.props.attributeOptions[fieldsObject[attribute]['refTableId']],\n\t              onUserInput: _this2.setData,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this2.props.specimen.preparation.data[attribute]\n\t            });\n\t          }\n\t        }\n\t\n\t        if (datatype === \"datetime\") {\n\t          return React.createElement(DateElement, {\n\t            name: attribute,\n\t            label: fieldsObject[attribute]['name'],\n\t            onUserInput: _this2.setData,\n\t            ref: attribute,\n\t            required: fieldsObject[attribute]['required'],\n\t            value: _this2.props.specimen.preparation.data[attribute]\n\t          });\n\t        }\n\t\n\t        if (datatype === \"boolean\") {}\n\t      });\n\t\n\t      return specimenProtocolFields;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      var submitButton = void 0;\n\t      if (this.props.data.specimen.preparation) {\n\t        submitButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      } else {\n\t        submitButton = React.createElement(ButtonElement, { label: 'Submit' });\n\t      }\n\t\n\t      var specimenProtocolFields = void 0;\n\t      if (this.props.specimen.preparation.protocolId) {\n\t        var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.props.specimen.preparation.protocolId];\n\t\n\t        if (specimenProtocolFieldsObject) {\n\t          if (this.props.specimen.preparation.data) {\n\t            specimenProtocolFields = this.getSpecimenProtocolFields(specimenProtocolFieldsObject);\n\t          } else {\n\t            this.addData();\n\t          }\n\t        }\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenPreparation',\n\t          onSubmit: this.props.saveSpecimen,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(SelectElement, {\n\t          name: 'protocolId',\n\t          label: 'Protocol',\n\t          options: this.props.specimenProtocols,\n\t          onUserInput: this.setPreparation,\n\t          required: true,\n\t          value: this.props.specimen.preparation.protocolId\n\t        }),\n\t        specimenProtocolFields,\n\t        React.createElement(DateElement, {\n\t          name: 'date',\n\t          label: 'Date',\n\t          onUserInput: this.setPreparation,\n\t          required: true,\n\t          value: this.props.specimen.preparation.date\n\t        }),\n\t        React.createElement(TimeElement, {\n\t          name: 'time',\n\t          label: 'Time',\n\t          onUserInput: this.setPreparation,\n\t          required: true,\n\t          value: this.props.specimen.preparation.time\n\t        }),\n\t        React.createElement(TextareaElement, {\n\t          name: 'comments',\n\t          label: 'Comments',\n\t          onUserInput: this.setPreparation,\n\t          value: this.props.specimen.preparation.comments\n\t        }),\n\t        submitButton\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return SpecimenPreparationForm;\n\t}(React.Component);\n\t\n\tSpecimenPreparationForm.propTypes = {};\n\t\n\texports.default = SpecimenPreparationForm;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _containerBarcodeForm = __webpack_require__(9);\n\t\n\tvar _containerBarcodeForm2 = _interopRequireDefault(_containerBarcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankContainerForm = function (_React$Component) {\n\t  _inherits(BiobankContainerForm, _React$Component);\n\t\n\t  function BiobankContainerForm(props) {\n\t    _classCallCheck(this, BiobankContainerForm);\n\t\n\t    // get Id of available status\n\t    var _this = _possibleConstructorReturn(this, (BiobankContainerForm.__proto__ || Object.getPrototypeOf(BiobankContainerForm)).call(this, props));\n\t\n\t    var availableId = Object.keys(_this.props.containerStati).find(function (key) {\n\t      return _this.props.containerStati[key] === 'Available';\n\t    });\n\t\n\t    _this.state = {\n\t      formErrors: {},\n\t      errorMessage: null,\n\t      containerList: { 1: { statusId: availableId, temperature: 20 } },\n\t      countContainers: 1,\n\t      collapsed: { 1: true },\n\t      copyMultiplier: 1\n\t    };\n\t\n\t    _this.toggleCollapse = _this.toggleCollapse.bind(_this);\n\t    _this.addContainer = _this.addContainer.bind(_this);\n\t    _this.setContainer = _this.setContainer.bind(_this);\n\t    _this.setCopyMultiplier = _this.setCopyMultiplier.bind(_this);\n\t    _this.copyContainer = _this.copyContainer.bind(_this);\n\t    _this.removeContainer = _this.removeContainer.bind(_this);\n\t    _this.saveContainerList = _this.saveContainerList.bind(_this);\n\t    _this.saveContainer = _this.saveContainer.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankContainerForm, [{\n\t    key: 'toggleCollapse',\n\t    value: function toggleCollapse(id) {\n\t      var collapsed = this.state.collapsed;\n\t      collapsed[id] = !collapsed[id];\n\t      this.setState({ collapsed: collapsed });\n\t    }\n\t  }, {\n\t    key: 'saveContainerList',\n\t    value: function saveContainerList() {\n\t      var containerList = this.state.containerList;\n\t      for (var container in containerList) {\n\t        this.saveContainer(containerList[container]);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'saveContainer',\n\t    value: function saveContainer(container) {\n\t      var containerObj = new FormData();\n\t      for (var key in container) {\n\t        if (container[key] !== \"\") {\n\t          containerObj.append(key, container[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: containerObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          this.props.refreshParent();\n\t          swal(\"Container Submission Successful!\", \"\", \"success\");\n\t          this.props.onSuccess();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setContainer',\n\t    value: function setContainer(name, value, key) {\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t      var siteId = this.state.siteId;\n\t      var containerList = this.state.containerList;\n\t      if (name === 'siteId') {\n\t        siteId = value;\n\t        for (var container in containerList) {\n\t          containerList[container].originId = siteId;\n\t          containerList[container].locationId = siteId;\n\t        }\n\t      } else {\n\t        containerList[key][name] = value;\n\t      }\n\t      this.setState({ containerList: containerList, siteId: siteId });\n\t    }\n\t  }, {\n\t    key: 'addContainer',\n\t    value: function addContainer() {\n\t      var _this2 = this;\n\t\n\t      var containerList = this.state.containerList;\n\t      var count = this.state.countContainers;\n\t      var collapsed = this.state.collapsed;\n\t      var siteId = this.state.siteId;\n\t      var temperature = 20;\n\t\n\t      // get Id of available status\n\t      var statusId = Object.keys(this.props.containerStati).find(function (key) {\n\t        return _this2.props.containerStati[key] === 'Available';\n\t      });\n\t\n\t      containerList[count + 1] = {\n\t        statusId: statusId,\n\t        originId: siteId,\n\t        locationId: siteId,\n\t        temperature: temperature\n\t      };\n\t\n\t      collapsed[count + 1] = true;\n\t\n\t      this.setState({\n\t        containerList: containerList,\n\t        countContainers: count + 1,\n\t        collapsed: collapsed\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setCopyMultiplier',\n\t    value: function setCopyMultiplier(e) {\n\t      var copyMultiplier = e.target.value;\n\t      this.setState({ copyMultiplier: copyMultiplier });\n\t    }\n\t  }, {\n\t    key: 'copyContainer',\n\t    value: function copyContainer(key) {\n\t      var count = this.state.countContainers;\n\t      var nextKey = count + 1;\n\t      var containerList = this.state.containerList;\n\t      var multiplier = this.state.copyMultiplier;\n\t\n\t      for (var i = 1; i <= multiplier; i++) {\n\t        containerList[nextKey] = JSON.parse(JSON.stringify(containerList[key]));\n\t        delete containerList[nextKey].barcode;\n\t        nextKey++;\n\t      }\n\t\n\t      this.setState({\n\t        containerList: containerList,\n\t        countContainers: nextKey\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removeContainer',\n\t    value: function removeContainer(key) {\n\t      var containerList = this.state.containerList;\n\t      delete containerList[key];\n\t\n\t      this.setState({\n\t        containerList: containerList\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this3 = this;\n\t\n\t      //Generates new Barcode Form everytime the addContainer button is pressed\n\t      var containerListArray = Object.keys(this.state.containerList);\n\t      var containers = [];\n\t      var i = 1;\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        var _loop = function _loop() {\n\t          var key = _step.value;\n\t\n\t          containers.push(React.createElement(_containerBarcodeForm2.default, {\n\t            key: key,\n\t            containerKey: key,\n\t            id: i,\n\t            collapsed: _this3.state.collapsed[i],\n\t            toggleCollapse: _this3.toggleCollapse,\n\t            container: _this3.state.containerList[key] || null,\n\t            removeContainer: containerListArray.length !== 1 ? function () {\n\t              return _this3.removeContainer(key);\n\t            } : null,\n\t            addContainer: i == containerListArray.length ? _this3.addContainer : null,\n\t            setCopyMultiplier: _this3.setCopyMultiplier,\n\t            copyMultiplier: _this3.state.copyMultiplier,\n\t            copyContainer: i == containerListArray.length && _this3.state.containerList[key] ? _this3.copyContainer : null,\n\t            setContainer: _this3.setContainer,\n\t            onChange: _this3.props.onChange,\n\t            containerTypesNonPrimary: _this3.props.containerTypesNonPrimary,\n\t            containerBarcodesNonPrimary: _this3.props.containerBarcodesNonPrimary\n\t          }));\n\t\n\t          i++;\n\t        };\n\t\n\t        for (var _iterator = containerListArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          _loop();\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'containerForm',\n\t          onSubmit: this.saveContainerList,\n\t          ref: 'form'\n\t        },\n\t        React.createElement('br', null),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement(SelectElement, {\n\t              name: 'siteId',\n\t              label: 'Site',\n\t              options: this.props.sites,\n\t              onUserInput: this.setContainer,\n\t              required: true,\n\t              value: this.state.siteId\n\t            })\n\t          )\n\t        ),\n\t        containers,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-xs-3 col-xs-offset-9' },\n\t          React.createElement(ButtonElement, { label: 'Submit' })\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return BiobankContainerForm;\n\t}(React.Component);\n\t\n\tBiobankContainerForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired,\n\t  barcode: React.PropTypes.string,\n\t  refreshTable: React.PropTypes.func\n\t};\n\t\n\texports.default = BiobankContainerForm;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Container Barcode Form\n\t *\n\t * Acts a subform for ContainerForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar ContainerBarcodeForm = function (_React$Component) {\n\t  _inherits(ContainerBarcodeForm, _React$Component);\n\t\n\t  function ContainerBarcodeForm() {\n\t    _classCallCheck(this, ContainerBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ContainerBarcodeForm.__proto__ || Object.getPrototypeOf(ContainerBarcodeForm)).call(this));\n\t\n\t    _this.setContainer = _this.setContainer.bind(_this);\n\t    _this.copy = _this.copy.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ContainerBarcodeForm, [{\n\t    key: 'copy',\n\t    value: function copy() {\n\t      this.props.copyContainer(this.props.containerKey);\n\t    }\n\t\n\t    //TODO: change form.js so this isn't necessary\n\t\n\t  }, {\n\t    key: 'setContainer',\n\t    value: function setContainer(name, value) {\n\t      this.props.setContainer(name, value, this.props.containerKey);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      // HR TODO: All this CSS should eventually be moved\n\t      var addContainerButton = void 0;\n\t      var addContainerText = void 0;\n\t      var copyContainerButton = void 0;\n\t      var copyContainerText = void 0;\n\t      if (this.props.addContainer) {\n\t        addContainerButton = React.createElement(\n\t          'span',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: this.props.addContainer\n\t            },\n\t            '+'\n\t          )\n\t        );\n\t\n\t        addContainerText = React.createElement(\n\t          'span',\n\t          { className: 'action-title' },\n\t          'New Entry'\n\t        );\n\t      }\n\t\n\t      if (this.props.copyContainer) {\n\t        copyContainerButton = React.createElement(\n\t          'span',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: this.copy\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-duplicate' })\n\t          )\n\t        );\n\t        copyContainerText = React.createElement(\n\t          'span',\n\t          { className: 'action-title' },\n\t          React.createElement('input', {\n\t            className: 'form-control input-sm',\n\t            type: 'number',\n\t            min: '1',\n\t            max: '50',\n\t            style: { width: 50, display: 'inline' },\n\t            onChange: this.props.setCopyMultiplier,\n\t            value: this.props.copyMultiplier\n\t          }),\n\t          'Copies'\n\t        );\n\t      }\n\t\n\t      var removeContainerButton = void 0;\n\t      if (this.props.removeContainer) {\n\t        var glyphStyle = {\n\t          color: '#DDDDDD',\n\t          marginLeft: 10,\n\t          cursor: 'pointer',\n\t          fontSize: 15\n\t        };\n\t\n\t        removeContainerButton = React.createElement('span', {\n\t          className: 'glyphicon glyphicon-remove',\n\t          onClick: this.props.removeContainer,\n\t          style: glyphStyle\n\t        });\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'container'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement(\n\t              'div',\n\t              null,\n\t              React.createElement(TextboxElement, {\n\t                name: 'barcode',\n\t                label: 'Barcode ' + this.props.id,\n\t                onUserInput: this.setContainer,\n\t                ref: 'barcode',\n\t                required: true,\n\t                value: this.props.container.barcode\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-1', style: { paddingLeft: 0, marginTop: 10 } },\n\t            React.createElement('span', {\n\t              className: this.props.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up',\n\t              style: { cursor: 'pointer', fontSize: 15, position: 'relative', right: 40 },\n\t              'data-toggle': 'collapse',\n\t              'data-target': '#item-' + this.props.containerKey,\n\t              onClick: function onClick() {\n\t                return _this2.props.toggleCollapse(_this2.props.containerKey);\n\t              }\n\t            }),\n\t            removeContainerButton\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement('div', { className: 'col-xs-2' }),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-9' },\n\t            React.createElement(\n\t              'div',\n\t              { id: 'item-' + this.props.containerKey, className: 'collapse' },\n\t              React.createElement(SelectElement, {\n\t                name: 'typeId',\n\t                label: 'Container Type',\n\t                options: this.props.containerTypesNonPrimary,\n\t                onUserInput: this.setContainer,\n\t                required: true,\n\t                value: this.props.container.typeId\n\t              })\n\t            )\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement('div', { className: 'col-xs-3' }),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-4 action' },\n\t              addContainerButton,\n\t              addContainerText\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-4 action' },\n\t              copyContainerButton,\n\t              copyContainerText\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return ContainerBarcodeForm;\n\t}(React.Component);\n\t\n\tContainerBarcodeForm.propTypes = {\n\t  id: React.PropTypes.string,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = ContainerBarcodeForm;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Tabs component.\n\t *\n\t * @author Loris Team\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Tabs Component.\n\t * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n\t * and corresponding tab panes.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * 1. Define an array of tabs with IDs and labels\n\t *\n\t * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n\t *\n\t * 2. Pass tabList as <Tab> property and <TabPane> as child\n\t *  ```\n\t * <Tabs tabs={tabList} defaultTab=\"tab1\">\n\t *   <TabPane TabId={tabList[0].id}>\n\t *     // Tab content goes here\n\t *   </TabPane>\n\t * </Tabs>\n\t * ```\n\t * =================================================\n\t *\n\t */\n\tvar Tabs = function (_React$Component) {\n\t  _inherits(Tabs, _React$Component);\n\t\n\t  function Tabs(props) {\n\t    _classCallCheck(this, Tabs);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call(this, props));\n\t\n\t    var hash = window.location.hash;\n\t    var activeTab = \"\";\n\t\n\t    /**\n\t     * Determine the initial active tab in this order\n\t     * 1. Try to infer from the URL, otherwise\n\t     * 2. Try to infer from the defaultTab prop, otherwise\n\t     * 3. Set to be the first tab of the list\n\t     */\n\t    if (_this.props.updateURL && hash) {\n\t      activeTab = hash.substr(1);\n\t    } else if (_this.props.defaultTab) {\n\t      activeTab = _this.props.defaultTab;\n\t    } else if (_this.props.tabs.length > 0) {\n\t      activeTab = _this.props.tabs[0].id;\n\t    }\n\t\n\t    _this.state = {\n\t      activeTab: activeTab\n\t    };\n\t\n\t    _this.handleClick = _this.handleClick.bind(_this);\n\t    _this.getTabs = _this.getTabs.bind(_this);\n\t    _this.getTabPanes = _this.getTabPanes.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Tabs, [{\n\t    key: 'handleClick',\n\t    value: function handleClick(tabId, e) {\n\t      this.setState({ activeTab: tabId });\n\t      this.props.onTabChange(tabId);\n\t\n\t      // Add tab href to URL querystring and scroll the page to top\n\t      if (this.props.updateURL) {\n\t        var scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n\t        window.location.hash = e.target.hash;\n\t        $('html,body').scrollTop(scrollDistance);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getTabs',\n\t    value: function getTabs() {\n\t      var tabs = this.props.tabs.map(function (tab) {\n\t        var tabClass = this.state.activeTab === tab.id ? 'active' : null;\n\t        var href = \"#\" + tab.id;\n\t        var tabID = \"tab-\" + tab.id;\n\t        return React.createElement(\n\t          'li',\n\t          {\n\t            role: 'presentation',\n\t            className: tabClass,\n\t            key: tab.id\n\t          },\n\t          React.createElement(\n\t            'a',\n\t            { id: tabID,\n\t              href: href,\n\t              role: 'tab',\n\t              'data-toggle': 'tab',\n\t              onClick: this.handleClick.bind(null, tab.id)\n\t            },\n\t            tab.label\n\t          )\n\t        );\n\t      }.bind(this));\n\t\n\t      return tabs;\n\t    }\n\t  }, {\n\t    key: 'getTabPanes',\n\t    value: function getTabPanes() {\n\t      var tabPanes = React.Children.map(this.props.children, function (child, key) {\n\t        if (child) {\n\t          return React.cloneElement(child, {\n\t            activeTab: this.state.activeTab,\n\t            key: key\n\t          });\n\t        }\n\t      }.bind(this));\n\t\n\t      return tabPanes;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var tabs = this.getTabs();\n\t      var tabPanes = this.getTabPanes();\n\t      var tabStyle = {\n\t        marginLeft: 0,\n\t        marginBottom: '5px'\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'ul',\n\t          { className: 'nav nav-tabs', role: 'tablist', style: tabStyle },\n\t          tabs\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tab-content' },\n\t          tabPanes\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Tabs;\n\t}(React.Component);\n\t\n\tTabs.propTypes = {\n\t  tabs: React.PropTypes.array.isRequired,\n\t  defaultTab: React.PropTypes.string,\n\t  updateURL: React.PropTypes.bool\n\t};\n\tTabs.defaultProps = {\n\t  onTabChange: function onTabChange() {},\n\t  // Set updateURL to default to true but allow for change\n\t  // Nested tabs should set this variable to false\n\t  updateURL: true\n\t};\n\t\n\t/**\n\t * Allows to dynamically render vertical tabs corresponding to tab panes.\n\t */\n\t\n\tvar VerticalTabs = function (_React$Component2) {\n\t  _inherits(VerticalTabs, _React$Component2);\n\t\n\t  function VerticalTabs(props) {\n\t    _classCallCheck(this, VerticalTabs);\n\t\n\t    var _this2 = _possibleConstructorReturn(this, (VerticalTabs.__proto__ || Object.getPrototypeOf(VerticalTabs)).call(this, props));\n\t\n\t    var hash = window.location.hash;\n\t    var activeTab = \"\";\n\t\n\t    /**\n\t     * Determine the initial active tab in this order\n\t     * 1. Try to infer from the URL, otherwise\n\t     * 2. Try to infer from the defaultTab prop, otherwise\n\t     * 3. Set to be the first tab of the list\n\t     */\n\t    if (_this2.props.updateURL && hash) {\n\t      activeTab = hash.substr(1);\n\t    } else if (_this2.props.defaultTab) {\n\t      activeTab = _this2.props.defaultTab;\n\t    } else if (_this2.props.tabs.length > 0) {\n\t      activeTab = _this2.props.tabs[0].id;\n\t    }\n\t\n\t    _this2.state = {\n\t      activeTab: activeTab\n\t    };\n\t\n\t    _this2.handleClick = _this2.handleClick.bind(_this2);\n\t    _this2.getTabs = _this2.getTabs.bind(_this2);\n\t    _this2.getTabPanes = _this2.getTabPanes.bind(_this2);\n\t    return _this2;\n\t  }\n\t\n\t  _createClass(VerticalTabs, [{\n\t    key: 'handleClick',\n\t    value: function handleClick(tabId, e) {\n\t      this.setState({ activeTab: tabId });\n\t      this.props.onTabChange(tabId);\n\t\n\t      // Add tab href to URL querystring and scroll the page to top\n\t      if (this.props.updateURL) {\n\t        var scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n\t        window.location.hash = e.target.hash;\n\t        $('html,body').scrollTop(scrollDistance);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getTabs',\n\t    value: function getTabs() {\n\t      var tabs = this.props.tabs.map(function (tab) {\n\t        var tabClass = this.state.activeTab === tab.id ? 'active' : null;\n\t        var href = \"#\" + tab.id;\n\t        var tabID = \"tab-\" + tab.id;\n\t        return React.createElement(\n\t          'li',\n\t          {\n\t            role: 'presentation',\n\t            className: tabClass,\n\t            key: tab.id\n\t          },\n\t          React.createElement(\n\t            'a',\n\t            { id: tabID,\n\t              href: href,\n\t              role: 'tab',\n\t              'data-toggle': 'tab',\n\t              onClick: this.handleClick.bind(null, tab.id)\n\t            },\n\t            tab.label\n\t          )\n\t        );\n\t      }.bind(this));\n\t\n\t      return tabs;\n\t    }\n\t  }, {\n\t    key: 'getTabPanes',\n\t    value: function getTabPanes() {\n\t      var tabPanes = React.Children.map(this.props.children, function (child, key) {\n\t        if (child) {\n\t          return React.cloneElement(child, {\n\t            activeTab: this.state.activeTab,\n\t            key: key\n\t          });\n\t        }\n\t      }.bind(this));\n\t\n\t      return tabPanes;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var tabs = this.getTabs();\n\t      var tabPanes = this.getTabPanes();\n\t      var tabStyle = {\n\t        marginLeft: 0,\n\t        marginBottom: '5px'\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tabbable col-md-3 col-sm-3' },\n\t          React.createElement(\n\t            'ul',\n\t            { className: 'nav nav-pills nav-stacked', role: 'tablist', style: tabStyle },\n\t            tabs\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tab-content col-md-9 col-sm-9' },\n\t          tabPanes\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return VerticalTabs;\n\t}(React.Component);\n\t\n\tVerticalTabs.propTypes = {\n\t  tabs: React.PropTypes.array.isRequired,\n\t  defaultTab: React.PropTypes.string,\n\t  updateURL: React.PropTypes.bool\n\t};\n\tVerticalTabs.defaultProps = {\n\t  onTabChange: function onTabChange() {},\n\t  // Set updateURL to default to true but allow for change\n\t  // Nested tabs should set this variable to false\n\t  updateURL: true\n\t};\n\t\n\t/*\n\t * TabPane component.\n\t * Used to wrap content for every tab.\n\t */\n\t\n\tvar TabPane = function (_React$Component3) {\n\t  _inherits(TabPane, _React$Component3);\n\t\n\t  function TabPane() {\n\t    _classCallCheck(this, TabPane);\n\t\n\t    return _possibleConstructorReturn(this, (TabPane.__proto__ || Object.getPrototypeOf(TabPane)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(TabPane, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var classList = \"tab-pane\";\n\t      var title = void 0;\n\t\n\t      if (this.props.TabId === this.props.activeTab) {\n\t        classList += \" active\";\n\t      }\n\t      if (this.props.Title) {\n\t        title = React.createElement(\n\t          'h1',\n\t          null,\n\t          this.props.Title\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { role: 'tabpanel', className: classList, id: this.props.TabId },\n\t        title,\n\t        this.props.children\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return TabPane;\n\t}(React.Component);\n\t\n\tTabPane.propTypes = {\n\t  TabId: React.PropTypes.string.isRequired,\n\t  Title: React.PropTypes.string,\n\t  activeTab: React.PropTypes.string\n\t};\n\t\n\texports.Tabs = Tabs;\n\texports.VerticalTabs = VerticalTabs;\n\texports.TabPane = TabPane;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Modal = __webpack_require__(12);\n\t\n\tvar _Modal2 = _interopRequireDefault(_Modal);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file contains React components for Modal component.\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Henri Rabalais\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.1.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/**\n\t * Modal Component.\n\t * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * =================================================\n\t *\n\t */\n\t\n\tvar FormModal = function (_React$Component) {\n\t  _inherits(FormModal, _React$Component);\n\t\n\t  function FormModal(props) {\n\t    _classCallCheck(this, FormModal);\n\t\n\t    var _this = _possibleConstructorReturn(this, (FormModal.__proto__ || Object.getPrototypeOf(FormModal)).call(this, props));\n\t\n\t    _this.state = { show: false, throwWarning: false };\n\t\n\t    _this.openModal = _this.openModal.bind(_this);\n\t    _this.closeModal = _this.closeModal.bind(_this);\n\t    _this.confirmClose = _this.confirmClose.bind(_this);\n\t    _this.setWarning = _this.setWarning.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(FormModal, [{\n\t    key: \"renderChildren\",\n\t    value: function renderChildren() {\n\t      var _this2 = this;\n\t\n\t      return React.Children.map(this.props.children, function (child) {\n\t        return React.cloneElement(child, { onSuccess: _this2.closeModal, onChange: _this2.setWarning });\n\t      });\n\t    }\n\t  }, {\n\t    key: \"openModal\",\n\t    value: function openModal() {\n\t      this.setState({\n\t        show: true\n\t      });\n\t    }\n\t  }, {\n\t    key: \"setWarning\",\n\t    value: function setWarning() {\n\t      this.setState({\n\t        throwWarning: true\n\t      });\n\t    }\n\t  }, {\n\t    key: \"confirmClose\",\n\t    value: function confirmClose() {\n\t      if (this.state.throwWarning) {\n\t        swal({\n\t          title: \"Are You Sure?\",\n\t          text: \"Leaving the form will result in the loss of any information entered.\",\n\t          type: \"warning\",\n\t          showCancelButton: true,\n\t          confirmButtonText: 'Proceed',\n\t          cancelButtonText: 'Cancel'\n\t        }, function () {\n\t          this.closeModal();\n\t        }.bind(this));\n\t      } else {\n\t        this.closeModal();\n\t      }\n\t    }\n\t  }, {\n\t    key: \"closeModal\",\n\t    value: function closeModal() {\n\t      this.setState({\n\t        show: false,\n\t        throwWarning: false\n\t      });\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      return React.createElement(\n\t        _Modal2.default,\n\t        _extends({\n\t          closeModal: this.confirmClose,\n\t          openModal: this.openModal,\n\t          show: this.state.show\n\t        }, this.props),\n\t        this.renderChildren()\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return FormModal;\n\t}(React.Component);\n\t\n\tFormModal.propTypes = {\n\t  title: React.PropTypes.string,\n\t  buttonClass: React.PropTypes.string,\n\t  buttonStyle: React.PropTypes.object,\n\t  buttonContent: React.PropTypes.object\n\t};\n\tFormModal.defaultProps = {\n\t  buttonClass: 'btn btn-primary'\n\t};\n\t\n\texports.default = FormModal;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Modal component.\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Modal Component.\n\t * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * =================================================\n\t *\n\t */\n\tvar Modal = function (_React$Component) {\n\t  _inherits(Modal, _React$Component);\n\t\n\t  function Modal(props) {\n\t    _classCallCheck(this, Modal);\n\t\n\t    return _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));\n\t  }\n\t\n\t  _createClass(Modal, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      // Black Background with Alpha Channel\n\t      var backdropStyle = {\n\t        position: 'fixed',\n\t        zIndex: 9998,\n\t        top: 0,\n\t        bottom: 0,\n\t        left: 0,\n\t        right: 0,\n\t        backgroundColor: 'rgba(0,0,0,0.3)',\n\t        padding: 50\n\t      };\n\t\n\t      // White Modal Window\n\t      var modalStyle = {\n\t        position: 'relative',\n\t        maxWidth: 1000,\n\t        maxHeight: '100%',\n\t        margin: '0 auto',\n\t        backgroundColor: '#fff',\n\t        borderRadius: 10,\n\t        overflowY: 'auto',\n\t        zIndex: 9999\n\t      };\n\t\n\t      var titleStyle = {\n\t        display: 'flex',\n\t        flexDirection: 'row',\n\t        alignItems: 'center',\n\t        background: '#093782',\n\t        height: '70px',\n\t        borderTopRightRadius: '10',\n\t        color: '#FFFFFF',\n\t        fontSize: 24,\n\t        padding: 20\n\t      };\n\t\n\t      var glyphStyle = {\n\t        marginLeft: 'auto',\n\t        cursor: 'pointer'\n\t      };\n\t\n\t      var bodyStyle = {\n\t        padding: 15\n\t      };\n\t\n\t      var button = React.createElement(\n\t        'div',\n\t        {\n\t          className: this.props.buttonClass,\n\t          onClick: this.props.openModal\n\t        },\n\t        this.props.buttonContent\n\t      );\n\t\n\t      var modal;\n\t      if (this.props.show) {\n\t        modal = React.createElement(\n\t          'div',\n\t          { style: backdropStyle, onClick: this.props.closeModal },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              style: modalStyle,\n\t              onClick: function onClick(e) {\n\t                e.stopPropagation();\n\t              }\n\t            },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                style: titleStyle\n\t              },\n\t              this.props.title,\n\t              React.createElement(\n\t                'span',\n\t                {\n\t                  style: glyphStyle,\n\t                  onClick: this.props.closeModal\n\t                },\n\t                '\\xD7'\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                style: bodyStyle\n\t              },\n\t              this.props.children\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { style: this.props.style },\n\t        button,\n\t        modal\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Modal;\n\t}(React.Component);\n\t\n\tModal.propTypes = {\n\t  title: React.PropTypes.string,\n\t  buttonClass: React.PropTypes.string,\n\t  buttonStyle: React.PropTypes.object,\n\t  buttonContent: React.PropTypes.object,\n\t  show: React.PropTypes.boolean,\n\t  closeModal: React.PropTypes.func,\n\t  openModal: React.PropTypes.func\n\t};\n\tModal.defaultProps = {\n\t  buttonClass: 'btn btn-primary'\n\t};\n\t\n\texports.default = Modal;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Loader\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Loader component\n\t */\n\tvar Loader = function (_React$Component) {\n\t  _inherits(Loader, _React$Component);\n\t\n\t  function Loader(props) {\n\t    _classCallCheck(this, Loader);\n\t\n\t    return _possibleConstructorReturn(this, (Loader.__proto__ || Object.getPrototypeOf(Loader)).call(this, props));\n\t  }\n\t\n\t  _createClass(Loader, [{\n\t    key: \"render\",\n\t    value: function render() {\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"loader-container\" },\n\t        React.createElement(\"div\", { className: \"loader\" })\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Loader;\n\t}(React.Component);\n\t\n\texports.default = Loader;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\n\t * Modify behaviour of specified column cells in the Data Table component\n\t * @param {string} column - column name\n\t * @param {string} cell - cell content\n\t * @param {arrray} rowData - array of cell contents for a specific row\n\t * @param {arrray} rowHeaders - array of table headers (column names)\n\t * @return {*} a formated table cell for a given column\n\t */\n\tfunction formatColumn(column, cell, rowData, rowHeaders) {\n\t  // If a column if set as hidden, don't display it\n\t  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n\t  //  return null;\n\t  //}\n\t\n\t  // Create the mapping between rowHeaders and rowData in a row object.\n\t  var row = {};\n\t  rowHeaders.forEach(function (header, index) {\n\t    row[header] = rowData[index];\n\t  }, this);\n\t\n\t  // create array of classes to be added to td tag\n\t  var classes = [];\n\t\n\t  // convert array to string, with blank space separator\n\t  classes = classes.join(\" \");\n\t\n\t  //const hasWritePermission = loris.userHasPermission('media_read');\n\t  if (column === 'Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: specimenURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Parent Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Parent Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: specimenURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Container Barcode') {\n\t    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Container Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: containerURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  // if (column === 'Visit Label') {\n\t  //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n\t  //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n\t  //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n\t  //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n\t  //   }\n\t  // }\n\t\n\t  // if (column === 'Edit Metadata') {\n\t  //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n\t  //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n\t  // }\n\t\n\t  return React.createElement(\n\t    \"td\",\n\t    { className: classes },\n\t    cell\n\t  );\n\t}\n\t\n\texports.default = formatColumn;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\n\t * Modify behaviour of specified column cells in the Data Table component\n\t * @param {string} column - column name\n\t * @param {string} cell - cell content\n\t * @param {arrray} rowData - array of cell contents for a specific row\n\t * @param {arrray} rowHeaders - array of table headers (column names)\n\t * @return {*} a formated table cell for a given column\n\t */\n\tfunction formatColumn(column, cell, rowData, rowHeaders) {\n\t  // If a column if set as hidden, don't display it\n\t  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n\t  //  return null;\n\t  //}\n\t\n\t  // Create the mapping between rowHeaders and rowData in a row object.\n\t  var row = {};\n\t  rowHeaders.forEach(function (header, index) {\n\t    row[header] = rowData[index];\n\t  }, this);\n\t\n\t  // create array of classes to be added to td tag\n\t  var classes = [];\n\t\n\t  // convert array to string, with blank space separator\n\t  classes = classes.join(\" \");\n\t\n\t  //const hasWritePermission = loris.userHasPermission('media_read');\n\t  if (column === 'Barcode') {\n\t    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: containerURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Parent Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Parent Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: containerURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  // if (column === 'Visit Label') {\n\t  //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n\t  //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n\t  //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n\t  //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n\t  //   }\n\t  // }\n\t\n\t  // if (column === 'Edit Metadata') {\n\t  //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n\t  //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n\t  // }\n\t\n\t  return React.createElement(\n\t    \"td\",\n\t    { className: classes },\n\t    cell\n\t  );\n\t}\n\t\n\texports.default = formatColumn;\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// modules/biobank/js/biobankIndex.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 68e3b314ce250beba595","import FilterForm from 'FilterForm';\nimport BiobankSpecimenForm from './specimenForm';\nimport PoolSpecimenForm from './poolSpecimenForm';\nimport BiobankContainerForm from './containerForm';\nimport {Tabs, TabPane} from 'Tabs';\nimport FormModal from 'FormModal';\nimport Loader from 'Loader';\nimport formatColumnSpecimen from './columnFormatterSpecimen';\nimport formatColumnContainer from './columnFormatterContainer';\n\nclass BiobankIndex extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoaded: false,\n      specimenFilter: {},\n      containerFilter: {},\n      isOpen: false,\n      formOptions: {},\n    };\n\n    // Bind component instance to custom methods\n    this.loadPage = this.loadPage.bind(this);\n    this.fetchSpecimenData = this.fetchSpecimenData.bind(this);\n    this.fetchFormOptions = this.fetchFormOptions.bind(this);\n    this.fetchContainerData = this.fetchContainerData.bind(this);\n    this.updateSpecimenFilter = this.updateSpecimenFilter.bind(this);\n    this.updateContainerFilter = this.updateContainerFilter.bind(this);\n    this.resetFilters = this.resetFilters.bind(this);\n    this.mapFormOptions = this.mapFormOptions.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadPage();\n  }\n\n  loadPage() {\n    this.fetchSpecimenData();\n    this.fetchFormOptions();\n    this.fetchContainerData();\n  }\n\n  /**\n   * Retrieve data from the provided URL and save it in state\n   * Additionaly add hiddenHeaders to global loris variable\n   * for easy access by columnFormatter.\n   */\n  fetchSpecimenData() {\n    $.ajax(this.props.specimenDataURL, {\n      method: \"GET\",\n      dataType: 'json',\n      success: function(data) {\n        this.setState({\n          specimenData: data,\n          isLoaded: true\n        });\n      }.bind(this),\n      error: function(error) {\n        console.error(error);\n      }\n    });\n  }\n\n  fetchContainerData() {\n    $.ajax(this.props.containerDataURL, {\n      method: \"GET\",\n      dataType: 'json',\n      success: function(data) {\n        this.setState({\n          containerData: data,\n          isLoaded: true\n        });\n      }.bind(this),\n      error: function(error) {\n        console.error(error);\n      }\n    });\n  }\n\n  fetchFormOptions() {\n    $.ajax(this.props.formDataURL, {\n      method: \"GET\",\n      dataType: 'json',\n      success: function(data) {\n        this.setState({\n          formOptions: data,\n          isLoaded: true\n        });\n      }.bind(this),\n      error: function(error) {\n        console.error(error);\n      }\n    });\n  }\n\n  updateSpecimenFilter(specimenFilter) {\n    this.setState({specimenFilter});\n  }\n\n  // This works,\n  // but there must be a way to do this with just one updateFilter function\n  updateContainerFilter(containerFilter) {\n    this.setState({containerFilter});\n  }\n\n  resetFilters() {\n    this.refs.biobankFilter.clearFilter();\n  }\n\n //map options for forms\n  mapFormOptions(rawObject, targetAttribute) {\n    var data = {}; \n    for (var id in rawObject) {\n      data[id] = rawObject[id][targetAttribute];\n    }   \n\n    return data;\n  }\n\n  render() {\n    // Waiting for async data to load\n    if (!this.state.isLoaded) {\n      return (\n        <Loader/>\n      );\n    }\n\n    let addSpecimenButton;\n    let poolSpecimenButton;\n    let addContainerButton;\n    if (loris.userHasPermission('biobank_write')) {\n\n       /**\n        * Map Options for Form Select Elements of Specimen Form\n        */\n       let specimenTypes = this.mapFormOptions(this.state.formOptions.specimenTypes, 'type');\n       let containerTypesPrimary = this.mapFormOptions(this.state.formOptions.containerTypesPrimary, 'label');\n        \n       addSpecimenButton = (\n         <FormModal\n           title='Add New Specimen'\n           buttonClass='action-button add'\n           buttonContent='+'\n           style={{display:'inline-block'}}\n         >\n           <BiobankSpecimenForm\n             specimenTypes={specimenTypes}\n             containerTypesPrimary={containerTypesPrimary}\n             containersNonPrimary={this.state.formOptions.containersNonPrimary}\n             specimenTypeAttributes={this.state.formOptions.specimenTypeAttributes}\n             attributeDatatypes={this.state.formOptions.attributeDatatypes}\n             attributeOptions={this.state.formOptions.attributeOptions}\n             capacities={this.state.formOptions.capacities}\n             containerDimensions={this.state.formOptions.containerDimensions}\n             containerCoordinates={this.state.formOptions.containerCoordinates}\n             specimenTypeUnits={this.state.formOptions.specimenTypeUnits}\n             pSCIDs={this.state.formOptions.pSCIDs}\n             visits={this.state.formOptions.visits}\n             sessionData={this.state.formOptions.sessionData}\n             action={`${loris.BaseURL}/biobank/ajax/submitData.php?action=submitSpecimenForm`}\n             refreshParent={this.loadPage}\n           />\n         </FormModal>\n       );\n\n       let poolSpecimenButtonContent = (\n         <span className='glyphicon glyphicon-resize-small'/>\n       )\n\n       poolSpecimenButton = (\n         <FormModal\n           title='Pool Specimens'\n           buttonClass='action-button pool'\n           buttonContent={poolSpecimenButtonContent}\n           style={{display:'inline-block'}}\n         >\n           <PoolSpecimenForm\n             specimenTypes={specimenTypes}\n             containerTypesPrimary={containerTypesPrimary}\n             containersNonPrimary={this.state.formOptions.containersNonPrimary}\n             specimenTypeAttributes={this.state.formOptions.specimenTypeAttributes}\n             specimenProtocols={this.state.formOptions.specimenProtocols}\n             specimenProtocolAttributes={this.state.formOptions.specimenProtocolAttributes}\n             attributeDatatypes={this.state.formOptions.attributeDatatypes}\n             attributeOptions={this.state.formOptions.attributeOptions}\n             capacities={this.state.formOptions.capacities}\n       \n             containerDimensions={this.state.formOptions.containerDimensions}\n             containerCoordinates={this.state.formOptions.containerCoordinates}\n             specimenTypeUnits={this.state.formOptions.specimenTypeUnits}\n             specimenUnits={this.state.formOptions.specimenUnits}\n             pSCIDs={this.state.formOptions.pSCIDs}\n             sessionData={this.state.formOptions.sessionData}\n             specimenRequest={`${loris.BaseURL}/biobank/ajax/requestData.php?action=getSpecimenDataFromBarcode`}\n             refreshParent={this.loadPage}\n             action={`${loris.BaseURL}/biobank/ajax/submitData.php?action=submitPoolForm`}\n           />\n         </FormModal>\n       );\n\n       let containerTypesNonPrimary = this.mapFormOptions(this.state.formOptions.containerTypesNonPrimary, 'label');\n       let containerStati = this.mapFormOptions(this.state.formOptions.containerStati, 'status');\n\n       addContainerButton = (\n         <FormModal\n           title='Add New Container'\n           buttonClass='action-button add'\n           buttonContent='+'\n           style={{display:'inline-block'}}\n         >\n           <BiobankContainerForm\n             containerTypesNonPrimary={containerTypesNonPrimary}\n             sites={this.state.formOptions.sites}\n             containerStati={containerStati}\n             action={`${loris.BaseURL}/biobank/ajax/submitData.php?action=saveContainer`}\n             refreshParent={this.loadPage}\n           />\n         </FormModal>\n       ); \n    }\n\n    //Look at CCNA code from Zaliqa to modify this to be more streamline\n    var tabList = [\n      {id: \"specimens\", label: \"Specimens\"},\n      {id: \"containers\", label: \"Containers\"}\n    ];\n\n    return (\n    <div id='biobank-page'>\n      <Tabs tabs={tabList} defaultTab=\"specimens\" updateURL={true}>\n        <TabPane TabId={tabList[0].id}>\n          <div className='row'>\n            <div className='col-lg-10'>\n              <FilterForm\n                Module=\"biobank\"\n                name=\"specimen_filter\"\n                id=\"specimen_filter\"\n                ref=\"specimenFilter\"\n                columns={3}\n                formElements={this.state.specimenData.form}\n                onUpdate={this.updateSpecimenFilter}\n                filter={this.state.specimenFilter}\n              >\n                <br/>\n                <StaticElement/>\n                <StaticElement/>\n                <ButtonElement label=\"Clear Filters\" type=\"reset\" onUserInput={this.resetFilters}/>\n              </FilterForm>\n            </div>\n            <div className='col-lg-2'>\n              <span className='action'>\n                {addSpecimenButton}\n                <div className='action-title'>\n                  Add Specimen\n                </div>\n              </span>\n              <br/><br/>\n              <span className='action'>\n                {poolSpecimenButton}\n                <div className='action-title'>\n                  Pool Specimens\n                </div>\n              </span>\n            </div>\n          </div>\n          <StaticDataTable\n            Data={this.state.specimenData.Data}\n            Headers={this.state.specimenData.Headers}\n            Filter={this.state.specimenFilter}\n            getFormattedCell={formatColumnSpecimen}\n          />\n        </TabPane>\n        <TabPane TabId={tabList[1].id}>\n          <div className='row'>\n            <div className='col-lg-10'>\n              <FilterForm\n                Module=\"biobank\"\n                name=\"container_filter\"\n                id=\"container_filter\"\n                ref=\"containerFilter\"\n                columns={3}\n                formElements={this.state.containerData.form}\n                onUpdate={this.updateContainerFilter}\n                filter={this.state.containerFilter}\n\t\t          >\n                <br/>\n                <StaticElement/>\n                <StaticElement/>\n                <ButtonElement label=\"Clear Filters\" type=\"reset\" onUserInput={this.resetFilters}/>\n              </FilterForm>\t\t\t\n            </div>\n            <div className='col-lg-2'>\n              <span className='action'>\n                {addContainerButton}\n                <div className='action-title'>\n                  New Container\n                </div>\n              </span>\n            </div>\n          </div>\n          <StaticDataTable\n            Data={this.state.containerData.Data}\n            Headers={this.state.containerData.Headers}\n            Filter={this.state.containerFilter}\n            getFormattedCell={formatColumnContainer}\n          />\n        </TabPane>\n      </Tabs>\n      </div>\n    );\n  }\n}\n\n$(function() {\n  const biobankIndex = (\n    <div className=\"page-biobank\">\n      <BiobankIndex \n        specimenDataURL={`${loris.BaseURL}/biobank/?format=json`} \n        containerDataURL={`${loris.BaseURL}/biobank/ajax/requestData.php?action=getContainerFilterData`} \n        formDataURL={`${loris.BaseURL}/biobank/ajax/requestData.php?action=getFormOptions`}\n      />\n    </div>\n  );\n\n  ReactDOM.render(biobankIndex, document.getElementById(\"lorisworkspace\"));\n});\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/biobankIndex.js","/**\n * This file contains React component for FilterForm\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\nimport Panel from 'Panel';\n\n/**\n * FilterForm component.\n * A wrapper for form elements inside a selection filter.\n *\n * Adds necessary filter callbacks to all children and passes them to FormElement\n * for proper rendering.\n *\n * Keeps track of filter object and sends it to parent on every update.\n *\n * //HACK/NOTE: Loris has special behaviour for `candID` attribute in the query string,\n * making it impossible to use it for selection filters. This components renames\n * all `candID` fields to `candidateID` automatically before appending them to URL.\n *\n */\nclass FilterForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    // Bind component instance to custom methods\n    this.clearFilter = this.clearFilter.bind(this);\n    this.getFormChildren = this.getFormChildren.bind(this);\n    this.setFilter = this.setFilter.bind(this);\n    this.onElementUpdate = this.onElementUpdate.bind(this);\n\n    // Keeps track of querystring values\n    // Saved as class variable instead of keeping in state\n    this.queryString = QueryString.get();\n  }\n\n  componentDidMount() {\n    let filter = {};\n    let queryString = this.queryString;\n\n    // Initiaze filter using querystring value\n    Object.keys(queryString).forEach(function(key) {\n      let filterKey = (key === 'candidateID') ? 'candID' : key;\n      filter[filterKey] = {\n        value: queryString[key],\n        exactMatch: false\n      };\n    });\n\n    // Update parent component\n    this.props.onUpdate(filter);\n  }\n\n  /**\n   * Clear the filter object, querystring and input fields\n   */\n  clearFilter() {\n    this.queryString = QueryString.clear(this.props.Module);\n    this.props.onUpdate({});\n  }\n\n  /**\n   * Itterates through FilterForm children, sets necessary callback functions\n   * and initializes filterTable\n   *\n   * @return {Array} formChildren - array of children with necessary props\n   */\n  getFormChildren() {\n    let formChildren = [];\n    React.Children.forEach(this.props.children, function(child, key) {\n      // If child is a React component (i.e not a simple DOM element)\n      if (React.isValidElement(child) &&\n        typeof child.type === \"function\" &&\n        child.props.onUserInput\n      ) {\n        let callbackFunc = child.props.onUserInput;\n        let callbackName = callbackFunc.name;\n        let elementName = child.type.displayName;\n        let queryFieldName = (child.props.name === 'candID') ? 'candidateID' : child.props.name;\n        let filterValue = this.queryString[queryFieldName];\n        // If callback function was not set, set it to onElementUpdate() for form\n        // elements and to clearFilter() for <ButtonElement type='reset'/>.\n        if (callbackName === \"onUserInput\") {\n          if (elementName === \"ButtonElement\" && child.props.type === \"reset\") {\n            callbackFunc = this.clearFilter;\n          } else {\n            callbackFunc = this.onElementUpdate.bind(null, elementName);\n          }\n        }\n        // Pass onUserInput and value props to all children\n        formChildren.push(React.cloneElement(child, {\n          onUserInput: callbackFunc,\n          value: filterValue ? filterValue : '',\n          key: key\n        }));\n        // Initialize filter for StaticDataTable\n        this.setFilter(elementName, child.props.name, filterValue);\n      } else {\n        formChildren.push(React.cloneElement(child, {key: key}));\n      }\n    }.bind(this));\n\n    return formChildren;\n  }\n\n  /**\n   * Appends entry to filter object or deletes it if value is\n   * empty.\n   *\n   * Sets exactMatch to true for all SelectElements (i.e dropdowns)\n   * in order to force StaticDataTable to do exact comparaison\n   *\n   * @param {string} type - form element type (i.e component name)\n   * @param {string} key - the name of the form element\n   * @param {string} value - the value of the form element\n   *\n   * @return {{}} filter - filterData\n   */\n  setFilter(type, key, value) {\n    let filter = {};\n    if (this.props.filter) {\n      filter = JSON.parse(JSON.stringify(this.props.filter));\n    }\n    if (key) {\n      filter[key] = {};\n      if (value.length === 0) {\n        filter[key].value = '';\n      } else if (key && value) {\n        filter[key].value = value;\n      }\n      filter[key].exactMatch = (type === \"SelectElement\");\n    } else if (filter && key && value === '') {\n      delete filter[key];\n    }\n    return filter;\n  }\n\n  /**\n   * Sets filter object and querystring to reflect values of input fields\n   *\n   * @param {string} type - form element type (i.e component name)\n   * @param {string} fieldName - the name of the form element\n   * @param {string} fieldValue - the value of the form element\n   */\n  onElementUpdate(type, fieldName, fieldValue) {\n    // Make sure key is of string type and value is of string or object type\n    // before sending them to querystring\n    if (typeof fieldName !== 'string' ||\n        (typeof fieldValue !== 'string' && typeof fieldValue !== 'object')) {\n      return;\n    }\n\n    // Update query string\n    let queryFieldName = (fieldName === 'candID') ? 'candidateID' : fieldName;\n    this.queryString = QueryString.set(this.queryString, queryFieldName, fieldValue);\n\n    // Update filter and get new filter object\n    let filter = this.setFilter(type, fieldName, fieldValue);\n    this.props.onUpdate(filter);\n  }\n\n  render() {\n    // Get formatted children\n    let formChildren = this.getFormChildren();\n    let formElements = this.props.formElements;\n\n    if (formElements) {\n      Object.keys(formElements).forEach(function(fieldName) {\n        let queryFieldName = (fieldName === 'candID') ? 'candidateID' : fieldName;\n        formElements[fieldName].onUserInput = this.onElementUpdate.bind(null, fieldName);\n        formElements[fieldName].value = this.queryString[queryFieldName];\n      }.bind(this));\n    }\n\n    return (\n      <Panel\n        id={this.props.id}\n        height={this.props.height}\n        title={this.props.title}\n      >\n        <FormElement {...this.props}>\n          {formChildren}\n        </FormElement>\n      </Panel>\n    );\n  }\n}\n\nFilterForm.defaultProps = {\n  id: 'selection-filter',\n  height: '100%',\n  title: 'Selection Filter',\n  onUpdate: function() {\n    console.warn('onUpdate() callback is not set!');\n  }\n};\nFilterForm.propTypes = {\n  Module: React.PropTypes.string.isRequired,\n  filter: React.PropTypes.object.isRequired,\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  onUpdate: React.PropTypes.func\n};\n\nexport default FilterForm;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/FilterForm.js","/**\n * This file contains React component for Panel\n *\n * @author Alex I.\n * @version 1.0.0\n *\n */\n\n/**\n * Panel component\n * Wraps children in a collapsible bootstrap panel\n */\nclass Panel extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsed: this.props.initCollapsed\n    };\n\n    // Initialize panel class based on collapsed status\n    this.panelClass = (\n      this.props.initCollapsed ?\n        \"panel-collapse collapse\" :\n        \"panel-collapse collapse in\"\n    );\n\n    this.toggleCollapsed = this.toggleCollapsed.bind(this);\n  }\n\n  toggleCollapsed() {\n    this.setState({collapsed: !this.state.collapsed});\n  }\n\n  render() {\n    // Change arrow direction based on collapse status\n    let glyphClass = (\n      this.state.collapsed ?\n        \"glyphicon pull-right glyphicon-chevron-down\" :\n        \"glyphicon pull-right glyphicon-chevron-up\"\n    );\n\n    let pencilGlyph;\n    if (this.props.edit) {\n      pencilGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-pencil\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.edit}\n        /> \n      );\n    } \n\n    let plusGlyph;\n    if (this.props.add) {\n      plusGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-plus\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.add}\n        />\n      );\n    }\n\n    let removeGlyph;\n    if (this.props.cancel) {\n      removeGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-remove\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.cancel}\n        />\n      );\n    }\n\n    // Add panel header, if title is set\n    const panelHeading = this.props.title ? (\n      <div\n        className=\"panel-heading\"\n      >\n        <span \n          className={glyphClass}\n          onClick={this.toggleCollapsed}\n          data-toggle=\"collapse\"\n          data-target={'#' + this.props.id}\n          style={{cursor: 'pointer'}}\n        />\n        {pencilGlyph}\n        {plusGlyph}\n        {removeGlyph}\n        {this.props.title}\n      </div>\n    ) : '';\n\n    return (\n      <div className=\"panel panel-primary\">\n        {panelHeading}\n        <div id={this.props.id} className={this.panelClass} role=\"tabpanel\">\n          <div className=\"panel-body\" style={{height: this.props.height}}>\n            {this.props.children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPanel.propTypes = {\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  edit: React.PropTypes.func,\n  add: React.PropTypes.func\n};\nPanel.defaultProps = {\n  initCollapsed: false,\n  id: 'default-panel',\n  height: '100%'\n};\n\nexport default Panel;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Panel.js","import SpecimenBarcodeForm from './barcodeForm.js';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankSpecimenForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // get Id of available status\n    let availableId = Object.keys(this.props.containerStati).find(\n      key => this.props.containerStati[key] === 'Availabale'\n    );\n\n    this.state = {\n      errorMessage: null,\n      formErrors: {},\n      barcodeList: {\n        1: {\n          specimen: {},\n          container: {statusId: availableId, temperature: 20}\n        }\n      },\n      countBarcodes: 1\n    };\n\n    this.saveBarcodeList = this.saveBarcodeList.bind(this);\n    this.save = this.save.bind(this);\n  }\n\n  saveBarcodeList() {\n    let barcodeList = this.state.barcodeList;\n    for (let barcode in barcodeList) {\n      this.save(barcodeList[barcode].container, this.props.saveContainer);\n      this.save(barcodeList[barcode].specimen, this.props.saveSpecimen);\n    }\n  }\n\n  save(entity, url) {\n    let entityObject = new FormData();\n    for (let key in entity) {\n      if (entity[key] !== \"\") {\n        entityObject.append(key, entity[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: url,\n      data: entityObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        this.props.refreshParent();\n        swal(\"Save Successful!\", \"\", \"success\");\n        this.props.onSuccess();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  setContainer(name, value) {\n    let siteId = this.state.siteId;\n    let containerList = this.state.containerList;\n\n    if (name === 'siteId') {\n      siteId = value;\n\n    }\n\n    \n  }\n\n  setSpecimen(name, value) {\n\n  }\n\n  setBarcodeList(barcodeData, barcodeKey) {\n    let barcodeList = this.state.barcodeList;\n    barcodeList[barcodeKey] = barcodeData;\n    \n    this.setState({ barcodeList});\n  };\n\n  addBarcode() {\n    let barcodeList = this.state.barcodeList;\n    let count = this.state.countBarcodes;\n\n    barcodeList[count+1] = {\n      specimen: {},\n      container: {}\n    }; \n\n    this.setState({\n      barcodeList: barcodeList,\n      countBarcodes: count + 1\n    });\n  }\n\n  copyBarcode(key, multiplier) {\n    let count = this.state.countBarcodes;\n    let nextKey = count+1;\n    let barcodeList = this.state.barcodeList;\n\n    for (let i=1; i<=multiplier; i++) {\n      barcodeList[nextKey] = JSON.parse(JSON.stringify(barcodeList[key])); \n      delete barcodeList[nextKey].barcode;\n      nextKey++;\n    }\n\n    this.setState({\n      barcodeList: barcodeList,\n      countBarcodes: nextKey\n    });\n  }\n\n  removeBarcode(key) {\n    let barcodeList = this.state.barcodeList;\n    delete barcodeList[key];\n\n    this.setState({\n      barcodeList: barcodeList\n    });\n  }\n\n  render() {\n\n    //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n    let barcodeListArray = Object.keys(this.state.barcodeFormList);\n    let barcodes = [];\n    let i = 1;\n    for (let key of barcodeListArray) {\n      barcodes.push(\n        <SpecimenBarcodeForm\n          key={key}\n          barcodeKey={key}\n          id={i} \n          barcodeData={this.state.barcodeFormList[key] ? \n            this.state.barcodeFormList[key] : null}\n          removeBarcode={barcodeListArray.length !== 1 ?\n            () => this.removeBarcode(key) : null}\n          addBarcode={i == barcodeListArray.length ? this.addBarcode : null}\n          copyBarcode={i == barcodeListArray.length && this.state.barcodeList[key] ? \n            this.copyBarcode.bind(this, key) : null}\n          setParentFormData={this.setBarcodeList}\n          onChange={this.props.onChange}\n          specimenTypes={this.props.specimenTypes}\n          containerTypesPrimary={this.props.containerTypesPrimary}\n          containersNonPrimary={this.props.containersNonPrimary}\n          specimenTypeAttributes={this.props.specimenTypeAttributes}\n          attributeDatatypes={this.props.attributeDatatypes}\n          attributeOptions={this.props.attributeOptions}\n          capacities={this.props.capacities}\n          containerDimensions={this.props.containerDimensions}\n          containerCoordinates={this.props.containerCoordinates}\n          specimenTypeUnits={this.props.specimenTypeUnits}\n          units={this.props.units}\n        />\n      )\n      \n      i++;\n    }\n\n    let globalFields;\n    let remainingQuantityFields;\n    if (this.props.parentSpecimenIds) {\n      globalFields = (\n        <div>\n          <StaticElement\n            label=\"Parent Specimen\"\n            text={this.props.parentSpecimenBarcodes}\n          />\n          <StaticElement\n            label=\"PSCID\"\n            text={this.props.pscid}\n          />\n          <StaticElement\n            label=\"Visit Label\"\n            text={this.props.visit}\n          />\n        </div>\n      );\n\n      //TODO: It may be wise to make unit static and forced, or atleast prepopulated --\n      remainingQuantityFields = (\n        <div>\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Remaining Quantity\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={this.props.specimenUnits}\n            onUserInput={this.setFormData}\n            emptyOption={false}\n            required={true}\n            value={this.state.formData.unitId}\n          />\n        </div>\n      );\n    } else {\n      globalFields = (\n          <div>\n            <SearchableDropdown\n              name=\"pscid\"\n              label=\"PSCID\"\n              options={this.props.pSCIDs}\n              onUserInput={this.setFormData}\n              ref=\"pscid\"\n              required={true}\n              value={this.state.formData.pscid}\n              placeHolder='Search for a PSCID'\n            />\n            <SelectElement\n              name=\"visitLabel\"\n              label=\"Visit Label\"\n              options={this.state.visits}\n              onUserInput={this.setFormData}\n              ref=\"visitLabel\"\n              required={true}\n              value={this.state.formData.visitLabel}\n              disabled={this.state.formData.pscid ? false : true}\n            />\n          </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"specimenForm\"\n        id='specimenForm'\n        onSubmit={this.saveBarcodeList}\n        ref=\"form\"\n      >\n        <div className='row'>\n          <div className=\"col-xs-9 col-xs-offset-1\">\n            {globalFields}\n            {remainingQuantityFields}\n          </div>\n        </div>\n        {barcodes}\n        <ButtonElement\n          label='Submit'\n          columnSize='col-sm-2 col-sm-offset-10'\n        />\n      </FormElement>\n    );\n  }\n}\n\nBiobankSpecimenForm.propTypes = {\n};\n\nexport default BiobankSpecimenForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenForm.js","import SpecimenCollectionForm from './collectionForm'\n\n/**\n * Biobank Barcode Form\n *\n * Acts a subform for BiobankSpecimenForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenBarcodeForm extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      formData: {},\n      formErrors: {},\n      collapsed: true,\n      copyMultiplier: 1,\n    };\n   \n    this.setFormData = this.setFormData.bind(this);\n    this.setChildFormData = this.setChildFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n    this.toggleCollapse = this.toggleCollapse.bind(this);\n    this.setCopyMultiplier = this.setCopyMultiplier.bind(this);\n    this.copy = this.copy.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.formData) {\n      let formData = this.props.formData;\n    \n      this.setState({\n        formData: formData\n      }); \n    }   \n  }\n\n  toggleCollapse() {\n    this.setState({collapsed: !this.state.collapsed});\n  }\n\n  setCopyMultiplier(e) {\n    let copyMultiplier = e.target.value;\n    \n    this.setState({\n      copyMultiplier: copyMultiplier\n    }); \n  }\n\n  copy() {\n    this.props.copyBarcodeForm(this.state.copyMultiplier);\n  }\n\n  render() {\n    let addBarcodeFormButton;\n    let addBarcodeFormText;\n    let copyBarcodeFormButton;\n    let copyBarcodeFormText;\n    if (this.props.addBarcodeForm) {\n      addBarcodeFormButton = (\n        <span className='action'>\n          <div\n            className='action-button add'\n            onClick={this.props.addBarcodeForm}\n          >\n          +\n          </div>\n        </span>\n      );\n\n      addBarcodeFormText = (\n        <span className='action-title'>\n          New Entry\n        </span>\n      );\n    }\n\t\n    if (this.props.copyBarcodeForm) {\n      copyBarcodeFormButton = (\n        <span className='action'>\n          <div\n            className='action-button add'\n            onClick={this.copy}\n          >\n            <span className='glyphicon glyphicon-duplicate'/>\n          </div>\n        </span>\n      );\n      copyBarcodeFormText = (\n        <span className='action-title'>\n          <input \n            className='form-control input-sm'\n            type='number'\n            min='1'\n            max='50'\n            style={{width: 50, display: 'inline'}}\n            onChange={this.setCopyMultiplier}\n            value={this.state.copyMultiplier}\n          />\n          Copies\n        </span>\n      );\n    }\n\n    let removeBarcodeFormButton;\n    if (this.props.removeBarcodeForm) {\n      const glyphStyle = {\n        color: '#DDDDDD',\n        marginLeft: 10,\n        cursor: 'pointer',\n        fontSize: 15\n      }\n\n      removeBarcodeFormButton = (\n        <span \n          className='glyphicon glyphicon-remove' \n          onClick={this.props.removeBarcodeForm}\n          style={glyphStyle}\n        />\n      );\n    }\n\n    return (\n      <FormElement\n        name='biobankBarcode'\n      >\n        <div className='row'>\n          <div className='col-xs-9 col-xs-offset-1'>\n            <div>   \n              <TextboxElement\n                name='barcode'\n                label={'Barcode ' + this.props.id}\n                onUserInput={this.setFormData}\n                ref='barcode'\n                required={true}\n                value={this.state.formData.barcode}\n              />\n            </div>\n          </div>\n          <div className='col-xs-1' style={{paddingLeft:0, marginTop:10}}>\n            <span \n              className= {this.state.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up'}\n              style={{cursor: 'pointer', fontSize:15, position:'relative', right:40}}\n              data-toggle='collapse' \n              data-target={'#item-' + this.props.id}\n              onClick={this.toggleCollapse}\n            />\n            {removeBarcodeFormButton}\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xs-2'/>\n          <div className='col-xs-8'>\n            <div id={'item-' + this.props.id} className='collapse'>\n              <SelectElement                                                          \n                name=\"specimenType\"                                                   \n                label=\"Specimen Type\"                                                 \n                options={this.props.specimenTypes}                                    \n                onUserInput={this.setFormData}                                        \n                ref=\"specimenType\"                                                    \n                required={true}                                                       \n                value={this.state.formData.specimenType}                              \n              />                 \n              <SelectElement                                                        \n                name=\"containerType\"                                                \n                label=\"Container Type\"                                              \n                options={this.props.containerTypesPrimary}                          \n                onUserInput={this.setFormData}                                      \n                ref=\"containerType\"                                                 \n                required={true}                                                     \n                value={this.state.formData.containerType}                           \n              />            \n              <SpecimenCollectionForm\n                formData={this.props.formData}\n                setParentFormData={this.setChildFormData}\n                onChange={this.props.onChange}\n                specimenTypes={this.props.specimenTypes}\n                specimenTypeAttributes={this.props.specimenTypeAttributes}\n                attributeDatatypes={this.props.attributeDatatypes}\n                attributeOptions={this.props.attributeOptions}\n                containerTypesPrimary={this.props.containerTypesPrimary}\n                containersNonPrimary={this.props.containersNonPrimary}\n                containerDimensions={this.props.containerDimensions}\n                containerCoordinates={this.props.containerCoordinates}\n                specimenTypeUnits={this.props.specimenTypeUnits}\n                stati={this.props.stati}\n              />\n              <ContainerParentForm                                                    \n                setParentFormData={this.setContainerParentFormData}                   \n                containersNonPrimary={this.props.containersNonPrimary}                \n                containerDimensions={this.props.containerDimensions}                  \n                containerCoordinates={this.props.containerCoordinates}                \n              />\n            </div>\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xs-11'>\n            <div className='col-xs-4'/>\n            <div className='col-xs-3 action'>\n              {addBarcodeFormButton}\n              {addBarcodeFormText}\n            </div>\n            <div className='col-xs-3 action'>\n              {copyBarcodeFormButton}\n              {copyBarcodeFormText}\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    this.props.onChange instanceof Function && this.props.onChange();   \n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState(\n      {\n      formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setChildFormData(collectionFormData) {\n    var formData = this.state.formData;\n    \n    for (let field in collectionFormData) {\n      formData[field] = collectionFormData[field]\n    }\n \n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    this.props.setParentFormData(this.state.formData, this.props.barcodeKey);\n  }\n}\n\nSpecimenBarcodeForm.propTypes = {\n  id: React.PropTypes.string,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n}\n\nexport default SpecimenBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/barcodeForm.js","/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenCollectionForm extends React.Component {\n  constructor() {\n    super();\n    \n    this.getSpecimenTypeFields = this.getSpecimenTypeFields.bind(this);\n    this.setCollectionData = this.setCollectionData.bind(this);\n    this.setData = this.setData.bind(this);\n  }\n\n  setCollectionData(name, value) {\n    let collection = this.props.specimen.collection;\n    collection[name] = value;\n    this.props.setSpecimenData('collection', collection);\n  }\n\n  setData(name, value) {\n    let data = this.props.specimen.collection.data;\n    data[name] = value;\n    this.setCollectionData('data', data);\n  }\n\n  // This generates all the form fields for a given specimen type\n  getSpecimenTypeFields(fieldsObject) {\n    let specimenTypeFields = Object.keys(fieldsObject).map((attribute) => {\n      let datatype = this.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"text\" || datatype === \"number\") {\n\n        if (fieldsObject[attribute]['refTableId'] == null) {\n          return (\n            <TextboxElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              onUserInput={this.setData}\n              required={fieldsObject[attribute]['required']}\n              value={this.props.specimen.collection.data[attribute]}\n            />\n          );\n        }\n\n        if (fieldsObject[attribute]['refTableId'] !== null) {\n          return (\n            <SelectElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              options={this.props.attributeOptions[fieldsObject[attribute]['refTableId']]}\n              onUserInput={this.setData}\n              required={fieldsObject[attribute]['required']}\n              value={this.props.specimen.collection.data[attribute]}\n            />\n          );\n        }\n      }\n\n      if (datatype === \"datetime\") {\n        return (\n          <DateElement\n            name={attribute}\n            label={fieldsObject[attribute]['name']}\n            onUserInput={this.setData}\n            ref={attribute}\n            required={fieldsObject[attribute]['required']}\n            value={this.props.specimen.collection.data[attribute]}\n          />\n        );\n      }\n\n      if (datatype === \"boolean\") {\n        // There is currently no CheckboxElement or RadioElement in loris/jsx/Form.js and therefore\n        // this is not possible.     \n      }\n    })\n\n    return specimenTypeFields;\n  }\n\n  render() {\n\n    let updateButton;\n    if (this.props.specimen) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    }\n\n    let specimenTypeUnits = {};\n    let specimenTypeFields;\n    if (this.props.specimen.typeId) {\n     \n      //This modifies the selections for unit drop down based on the chosen specimen type \n      for (let id in this.props.specimenTypeUnits[this.props.specimen.typeId]) {\n        specimenTypeUnits[id] = this.props.specimenTypeUnits[this.props.specimen.typeId][id].unit;\n      }\n\n      let specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.props.specimen.typeId];\n      if (specimenTypeFieldsObject) {\n        specimenTypeFields = this.getSpecimenTypeFields(specimenTypeFieldsObject);\n      }\n    }\n\n    let specimenFields;\n    if (this.props.specimen.typeId) {\n      specimenFields = (\n        <div>\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Quantity\"\n            onUserInput={this.setCollectionData}\n            required={true}\n            value={this.props.specimen.collection.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={specimenTypeUnits}\n            onUserInput={this.setCollectionData}\n            required={true}\n            value={this.props.specimen.collection.unitId}\n          />\n          {specimenTypeFields}\n          <DateElement\n            name=\"date\"\n            label=\"Date\"\n            minYear=\"2000\"\n            maxYear=\"2018\"\n            onUserInput={this.setCollectionData}\n            required={true}\n            value={this.props.specimen.collection.date}\n          />\n          <TimeElement\n            name=\"time\"\n            label=\"Time\"\n            onUserInput={this.setCollectionData}\n            required={true}\n            value={this.props.specimen.collection.time}\n          />\n          <TextareaElement\n            name=\"comments\"\n            label=\"Comments\"\n            onUserInput={this.setCollectionData}\n            ref=\"comments\"\n            value={this.props.specimen.collection.comments}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"biobankSpecimen\"\n        onSubmit={this.props.saveSpecimen}\n        ref=\"form\"\n      >\n        {specimenFields}\n        {updateButton}\n      </FormElement>\n    );\n  }\n}\n\n\nSpecimenCollectionForm.propTypes = {\n}\n\nexport default SpecimenCollectionForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/collectionForm.js","import SpecimenBarcodeForm from './barcodeForm';\nimport BiobankSpecimenForm from './specimenForm';\nimport SpecimenPreparationForm from './preparationForm';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\nclass PoolSpecimenForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      barcodeList: {},\n      errorMessage: null,\n      formErrors: {},\n      barcodeCount: 2,\n      preparation: false,\n      step: 1\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.setPreparationFormData = this.setPreparationFormData.bind(this);\n    this.setSpecimenFormData = this.setSpecimenFormData.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n    this.mapFormOptions = this.mapFormOptions.bind(this);\n    this.setBarcodeCount = this.setBarcodeCount.bind(this);\n    this.next = this.next.bind(this);\n    this.previous = this.previous.bind(this);\n    this.addPreparation = this.addPreparation.bind(this);\n    this.removePreparation = this.removePreparation.bind(this);\n    this.validate = this.validate.bind(this);\n    this.formSwitch = this.formSwitch.bind(this);\n    this.preparationSwitch = this.preparationSwitch.bind(this);\n    this.runAjax = this.runAjax.bind(this);\n  }\n\n  //TODO: map options for forms - this is used frequently and may need to be moved to a more global place\n  mapFormOptions(originalObject, targetAttribute) {\n    let mappedObject = {}; \n    for (let i in originalObject) {\n      mappedObject[i] = originalObject[i][targetAttribute];\n    }   \n\n    return mappedObject;\n  }\n\n  next() {\n    this.validate().then(\n      data => {\n        this.setState({\n          poolData: data,\n          step: this.state.step+1\n        });\n      }, \n      error => {\n        swal(\"Oops!\", error.responseText, \"error\");\n      }\n    );\n  }\n\n  previous() {\n    this.setState({\n      step: this.state.step-1\n    });\n  }\n\n  validate() {\n    return this.runAjax(this.props.specimenRequest, {barcodeList: this.state.barcodeList});\n  }\n\n  runAjax(url, inputData) {\n    return new Promise((resolve, reject) => {\n      $.ajax(url, {\n        method: \"GET\",\n        dataType: 'json',\n        data: inputData,\n        success: function(data) {\n          resolve(data);\n        }.bind(this),\n        error: function(error, textStatus, errorThrown) {\n          reject(error);\n          console.error(error);\n        }\n      });  \n    })\n  }\n\n  setBarcodeCount(field, value) {\n    let barcodeCount = value;\n    let barcodeList = this.state.barcodeList;\n    for (let barcode in barcodeList) {\n      if (barcode > barcodeCount) {\n        delete barcodeList[barcode];\n      }\n    }\n\n    this.setState({barcodeCount, barcodeList});\n  }\n\n  formSwitch(inputForm, specimenForm) {\n    switch(this.state.step) {\n      case 1:\n        return inputForm;\n      case 2:\n        return specimenForm;\n    }\n  }\n\n  preparationSwitch(preparationButton, preparationForm) {\n    switch(this.state.preparation) {\n      case false:\n        return preparationButton;\n      case true:\n        return preparationForm;\n    }\n  }\n\n  addPreparation() {\n    this.validate().then(\n      data => {\n        this.setState({\n          poolData: data,\n          preparation: true\n        });\n      },\n      error => {\n        swal('Oh no!', error.responseText, 'error');\n      }\n    );\n  }\n\n  removePreparation() {\n    let formData = this.state.formData;\n    //TODO: is it better to set it to empty, or delete it?\n    formData.preparationForm = {};\n    this.setState({\n      preparation: false,\n      formData\n    });\n  }\n\n  render() {\n    //Generates barcodes\n    let barcodes = [];\n    for (let i=1; i<=this.state.barcodeCount; i++) {\n      barcodes.push(\n        <TextboxElement\n          name={i}\n          label={'Barcode ' + i}\n          onUserInput={this.setFormData}\n          required={true}\n          value={this.state.barcodeList[i]}\n          errorMessage={this.state.formErrors[i]}\n        />\n      )\n    }\n    \n    let preparationButton = ( \n      <div className='row'>\n        <div className='col-xs-4'/>\n        <div className='col-xs 4 action'>\n            <span className='action'>\n            <div \n              className='action-button add'\n              onClick={this.addPreparation}\n            >\n              +\n            </div>\n            </span>\n            <div className='action-title'>\n              Add Preparation\n            </div>\n        </div>\n      </div>\n    );\n\n    let preparationForm;\n    if (this.state.poolData) {\n\n      const specimenProtocolAttributes = this.props.specimenProtocolAttributes[this.state.poolData.typeId]\n \n      let specimenProtocols = {};\n      for (let id in specimenProtocolAttributes) {\n        specimenProtocols[id] = this.props.specimenProtocols[id];\n      }\n      specimenProtocols = this.mapFormOptions(specimenProtocols, 'protocol');\n\n      preparationForm = (\n        <div className='row'>\n          <div className='col-sm-9 col-sm-offset-1'>\n            <SpecimenPreparationForm\n              formData={this.state.formData.preparationForm}\n              specimenProtocols={specimenProtocols}\n              specimenProtocolAttributes={specimenProtocolAttributes}\n              attributeDatatypes={this.props.attributeDatatypes}\n              attributeOptions={this.props.attributeOptions}\n              setParentFormData={this.setPreparationFormData}\n              insertAction={`${loris.BaseURL}/biobank/ajax/submitData.php?action=insertSpecimenPreparation`}\n            />\n            <a className='pull-right' style={{cursor:'pointer'}} onClick={this.removePreparation}>Cancel Preparation</a>\n          </div>\n        </div>\n      );\n    }\n\n    let inputForm = (\n      <div>\n        <div className='row'>\n          <div className='col-sm-9 col-sm-offset-1'>\n            <StaticElement\n              label='Pooling Note'\n              text='Select or Scan the specimens to be pooled. Please ensure that they\n                    are the same type, and share the same PSCID and Visit Label'\n            />\n            <NumericElement\n              label='№ of Specimens'\n              min='2'\n              max='100'\n              value={this.state.barcodeCount}\n              onUserInput={this.setBarcodeCount}\n            />\n            {barcodes}\n          </div>\n        </div>\n        {this.preparationSwitch(preparationButton, preparationForm)}\n        <div className='col-sm-3 col-xs-offset-9 action'>\n          <div className='action-title'>\n            Next\n          </div>\n          <span className='action'>\n            <div \n              className='action-button update'\n              onClick={this.next}\n            >\n              <span className='glyphicon glyphicon-chevron-right'/>\n            </div>\n          </span>\n        </div>\n      </div>\n    );\n\n    //TODO: Things here need to be in the proper order!!!\n    let specimenForm;\n    if (this.state.poolData) {\n\n      // This is to provide the options for the output specimens\n      let specimenTypes = {};\n      if (this.state.poolData.typeId) {\n        specimenTypes[this.state.poolData.typeId] = this.props.specimenTypes[this.state.poolData.typeId];\n      }\n  \n      let pscid = this.props.pSCIDs[this.state.poolData.candidateId];\n      let visit = this.props.sessionData[pscid].visits[this.state.poolData.sessionId];\n\n      let barcodesArray = Object.values(this.state.barcodeList); \n      let barcodesString = barcodesArray.join(', ');  \n\n      // TODO: rather than all specimen units this should really be specific to the\n      // type\n      let specimenUnits = this.mapFormOptions(this.props.specimenUnits, 'unit');\n\n      specimenForm = (\n        <div className='row'>\n          <div className='col-xs-12'>\n            <BiobankSpecimenForm\n              formData={this.state.formData.specimenForm}\n              candidateId={this.state.poolData.candidateId}\n              pscid={pscid}\n              sessionId={this.state.poolData.sessionId}\n              visit={visit}\n              parentSpecimenBarcodes={barcodesString}\n              parentSpecimenIds={this.state.poolData.specimenIds}\n              specimenTypes={specimenTypes}\n              specimenTypeUnits={this.props.specimenTypeUnits}\n              specimenUnits={specimenUnits}\n              containerTypesPrimary={this.props.containerTypesPrimary}\n              containersNonPrimary={this.props.containersNonPrimary}\n              specimenTypeAttributes={this.props.specimenTypeAttributes}\n              attributeDatatypes={this.props.attributeDatatypes}\n              attributeOptions={this.props.attributeOptions}\n              capacities={this.props.capacities}\n              containerDimensions={this.props.containerDimensions}\n              containerCoordinates={this.props.containerCoordinates}\n              setParentFormData={this.setSpecimenFormData}\n              action={`${loris.BaseURL}/biobank/ajax/submitData.php?action=submitSpecimen`}\n              refreshParent={this.props.refreshParent}\n            />\n            <ButtonElement\n              label='Submit'\n            />\n          </div>\n          <div className='col-sm-3 col-xs-offset-2 action'>\n            <span className='action'>\n              <div \n                className='action-button update'\n                onClick={this.previous}\n              >\n                <span className='glyphicon glyphicon-chevron-left'/>\n              </div>\n            </span>\n            <div className='action-title'>\n              Previous\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"poolSpecimenForm\"\n        id='poolSpecimenForm'\n        onSubmit={this.handleSubmit}\n        ref=\"form\"\n      >\n        {this.formSwitch(inputForm, specimenForm)}\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n\n  validateForm(formElement, value) {\n    let formErrors = this.state.formErrors;\n\n    //validate barcode regex\n    if (formElement === \"barcode\" && value !== \"\") {\n      if (!(/^hello/.test(this.state.formData.barcode))) {\n        formErrors.barcode = true;\n      } else {\n        formErrors.barcode = false;\n      }\n    }\n\n    //validate that quantity is a number and less than capacity\n    if (formElement === \"quantity\" && value !== \"\") {\n      if (isNaN(value) || (value > this.props.capacities[this.state.currentContainerType])) {\n        formErrors.quantity = true;\n      } else {\n        formErrors.quantity = false;\n      }\n    }\n\n    //validate datatypes and regex of generated type attributes\n    let specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n    let specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n\n      let datatype = this.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"number\") {\n        if (formElement === attribute) {\n          if (isNaN(value) && value !== \"\") {\n            formErrors[attribute] = true;\n          } else {\n            formErrors[attribute] = false;\n          }\n        }\n      }\n    })\n\n    this.setState({\n      formErrors: formErrors\n    });\n  }\n\n\n  /**\n   * Handle form submission\n   * @param {object} e - Form submission event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    this.submitForm();\n  }\n\n  /*\n   * Uploads the file to the server\n   */\n  submitForm() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let preparationForm = this.state.formData.preparationForm;\n    let specimenForm = this.state.formData.specimenForm;\n    formData['preparationForm'] = JSON.stringify(preparationForm);\n    formData['specimenForm'] = JSON.stringify(specimenForm);\n\n    console.log(formData.specimenForm);\n    console.log(formData.preparationForm);\n\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        //this.props.refreshParent();\n        swal(\"Specimens Pooled Successful!\", \"\", \"success\");\n        this.props.onSuccess();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Checks if the inputted file name is valid\n   *\n   * @param {string} requiredFileName - Required file name\n   * @param {string} fileName - Provided file name\n   * @return {boolean} - true if fileName starts with requiredFileName, false\n   *   otherwise\n   */\n//  isValidFileName(requiredFileName, fileName) {\n//    if (fileName === null || requiredFileName === null) {\n//      return false;\n//    }\n//\n//    return (fileName.indexOf(requiredFileName) === 0);\n//  }\n\n  /**\n   * Validate the form\n   *\n   * @param {object} formRefs - Object containing references to React form elements\n   * @param {object} formData - Object containing form data inputed by user\n   * @return {boolean} - true if all required fields are filled, false otherwise\n   */\n  isValidForm(formRefs, formData) {\n    let isValidForm = true;\n\n    let requiredFields = {\n      pscid: null,\n      visitLabel: null,\n    };\n\n    Object.keys(requiredFields).map(function(field) {\n      if (formData[field]) {\n        requiredFields[field] = formData[field];\n      } else if (formRefs[field]) {\n        formRefs[field].props.hasError = true;\n        isValidForm = false;\n      }\n    });\n    this.forceUpdate();\n\n    return isValidForm;\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    // This lets the modal window know that there is formData\n    // and will cause a warning to be thrown of the modal window\n    // is exited\n    this.props.onChange instanceof Function && this.props.onChange();\n  \n    if (formElement === \"pscid\" && value !== \"\" && value !== undefined) {\n      this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n    }\n\n    let formData = this.state.formData;\n    let barcodeList = this.state.barcodeList;\n \n    //TODO: there must be a better way to do this\n    if (isNaN(formElement)) {\n      formData[formElement] = value;\n    } else {\n      barcodeList[formElement] = value;\n    }\n\n    this.setState({\n      formData,\n      barcodeList\n    });\n  }\n\n  setPreparationFormData(preparationFormData) {\n    let formData = this.state.formData;\n    formData.preparationForm = preparationFormData;\n    \n    this.setState({formData});\n  }\n\n  setSpecimenFormData(specimenFormData) {\n    let formData = this.state.formData;\n    formData.specimenForm = specimenFormData;\n  \n    this.setState({formData});\n  }\n}\n\nPoolSpecimenForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired,\n  refreshTable: React.PropTypes.func\n};\n\nexport default PoolSpecimenForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/poolSpecimenForm.js","\n/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenPreparationForm extends React.Component {\n  constructor() {\n    super();\n\n    this.getSpecimenProtocolFields = this.getSpecimenProtocolFields.bind(this);\n    this.setPreparation = this.setPreparation.bind(this);\n    this.addData = this.addData.bind(this);\n    this.setData = this.setData.bind(this);\n  }\n\n  setPreparation(name, value) {\n    let preparation = this.props.specimen.preparation;\n    preparation[name] = value;\n    this.props.setSpecimenData('preparation', preparation);\n  }\n\n  addData() {\n    let preparation = this.props.specimen.preparation;\n    preparation.data = {};\n    this.props.setSpecimenData('preparation', preparation);\n  }\n\n  setData(name, value) {\n    let data = this.props.specimen.preparation.data;\n    data[name] = value;\n    this.setPreparation('data', data);\n  }\n\n  // TODO: decouple this code from the collectionForm by make it a React Component\n  // This generates all the form fields for a given specimen protocol\n  getSpecimenProtocolFields(fieldsObject) {\n    let specimenProtocolFields = Object.keys(fieldsObject).map((attribute) => {\n      let datatype = this.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\n      if (datatype === \"text\" || datatype === \"number\") {\n        if (fieldsObject[attribute]['refTableId'] == null) {\n          return (\n            <TextboxElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              onUserInput={this.setData}\n              required={fieldsObject[attribute]['required']}\n              value={this.props.specimen.preparation.data[attribute]}\n            />\n          );\n        }\n\n        if (fieldsObject[attribute]['refTableId'] !== null) {\n          return (\n            <SelectElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              options={this.props.attributeOptions[fieldsObject[attribute]['refTableId']]}\n              onUserInput={this.setData}\n              required={fieldsObject[attribute]['required']}\n              value={this.props.specimen.preparation.data[attribute]}\n            />\n          );\n        }\n      }\n\n      if (datatype === \"datetime\") {\n        return (\n          <DateElement\n            name={attribute}\n            label={fieldsObject[attribute]['name']}\n            onUserInput={this.setData}\n            ref={attribute}\n            required={fieldsObject[attribute]['required']}\n            value={this.props.specimen.preparation.data[attribute]}\n          />\n        );\n      }\n\n      if (datatype === \"boolean\") {\n      }\n    });\n\n    return specimenProtocolFields;\n  }\n\n  render() {\n\n    let submitButton;\n    if (this.props.data.specimen.preparation) {\n      submitButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    } else {\n      submitButton = (\n        <ButtonElement label=\"Submit\"/>\n      );\n    }\n\n    let specimenProtocolFields;\n    if (this.props.specimen.preparation.protocolId) {\n      let specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.props.specimen.preparation.protocolId];\n\n      if (specimenProtocolFieldsObject) {\n        if (this.props.specimen.preparation.data) {\n          specimenProtocolFields = this.getSpecimenProtocolFields(specimenProtocolFieldsObject);\n        } else {\n          this.addData();\n        }\n      }\n    }\n\n    return (\n      <FormElement\n        name=\"specimenPreparation\"\n        onSubmit={this.props.saveSpecimen}\n        ref=\"form\"\n      >\n        <SelectElement\n          name=\"protocolId\"\n          label=\"Protocol\"\n          options={this.props.specimenProtocols}\n          onUserInput={this.setPreparation}\n          required={true}\n          value={this.props.specimen.preparation.protocolId}\n        />\n        {specimenProtocolFields}\n        <DateElement\n          name=\"date\"\n          label=\"Date\"\n          onUserInput={this.setPreparation}\n          required={true}\n          value={this.props.specimen.preparation.date}\n        />\n        <TimeElement\n          name=\"time\"\n          label=\"Time\"\n          onUserInput={this.setPreparation}\n          required={true}\n          value={this.props.specimen.preparation.time}\n        />\n        <TextareaElement\n          name=\"comments\"\n          label=\"Comments\"\n          onUserInput={this.setPreparation}\n          value={this.props.specimen.preparation.comments}\n        />\n        {submitButton} \n      </FormElement>\n    );\n  }\n\n}\n\nSpecimenPreparationForm.propTypes = {\n}\n\nexport default SpecimenPreparationForm;\n\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/preparationForm.js","import ContainerBarcodeForm from './containerBarcodeForm.js';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankContainerForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // get Id of available status\n    let availableId = Object.keys(this.props.containerStati).find(\n      key => this.props.containerStati[key] === 'Available'\n    );\n\n    this.state = {\n      formErrors: {},\n      errorMessage: null,\n      containerList: {1: {statusId: availableId, temperature: 20}},\n      countContainers: 1,\n      collapsed: {1: true},\n      copyMultiplier: 1,\n    };\n\n    this.toggleCollapse = this.toggleCollapse.bind(this);\n    this.addContainer = this.addContainer.bind(this);\n    this.setContainer = this.setContainer.bind(this);\n    this.setCopyMultiplier = this.setCopyMultiplier.bind(this);\n    this.copyContainer = this.copyContainer.bind(this);\n    this.removeContainer = this.removeContainer.bind(this);\n    this.saveContainerList = this.saveContainerList.bind(this);\n    this.saveContainer = this.saveContainer.bind(this);\n  }\n\n  toggleCollapse(id) {\n    let collapsed = this.state.collapsed;\n    collapsed[id] = !collapsed[id];\n    this.setState({collapsed});\n  }\n\n  saveContainerList() {\n    let containerList = this.state.containerList;\n    for (let container in containerList) {\n      this.saveContainer(containerList[container]);\n    }\n  }\n\n  saveContainer(container) {\n    let containerObj = new FormData();\n    for (let key in container) {\n      if (container[key] !== \"\") {\n        containerObj.append(key, container[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: containerObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        this.props.refreshParent();\n        swal(\"Container Submission Successful!\", \"\", \"success\");\n        this.props.onSuccess();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  setContainer(name, value, key) {\n    this.props.onChange instanceof Function && this.props.onChange();\n    let siteId = this.state.siteId;\n    let containerList = this.state.containerList;\n    if (name === 'siteId') {\n       siteId = value;\n       for (let container in containerList) {\n         containerList[container].originId = siteId;\n         containerList[container].locationId = siteId;\n       }\n    } else {\n      containerList[key][name] = value;\n    }\n    this.setState({containerList, siteId});\n  }\n\n  addContainer() {\n    let containerList = this.state.containerList;\n    let count = this.state.countContainers;\n    let collapsed = this.state.collapsed;\n    let siteId = this.state.siteId;\n    let temperature = 20;\n\n    // get Id of available status\n    let statusId = Object.keys(this.props.containerStati).find(\n      key => this.props.containerStati[key] === 'Available'\n    );\n\n    containerList[count+1] = {\n      statusId: statusId,\n      originId: siteId,\n      locationId: siteId,\n      temperature: temperature\n    };\n\n    collapsed[count+1] = true;  \n\n    this.setState({\n      containerList: containerList,\n      countContainers: count + 1,\n      collapsed: collapsed,\n    });\n  }\n\n  setCopyMultiplier(e) {\n    let copyMultiplier = e.target.value;\n    this.setState({copyMultiplier});\n  }\n\n  copyContainer(key) {\n    let count = this.state.countContainers;\n    let nextKey = count+1;\n    let containerList = this.state.containerList;\n    let multiplier = this.state.copyMultiplier\n\n    for (let i=1; i<=multiplier; i++) {\n      containerList[nextKey] = JSON.parse(JSON.stringify(containerList[key]));\n      delete containerList[nextKey].barcode;\n      nextKey++;\n    }    \n\n    this.setState({\n      containerList: containerList,\n      countContainers: nextKey\n    });\n  }\n\n  removeContainer(key) {\n    let containerList = this.state.containerList;\n    delete containerList[key];\n\n    this.setState({\n      containerList\n    });\n  }\n\n\n  render() {\n    //Generates new Barcode Form everytime the addContainer button is pressed\n    let containerListArray = Object.keys(this.state.containerList);\n    let containers = [];\n    let i = 1;\n    for (let key of containerListArray) {\n      containers.push(\n        <ContainerBarcodeForm\n          key={key}\n          containerKey={key}\n          id={i}\n          collapsed={this.state.collapsed[i]}\n          toggleCollapse={this.toggleCollapse}\n          container={this.state.containerList[key] || null}\n          removeContainer={containerListArray.length !== 1 ? () => this.removeContainer(key) : null}\n          addContainer={i == containerListArray.length ? this.addContainer : null}\n          setCopyMultiplier={this.setCopyMultiplier}\n          copyMultiplier={this.state.copyMultiplier}\n          copyContainer={i == containerListArray.length && this.state.containerList[key] ? this.copyContainer : null}\n          setContainer={this.setContainer}\n          onChange={this.props.onChange}\n          containerTypesNonPrimary={this.props.containerTypesNonPrimary}\n          containerBarcodesNonPrimary={this.props.containerBarcodesNonPrimary}\n        />\n      );\n     \n      i++;\n    }\n\n    return (\n      <FormElement\n        name=\"containerForm\"\n        onSubmit={this.saveContainerList}\n        ref=\"form\"\n      >\n        <br/>\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <SelectElement\n              name=\"siteId\"\n              label=\"Site\"\n              options={this.props.sites}\n              onUserInput={this.setContainer}\n              required={true}\n              value={this.state.siteId}\n            />\n          </div>\n        </div>\n        {containers}\n          <div className=\"col-xs-3 col-xs-offset-9\">\n            <ButtonElement label=\"Submit\"/>\n          </div>\n      </FormElement>\n    );\n  }\n}\n\nBiobankContainerForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired,\n  barcode: React.PropTypes.string,\n  refreshTable: React.PropTypes.func\n};\n\nexport default BiobankContainerForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerForm.js","/**\n * Container Barcode Form\n *\n * Acts a subform for ContainerForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass ContainerBarcodeForm extends React.Component {\n  constructor() {\n    super();\n   \n    this.setContainer = this.setContainer.bind(this);\n    this.copy = this.copy.bind(this);\n  }\n\n  copy() {\n    this.props.copyContainer(this.props.containerKey);\n  }\n\n  //TODO: change form.js so this isn't necessary\n  setContainer(name, value) {\n    this.props.setContainer(name, value, this.props.containerKey);\n  }\n\n  render() {\n    // HR TODO: All this CSS should eventually be moved\n    let addContainerButton;\n    let addContainerText;\n    let copyContainerButton;\n    let copyContainerText;\n    if (this.props.addContainer) {\n      addContainerButton = (\n        <span className='action'>\n          <div\n            className='action-button add'\n            onClick={this.props.addContainer}\n          >\n          +\n          </div>\n        </span>\n      );\n\n      addContainerText = (\n        <span className='action-title'>\n          New Entry\n        </span>\n      );\n    }   \n    \n    if (this.props.copyContainer) {\n      copyContainerButton = ( \n        <span className='action'>\n          <div\n            className='action-button add'\n            onClick={this.copy}\n          >   \n            <span className='glyphicon glyphicon-duplicate'/>\n          </div>\n        </span>\n      );  \n      copyContainerText = ( \n        <span className='action-title'>\n          <input \n            className='form-control input-sm'\n            type='number'\n            min='1'\n            max='50'\n            style={{width: 50, display: 'inline'}}\n            onChange={this.props.setCopyMultiplier}\n            value={this.props.copyMultiplier}\n          />  \n          Copies\n        </span>\n      );  \n    }   \n\n    let removeContainerButton;\n    if (this.props.removeContainer) {\n      const glyphStyle = { \n        color: '#DDDDDD',\n        marginLeft: 10, \n        cursor: 'pointer',\n        fontSize: 15\n      }   \n\n      removeContainerButton = ( \n        <span \n          className='glyphicon glyphicon-remove' \n          onClick={this.props.removeContainer}\n          style={glyphStyle}\n        />\n      );  \n    }\n\n    return (\n      <FormElement\n        name='container'\n      >\n        <div className='row'>\n          <div className='col-xs-11'>\n            <div>\n            <TextboxElement\n              name='barcode'\n              label={'Barcode ' + this.props.id}\n              onUserInput={this.setContainer}\n              ref='barcode'\n              required={true}\n              value={this.props.container.barcode}\n            />\n            </div>\n          </div>\n          <div className='col-xs-1' style={{paddingLeft:0, marginTop:10}}>\n            <span\n              className= {this.props.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up'}\n              style={{cursor: 'pointer', fontSize:15, position:'relative', right:40}}\n              data-toggle='collapse'\n              data-target={'#item-' + this.props.containerKey}\n              onClick={() => this.props.toggleCollapse(this.props.containerKey)}\n            />\n            {removeContainerButton}\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xs-2'/>\n          <div className='col-xs-9'>\n            <div id={'item-' + this.props.containerKey} className='collapse'>\n              <SelectElement\n                name='typeId'\n                label='Container Type'\n                options={this.props.containerTypesNonPrimary}\n                onUserInput={this.setContainer}\n                required={true}\n                value={this.props.container.typeId}\n              />\n            </div>\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xs-11'>\n            <div className='col-xs-3'/>\n            <div className='col-xs-4 action'>\n              {addContainerButton}\n              {addContainerText}\n            </div>\n            <div className='col-xs-4 action'>\n              {copyContainerButton}\n              {copyContainerText}\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n}\n\nContainerBarcodeForm.propTypes = {\n  id: React.PropTypes.string,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n}\n\nexport default ContainerBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerBarcodeForm.js","/**\n * This file contains React components for Tabs component.\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\n/**\n * Tabs Component.\n * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n * and corresponding tab panes.\n *\n * ================================================\n * Usage:\n *\n * 1. Define an array of tabs with IDs and labels\n *\n * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n *\n * 2. Pass tabList as <Tab> property and <TabPane> as child\n *  ```\n * <Tabs tabs={tabList} defaultTab=\"tab1\">\n *   <TabPane TabId={tabList[0].id}>\n *     // Tab content goes here\n *   </TabPane>\n * </Tabs>\n * ```\n * =================================================\n *\n */\nclass Tabs extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    const hash = window.location.hash;\n    let activeTab = \"\";\n\n    /**\n     * Determine the initial active tab in this order\n     * 1. Try to infer from the URL, otherwise\n     * 2. Try to infer from the defaultTab prop, otherwise\n     * 3. Set to be the first tab of the list\n     */\n    if (this.props.updateURL && hash) {\n      activeTab = hash.substr(1);\n    } else if (this.props.defaultTab) {\n      activeTab = this.props.defaultTab;\n    } else if (this.props.tabs.length > 0) {\n      activeTab = this.props.tabs[0].id;\n    }\n\n    this.state = {\n      activeTab: activeTab\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.getTabs = this.getTabs.bind(this);\n    this.getTabPanes = this.getTabPanes.bind(this);\n  }\n\n  handleClick(tabId, e) {\n    this.setState({activeTab: tabId});\n    this.props.onTabChange(tabId);\n\n    // Add tab href to URL querystring and scroll the page to top\n    if (this.props.updateURL) {\n      const scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n      window.location.hash = e.target.hash;\n      $('html,body').scrollTop(scrollDistance);\n    }\n  }\n\n  getTabs() {\n    let tabs = (this.props.tabs).map(function(tab) {\n      let tabClass = this.state.activeTab === tab.id ? 'active' : null;\n      let href = \"#\" + tab.id;\n      let tabID = \"tab-\" + tab.id;\n      return (\n        <li\n          role=\"presentation\"\n          className={tabClass}\n          key={tab.id}\n        >\n          <a id={tabID}\n             href={href}\n             role=\"tab\"\n             data-toggle=\"tab\"\n             onClick={this.handleClick.bind(null, tab.id)}\n          >\n            {tab.label}\n          </a>\n        </li>\n      );\n    }.bind(this));\n\n    return tabs;\n  }\n\n  getTabPanes() {\n    let tabPanes = React.Children.map(this.props.children, function(child, key) {\n      if (child) {\n        return React.cloneElement(child, {\n          activeTab: this.state.activeTab,\n          key: key\n        });\n      }\n    }.bind(this));\n\n    return tabPanes;\n  }\n\n  render() {\n    let tabs = this.getTabs();\n    let tabPanes = this.getTabPanes();\n    let tabStyle = {\n      marginLeft: 0,\n      marginBottom: '5px'\n    };\n\n    return (\n      <div>\n        <ul className=\"nav nav-tabs\" role=\"tablist\" style={tabStyle}>\n          {tabs}\n        </ul>\n        <div className=\"tab-content\">\n          {tabPanes}\n        </div>\n      </div>\n    );\n  }\n}\nTabs.propTypes = {\n  tabs: React.PropTypes.array.isRequired,\n  defaultTab: React.PropTypes.string,\n  updateURL: React.PropTypes.bool\n};\nTabs.defaultProps = {\n  onTabChange: function() {},\n  // Set updateURL to default to true but allow for change\n  // Nested tabs should set this variable to false\n  updateURL: true\n};\n\n/**\n * Allows to dynamically render vertical tabs corresponding to tab panes.\n */\n\nclass VerticalTabs extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const hash = window.location.hash;\n    let activeTab = \"\";\n\n    /**\n     * Determine the initial active tab in this order\n     * 1. Try to infer from the URL, otherwise\n     * 2. Try to infer from the defaultTab prop, otherwise\n     * 3. Set to be the first tab of the list\n     */\n    if (this.props.updateURL && hash) {\n      activeTab = hash.substr(1);\n    } else if (this.props.defaultTab) {\n      activeTab = this.props.defaultTab;\n    } else if (this.props.tabs.length > 0) {\n      activeTab = this.props.tabs[0].id;\n    }\n\n    this.state = {\n      activeTab: activeTab\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.getTabs = this.getTabs.bind(this);\n    this.getTabPanes = this.getTabPanes.bind(this);\n  }\n\n  handleClick(tabId, e) {\n    this.setState({activeTab: tabId});\n    this.props.onTabChange(tabId);\n\n    // Add tab href to URL querystring and scroll the page to top\n    if (this.props.updateURL) {\n      const scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n      window.location.hash = e.target.hash;\n      $('html,body').scrollTop(scrollDistance);\n    }\n  }\n\n  getTabs() {\n    let tabs = (this.props.tabs).map(function(tab) {\n      let tabClass = this.state.activeTab === tab.id ? 'active' : null;\n      let href = \"#\" + tab.id;\n      let tabID = \"tab-\" + tab.id;\n      return (\n        <li\n          role=\"presentation\"\n          className={tabClass}\n          key={tab.id}\n        >\n          <a id={tabID}\n             href={href}\n             role=\"tab\"\n             data-toggle=\"tab\"\n             onClick={this.handleClick.bind(null, tab.id)}\n          >\n            {tab.label}\n          </a>\n        </li>\n      );\n    }.bind(this));\n\n    return tabs;\n  }\n\n  getTabPanes() {\n    let tabPanes = React.Children.map(this.props.children, function(child, key) {\n      if (child) {\n        return React.cloneElement(child, {\n          activeTab: this.state.activeTab,\n          key: key\n        });\n      }\n    }.bind(this));\n\n    return tabPanes;\n  }\n\n  render() {\n    let tabs = this.getTabs();\n    let tabPanes = this.getTabPanes();\n    let tabStyle = {\n      marginLeft: 0,\n      marginBottom: '5px'\n    };\n\n    return (\n      <div>\n        <div className=\"tabbable col-md-3 col-sm-3\">\n          <ul className=\"nav nav-pills nav-stacked\" role=\"tablist\" style={tabStyle}>\n            {tabs}\n          </ul>\n        </div>\n        <div className=\"tab-content col-md-9 col-sm-9\">\n          {tabPanes}\n        </div>\n      </div>\n    );\n  }\n}\nVerticalTabs.propTypes = {\n  tabs: React.PropTypes.array.isRequired,\n  defaultTab: React.PropTypes.string,\n  updateURL: React.PropTypes.bool\n};\nVerticalTabs.defaultProps = {\n  onTabChange: function() {},\n  // Set updateURL to default to true but allow for change\n  // Nested tabs should set this variable to false\n  updateURL: true\n};\n\n/*\n * TabPane component.\n * Used to wrap content for every tab.\n */\nclass TabPane extends React.Component {\n  render() {\n    let classList = \"tab-pane\";\n    let title;\n\n    if (this.props.TabId === this.props.activeTab) {\n      classList += \" active\";\n    }\n    if (this.props.Title) {\n      title = <h1>{this.props.Title}</h1>;\n    }\n\n    return (\n      <div role=\"tabpanel\" className={classList} id={this.props.TabId}>\n        {title}\n        {this.props.children}\n      </div>\n    );\n  }\n}\nTabPane.propTypes = {\n  TabId: React.PropTypes.string.isRequired,\n  Title: React.PropTypes.string,\n  activeTab: React.PropTypes.string\n};\n\nexport {\n  Tabs,\n  VerticalTabs,\n  TabPane\n};\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Tabs.js","/**\n * This file contains React components for Modal component.\n *\n * @author Henri Rabalais\n * @version 1.1.0\n *\n */\n\nimport Modal from './Modal';\n\n/**\n * Modal Component.\n * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n *\n * ================================================\n * Usage:\n *\n * =================================================\n *\n */\n\nclass FormModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { show: false, throwWarning: false }\n\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.confirmClose = this.confirmClose.bind(this);\n    this.setWarning = this.setWarning.bind(this);\n  }\n\n  renderChildren() {\n    return React.Children.map(this.props.children, child => {\n      return React.cloneElement(child, { onSuccess: this.closeModal, onChange: this.setWarning });\n    });\n  }\n\n  openModal() {\n    this.setState({\n      show: true\n    });\n  } \n\n  setWarning() {\n    this.setState({\n      throwWarning: true\n    });\n  }\n\n  confirmClose() {\n    if (this.state.throwWarning) {\n      swal({\n        title: \"Are You Sure?\",\n        text: \"Leaving the form will result in the loss of any information entered.\",\n        type: \"warning\",\n        showCancelButton: true,\n        confirmButtonText: 'Proceed',\n        cancelButtonText: 'Cancel',\n      },\n      function() {\n        this.closeModal();\n      }.bind(this));\n    } else {\n      this.closeModal();\n    }\n  }\n\n  closeModal() {\n    this.setState({\n      show: false,\n      throwWarning: false\n    });\n  }\n\n  render() {\n    return (\n      <Modal \n        closeModal={this.confirmClose} \n        openModal={this.openModal} \n        show={this.state.show}\n        {...this.props} \n      >\n        {this.renderChildren()}\n      </Modal>\n    );\n  }\n}\n\nFormModal.propTypes = {\n  title: React.PropTypes.string,\n  buttonClass: React.PropTypes.string,\n  buttonStyle: React.PropTypes.object,\n  buttonContent: React.PropTypes.object,\n};\nFormModal.defaultProps = {\n  buttonClass: 'btn btn-primary'\n};\n\nexport default FormModal;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/FormModal.js","/**\n * This file contains React components for Modal component.\n *\n * @author Henri Rabalais\n * @version 1.1.0\n *\n */\n\n/**\n * Modal Component.\n * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n *\n * ================================================\n * Usage:\n *\n * =================================================\n *\n */\nclass Modal extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n  }\n\n  render() {\n    // Black Background with Alpha Channel\n    const backdropStyle = {\n      position: 'fixed',\n      zIndex: 9998,\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundColor: 'rgba(0,0,0,0.3)',\n      padding: 50\n    };\n\n    // White Modal Window\n    const modalStyle = {\n      position: 'relative',\n      maxWidth: 1000,\n      maxHeight: '100%',\n      margin: '0 auto',\n      backgroundColor: '#fff',\n      borderRadius: 10,\n      overflowY: 'auto',\n      zIndex: 9999\n    };\n\n    const titleStyle = {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      background: '#093782',\n      height: '70px',\n      borderTopRightRadius: '10',\n      color: '#FFFFFF',\n      fontSize: 24,\n      padding: 20,\n    }\n\n    const glyphStyle = {\n      marginLeft: 'auto',\n      cursor: 'pointer'\n    }\n\n    const bodyStyle = {\n      padding: 15\n    }\n  \n    var button = (\n      <div\n        className={this.props.buttonClass}\n        onClick={this.props.openModal}\n      >\n        {this.props.buttonContent}\n      </div>\n    );\n\n    var modal;\n    if (this.props.show) {\n      modal = (\n        <div style={backdropStyle} onClick={this.props.closeModal}>\n          <div\n            style={modalStyle}\n            onClick={e => {\n              e.stopPropagation();\n            }}\n          >\n            <div\n              style={titleStyle}\n            >\n              {this.props.title}\n              <span \n                style={glyphStyle}\n                onClick={this.props.closeModal}\n              >\n                ×\n              </span>\n            </div>\n            <div\n              style={bodyStyle}\n            >\n              {this.props.children}\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div style={this.props.style}>\n        {button}\n        {modal}\n      </div>\n    );\n  }\n}\n\nModal.propTypes = {\n  title: React.PropTypes.string,\n  buttonClass: React.PropTypes.string,\n  buttonStyle: React.PropTypes.object,\n  buttonContent: React.PropTypes.object,\n  show: React.PropTypes.boolean,\n  closeModal: React.PropTypes.func,\n  openModal: React.PropTypes.func\n};\nModal.defaultProps = {\n  buttonClass: 'btn btn-primary'\n};\n\nexport default Modal;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Modal.js","/**\n * This file contains React component for Loader\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n */\n\n/**\n * Loader component\n */\nclass Loader extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n\n    return (\n      <div className='loader-container'>\n        <div className=\"loader\"/>\n      </div>\n\n\n    );\n  }\n}\n\nexport default Loader;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Loader.js","/**\n * Modify behaviour of specified column cells in the Data Table component\n * @param {string} column - column name\n * @param {string} cell - cell content\n * @param {arrray} rowData - array of cell contents for a specific row\n * @param {arrray} rowHeaders - array of table headers (column names)\n * @return {*} a formated table cell for a given column\n */\nfunction formatColumn(column, cell, rowData, rowHeaders) {\n  // If a column if set as hidden, don't display it\n  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n  //  return null;\n  //}\n\n  // Create the mapping between rowHeaders and rowData in a row object.\n  var row = {};\n  rowHeaders.forEach(function(header, index) {\n    row[header] = rowData[index];\n  }, this);\n\n  // create array of classes to be added to td tag\n  var classes = [];\n\n  // convert array to string, with blank space separator\n  classes = classes.join(\" \");\n\n  //const hasWritePermission = loris.userHasPermission('media_read');\n  if (column === 'Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Barcode'];\n    return <td className= {classes}><a href={specimenURL}>{cell}</a></td>;\n  }\n\n  if (column === 'Parent Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Parent Barcode'];\n    return <td className= {classes}><a href={specimenURL}>{cell}</a></td>; \n}\n\n  if (column === 'Container Barcode') {\n    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Container Barcode'];\n    return <td className= {classes}><a href={containerURL}>{cell}</a></td>;\n}\n\n // if (column === 'Visit Label') {\n //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n //   }\n // }\n\n // if (column === 'Edit Metadata') {\n //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n // }\n\n  return <td className={classes}>{cell}</td>;\n}\n\nexport default formatColumn;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/columnFormatterSpecimen.js","/**\n * Modify behaviour of specified column cells in the Data Table component\n * @param {string} column - column name\n * @param {string} cell - cell content\n * @param {arrray} rowData - array of cell contents for a specific row\n * @param {arrray} rowHeaders - array of table headers (column names)\n * @return {*} a formated table cell for a given column\n */\nfunction formatColumn(column, cell, rowData, rowHeaders) {\n  // If a column if set as hidden, don't display it\n  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n  //  return null;\n  //}\n\n  // Create the mapping between rowHeaders and rowData in a row object.\n  var row = {};\n  rowHeaders.forEach(function(header, index) {\n    row[header] = rowData[index];\n  }, this);\n\n  // create array of classes to be added to td tag\n  var classes = [];\n\n  // convert array to string, with blank space separator\n  classes = classes.join(\" \");\n\n  //const hasWritePermission = loris.userHasPermission('media_read');\n  if (column === 'Barcode') {\n    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Barcode'];\n    return <td className= {classes}><a href={containerURL}>{cell}</a></td>;\n  }\n\n  if (column === 'Parent Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Parent Barcode'];\n    return <td className= {classes}><a href={containerURL}>{cell}</a></td>; \n}\n\n // if (column === 'Visit Label') {\n //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n //   }\n // }\n\n // if (column === 'Edit Metadata') {\n //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n // }\n\n  return <td className={classes}>{cell}</td>;\n}\n\nexport default formatColumn;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/columnFormatterContainer.js"],"sourceRoot":""}