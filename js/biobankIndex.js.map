{"version":3,"sources":["webpack:///modules/biobank/js/biobankIndex.js","webpack:///webpack/bootstrap cd8b274bcd979feae2ae?7603******","webpack:///./modules/biobank/jsx/biobankIndex.js","webpack:///./jsx/FilterForm.js","webpack:///./jsx/Panel.js","webpack:///./modules/biobank/jsx/specimenForm.js","webpack:///./modules/biobank/jsx/barcodeForm.js","webpack:///./jsx/Tabs.js","webpack:///./modules/biobank/jsx/columnFormatter.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","_FilterForm","_FilterForm2","_specimenForm","_specimenForm2","_Tabs","_columnFormatter","_columnFormatter2","BiobankIndex","_React$Component","this","_this","getPrototypeOf","state","isLoaded","filter","isOpen","fetchData","bind","updateFilter","resetFilters","toggleModal","$","ajax","DataURL","method","dataType","success","data","setState","Data","error","console","refs","biobankFilter","clearFilter","React","createElement","className","tabList","label","addSpecimenButton","specimenForm","loris","userHasPermission","ButtonElement","buttonClass","onUserInput","type","Modal","show","onClose","BaseURL","action","Tabs","tabs","defaultTab","updateURL","TabPane","TabId","Module","name","ref","columns","formElements","form","onUpdate","StaticDataTable","Headers","Filter","getFormattedCell","Component","biobankIndex","ReactDOM","render","document","getElementById","_Panel","_Panel2","FilterForm","getFormChildren","setFilter","onElementUpdate","queryString","QueryString","get","keys","forEach","filterKey","exactMatch","clear","formChildren","Children","children","child","isValidElement","callbackFunc","callbackName","elementName","displayName","queryFieldName","filterValue","push","cloneElement","JSON","parse","stringify","fieldName","fieldValue","set","height","title","FormElement","defaultProps","warn","propTypes","PropTypes","string","isRequired","object","func","Panel","collapsed","initCollapsed","panelClass","toggleCollapsed","glyphClass","panelHeading","onClick","data-toggle","data-target","style","cursor","role","_barcodeForm","_barcodeForm2","BiobankSpecimenForm","formData","barcodeFormList","errorMessage","formErrors","countBarcodeForms","handleSubmit","validateForm","setFormData","specimenSubmit","addBarcodeForm","setBarcodeFormData","errorCode","errorMsg","specimenId","candidateId","sessionId","_this2","undefined","glyphStyle","color","margin","buttonStyle","appearance","outline","boxShadow","borderColor","backgroundColor","barcodeForms","_loop","setSpecimenFormData","specimenTypes","containerTypesPrimary","containerBarcodesNonPrimary","specimenTypeAttributes","attributeDatatypes","capacities","units","button","removeBarcodeForm","staticFields","selectFields","StaticElement","text","barcode","PSCIDs","sessionData","visits","SelectElement","options","required","pscid","visitLabel","onSubmit","DateElement","minYear","maxYear","timeCollect","formElement","_this3","test","isNaN","currentContainerType","quantity","specimenTypeFieldsObject","currentSpecimenType","map","attribute","datatype","e","preventDefault","formRefs","isValidForm","formObj","FormData","append","url","cache","contentType","processData","xhr","window","XMLHttpRequest","event","CustomEvent","dispatchEvent","swal","err","msg","responseJSON","message","requiredFields","field","hasError","forceUpdate","barcodeFormData","barcodeId","index","splice","BiobankBarcodeForm","getSpecimenTypeFields","specimenFields","specimenTypeFields","containerType","parentContainer","TextboxElement","TextareaElement","notes","specimenType","hash","location","activeTab","substr","handleClick","getTabs","getTabPanes","tabId","onTabChange","scrollDistance","scrollTop","tab","tabClass","href","tabID","tabPanes","tabStyle","marginLeft","marginBottom","array","bool","_React$Component2","apply","arguments","classList","Title","_React$Component3","modalStyle","position","maxWidth","maxHeight","padding","borderRadius","overflowY","zIndex","backdropStyle","top","bottom","left","right","stopPropagation","node","formatColumn","column","cell","rowData","rowHeaders","row","header","classes","join","specimenURL","containerURL"],"mappings":"CAAS,SAAUA,SCInB,QAAAC,qBAAAC,UAGA,GAAAC,iBAAAD,UACA,MAAAC,kBAAAD,UAAAE,OAGA,IAAAC,QAAAF,iBAAAD,WACAE,WACAE,GAAAJ,SACAK,QAAA,EAUA,OANAP,SAAAE,UAAAM,KAAAH,OAAAD,QAAAC,cAAAD,QAAAH,qBAGAI,OAAAE,QAAA,EAGAF,OAAAD,QAvBA,GAAAD,oBAqCA,OATAF,qBAAAQ,EAAAT,QAGAC,oBAAAS,EAAAP,iBAGAF,oBAAAU,EAAA,GAGAV,oBAAA,KDMM,SAASI,OAAQD,QAASH,qBAE/B,YAkBA,SAASW,wBAAuBC,KAAO,MAAOA,MAAOA,IAAIC,WAAaD,KAAQE,QAASF,KAEvF,QAASG,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAtBje,GAAIW,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBEhDjiB6B,YAAA9C,oBAAA,GFoDK+C,aAAepC,uBAAuBmC,aEnD3CE,cAAAhD,oBAAA,GFuDKiD,eAAiBtC,uBAAuBqC,eEtD7CE,MAAAlD,oBAAA,GAEAmD,iBAAAnD,oBAAA,GF0DKoD,kBAAoBzC,uBAAuBwC,kBExD1CE,aFoEc,SAAUC,kBElE5B,QAAAD,cAAYf,OAAOvB,gBAAAwC,KAAAF,aAAA,IAAAG,OAAArC,2BAAAoC,MAAAF,aAAAnB,WAAAR,OAAA+B,eAAAJ,eAAA9C,KAAAgD,KACXjB,OADW,OAGjBkB,OAAKE,OACHC,UAAU,EACVC,UACAC,QAAQ,GAIVL,MAAKM,UAAYN,MAAKM,UAAUC,KAAfP,OACjBA,MAAKQ,aAAeR,MAAKQ,aAAaD,KAAlBP,OACpBA,MAAKS,aAAeT,MAAKS,aAAaF,KAAlBP,OACpBA,MAAKU,YAAcV,MAAKU,YAAYH,KAAjBP,OAbFA,MFmOlB,MAhKAlC,WAAU+B,aAAcC,kBAqBxBnB,aAAakB,eACXV,IAAK,oBACLd,MAAO,WEzER0B,KAAKO,eFoFJnB,IAAK,YACLd,MAAO,WE5ERsC,EAAEC,KAAKb,KAAKjB,MAAM+B,SAChBC,OAAQ,MACRC,SAAU,OACVC,QAAS,SAASC,MAChBlB,KAAKmB,UACHC,KAAMF,KACNd,UAAU,KAEZI,KAAKR,MACPqB,MAAO,SAASA,QACdC,QAAQD,MAAMA,cFkFjBjC,IAAK,eACLd,MAAO,SE9EG+B,QACXL,KAAKmB,UAAUd,mBFiFdjB,IAAK,eACLd,MAAO,WE9ER0B,KAAKuB,KAAKC,cAAcC,iBFkFvBrC,IAAK,cACLd,MAAO,WE/ER0B,KAAKmB,UACHb,QAASN,KAAKG,MAAMG,YFoFrBlB,IAAK,SACLd,MAAO,WE/ER,IAAK0B,KAAKG,MAAMC,SACd,MACEsB,OAAAC,cAAA,UAAQC,UAAU,wBAAlB,UAEEF,MAAAC,cAAA,QACEC,UAAU,0DAMlB,IAAIC,WACD/E,GAAI,YAAagF,MAAO,cACxBhF,GAAI,aAAcgF,MAAO,eAGxBC,yBACAC,mBAeJ,OAdIC,OAAMC,kBAAkB,mBACzBH,kBACEL,MAAAC,cAACQ,eAAcC,YAAY,kBAAkBC,YAAarC,KAAKW,YAAamB,MAAM,mBAAmBQ,KAAK,WAE5GN,aACEN,MAAAC,cAAAhC,MAAA4C,OAAOC,KAAMxC,KAAKG,MAAMG,OAAQmC,QAASzC,KAAKW,aAC5Ce,MAAAC,cAAAjC,eAAAnC,SACEuD,QAAYmB,MAAMS,QAAlB,kDACAC,OAAWV,MAAMS,QAAjB,yDAOThB,MAAAC,cAAA,WACED,MAAAC,cAAAhC,MAAAiD,MAAMC,KAAMhB,QAASiB,WAAW,YAAYC,WAAW,GACrDrB,MAAAC,cAAAhC,MAAAqD,SAASC,MAAOpB,QAAQ,GAAG/E,IACzB4E,MAAAC,cAAAnC,aAAAjC,SACE2F,OAAO,UACPC,KAAK,kBACLrG,GAAG,uBACHsG,IAAI,iBACJC,QAAS,EACTC,aAActD,KAAKG,MAAMiB,KAAKmC,KAC9BC,SAAUxD,KAAKS,aACfJ,OAAQL,KAAKG,MAAME,QAEnBqB,MAAAC,cAAA,WACDI,kBACCL,MAAAC,cAACQ,eAAcL,MAAM,gBAAgBQ,KAAK,QAAQD,YAAarC,KAAKU,gBAEtEgB,MAAAC,cAAC8B,iBACCrC,KAAMpB,KAAKG,MAAMiB,KAAKA,KACtBsC,QAAS1D,KAAKG,MAAMiB,KAAKsC,QACzBC,OAAQ3D,KAAKG,MAAME,OACnBuD,iBAAA/D,kBAAAtC,WAGJmE,MAAAC,cAAAhC,MAAAqD,SAASC,MAAOpB,QAAQ,GAAG/E,IACzB4E,MAAAC,cAAAnC,aAAAjC,SACE2F,OAAO,UACPC,KAAK,mBACLrG,GAAG,wBACHsG,IAAI,kBACJC,QAAS,EACTC,aAActD,KAAKG,MAAMiB,KAAKmC,KAC9BC,SAAUxD,KAAKS,aACfJ,OAAQL,KAAKG,MAAME,QAEnBqB,MAAAC,cAAA,WACAD,MAAAC,cAACQ,eAAcL,MAAM,gBAAgBQ,KAAK,QAAQD,YAAarC,KAAKU,gBAEtEgB,MAAAC,cAAC8B,iBACCrC,KAAMpB,KAAKG,MAAMiB,KAAKA,KACtBsC,QAAS1D,KAAKG,MAAMiB,KAAKsC,QACzBC,OAAQ3D,KAAKG,MAAME,OACnBuD,iBAAA/D,kBAAAtC,YAILyE,kBF2FGlC,cErOiB4B,MAAMmC,UAgJjCjD,GAAE,WACA,GAAMkD,cACJpC,MAAAC,cAAA,OAAKC,UAAU,gBACbF,MAAAC,cAAC7B,cAAagB,QAAYmB,MAAMS,QAAlB,0BAIlBqB,UAASC,OAAOF,aAAcG,SAASC,eAAe,sBF6FlD,SAASrH,OAAQD,QAASH,qBAE/B,YAYA,SAASW,wBAAuBC,KAAO,MAAOA,MAAOA,IAAIC,WAAaD,KAAQE,QAASF,KAEvF,QAASG,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAhBjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBG1PjiByG,OAAA1H,oBAAA,GH8PK2H,QAAUhH,uBAAuB+G,QG9OhCE,WH4QY,SAAUtE,kBG1Q1B,QAAAsE,YAAYtF,OAAOvB,gBAAAwC,KAAAqE,WAAA,IAAApE,OAAArC,2BAAAoC,MAAAqE,WAAA1F,WAAAR,OAAA+B,eAAAmE,aAAArH,KAAAgD,KACXjB,OADW,OAIjBkB,OAAKwB,YAAcxB,MAAKwB,YAAYjB,KAAjBP,OACnBA,MAAKqE,gBAAkBrE,MAAKqE,gBAAgB9D,KAArBP,OACvBA,MAAKsE,UAAYtE,MAAKsE,UAAU/D,KAAfP,OACjBA,MAAKuE,gBAAkBvE,MAAKuE,gBAAgBhE,KAArBP,OAIvBA,MAAKwE,YAAcC,YAAYC,MAXd1E,MHgclB,MArLAlC,WAAUsG,WAAYtE,kBAmBtBnB,aAAayF,aACXjF,IAAK,oBACLd,MAAO,WGjRR,GAAI+B,WACAoE,YAAczE,KAAKyE,WAGvBtG,QAAOyG,KAAKH,aAAaI,QAAQ,SAASzF,KACxC,GAAI0F,WAAqB,gBAAR1F,IAAyB,SAAWA,GACrDiB,QAAOyE,YACLxG,MAAOmG,YAAYrF,KACnB2F,YAAY,KAKhB/E,KAAKjB,MAAMyE,SAASnD,WH0RnBjB,IAAK,cACLd,MAAO,WGpRR0B,KAAKyE,YAAcC,YAAYM,MAAMhF,KAAKjB,MAAMmE,QAChDlD,KAAKjB,MAAMyE,gBHgSVpE,IAAK,kBACLd,MAAO,WGvRR,GAAI2G,gBAkCJ,OAjCAvD,OAAMwD,SAASL,QAAQ7E,KAAKjB,MAAMoG,SAAU,SAASC,MAAOhG,KAE1D,GAAIsC,MAAM2D,eAAeD,QACD,kBAAfA,OAAM9C,MACb8C,MAAMrG,MAAMsD,YACZ,CACA,GAAIiD,cAAeF,MAAMrG,MAAMsD,YAC3BkD,aAAeD,aAAanC,KAC5BqC,YAAcJ,MAAM9C,KAAKmD,YACzBC,eAAuC,WAArBN,MAAMrG,MAAMoE,KAAqB,cAAgBiC,MAAMrG,MAAMoE,KAC/EwC,YAAc3F,KAAKyE,YAAYiB,eAGd,iBAAjBH,eAEAD,aADkB,kBAAhBE,aAAwD,UAArBJ,MAAMrG,MAAMuD,KAClCtC,KAAKyB,YAELzB,KAAKwE,gBAAgBhE,KAAK,KAAMgF,cAInDP,aAAaW,KAAKlE,MAAMmE,aAAaT,OACnC/C,YAAaiD,aACbhH,MAAOqH,YAAcA,YAAc,GACnCvG,IAAKA,OAGPY,KAAKuE,UAAUiB,YAAaJ,MAAMrG,MAAMoE,KAAMwC,iBAE9CV,cAAaW,KAAKlE,MAAMmE,aAAaT,OAAQhG,IAAKA,QAEpDoB,KAAKR,OAEAiF,gBHuSN7F,IAAK,YACLd,MAAO,SGxRAgE,KAAMlD,IAAKd,OACnB,GAAI+B,UAaJ,OAZIL,MAAKjB,MAAMsB,SACbA,OAASyF,KAAKC,MAAMD,KAAKE,UAAUhG,KAAKjB,MAAMsB,UAG5CjB,KAAOd,OACT+B,OAAOjB,QACPiB,OAAOjB,KAAKd,MAAQA,MACpB+B,OAAOjB,KAAK2F,WAAuB,kBAATzC,MACjBjC,QAAUjB,KAAiB,KAAVd,aACnB+B,QAAOjB,KAGTiB,UHoSNjB,IAAK,kBACLd,MAAO,SG3RMgE,KAAM2D,UAAWC,YAE/B,GAAyB,gBAAdD,YAAgD,gBAAfC,YAA5C,CAKA,GAAIR,gBAAgC,WAAdO,UAA0B,cAAgBA,SAChEjG,MAAKyE,YAAcC,YAAYyB,IAAInG,KAAKyE,YAAaiB,eAAgBQ,WAGrE,IAAI7F,QAASL,KAAKuE,UAAUjC,KAAM2D,UAAWC,WAC7ClG,MAAKjB,MAAMyE,SAASnD,YH8RnBjB,IAAK,SACLd,MAAO,WG1RR,GAAI2G,cAAejF,KAAKsE,kBACpBhB,aAAetD,KAAKjB,MAAMuE,YAU9B,OARIA,eACFnF,OAAOyG,KAAKtB,cAAcuB,QAAQ,SAASoB,WACzC,GAAIP,gBAAgC,WAAdO,UAA0B,cAAgBA,SAChE3C,cAAa2C,WAAW5D,YAAcrC,KAAKwE,gBAAgBhE,KAAK,KAAMyF,WACtE3C,aAAa2C,WAAW3H,MAAQ0B,KAAKyE,YAAYiB,iBACjDlF,KAAKR,OAIP0B,MAAAC,cAAAyC,QAAA7G,SACET,GAAIkD,KAAKjB,MAAMjC,GACfsJ,OAAQpG,KAAKjB,MAAMqH,OACnBC,MAAOrG,KAAKjB,MAAMsH,OAElB3E,MAAAC,cAAC2E,YAAgBtG,KAAKjB,MACnBkG,mBHqSDZ,YGlce3C,MAAMmC,UAoK/BQ,YAAWkC,cACTzJ,GAAI,mBACJsJ,OAAQ,OACRC,MAAO,mBACP7C,SAAU,WACRlC,QAAQkF,KAAK,qCAGjBnC,WAAWoC,WACTvD,OAAQxB,MAAMgF,UAAUC,OAAOC,WAC/BvG,OAAQqB,MAAMgF,UAAUG,OAAOD,WAC/B9J,GAAI4E,MAAMgF,UAAUC,OACpBP,OAAQ1E,MAAMgF,UAAUC,OACxBN,MAAO3E,MAAMgF,UAAUC,OACvBnD,SAAU9B,MAAMgF,UAAUI,MHoS3BlK,QAAQW,QGjSM8G,YHqST,SAASxH,OAAQD,SAEtB,YAQA,SAASY,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAVjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBI9e3hBqJ,MJkgBO,SAAUhH,kBIhgBrB,QAAAgH,OAAYhI,OAAOvB,gBAAAwC,KAAA+G,MAAA,IAAA9G,OAAArC,2BAAAoC,MAAA+G,MAAApI,WAAAR,OAAA+B,eAAA6G,QAAA/J,KAAAgD,KACXjB,OADW,OAGjBkB,OAAKE,OACH6G,UAAW/G,MAAKlB,MAAMkI,eAIxBhH,MAAKiH,WACHjH,MAAKlB,MAAMkI,cACT,0BACA,6BAGJhH,MAAKkH,gBAAkBlH,MAAKkH,gBAAgB3G,KAArBP,OAdNA,MJ6jBlB,MA5DAlC,WAAUgJ,MAAOhH,kBAkBjBnB,aAAamI,QACX3H,IAAK,kBACLd,MAAO,WIngBR0B,KAAKmB,UAAU6F,WAAYhH,KAAKG,MAAM6G,eJugBrC5H,IAAK,SACLd,MAAO,WIngBR,GAAI8I,YACFpH,KAAKG,MAAM6G,UACT,8CACA,4CAIEK,aAAerH,KAAKjB,MAAMsH,MAC9B3E,MAAAC,cAAA,OACEC,UAAU,gBACV0F,QAAStH,KAAKmH,gBACdI,cAAY,WACZC,cAAa,IAAMxH,KAAKjB,MAAMjC,GAC9B2K,OAAQC,OAAQ,YAEf1H,KAAKjB,MAAMsH,MACZ3E,MAAAC,cAAA,QAAMC,UAAWwF,cAEjB,EAEJ,OACE1F,OAAAC,cAAA,OAAKC,UAAU,uBACZyF,aACD3F,MAAAC,cAAA,OAAK7E,GAAIkD,KAAKjB,MAAMjC,GAAI8E,UAAW5B,KAAKkH,WAAYS,KAAK,YACvDjG,MAAAC,cAAA,OAAKC,UAAU,aAAa6F,OAAQrB,OAAQpG,KAAKjB,MAAMqH,SACpDpG,KAAKjB,MAAMoG,gBJ6gBd4B,OI/jBUrF,MAAMmC,UA0D1BkD,OAAMN,WACJ3J,GAAI4E,MAAMgF,UAAUC,OACpBP,OAAQ1E,MAAMgF,UAAUC,OACxBN,MAAO3E,MAAMgF,UAAUC,QAEzBI,MAAMR,cACJU,eAAe,EACfnK,GAAI,gBACJsJ,OAAQ,QJ2gBTxJ,QAAQW,QIxgBMwJ,OJ4gBT,SAASlK,OAAQD,QAASH,qBAE/B,YAYA,SAASW,wBAAuBC,KAAO,MAAOA,MAAOA,IAAIC,WAAaD,KAAQE,QAASF,KAEvF,QAASG,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAhBjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBKrmBjiBkK,aAAAnL,oBAAA,GLymBKoL,cAAgBzK,uBAAuBwK,cK7lBtCE,oBLinBqB,SAAU/H,kBKhnBnC,QAAA+H,qBAAY/I,OAAOvB,gBAAAwC,KAAA8H,oBAAA,IAAA7H,OAAArC,2BAAAoC,MAAA8H,oBAAAnJ,WAAAR,OAAA+B,eAAA4H,sBAAA9K,KAAAgD,KACXjB,OADW,OAGjBkB,OAAKE,OACHiB,QACA2G,YACAC,mBACAC,aAAc,KACd7H,UAAU,EACV8H,cACAC,mBAAoB,IAItBlI,MAAKmI,aAAenI,MAAKmI,aAAa5H,KAAlBP,OAEpBA,MAAKoI,aAAepI,MAAKoI,aAAa7H,KAAlBP,OACpBA,MAAKqI,YAAcrI,MAAKqI,YAAY9H,KAAjBP,OACnBA,MAAKsI,eAAiBtI,MAAKsI,eAAe/H,KAApBP,OACtBA,MAAKuI,eAAiBvI,MAAKuI,eAAehI,KAApBP,OACtBA,MAAKwI,mBAAqBxI,MAAKwI,mBAAmBjI,KAAxBP,OApBTA,MLioClB,MAhhBAlC,WAAU+J,oBAAqB/H,kBA4B/BnB,aAAakJ,sBACX1I,IAAK,oBACLd,MAAO,WKvnBR,GAAIT,MAAOmC,IAkBX,IAjBAY,EAAEC,KAAKb,KAAKjB,MAAM+B,SAChBE,SAAU,OACVC,QAAS,SAASC,MAChBrD,KAAKsD,UACHC,KAAMF,KACNd,UAAU,KAGdiB,MAAO,SAASH,KAAMwH,UAAWC,UAC/BrH,QAAQD,MAAMH,KAAMwH,UAAWC,UAC/B9K,KAAKsD,UACHE,MAAO,gDAMTrB,KAAKjB,MAAMqG,MAAO,CACpB,GAAI2C,UAAW/H,KAAKG,MAAM4H,QAC1BA,UAAA,eAA6B/H,KAAKjB,MAAM6J,WACxCb,SAAA,MAAoB/H,KAAKjB,MAAM8J,YAC/Bd,SAAA,WAAyB/H,KAAKjB,MAAM+J,UAEpC9I,KAAKmB,UACH4G,SAAUA,eL6nBb3I,IAAK,SACLd,MAAO,WKznBD,GAAAyK,QAAA/I,IAEP,IAAyBgJ,SAArBhJ,KAAKG,MAAMkB,MACb,MACEK,OAAAC,cAAA,OAAKC,UAAU,kCACbF,MAAAC,cAAA,cACG3B,KAAKG,MAAMkB,OAOpB,KAAKrB,KAAKG,MAAMC,SACd,MACEsB,OAAAC,cAAA,UAAQC,UAAU,wBAAlB,UAEEF,MAAAC,cAAA,QACEC,UAAU,0DAsBlB,KAAK,GAfCqH,aACLC,MAAO,UACPC,OAAQ,QAEHC,aACJC,WAAY,OACZC,QAAS,OACTC,UAAW,OACXC,YAAa,cACbC,gBAAiB,eAKfC,gBAvCGC,MAAA,SAwCE3K,GACP0K,aAAa9D,KACXlE,MAAAC,cAAAkG,cAAAtK,SACEqM,oBAAqBb,OAAKN,mBAC1B3L,GAAIiM,OAAK5I,MAAMgI,kBAAkBnJ,GACjC6K,cAAed,OAAK5I,MAAMiB,KAAKyI,cAC/BC,sBAAuBf,OAAK5I,MAAMiB,KAAK0I,sBACvCC,4BAA6BhB,OAAK5I,MAAMiB,KAAK2I,4BAC7CC,uBAAwBjB,OAAK5I,MAAMiB,KAAK4I,uBACxCC,mBAAoBlB,OAAK5I,MAAMiB,KAAK6I,mBACpCC,WAAYnB,OAAK5I,MAAMiB,KAAK8I,WAC5BC,MAAOpB,OAAK5I,MAAMiB,KAAK+I,MACvBC,OAAQpL,EAAE,IAAM+J,OAAK5I,MAAMgI,kBAAkBlJ,OAC3CyC,MAAAC,cAAA,UACEW,KAAK,SACLV,UAAU,yBACV0F,QAASyB,OAAKP,gBAEd9G,MAAAC,cAAA,QAAMC,UAAU,8BAGlBF,MAAAC,cAAA,UACEW,KAAK,SACLV,UAAU,iCACV6F,MAAO2B,YACP9B,QAAS,iBAAMyB,QAAKsB,kBAAkBrL,KAExC0C,MAAAC,cAAA,QAAMC,UAAU,6BAA6B6F,MAAOwB,kBA3BnDjK,EAAI,EAAGA,EAAIgB,KAAKG,MAAMgI,kBAAkBlJ,OAAQD,IAAK2K,MAArD3K,EAqCT,IAAIsL,qBACAC,mBA8CJ,OA7CIvK,MAAKjB,MAAMqG,MACbkF,aACE5I,MAAAC,cAAA,WACED,MAAAC,cAAC6I,eACC1I,MAAM,kBACN2I,KAAMzK,KAAKjB,MAAM2L,UAEnBhJ,MAAAC,cAAC6I,eACC1I,MAAM,QACN2I,KAAMzK,KAAKG,MAAMiB,KAAKuJ,OAAO3K,KAAKjB,MAAM8J,eAE1CnH,MAAAC,cAAC6I,eACC1I,MAAM,cACN2I,KAAMzK,KAAKG,MAAMiB,KAAKwJ,YAAY5K,KAAKG,MAAMiB,KAAKuJ,OAAO3K,KAAKjB,MAAM8J,cAAcgC,OAAO7K,KAAKjB,MAAM+J,cAK1GyB,aACI7I,MAAAC,cAAA,WACED,MAAAC,cAACmJ,eACC3H,KAAK,QACLrB,MAAM,QACNiJ,QAAS/K,KAAKG,MAAMiB,KAAKuJ,OACzBtI,YAAarC,KAAKsI,YAClBlF,IAAI,QACJ4H,UAAU,EACV1M,MAAO0B,KAAKG,MAAM4H,SAASkD,QAE7BvJ,MAAAC,cAACmJ,eACC3H,KAAK,aACLrB,MAAM,cACNiJ,QAAS/K,KAAKG,MAAMiB,KAAKyJ,OACzBxI,YAAarC,KAAKsI,YAClBlF,IAAI,aACJ4H,UAAU,EACV1M,MAAO0B,KAAKG,MAAM4H,SAASmD,cAUnCxJ,MAAAC,cAAC2E,aACCnD,KAAK,kBACLgI,SAAUnL,KAAKoI,aACfhF,IAAI,QAEJ1B,MAAAC,cAAA,UAAID,MAAAC,cAAA,4BAAoB3B,KAAKG,MAAMgI,kBAAoB,EAAI,IAAM,KACjEzG,MAAAC,cAAA,WACAD,MAAAC,cAAA,OAAKC,UAAU,OACbF,MAAAC,cAAA,OAAKC,UAAU,aACZ0I,aACAC,aACD7I,MAAAC,cAACyJ,aACCjI,KAAK,cACLrB,MAAM,kBACNuJ,QAAQ,OACRC,QAAQ,OACRjJ,YAAarC,KAAKsI,YAClBlF,IAAI,cACJ4H,UAAU,EACV1M,MAAO0B,KAAKG,MAAM4H,SAASwD,gBAIhC7B,aACDhI,MAAAC,cAAA,OAAKC,UAAU,OACbF,MAAAC,cAAA,OAAKC,UAAU,aACfF,MAAAC,cAAA,OAAKC,UAAU,YACbF,MAAAC,cAACQ,eAAcL,MAAM,iBL6qB5B1C,IAAK,eACLd,MAAO,SKlpBGkN,YAAalN,OAAO,GAAAmN,QAAAzL,KAC3BkI,WAAalI,KAAKG,MAAM+H,UAGR,aAAhBsD,aAAuC,KAAVlN,QACzB,SAASoN,KAAK1L,KAAKG,MAAM4H,SAAS2C,SAGtCxC,WAAWwC,SAAU,EAFrBxC,WAAWwC,SAAU,GAOL,aAAhBc,aAAwC,KAAVlN,QAC5BqN,MAAMrN,QAAWA,MAAQ0B,KAAKG,MAAMiB,KAAK8I,WAAWlK,KAAKG,MAAMyL,sBACjE1D,WAAW2D,UAAW,EAEtB3D,WAAW2D,UAAW,EAK1B,IAAIC,0BAA2B9L,KAAKG,MAAMiB,KAAK4I,uBAAuBhK,KAAKG,MAAM4L,oBACxD5N,QAAOyG,KAAKkH,0BAA0BE,IAAI,SAACC,WAElE,GAAIC,UAAWT,OAAKtL,MAAMiB,KAAK6I,mBAAmB6B,yBAAyBG,WAAzB,YAAmDC,QACpF,YAAbA,UACEV,cAAgBS,YACdN,MAAMrN,QAAoB,KAAVA,MAClB4J,WAAW+D,YAAa,EAExB/D,WAAW+D,YAAa,IAOhCjM,MAAKmB,UACH+G,WAAYA,gBL6pBb9I,IAAK,eACLd,MAAO,SKnpBG6N,GACXA,EAAEC,gBAEF,IAAIrE,UAAW/H,KAAKG,MAAM4H,SACtBC,gBAAkBhI,KAAKG,MAAM6H,gBAC7BqE,SAAWrM,KAAKuB,IAIfvB,MAAKsM,YAAYD,SAAUtE,YAsC9BA,SAAA,gBAA8BjC,KAAKE,UAAUgC,iBAE7ChI,KAAKmB,UACH4G,SAAUA,WAGZ/H,KAAKuI,qBL2pBNnJ,IAAK,iBACLd,MAAO,WKnpBR,GAAIyJ,UAAW/H,KAAKG,MAAM4H,SACtBwE,QAAU,GAAIC,SAClB,KAAK,GAAIpN,OAAO2I,UACQ,KAAlBA,SAAS3I,MACXmN,QAAQE,OAAOrN,IAAK2I,SAAS3I,KAIjCwB,GAAEC,MACAyB,KAAM,OACNoK,IAAK1M,KAAKjB,MAAM4D,OAChBzB,KAAMqL,QACNI,OAAO,EACPC,aAAa,EACbC,aAAa,EACbC,IAAK,WACH,GAAIA,KAAM,GAAIC,QAAOC,cACrB,OAAOF,MACPtM,KAAKR,MACPiB,QAAS,WAEP,GAAIgM,OAAQ,GAAIC,aAAY,mBAC5BH,QAAOI,cAAcF,OAErBjN,KAAKmB,UACH4G,YACAC,qBAEFoF,KAAK,kCAAmC,GAAI,YAC5C5M,KAAKR,MACPqB,MAAO,SAASgM,KACd/L,QAAQD,MAAMgM,IACd,IAAIC,KAAMD,IAAIE,aAAeF,IAAIE,aAAaC,QAAU,iBACxDxN,MAAKmB,UACH8G,aAAcqF,MAEhBF,KAAKE,IAAK,GAAI,UACd9M,KAAKR,WLkrBRZ,IAAK,cACLd,MAAO,QAASgO,aKxpBPD,SAAUtE,UACpB,GAAIuE,cAAc,EAEdmB,gBACFxC,MAAO,KACPC,WAAY,KAad,OAVA/M,QAAOyG,KAAK6I,gBAAgBzB,IAAI,SAAS0B,OACnC3F,SAAS2F,OACXD,eAAeC,OAAS3F,SAAS2F,OACxBrB,SAASqB,SAClBrB,SAASqB,OAAO3O,MAAM4O,UAAW,EACjCrB,aAAc,KAGlBtM,KAAK4N,cAEEtB,eLmqBNlN,IAAK,cACLd,MAAO,SK3pBEkN,YAAalN,OAKH,UAAhBkN,aAAqC,KAAVlN,QAC7B0B,KAAKG,MAAMiB,KAAKyJ,OAAS7K,KAAKG,MAAMiB,KAAKwJ,YAAY5K,KAAKG,MAAMiB,KAAKuJ,OAAOrM,QAAQuM,OAItF,IAAI9C,UAAW/H,KAAKG,MAAM4H,QAC1BA,UAASyD,aAAelN,MAExB0B,KAAKmB,UACH4G,SAAUA,cL+pBX3I,IAAK,qBACLd,MAAO,SK5pBSuP,gBAAiBC,WAClC,GAAI/F,UAAW/H,KAAKG,MAAM4H,SACtBC,gBAAkBhI,KAAKG,MAAM6H,eACjCA,iBAAgB8F,WAAaD,gBAC7B9F,SAAA,gBAA8BC,gBAE9BhI,KAAKmB,UACH4G,SAAUA,cLgqBX3I,IAAK,iBACLd,MAAO,WK5pBR,GAAI6J,mBAAoBnI,KAAKG,MAAMgI,iBACnCA,mBAAkBvC,KAAKuC,kBAAkBA,kBAAkBlJ,OAAQ,GAAK,GACxEe,KAAKmB,UACHgH,kBAAmBA,uBLiqBpB/I,IAAK,oBACLd,MAAO,SK9pBQyP,OAChB,GAAI5F,mBAAoBnI,KAAKG,MAAMgI,iBACnCA,mBAAkB6F,OAAOD,MAAO,GAChC/N,KAAKmB,UACHgH,kBAAmBA,wBLmqBfL,qBKloCwBpG,MAAMmC,UAoexCiE,qBAAoBrB,WAClB3F,QAASY,MAAMgF,UAAUC,OAAOC,WAChCjE,OAAQjB,MAAMgF,UAAUC,OAAOC,WAC/B8D,QAAShJ,MAAMgF,UAAUC,QLoqB1B/J,QAAQW,QKjqBMuK,qBLqqBT,SAASjL,OAAQD,SAEtB,YAQA,SAASY,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAVjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBMxpC3hBuQ,mBN0qCoB,SAAUlO,kBMzqClC,QAAAkO,oBAAYlP,OAAOvB,gBAAAwC,KAAAiO,mBAAA,IAAAhO,OAAArC,2BAAAoC,MAAAiO,mBAAAtP,WAAAR,OAAA+B,eAAA+N,qBAAAjR,KAAAgD,KACXjB,OADW,OAGjBkB,OAAKE,OACH4H,YACAgE,oBAAqB,KACrBH,qBAAsB,KACtB1D,eAGFjI,MAAKqI,YAAcrI,MAAKqI,YAAY9H,KAAjBP,OACnBA,MAAKiO,sBAAwBjO,MAAKiO,sBAAsB1N,KAA3BP,OAXZA,MNw4ClB,MA9NAlC,WAAUkQ,mBAAoBlO,kBAmB9BnB,aAAaqP,qBACX7O,IAAK,SACLd,MAAO,WM/qCR,GAAI6P,gBACAC,mBAAqBpO,KAAKkO,uBA4C9B,OA3CIlO,MAAKG,MAAM4L,sBACboC,eACCzM,MAAAC,cAAA,WACED,MAAAC,cAACmJ,eACC3H,KAAK,gBACLrB,MAAM,iBACNiJ,QAAS/K,KAAKjB,MAAM+K,sBACpBzH,YAAarC,KAAKsI,YAClBlF,IAAI,gBACJ4H,UAAU,EACV1M,MAAO0B,KAAKG,MAAM4H,SAASsG,gBAE7B3M,MAAAC,cAACmJ,eACC3H,KAAK,kBACLrB,MAAM,2BACNiJ,QAAS/K,KAAKjB,MAAMgL,4BACpB1H,YAAarC,KAAKsI,YAClBlF,IAAI,kBACJ4H,UAAU,EACV1M,MAAO0B,KAAKG,MAAM4H,SAASuG,kBAE7B5M,MAAAC,cAAC4M,gBACCpL,KAAK,WACLrB,MAAO,YAAc9B,KAAKG,MAAMyL,qBAC9B,KAAO5L,KAAKjB,MAAMoL,MAAMnK,KAAKG,MAAMyL,sBAAwB,IAAM,IACnEvJ,YAAarC,KAAKsI,YAClBlF,IAAI,WACJ4H,UAAU,EACV1M,MAAO0B,KAAKG,MAAM4H,SAAS8D,SAC3B8B,SAAU3N,KAAKG,MAAM+H,WAAW2D,WAEjCuC,mBACD1M,MAAAC,cAAC6M,iBACCrL,KAAK,QACLrB,MAAM,QACNO,YAAarC,KAAKsI,YAClBlF,IAAI,QACJ9E,MAAO0B,KAAKG,MAAM4H,SAAS0G,UAOhC/M,MAAAC,cAAC2E,aACCnD,KAAK,kBAELzB,MAAAC,cAAA,OAAKC,UAAU,OACbF,MAAAC,cAAA,OAAKC,UAAU,aACbF,MAAAC,cAAA,OACE4F,cAAY,WACZC,cAAa,IAAMxH,KAAKjB,MAAMjC,GAC9BoM,MAAM,QAENxH,MAAAC,cAAC4M,gBACDpL,KAAM,UACNrB,MAAO,WAAa9B,KAAKjB,MAAMjC,GAC/BuF,YAAarC,KAAKsI,YAClBlF,IAAK,UACL4H,UAAU,EACV1M,MAAO0B,KAAKG,MAAM4H,SAAX,QACP4F,SAAU3N,KAAKG,MAAM+H,WAAX,QACVD,aAAa,oEAIjBvG,MAAAC,cAAA,OAAKC,UAAU,YACZ5B,KAAKjB,MAAMqL,SAGhB1I,MAAAC,cAAA,OAAKC,UAAU,OACbF,MAAAC,cAAA,OAAKC,UAAU,aACfF,MAAAC,cAAA,OAAKC,UAAU,YACbF,MAAAC,cAAA,OAAK7E,GAAIkD,KAAKjB,MAAMjC,GAAI8E,UAAU,YAChCF,MAAAC,cAACmJ,eACC3H,KAAK,eACLrB,MAAM,gBACNiJ,QAAS/K,KAAKjB,MAAM8K,cACpBxH,YAAarC,KAAKsI,YAClBlF,IAAI,eACJ4H,UAAU,EACV1M,MAAO0B,KAAKG,MAAM4H,SAAS2G,eAE9BP,sBN8sCR/O,IAAK,cACLd,MAAO,SMjsCEkN,YAAalN,OAEH,iBAAhBkN,aAA4C,KAAVlN,OACpC0B,KAAKmB,UACH4K,oBAAqBzN,QAIL,kBAAhBkN,aAA6C,KAAVlN,OACrC0B,KAAKmB,UACHyK,qBAAsBtN,OAI1B,IAAIyJ,UAAW/H,KAAKG,MAAM4H,QAC1BA,UAASyD,aAAelN,MAExB0B,KAAKmB,UACH4G,SAAUA,WAGZ/H,KAAKjB,MAAM6K,oBAAoB5J,KAAKG,MAAM4H,SAAU/H,KAAKjB,MAAMjC,ONusC9DsC,IAAK,wBACLd,MAAO,WMpsCc,GAAAyK,QAAA/I,IACtB,IAAIA,KAAKG,MAAM4L,oBAAqB,CAClC,GAAID,0BAA2B9L,KAAKjB,MAAMiL,uBAAuBhK,KAAKG,MAAM4L,oBAC5E,IAAID,yBAA0B,CAC5B,GAAIsC,oBAAqBjQ,OAAOyG,KAAKkH,0BAA0BE,IAAI,SAACC,WAClE,GAAIC,UAAWnD,OAAKhK,MAAMkL,mBAAmB6B,yBAAyBG,WAAzB,YAAmDC,QAChG,IAAiB,SAAbA,UAAoC,WAAbA,SAAuB,CAChD,GAAyD,MAArDJ,yBAAyBG,WAAzB,WACF,MACEvK,OAAAC,cAAC4M,gBACCpL,KAAM8I,UACNnK,MAAOgK,yBAAyBG,WAAzB,KACP5J,YAAa0G,OAAKT,YAClBlF,IAAK6I,UACLjB,SAAUc,yBAAyBG,WAAzB,SACV3N,MAAOyK,OAAK5I,MAAM4H,SAASkE,WAC3B0B,SAAU5E,OAAK5I,MAAM+H,WAAW+D,WAChChE,aAAc,aAAeiE,SAAW,WAQ9C,IAA0D,OAAtDJ,yBAAyBG,WAAzB,WACF,MACEvK,OAAAC,cAACmJ,eACC3H,KAAM8I,UACNnK,MAAOgK,yBAAyBG,WAAzB,KACPlB,QAAQ,GACR1I,YAAa0G,OAAKT,YAClBlF,IAAK6I,UACLjB,SAAUjC,OAAK5I,MAAM4H,SAASkE,WAC9B3N,MAAOyK,OAAK5I,MAAM4H,SAASkE,aAMnC,GAAiB,aAAbC,SACF,MACExK,OAAAC,cAACyJ,aACCjI,KAAM8I,UACNnK,MAAOgK,yBAAyBG,WAAzB,KACP5J,YAAa0G,OAAKT,YAClBlF,IAAK6I,UACLjB,SAAUc,yBAAyBG,WAAzB,SACV3N,MAAOyK,OAAK5I,MAAM4H,SAASkE,cAMnC,OAAOmC,0BNssCLH,oBMz4CuBvM,MAAMmC,UAyMvCoK,oBAAmBxH,WAEjB3J,GAAI4E,MAAMgF,UAAUC,OACpBkD,cAAenI,MAAMgF,UAAUG,OAAOD,WACtCkD,sBAAuBpI,MAAMgF,UAAUG,OAAOD,WAC9CoD,uBAAwBtI,MAAMgF,UAAUG,OAAOD,WAC/CqD,mBAAoBvI,MAAMgF,UAAUG,OAAOD,WAC3CsD,WAAYxI,MAAMgF,UAAUG,OAAOD,WACnCuD,MAAOzI,MAAMgF,UAAUG,OAAOD,YNssC/BhK,QAAQW,QMnsCM0Q,oBNusCT,SAASpR,OAAQD,SAEtB,YAQA,SAASY,iBAAgBC,SAAUC,aAAe,KAAMD,mBAAoBC,cAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,4BAA2BC,KAAMb,MAAQ,IAAKa,KAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOd,MAAyB,gBAATA,OAAqC,kBAATA,MAA8Ba,KAAPb,KAElO,QAASe,WAAUC,SAAUC,YAAc,GAA0B,kBAAfA,aAA4C,OAAfA,WAAuB,KAAM,IAAIN,WAAU,iEAAoEM,YAAeD,UAASE,UAAYC,OAAOC,OAAOH,YAAcA,WAAWC,WAAaG,aAAeC,MAAON,SAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,aAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,SAAUC,YAAcD,SAASW,UAAYV,YAVjeE,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,GAGT,IAAIM,cAAe,WAAc,QAASC,kBAAiBC,OAAQC,OAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,MAAME,OAAQD,IAAK,CAAE,GAAIE,YAAaH,MAAMC,EAAIE,YAAWX,WAAaW,WAAWX,aAAc,EAAOW,WAAWT,cAAe,EAAU,SAAWS,cAAYA,WAAWV,UAAW,GAAML,OAAOgB,eAAeL,OAAQI,WAAWE,IAAKF,aAAiB,MAAO,UAAUxB,YAAa2B,WAAYC,aAAiJ,MAA9HD,aAAYR,iBAAiBnB,YAAYQ,UAAWmB,YAAiBC,aAAaT,iBAAiBnB,YAAa4B,aAAqB5B,gBO/4C3hBkF,KPs7CM,SAAU7C,kBOp7CpB,QAAA6C,MAAY7D,OAAOvB,gBAAAwC,KAAA4C,KAAA,IAAA3C,OAAArC,2BAAAoC,MAAA4C,KAAAjE,WAAAR,OAAA+B,eAAA0C,OAAA5F,KAAAgD,KACXjB,QAEA4P,KAAO5B,OAAO6B,SAASD,KACzBE,UAAY,EAJC,OAYb5O,OAAKlB,MAAMgE,WAAa4L,KAC1BE,UAAYF,KAAKG,OAAO,GACf7O,MAAKlB,MAAM+D,WACpB+L,UAAY5O,MAAKlB,MAAM+D,WACd7C,MAAKlB,MAAM8D,KAAK5D,OAAS,IAClC4P,UAAY5O,MAAKlB,MAAM8D,KAAK,GAAG/F,IAGjCmD,MAAKE,OACH0O,UAAWA,WAGb5O,MAAK8O,YAAc9O,MAAK8O,YAAYvO,KAAjBP,OACnBA,MAAK+O,QAAU/O,MAAK+O,QAAQxO,KAAbP,OACfA,MAAKgP,YAAchP,MAAKgP,YAAYzO,KAAjBP,OA1BFA,MP0iDlB,MArHAlC,WAAU6E,KAAM7C,kBAkChBnB,aAAagE,OACXxD,IAAK,cACLd,MAAO,SO57CE4Q,MAAO/C,GAKjB,GAJAnM,KAAKmB,UAAU0N,UAAWK,QAC1BlP,KAAKjB,MAAMoQ,YAAYD,OAGnBlP,KAAKjB,MAAMgE,UAAW,CACxB,GAAMqM,gBAAiBxO,EAAE,QAAQyO,aAAezO,EAAE,QAAQyO,WAC1DtC,QAAO6B,SAASD,KAAOxC,EAAErN,OAAO6P,KAChC/N,EAAE,aAAayO,UAAUD,oBPg8C1BhQ,IAAK,UACLd,MAAO,WO57CR,GAAIuE,MAAQ7C,KAAKjB,MAAM8D,KAAMmJ,IAAI,SAASsD,KACxC,GAAIC,UAAWvP,KAAKG,MAAM0O,YAAcS,IAAIxS,GAAK,SAAW,KACxD0S,KAAO,IAAMF,IAAIxS,GACjB2S,MAAQ,OAASH,IAAIxS,EACzB,OACE4E,OAAAC,cAAA;AACEgG,KAAK,eACL/F,UAAW2N,SACXnQ,IAAKkQ,IAAIxS,IAET4E,MAAAC,cAAA,KAAG7E,GAAI2S,MACJD,KAAMA,KACN7H,KAAK,MACLJ,cAAY,MACZD,QAAStH,KAAK+O,YAAYvO,KAAK,KAAM8O,IAAIxS,KAEzCwS,IAAIxN,SAIXtB,KAAKR,MAEP,OAAO6C,SPk8CNzD,IAAK,cACLd,MAAO,WO/7CR,GAAIoR,UAAWhO,MAAMwD,SAAS8G,IAAIhM,KAAKjB,MAAMoG,SAAU,SAASC,MAAOhG,KACrE,GAAIgG,MACF,MAAO1D,OAAMmE,aAAaT,OACxByJ,UAAW7O,KAAKG,MAAM0O,UACtBzP,IAAKA,OAGToB,KAAKR,MAEP,OAAO0P,aPm8CNtQ,IAAK,SACLd,MAAO,WOh8CR,GAAIuE,MAAO7C,KAAKgP,UACZU,SAAW1P,KAAKiP,cAChBU,UACFC,WAAY,EACZC,aAAc,MAGhB,OACEnO,OAAAC,cAAA,WACED,MAAAC,cAAA,MAAIC,UAAU,eAAe+F,KAAK,UAAUF,MAAOkI,UAChD9M,MAEHnB,MAAAC,cAAA,OAAKC,UAAU,eACZ8N,eP48CD9M,MO5iDSlB,MAAMmC,UAsGzBjB,MAAK6D,WACH5D,KAAMnB,MAAMgF,UAAUoJ,MAAMlJ,WAC5B9D,WAAYpB,MAAMgF,UAAUC,OAC5B5D,UAAWrB,MAAMgF,UAAUqJ,MAE7BnN,KAAK2D,cACH4I,YAAa,aACbpM,WAAW,EPi9CZ,IO18CKC,SP08CS,SAAUgN,mBAGtB,QAAShN,WAGP,MAFAxF,iBAAgBwC,KAAMgD,SAEfpF,2BAA2BoC,MAAOgD,QAAQrE,WAAaR,OAAO+B,eAAe8C,UAAUiN,MAAMjQ,KAAMkQ,YA6B5G,MAlCAnS,WAAUiF,QAASgN,mBAQnBpR,aAAaoE,UACX5D,IAAK,SACLd,MAAO,WOn9CR,GAAI6R,WAAY,WACZ9J,YASJ,OAPIrG,MAAKjB,MAAMkE,QAAUjD,KAAKjB,MAAM8P,YAClCsB,WAAa,WAEXnQ,KAAKjB,MAAMqR,QACb/J,MAAQ3E,MAAAC,cAAA,UAAK3B,KAAKjB,MAAMqR,QAIxB1O,MAAAC,cAAA,OAAKgG,KAAK,WAAW/F,UAAWuO,UAAWrT,GAAIkD,KAAKjB,MAAMkE,OACvDoD,MACArG,KAAKjB,MAAMoG,cP89CVnC,SO7+CYtB,MAAMmC,UAoB5Bb,SAAQyD,WACNxD,MAAOvB,MAAMgF,UAAUC,OAAOC,WAC9BwJ,MAAO1O,MAAMgF,UAAUC,OACvBkI,UAAWnN,MAAMgF,UAAUC,OP+9C5B,IO59CKpE,OP49CO,SAAU8N,mBAGpB,QAAS9N,SAGP,MAFA/E,iBAAgBwC,KAAMuC,OAEf3E,2BAA2BoC,MAAOuC,MAAM5D,WAAaR,OAAO+B,eAAeqC,QAAQ0N,MAAMjQ,KAAMkQ,YAkDxG,MAvDAnS,WAAUwE,MAAO8N,mBAQjBzR,aAAa2D,QACXnD,IAAK,SACLd,MAAO,WOn+CR,IAAI0B,KAAKjB,MAAMyD,KACb,MAAO,KAIT,IAAM8N,aACJC,SAAU,WACVC,SAAU,IACVC,UAAW,OACXtH,OAAQ,SACRM,gBAAiB,OACjBiH,QAAS,GACTC,aAAc,GACdC,UAAW,OACXC,OAAQ,MAIJC,eACJP,SAAU,QACVM,OAAQ,KACRE,IAAK,EACLC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPzH,gBAAiB,kBACjBiH,QAAS,GAGX,OACAhP,OAAAC,cAAA,OAAK8F,MAAOqJ,cAAexJ,QAAStH,KAAKjB,MAAM0D,SAC7Cf,MAAAC,cAAA,OAAK8F,MAAO6I,WAAYhJ,QAAS,SAAC6E,GAAOA,EAAEgF,oBACxCnR,KAAKjB,MAAMoG,ePg/CV5C,OOphDUb,MAAMmC,UA0C1BtB,OAAMkE,WACJhE,QAASf,MAAMgF,UAAUI,KAAKF,WAC9BpE,KAAMd,MAAMgF,UAAUqJ,KACtB5K,SAAUzD,MAAMgF,UAAU0K,MPg/C3BxU,QO5+CCgG,UP6+CDhG,QO5+CCoG,gBP6+CDpG,QO5+CC2F,aPg/CI,SAAS1F,OAAQD,SAEtB,YQ1sDD,SAASyU,cAAaC,OAAQC,KAAMC,QAASC,YAO3C,GAAIC,OACJD,YAAW5M,QAAQ,SAAS8M,OAAQ5D,OAClC2D,IAAIC,QAAUH,QAAQzD,QACrB/N,KAGH,IAAI4R,WAQJ,IAPyB,MAArBF,IAAI,cACNE,QAAQhM,KAAK,aAGfgM,QAAUA,QAAQC,KAAK,KAGR,YAAXP,OAAsB,CACxB,GAAIQ,aAAc7P,MAAMS,QAAU,8BAAgCgP,IAAA,OAClE,OAAOhQ,OAAAC,cAAA,MAAIC,UAAYgQ,SAASlQ,MAAAC,cAAA,KAAG6N,KAAMsC,aAAcP,OAGzD,GAAe,mBAAXD,OAA6B,CAC/B,GAAIQ,aAAc7P,MAAMS,QAAU,8BAAgCgP,IAAI,iBACtE,OAAOhQ,OAAAC,cAAA,MAAIC,UAAYgQ,SAASlQ,MAAAC,cAAA,KAAG6N,KAAMsC,aAAcP,OAGzD,GAAe,sBAAXD,OAAgC,CAClC,GAAIS,cAAe9P,MAAMS,QAAU,+BAAiCgP,IAAI,oBACxE,OAAOhQ,OAAAC,cAAA,MAAIC,UAAYgQ,SAASlQ,MAAAC,cAAA,KAAG6N,KAAMuC,cAAeR,OAgB1D,MAAO7P,OAAAC,cAAA,MAAIC,UAAWgQ,SAAUL,MR2pDjCpT,OAAOgB,eAAevC,QAAS,cAC7B0B,OAAO,IA0FT1B,QAAQW,QQnvDM8T","file":"./modules/biobank/js/biobankIndex.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _FilterForm = __webpack_require__(1);\n\t\n\tvar _FilterForm2 = _interopRequireDefault(_FilterForm);\n\t\n\tvar _specimenForm = __webpack_require__(3);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tvar _Tabs = __webpack_require__(5);\n\t\n\tvar _columnFormatter = __webpack_require__(6);\n\t\n\tvar _columnFormatter2 = _interopRequireDefault(_columnFormatter);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t//import Modal from '../../../htdocs/js/components/Modal';\n\t\n\t\n\tvar BiobankIndex = function (_React$Component) {\n\t  _inherits(BiobankIndex, _React$Component);\n\t\n\t  function BiobankIndex(props) {\n\t    _classCallCheck(this, BiobankIndex);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankIndex.__proto__ || Object.getPrototypeOf(BiobankIndex)).call(this, props));\n\t\n\t    _this.state = {\n\t      isLoaded: false,\n\t      filter: {},\n\t      isOpen: false\n\t    };\n\t\n\t    // Bind component instance to custom methods\n\t    _this.fetchData = _this.fetchData.bind(_this);\n\t    _this.updateFilter = _this.updateFilter.bind(_this);\n\t    _this.resetFilters = _this.resetFilters.bind(_this);\n\t    _this.toggleModal = _this.toggleModal.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankIndex, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      this.fetchData();\n\t    }\n\t\n\t    /**\n\t     * Retrieve data from the provided URL and save it in state\n\t     * Additionaly add hiddenHeaders to global loris vairable\n\t     * for easy access by columnFormatter.\n\t     */\n\t\n\t  }, {\n\t    key: 'fetchData',\n\t    value: function fetchData() {\n\t      $.ajax(this.props.DataURL, {\n\t        method: \"GET\",\n\t        dataType: 'json',\n\t        success: function (data) {\n\t          this.setState({\n\t            Data: data,\n\t            isLoaded: true\n\t          });\n\t        }.bind(this),\n\t        error: function error(_error) {\n\t          console.error(_error);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'updateFilter',\n\t    value: function updateFilter(filter) {\n\t      this.setState({ filter: filter });\n\t    }\n\t  }, {\n\t    key: 'resetFilters',\n\t    value: function resetFilters() {\n\t      this.refs.biobankFilter.clearFilter();\n\t    }\n\t  }, {\n\t    key: 'toggleModal',\n\t    value: function toggleModal() {\n\t      this.setState({\n\t        isOpen: !this.state.isOpen\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Waiting for async data to load\n\t      if (!this.state.isLoaded) {\n\t        return React.createElement(\n\t          'button',\n\t          { className: 'btn-info has-spinner' },\n\t          'Loading',\n\t          React.createElement('span', {\n\t            className: 'glyphicon glyphicon-refresh glyphicon-refresh-animate' })\n\t        );\n\t      }\n\t\n\t      var tabList = [{ id: \"specimens\", label: \"Specimens\" }, { id: \"containers\", label: \"Containers\" }];\n\t\n\t      var addSpecimenButton = void 0;\n\t      var specimenForm = void 0;\n\t      if (loris.userHasPermission('biobank_write')) {\n\t        addSpecimenButton = React.createElement(ButtonElement, { buttonClass: 'btn btn-success', onUserInput: this.toggleModal, label: 'Add New Specimen', type: 'button' });\n\t        specimenForm = React.createElement(\n\t          _Tabs.Modal,\n\t          { show: this.state.isOpen, onClose: this.toggleModal },\n\t          React.createElement(_specimenForm2.default, {\n\t            DataURL: loris.BaseURL + '/biobank/ajax/FileUpload.php?action=getFormData',\n\t            action: loris.BaseURL + '/biobank/ajax/FileUpload.php?action=submitSpecimen'\n\t          })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          _Tabs.Tabs,\n\t          { tabs: tabList, defaultTab: 'specimens', updateURL: true },\n\t          React.createElement(\n\t            _Tabs.TabPane,\n\t            { TabId: tabList[0].id },\n\t            React.createElement(\n\t              _FilterForm2.default,\n\t              {\n\t                Module: 'biobank',\n\t                name: 'specimen_filter',\n\t                id: 'specimen_filter_form',\n\t                ref: 'specimenFilter',\n\t                columns: 3,\n\t                formElements: this.state.Data.form,\n\t                onUpdate: this.updateFilter,\n\t                filter: this.state.filter\n\t              },\n\t              React.createElement('br', null),\n\t              addSpecimenButton,\n\t              React.createElement(ButtonElement, { label: 'Clear Filters', type: 'reset', onUserInput: this.resetFilters })\n\t            ),\n\t            React.createElement(StaticDataTable, {\n\t              Data: this.state.Data.Data,\n\t              Headers: this.state.Data.Headers,\n\t              Filter: this.state.filter,\n\t              getFormattedCell: _columnFormatter2.default\n\t            })\n\t          ),\n\t          React.createElement(\n\t            _Tabs.TabPane,\n\t            { TabId: tabList[1].id },\n\t            React.createElement(\n\t              _FilterForm2.default,\n\t              {\n\t                Module: 'biobank',\n\t                name: 'container_filter',\n\t                id: 'container_filter_form',\n\t                ref: 'containerFilter',\n\t                columns: 3,\n\t                formElements: this.state.Data.form,\n\t                onUpdate: this.updateFilter,\n\t                filter: this.state.filter\n\t              },\n\t              React.createElement('br', null),\n\t              React.createElement(ButtonElement, { label: 'Clear Filters', type: 'reset', onUserInput: this.resetFilters })\n\t            ),\n\t            React.createElement(StaticDataTable, {\n\t              Data: this.state.Data.Data,\n\t              Headers: this.state.Data.Headers,\n\t              Filter: this.state.filter,\n\t              getFormattedCell: _columnFormatter2.default\n\t            })\n\t          )\n\t        ),\n\t        specimenForm\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return BiobankIndex;\n\t}(React.Component);\n\t\n\t$(function () {\n\t  var biobankIndex = React.createElement(\n\t    'div',\n\t    { className: 'page-biobank' },\n\t    React.createElement(BiobankIndex, { DataURL: loris.BaseURL + '/biobank/?format=json' })\n\t  );\n\t\n\t  ReactDOM.render(biobankIndex, document.getElementById(\"lorisworkspace\"));\n\t});\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Panel = __webpack_require__(2);\n\t\n\tvar _Panel2 = _interopRequireDefault(_Panel);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file contains React component for FilterForm\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Loris Team\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.1.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/**\n\t * FilterForm component.\n\t * A wrapper for form elements inside a selection filter.\n\t *\n\t * Adds necessary filter callbacks to all children and passes them to FormElement\n\t * for proper rendering.\n\t *\n\t * Keeps track of filter object and sends it to parent on every update.\n\t *\n\t * //HACK/NOTE: Loris has special behaviour for `candID` attribute in the query string,\n\t * making it impossible to use it for selection filters. This components renames\n\t * all `candID` fields to `candidateID` automatically before appending them to URL.\n\t *\n\t */\n\tvar FilterForm = function (_React$Component) {\n\t  _inherits(FilterForm, _React$Component);\n\t\n\t  function FilterForm(props) {\n\t    _classCallCheck(this, FilterForm);\n\t\n\t    // Bind component instance to custom methods\n\t    var _this = _possibleConstructorReturn(this, (FilterForm.__proto__ || Object.getPrototypeOf(FilterForm)).call(this, props));\n\t\n\t    _this.clearFilter = _this.clearFilter.bind(_this);\n\t    _this.getFormChildren = _this.getFormChildren.bind(_this);\n\t    _this.setFilter = _this.setFilter.bind(_this);\n\t    _this.onElementUpdate = _this.onElementUpdate.bind(_this);\n\t\n\t    // Keeps track of querystring values\n\t    // Saved as class variable instead of keeping in state\n\t    _this.queryString = QueryString.get();\n\t    return _this;\n\t  }\n\t\n\t  _createClass(FilterForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var filter = {};\n\t      var queryString = this.queryString;\n\t\n\t      // Initiaze filter using querystring value\n\t      Object.keys(queryString).forEach(function (key) {\n\t        var filterKey = key === 'candidateID' ? 'candID' : key;\n\t        filter[filterKey] = {\n\t          value: queryString[key],\n\t          exactMatch: false\n\t        };\n\t      });\n\t\n\t      // Update parent component\n\t      this.props.onUpdate(filter);\n\t    }\n\t\n\t    /**\n\t     * Clear the filter object, querystring and input fields\n\t     */\n\t\n\t  }, {\n\t    key: 'clearFilter',\n\t    value: function clearFilter() {\n\t      this.queryString = QueryString.clear(this.props.Module);\n\t      this.props.onUpdate({});\n\t    }\n\t\n\t    /**\n\t     * Itterates through FilterForm children, sets necessary callback functions\n\t     * and initializes filterTable\n\t     *\n\t     * @return {Array} formChildren - array of children with necessary props\n\t     */\n\t\n\t  }, {\n\t    key: 'getFormChildren',\n\t    value: function getFormChildren() {\n\t      var formChildren = [];\n\t      React.Children.forEach(this.props.children, function (child, key) {\n\t        // If child is a React component (i.e not a simple DOM element)\n\t        if (React.isValidElement(child) && typeof child.type === \"function\" && child.props.onUserInput) {\n\t          var callbackFunc = child.props.onUserInput;\n\t          var callbackName = callbackFunc.name;\n\t          var elementName = child.type.displayName;\n\t          var queryFieldName = child.props.name === 'candID' ? 'candidateID' : child.props.name;\n\t          var filterValue = this.queryString[queryFieldName];\n\t          // If callback function was not set, set it to onElementUpdate() for form\n\t          // elements and to clearFilter() for <ButtonElement type='reset'/>.\n\t          if (callbackName === \"onUserInput\") {\n\t            if (elementName === \"ButtonElement\" && child.props.type === \"reset\") {\n\t              callbackFunc = this.clearFilter;\n\t            } else {\n\t              callbackFunc = this.onElementUpdate.bind(null, elementName);\n\t            }\n\t          }\n\t          // Pass onUserInput and value props to all children\n\t          formChildren.push(React.cloneElement(child, {\n\t            onUserInput: callbackFunc,\n\t            value: filterValue ? filterValue : '',\n\t            key: key\n\t          }));\n\t          // Initialize filter for StaticDataTable\n\t          this.setFilter(elementName, child.props.name, filterValue);\n\t        } else {\n\t          formChildren.push(React.cloneElement(child, { key: key }));\n\t        }\n\t      }.bind(this));\n\t\n\t      return formChildren;\n\t    }\n\t\n\t    /**\n\t     * Appends entry to filter object or deletes it if value is\n\t     * empty.\n\t     *\n\t     * Sets exactMatch to true for all SelectElements (i.e dropdowns)\n\t     * in order to force StaticDataTable to do exact comparaison\n\t     *\n\t     * @param {string} type - form element type (i.e component name)\n\t     * @param {string} key - the name of the form element\n\t     * @param {string} value - the value of the form element\n\t     *\n\t     * @return {{}} filter - filterData\n\t     */\n\t\n\t  }, {\n\t    key: 'setFilter',\n\t    value: function setFilter(type, key, value) {\n\t      var filter = {};\n\t      if (this.props.filter) {\n\t        filter = JSON.parse(JSON.stringify(this.props.filter));\n\t      }\n\t\n\t      if (key && value) {\n\t        filter[key] = {};\n\t        filter[key].value = value;\n\t        filter[key].exactMatch = type === \"SelectElement\";\n\t      } else if (filter && key && value === '') {\n\t        delete filter[key];\n\t      }\n\t\n\t      return filter;\n\t    }\n\t\n\t    /**\n\t     * Sets filter object and querystring to reflect values of input fields\n\t     *\n\t     * @param {string} type - form element type (i.e component name)\n\t     * @param {string} fieldName - the name of the form element\n\t     * @param {string} fieldValue - the value of the form element\n\t     */\n\t\n\t  }, {\n\t    key: 'onElementUpdate',\n\t    value: function onElementUpdate(type, fieldName, fieldValue) {\n\t      // Make sure both key/value are string before sending them to querystring\n\t      if (typeof fieldName !== \"string\" || typeof fieldValue !== \"string\") {\n\t        return;\n\t      }\n\t\n\t      // Update query string\n\t      var queryFieldName = fieldName === 'candID' ? 'candidateID' : fieldName;\n\t      this.queryString = QueryString.set(this.queryString, queryFieldName, fieldValue);\n\t\n\t      // Update filter and get new filter object\n\t      var filter = this.setFilter(type, fieldName, fieldValue);\n\t      this.props.onUpdate(filter);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Get formatted children\n\t      var formChildren = this.getFormChildren();\n\t      var formElements = this.props.formElements;\n\t\n\t      if (formElements) {\n\t        Object.keys(formElements).forEach(function (fieldName) {\n\t          var queryFieldName = fieldName === 'candID' ? 'candidateID' : fieldName;\n\t          formElements[fieldName].onUserInput = this.onElementUpdate.bind(null, fieldName);\n\t          formElements[fieldName].value = this.queryString[queryFieldName];\n\t        }.bind(this));\n\t      }\n\t\n\t      return React.createElement(\n\t        _Panel2.default,\n\t        {\n\t          id: this.props.id,\n\t          height: this.props.height,\n\t          title: this.props.title\n\t        },\n\t        React.createElement(\n\t          FormElement,\n\t          this.props,\n\t          formChildren\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return FilterForm;\n\t}(React.Component);\n\t\n\tFilterForm.defaultProps = {\n\t  id: 'selection-filter',\n\t  height: '100%',\n\t  title: 'Selection Filter',\n\t  onUpdate: function onUpdate() {\n\t    console.warn('onUpdate() callback is not set!');\n\t  }\n\t};\n\tFilterForm.propTypes = {\n\t  Module: React.PropTypes.string.isRequired,\n\t  filter: React.PropTypes.object.isRequired,\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  onUpdate: React.PropTypes.func\n\t};\n\t\n\texports.default = FilterForm;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Panel\n\t *\n\t * @author Alex I.\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Panel component\n\t * Wraps children in a collapsible bootstrap panel\n\t */\n\tvar Panel = function (_React$Component) {\n\t  _inherits(Panel, _React$Component);\n\t\n\t  function Panel(props) {\n\t    _classCallCheck(this, Panel);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).call(this, props));\n\t\n\t    _this.state = {\n\t      collapsed: _this.props.initCollapsed\n\t    };\n\t\n\t    // Initialize panel class based on collapsed status\n\t    _this.panelClass = _this.props.initCollapsed ? \"panel-collapse collapse\" : \"panel-collapse collapse in\";\n\t\n\t    _this.toggleCollapsed = _this.toggleCollapsed.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Panel, [{\n\t    key: \"toggleCollapsed\",\n\t    value: function toggleCollapsed() {\n\t      this.setState({ collapsed: !this.state.collapsed });\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      // Change arrow direction based on collapse status\n\t      var glyphClass = this.state.collapsed ? \"glyphicon pull-right glyphicon-chevron-down\" : \"glyphicon pull-right glyphicon-chevron-up\";\n\t\n\t      // Add panel header, if title is set\n\t      var panelHeading = this.props.title ? React.createElement(\n\t        \"div\",\n\t        {\n\t          className: \"panel-heading\",\n\t          onClick: this.toggleCollapsed,\n\t          \"data-toggle\": \"collapse\",\n\t          \"data-target\": '#' + this.props.id,\n\t          style: { cursor: 'pointer' }\n\t        },\n\t        this.props.title,\n\t        React.createElement(\"span\", { className: glyphClass })\n\t      ) : '';\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"panel panel-primary\" },\n\t        panelHeading,\n\t        React.createElement(\n\t          \"div\",\n\t          { id: this.props.id, className: this.panelClass, role: \"tabpanel\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"panel-body\", style: { height: this.props.height } },\n\t            this.props.children\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Panel;\n\t}(React.Component);\n\t\n\tPanel.propTypes = {\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string\n\t};\n\tPanel.defaultProps = {\n\t  initCollapsed: false,\n\t  id: 'default-panel',\n\t  height: '100%'\n\t};\n\t\n\texports.default = Panel;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _barcodeForm = __webpack_require__(4);\n\t\n\tvar _barcodeForm2 = _interopRequireDefault(_barcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankSpecimenForm = function (_React$Component) {\n\t  _inherits(BiobankSpecimenForm, _React$Component);\n\t\n\t  function BiobankSpecimenForm(props) {\n\t    _classCallCheck(this, BiobankSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimenForm.__proto__ || Object.getPrototypeOf(BiobankSpecimenForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      Data: {},\n\t      formData: {},\n\t      barcodeFormList: {},\n\t      errorMessage: null,\n\t      isLoaded: false,\n\t      formErrors: {},\n\t      countBarcodeForms: [1]\n\t    };\n\t\n\t    //this.getValidFileName = this.getValidFileName.bind(this);\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    //this.isValidFileName = this.isValidFileName.bind(this);\n\t    _this.validateForm = _this.validateForm.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.specimenSubmit = _this.specimenSubmit.bind(_this);\n\t    _this.addBarcodeForm = _this.addBarcodeForm.bind(_this);\n\t    _this.setBarcodeFormData = _this.setBarcodeFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimenForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var self = this;\n\t      $.ajax(this.props.DataURL, {\n\t        dataType: 'json',\n\t        success: function success(data) {\n\t          self.setState({\n\t            Data: data,\n\t            isLoaded: true\n\t          });\n\t        },\n\t        error: function error(data, errorCode, errorMsg) {\n\t          console.error(data, errorCode, errorMsg);\n\t          self.setState({\n\t            error: 'An error occurred when loading the form!'\n\t          });\n\t        }\n\t      });\n\t\n\t      //if this is a child specimen form then certain formData is set when component mounts\n\t      if (this.props.child) {\n\t        var formData = this.state.formData;\n\t        formData['parentSpecimen'] = this.props.specimenId;\n\t        formData['pscid'] = this.props.candidateId;\n\t        formData['visitLabel'] = this.props.sessionId;\n\t\n\t        this.setState({\n\t          formData: formData\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      // Data loading error\n\t      if (this.state.error !== undefined) {\n\t        return React.createElement(\n\t          'div',\n\t          { className: 'alert alert-danger text-center' },\n\t          React.createElement(\n\t            'strong',\n\t            null,\n\t            this.state.error\n\t          )\n\t        );\n\t      }\n\t\n\t      // Waiting for data to load\n\t      if (!this.state.isLoaded) {\n\t        return React.createElement(\n\t          'button',\n\t          { className: 'btn-info has-spinner' },\n\t          'Loading',\n\t          React.createElement('span', {\n\t            className: 'glyphicon glyphicon-refresh glyphicon-refresh-animate' })\n\t        );\n\t      }\n\t\n\t      //Styling for remove Barcode button\n\t      var glyphStyle = {\n\t        color: '#D3D3D3',\n\t        margin: 'auto'\n\t      };\n\t      var buttonStyle = {\n\t        appearance: 'none',\n\t        outline: 'none',\n\t        boxShadow: 'none',\n\t        borderColor: 'transparent',\n\t        backgroundColor: 'transparent'\n\t\n\t      };\n\t\n\t      //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n\t      var barcodeForms = [];\n\t\n\t      var _loop = function _loop(i) {\n\t        barcodeForms.push(React.createElement(_barcodeForm2.default, {\n\t          setSpecimenFormData: _this2.setBarcodeFormData,\n\t          id: _this2.state.countBarcodeForms[i],\n\t          specimenTypes: _this2.state.Data.specimenTypes,\n\t          containerTypesPrimary: _this2.state.Data.containerTypesPrimary,\n\t          containerBarcodesNonPrimary: _this2.state.Data.containerBarcodesNonPrimary,\n\t          specimenTypeAttributes: _this2.state.Data.specimenTypeAttributes,\n\t          attributeDatatypes: _this2.state.Data.attributeDatatypes,\n\t          capacities: _this2.state.Data.capacities,\n\t          units: _this2.state.Data.units,\n\t          button: i + 1 === _this2.state.countBarcodeForms.length ? React.createElement(\n\t            'button',\n\t            {\n\t              type: 'button',\n\t              className: 'btn btn-success btn-sm',\n\t              onClick: _this2.addBarcodeForm\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-plus' })\n\t          ) : React.createElement(\n\t            'button',\n\t            {\n\t              type: 'button',\n\t              className: 'btn btn-primary-outline btn-sm',\n\t              style: buttonStyle,\n\t              onClick: function onClick() {\n\t                return _this2.removeBarcodeForm(i);\n\t              }\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-remove', style: glyphStyle })\n\t          )\n\t        }));\n\t      };\n\t\n\t      for (var i = 0; i < this.state.countBarcodeForms.length; i++) {\n\t        _loop(i);\n\t      }\n\t\n\t      //Since Static Elements Can't be submitted as part of the form we need to decide if we should keep\n\t      //static elements or make the Select and Textbox Elements Disabled\n\t      var staticFields = void 0;\n\t      var selectFields = void 0;\n\t      if (this.props.child) {\n\t        staticFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(StaticElement, {\n\t            label: 'Parent Specimen',\n\t            text: this.props.barcode\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'PSCID',\n\t            text: this.state.Data.PSCIDs[this.props.candidateId]\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Visit Label',\n\t            text: this.state.Data.sessionData[this.state.Data.PSCIDs[this.props.candidateId]].visits[this.props.sessionId]\n\t          })\n\t        );\n\t      } else {\n\t        selectFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'pscid',\n\t            label: 'PSCID',\n\t            options: this.state.Data.PSCIDs,\n\t            onUserInput: this.setFormData,\n\t            ref: 'pscid',\n\t            required: true,\n\t            value: this.state.formData.pscid\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'visitLabel',\n\t            label: 'Visit Label',\n\t            options: this.state.Data.visits,\n\t            onUserInput: this.setFormData,\n\t            ref: 'visitLabel',\n\t            required: true,\n\t            value: this.state.formData.visitLabel\n\t          })\n\t        );\n\t      }\n\t\n\t      //REPLACE PARENT CONTAINER TYPE WITH PARENT CONTAINER AND LIST ALL THE NON-PRIMARY\n\t      //CONTAINERS IN THE DATABASE YOU SILLY - Figure out if this is even necessary\n\t      //ALSO ALLOW THEM TO CANCEL THE FORM AND DELETE BARCODE FORMS\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankSpecimen',\n\t          onSubmit: this.handleSubmit,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(\n\t          'h3',\n\t          null,\n\t          React.createElement(\n\t            'b',\n\t            null,\n\t            'Add New Specimen',\n\t            this.state.countBarcodeForms > 1 ? \"s\" : \"\"\n\t          )\n\t        ),\n\t        React.createElement('br', null),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            staticFields,\n\t            selectFields,\n\t            React.createElement(DateElement, {\n\t              name: 'timeCollect',\n\t              label: 'Collection Time',\n\t              minYear: '2000',\n\t              maxYear: '2017',\n\t              onUserInput: this.setFormData,\n\t              ref: 'timeCollect',\n\t              required: true,\n\t              value: this.state.formData.timeCollect\n\t            })\n\t          )\n\t        ),\n\t        barcodeForms,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement('div', { className: 'col-xs-9' }),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-3' },\n\t            React.createElement(ButtonElement, { label: 'Submit' })\n\t          )\n\t        )\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t    /**\n\t     * Returns a valid name for the file to be specimened\n\t     *\n\t     * @param {string} pscid - PSCID selected from the dropdown\n\t     * @param {string} visitLabel - Visit label selected from the dropdown\n\t     * @param {string} instrument - Instrument selected from the dropdown\n\t     * @return {string} - Generated valid filename for the current selection\n\t     */\n\t    //  getValidFileName(pscid, visitLabel, instrument) {\n\t    //    var fileName = pscid + \"_\" + visitLabel;\n\t    //    if (instrument) fileName += \"_\" + instrument;\n\t    //\n\t    //    return fileName;\n\t    //  }\n\t\n\t\n\t  }, {\n\t    key: 'validateForm',\n\t    value: function validateForm(formElement, value) {\n\t      var _this3 = this;\n\t\n\t      var formErrors = this.state.formErrors;\n\t\n\t      //validate barcode regex\n\t      if (formElement === \"barcode\" && value !== \"\") {\n\t        if (!/^hello/.test(this.state.formData.barcode)) {\n\t          formErrors.barcode = true;\n\t        } else {\n\t          formErrors.barcode = false;\n\t        }\n\t      }\n\t\n\t      //validate that quantity is a number and less than capacity\n\t      if (formElement === \"quantity\" && value !== \"\") {\n\t        if (isNaN(value) || value > this.state.Data.capacities[this.state.currentContainerType]) {\n\t          formErrors.quantity = true;\n\t        } else {\n\t          formErrors.quantity = false;\n\t        }\n\t      }\n\t\n\t      //validate datatypes and regex of generated type attributes\n\t      var specimenTypeFieldsObject = this.state.Data.specimenTypeAttributes[this.state.currentSpecimenType];\n\t      var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t\n\t        var datatype = _this3.state.Data.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"number\") {\n\t          if (formElement === attribute) {\n\t            if (isNaN(value) && value !== \"\") {\n\t              formErrors[attribute] = true;\n\t            } else {\n\t              formErrors[attribute] = false;\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      this.setState({\n\t        formErrors: formErrors\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Handle form submission\n\t     * @param {object} e - Form submission event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      var formRefs = this.refs;\n\t      //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\t\n\t      // Validate the form\n\t      if (!this.isValidForm(formRefs, formData)) {\n\t        return;\n\t      }\n\t\n\t      //    // Validate specimened file name\n\t      //    let instrument = formData.instrument ? formData.instrument : null;\n\t      //    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n\t      //    let requiredFileName = this.getValidFileName(\n\t      //      formData.pscid, formData.visitLabel, instrument\n\t      //    );\n\t      //    if (!this.isValidFileName(requiredFileName, fileName)) {\n\t      //      swal(\n\t      //        \"Invalid Specimen name!\",\n\t      //        \"File name should begin with: \" + requiredFileName,\n\t      //        \"error\"\n\t      //      );\n\t      //      return;\n\t      //    }\n\t\n\t      // Check for duplicate file names\n\t      //    let isDuplicate = biobankFiles.indexOf(fileName);\n\t      //    if (isDuplicate >= 0) {\n\t      //      swal({\n\t      //        title: \"Are you sure?\",\n\t      //        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n\t      //        type: \"warning\",\n\t      //        showCancelButton: true,\n\t      //        confirmButtonText: 'Yes, I am sure!',\n\t      //        cancelButtonText: \"No, cancel it!\"\n\t      //      }, function(isConfirm) {\n\t      //        if (isConfirm) {\n\t      //          this.specimenFile();\n\t      //        } else {\n\t      //          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n\t      //        }\n\t      //      }.bind(this));\n\t      //    } else {\n\t      formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t\n\t      this.specimenSubmit();\n\t      //    }\n\t    }\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'specimenSubmit',\n\t    value: function specimenSubmit() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          // Trigger an update event to update all observers (i.e DataTable)\n\t          var event = new CustomEvent('update-datatable');\n\t          window.dispatchEvent(event);\n\t\n\t          this.setState({\n\t            formData: {}, // reset form data after successful file specimen\n\t            barcodeFormList: {}\n\t          });\n\t          swal(\"Specimen Submission Successful!\", \"\", \"success\");\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Checks if the inputted file name is valid\n\t     *\n\t     * @param {string} requiredFileName - Required file name\n\t     * @param {string} fileName - Provided file name\n\t     * @return {boolean} - true if fileName starts with requiredFileName, false\n\t     *   otherwise\n\t     */\n\t    //  isValidFileName(requiredFileName, fileName) {\n\t    //    if (fileName === null || requiredFileName === null) {\n\t    //      return false;\n\t    //    }\n\t    //\n\t    //    return (fileName.indexOf(requiredFileName) === 0);\n\t    //  }\n\t\n\t    /**\n\t     * Validate the form\n\t     *\n\t     * @param {object} formRefs - Object containing references to React form elements\n\t     * @param {object} formData - Object containing form data inputed by user\n\t     * @return {boolean} - true if all required fields are filled, false otherwise\n\t     */\n\t\n\t  }, {\n\t    key: 'isValidForm',\n\t    value: function isValidForm(formRefs, formData) {\n\t      var isValidForm = true;\n\t\n\t      var requiredFields = {\n\t        pscid: null,\n\t        visitLabel: null\n\t      };\n\t\n\t      Object.keys(requiredFields).map(function (field) {\n\t        if (formData[field]) {\n\t          requiredFields[field] = formData[field];\n\t        } else if (formRefs[field]) {\n\t          formRefs[field].props.hasError = true;\n\t          isValidForm = false;\n\t        }\n\t      });\n\t      this.forceUpdate();\n\t\n\t      return isValidForm;\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      // Only display visits and sites available for the current pscid\n\t      //let visitLabel = this.state.formData.visitLabel;\n\t      //let pscid = this.state.formData.pscid;\n\t\n\t      if (formElement === \"pscid\" && value !== \"\") {\n\t        this.state.Data.visits = this.state.Data.sessionData[this.state.Data.PSCIDs[value]].visits;\n\t        //this.state.Data.sites = this.state.Data.sessionData[this.state.Data.PSCIDs[value]].sites;\n\t      }\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setBarcodeFormData',\n\t    value: function setBarcodeFormData(barcodeFormData, barcodeId) {\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      barcodeFormList[barcodeId] = barcodeFormData;\n\t      formData['barcodeFormList'] = barcodeFormList;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'addBarcodeForm',\n\t    value: function addBarcodeForm() {\n\t      var countBarcodeForms = this.state.countBarcodeForms;\n\t      countBarcodeForms.push(countBarcodeForms[countBarcodeForms.length - 1] + 1);\n\t      this.setState({\n\t        countBarcodeForms: countBarcodeForms\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removeBarcodeForm',\n\t    value: function removeBarcodeForm(index) {\n\t      var countBarcodeForms = this.state.countBarcodeForms;\n\t      countBarcodeForms.splice(index, 1);\n\t      this.setState({\n\t        countBarcodeForms: countBarcodeForms\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimenForm;\n\t}(React.Component);\n\t\n\tBiobankSpecimenForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired,\n\t  barcode: React.PropTypes.string\n\t};\n\t\n\texports.default = BiobankSpecimenForm;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Barcode Form\n\t *\n\t * Acts a subform for BiobankSpecimenForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar BiobankBarcodeForm = function (_React$Component) {\n\t  _inherits(BiobankBarcodeForm, _React$Component);\n\t\n\t  function BiobankBarcodeForm(props) {\n\t    _classCallCheck(this, BiobankBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankBarcodeForm.__proto__ || Object.getPrototypeOf(BiobankBarcodeForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      currentSpecimenType: null,\n\t      currentContainerType: null,\n\t      formErrors: {}\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.getSpecimenTypeFields = _this.getSpecimenTypeFields.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankBarcodeForm, [{\n\t    key: \"render\",\n\t    value: function render() {\n\t\n\t      var specimenFields;\n\t      var specimenTypeFields = this.getSpecimenTypeFields();\n\t      if (this.state.currentSpecimenType) {\n\t        specimenFields = React.createElement(\n\t          \"div\",\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: \"containerType\",\n\t            label: \"Container Type\",\n\t            options: this.props.containerTypesPrimary,\n\t            onUserInput: this.setFormData,\n\t            ref: \"containerType\",\n\t            required: true,\n\t            value: this.state.formData.containerType\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: \"parentContainer\",\n\t            label: \"Parent Container Barcode\",\n\t            options: this.props.containerBarcodesNonPrimary,\n\t            onUserInput: this.setFormData,\n\t            ref: \"parentContainer\",\n\t            required: false,\n\t            value: this.state.formData.parentContainer\n\t          }),\n\t          React.createElement(TextboxElement, {\n\t            name: \"quantity\",\n\t            label: \"Quantity\" + (this.state.currentContainerType ? \" (\" + this.props.units[this.state.currentContainerType] + \")\" : \"\"),\n\t            onUserInput: this.setFormData,\n\t            ref: \"quantity\",\n\t            required: true,\n\t            value: this.state.formData.quantity,\n\t            hasError: this.state.formErrors.quantity\n\t          }),\n\t          specimenTypeFields,\n\t          React.createElement(TextareaElement, {\n\t            name: \"notes\",\n\t            label: \"Notes\",\n\t            onUserInput: this.setFormData,\n\t            ref: \"notes\",\n\t            value: this.state.formData.notes\n\t          })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: \"biobankBarcode\"\n\t        },\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-11\" },\n\t            React.createElement(\n\t              \"div\",\n\t              {\n\t                \"data-toggle\": \"collapse\",\n\t                \"data-target\": \"#\" + this.props.id,\n\t                color: \"blue\"\n\t              },\n\t              React.createElement(TextboxElement, {\n\t                name: \"barcode\",\n\t                label: \"Barcode \" + this.props.id,\n\t                onUserInput: this.setFormData,\n\t                ref: \"barcode\",\n\t                required: true,\n\t                value: this.state.formData[\"barcode\"],\n\t                hasError: this.state.formErrors[\"barcode\"],\n\t                errorMessage: \"Incorrect Barcode format for this Specimen and Container Type\"\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-1\" },\n\t            this.props.button\n\t          )\n\t        ),\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row\" },\n\t          React.createElement(\"div\", { className: \"col-xs-2\" }),\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-9\" },\n\t            React.createElement(\n\t              \"div\",\n\t              { id: this.props.id, className: \"collapse\" },\n\t              React.createElement(SelectElement, {\n\t                name: \"specimenType\",\n\t                label: \"Specimen Type\",\n\t                options: this.props.specimenTypes,\n\t                onUserInput: this.setFormData,\n\t                ref: \"specimenType\",\n\t                required: true,\n\t                value: this.state.formData.specimenType\n\t              }),\n\t              specimenFields\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: \"setFormData\",\n\t    value: function setFormData(formElement, value) {\n\t\n\t      if (formElement === \"specimenType\" && value !== \"\") {\n\t        this.setState({\n\t          currentSpecimenType: value\n\t        });\n\t      }\n\t\n\t      if (formElement === \"containerType\" && value !== \"\") {\n\t        this.setState({\n\t          currentContainerType: value\n\t        });\n\t      }\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t\n\t      this.props.setSpecimenFormData(this.state.formData, this.props.id);\n\t    }\n\t\n\t    // This generates all the form fields for a given specimen type\n\t\n\t  }, {\n\t    key: \"getSpecimenTypeFields\",\n\t    value: function getSpecimenTypeFields() {\n\t      var _this2 = this;\n\t\n\t      if (this.state.currentSpecimenType) {\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t        if (specimenTypeFieldsObject) {\n\t          var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t            var datatype = _this2.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t            if (datatype === \"text\" || datatype === \"number\") {\n\t              if (specimenTypeFieldsObject[attribute]['refTableId'] == null) {\n\t                return React.createElement(TextboxElement, {\n\t                  name: attribute,\n\t                  label: specimenTypeFieldsObject[attribute]['name'],\n\t                  onUserInput: _this2.setFormData,\n\t                  ref: attribute,\n\t                  required: specimenTypeFieldsObject[attribute]['required'],\n\t                  value: _this2.state.formData[attribute],\n\t                  hasError: _this2.state.formErrors[attribute],\n\t                  errorMessage: \"This is a \" + datatype + \" field.\"\n\t                });\n\t              }\n\t\n\t              // OPTIONS FOR SELECT ELEMENT WILL MOST LIKELY BE PASSED VIA AJAX CALL\n\t              // BUT IT CAN ALSO BE PRELOADED --\n\t              // ASK RIDA HOW THIS SHOULD BE DONE\n\t              if (specimenTypeFieldsObject[attribute]['refTableId'] !== null) {\n\t                return React.createElement(SelectElement, {\n\t                  name: attribute,\n\t                  label: specimenTypeFieldsObject[attribute]['name'],\n\t                  options: \"\",\n\t                  onUserInput: _this2.setFormData,\n\t                  ref: attribute,\n\t                  required: _this2.state.formData[attribute],\n\t                  value: _this2.state.formData[attribute]\n\t                });\n\t              }\n\t            }\n\t\n\t            if (datatype === \"datetime\") {\n\t              return React.createElement(DateElement, {\n\t                name: attribute,\n\t                label: specimenTypeFieldsObject[attribute]['name'],\n\t                onUserInput: _this2.setFormData,\n\t                ref: attribute,\n\t                required: specimenTypeFieldsObject[attribute]['required'],\n\t                value: _this2.state.formData[attribute]\n\t              });\n\t            }\n\t          });\n\t\n\t          return specimenTypeFields;\n\t        }\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return BiobankBarcodeForm;\n\t}(React.Component);\n\t\n\tBiobankBarcodeForm.propTypes = {\n\t\n\t  id: React.PropTypes.string,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired,\n\t  units: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = BiobankBarcodeForm;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Tabs component.\n\t *\n\t * @author Loris Team\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Tabs Component.\n\t * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n\t * and corresponding tab panes.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * 1. Define an array of tabs with IDs and labels\n\t *\n\t * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n\t *\n\t * 2. Pass tabList as <Tab> property and <TabPane> as child\n\t *  ```\n\t * <Tabs tabs={tabList} defaultTab=\"tab1\">\n\t *   <TabPane TabId={tabList[0].id}>\n\t *     // Tab content goes here\n\t *   </TabPane>\n\t * </Tabs>\n\t * ```\n\t * =================================================\n\t *\n\t */\n\tvar Tabs = function (_React$Component) {\n\t  _inherits(Tabs, _React$Component);\n\t\n\t  function Tabs(props) {\n\t    _classCallCheck(this, Tabs);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call(this, props));\n\t\n\t    var hash = window.location.hash;\n\t    var activeTab = \"\";\n\t\n\t    /**\n\t     * Determine the initial active tab in this order\n\t     * 1. Try to infer from the URL, otherwise\n\t     * 2. Try to infer from the defaultTab prop, otherwise\n\t     * 3. Set to be the first tab of the list\n\t     */\n\t    if (_this.props.updateURL && hash) {\n\t      activeTab = hash.substr(1);\n\t    } else if (_this.props.defaultTab) {\n\t      activeTab = _this.props.defaultTab;\n\t    } else if (_this.props.tabs.length > 0) {\n\t      activeTab = _this.props.tabs[0].id;\n\t    }\n\t\n\t    _this.state = {\n\t      activeTab: activeTab\n\t    };\n\t\n\t    _this.handleClick = _this.handleClick.bind(_this);\n\t    _this.getTabs = _this.getTabs.bind(_this);\n\t    _this.getTabPanes = _this.getTabPanes.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Tabs, [{\n\t    key: 'handleClick',\n\t    value: function handleClick(tabId, e) {\n\t      this.setState({ activeTab: tabId });\n\t      this.props.onTabChange(tabId);\n\t\n\t      // Add tab href to URL querystring and scroll the page to top\n\t      if (this.props.updateURL) {\n\t        var scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n\t        window.location.hash = e.target.hash;\n\t        $('html,body').scrollTop(scrollDistance);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getTabs',\n\t    value: function getTabs() {\n\t      var tabs = this.props.tabs.map(function (tab) {\n\t        var tabClass = this.state.activeTab === tab.id ? 'active' : null;\n\t        var href = \"#\" + tab.id;\n\t        var tabID = \"tab-\" + tab.id;\n\t        return React.createElement(\n\t          'li',\n\t          {\n\t            role: 'presentation',\n\t            className: tabClass,\n\t            key: tab.id\n\t          },\n\t          React.createElement(\n\t            'a',\n\t            { id: tabID,\n\t              href: href,\n\t              role: 'tab',\n\t              'data-toggle': 'tab',\n\t              onClick: this.handleClick.bind(null, tab.id)\n\t            },\n\t            tab.label\n\t          )\n\t        );\n\t      }.bind(this));\n\t\n\t      return tabs;\n\t    }\n\t  }, {\n\t    key: 'getTabPanes',\n\t    value: function getTabPanes() {\n\t      var tabPanes = React.Children.map(this.props.children, function (child, key) {\n\t        if (child) {\n\t          return React.cloneElement(child, {\n\t            activeTab: this.state.activeTab,\n\t            key: key\n\t          });\n\t        }\n\t      }.bind(this));\n\t\n\t      return tabPanes;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var tabs = this.getTabs();\n\t      var tabPanes = this.getTabPanes();\n\t      var tabStyle = {\n\t        marginLeft: 0,\n\t        marginBottom: '5px'\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'ul',\n\t          { className: 'nav nav-tabs', role: 'tablist', style: tabStyle },\n\t          tabs\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tab-content' },\n\t          tabPanes\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Tabs;\n\t}(React.Component);\n\t\n\tTabs.propTypes = {\n\t  tabs: React.PropTypes.array.isRequired,\n\t  defaultTab: React.PropTypes.string,\n\t  updateURL: React.PropTypes.bool\n\t};\n\tTabs.defaultProps = {\n\t  onTabChange: function onTabChange() {},\n\t  updateURL: false\n\t};\n\t\n\t/*\n\t * TabPane component.\n\t * Used to wrap content for every tab.\n\t */\n\t\n\tvar TabPane = function (_React$Component2) {\n\t  _inherits(TabPane, _React$Component2);\n\t\n\t  function TabPane() {\n\t    _classCallCheck(this, TabPane);\n\t\n\t    return _possibleConstructorReturn(this, (TabPane.__proto__ || Object.getPrototypeOf(TabPane)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(TabPane, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var classList = \"tab-pane\";\n\t      var title = void 0;\n\t\n\t      if (this.props.TabId === this.props.activeTab) {\n\t        classList += \" active\";\n\t      }\n\t      if (this.props.Title) {\n\t        title = React.createElement(\n\t          'h1',\n\t          null,\n\t          this.props.Title\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { role: 'tabpanel', className: classList, id: this.props.TabId },\n\t        title,\n\t        this.props.children\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return TabPane;\n\t}(React.Component);\n\t\n\tTabPane.propTypes = {\n\t  TabId: React.PropTypes.string.isRequired,\n\t  Title: React.PropTypes.string,\n\t  activeTab: React.PropTypes.string\n\t};\n\t\n\tvar Modal = function (_React$Component3) {\n\t  _inherits(Modal, _React$Component3);\n\t\n\t  function Modal() {\n\t    _classCallCheck(this, Modal);\n\t\n\t    return _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Modal, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      // Render nothing if the \"show\" prop is false\n\t      if (!this.props.show) {\n\t        return null;\n\t      }\n\t\n\t      //White Modal Window\n\t      var modalStyle = {\n\t        position: 'relative',\n\t        maxWidth: 1000,\n\t        maxHeight: '100%',\n\t        margin: '0 auto',\n\t        backgroundColor: '#fff',\n\t        padding: 30,\n\t        borderRadius: 10,\n\t        overflowY: 'auto',\n\t        zIndex: 9999\n\t      };\n\t\n\t      //Grey Background\n\t      var backdropStyle = {\n\t        position: 'fixed',\n\t        zIndex: 9998,\n\t        top: 0,\n\t        bottom: 0,\n\t        left: 0,\n\t        right: 0,\n\t        backgroundColor: 'rgba(0,0,0,0.3)',\n\t        padding: 50\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { style: backdropStyle, onClick: this.props.onClose },\n\t        React.createElement(\n\t          'div',\n\t          { style: modalStyle, onClick: function onClick(e) {\n\t              e.stopPropagation();\n\t            } },\n\t          this.props.children\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Modal;\n\t}(React.Component);\n\t\n\tModal.propTypes = {\n\t  onClose: React.PropTypes.func.isRequired,\n\t  show: React.PropTypes.bool,\n\t  children: React.PropTypes.node\n\t};\n\t\n\texports.Tabs = Tabs;\n\texports.TabPane = TabPane;\n\texports.Modal = Modal;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\n\t * Modify behaviour of specified column cells in the Data Table component\n\t * @param {string} column - column name\n\t * @param {string} cell - cell content\n\t * @param {arrray} rowData - array of cell contents for a specific row\n\t * @param {arrray} rowHeaders - array of table headers (column names)\n\t * @return {*} a formated table cell for a given column\n\t */\n\tfunction formatColumn(column, cell, rowData, rowHeaders) {\n\t  // If a column if set as hidden, don't display it\n\t  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n\t  //  return null;\n\t  //}\n\t\n\t  // Create the mapping between rowHeaders and rowData in a row object.\n\t  var row = {};\n\t  rowHeaders.forEach(function (header, index) {\n\t    row[header] = rowData[index];\n\t  }, this);\n\t\n\t  // create array of classes to be added to td tag\n\t  var classes = [];\n\t  if (row['Hide File'] === '1') {\n\t    classes.push(\"bg-danger\");\n\t  }\n\t  // convert array to string, with blank space separator\n\t  classes = classes.join(\" \");\n\t\n\t  //const hasWritePermission = loris.userHasPermission('media_read');\n\t  if (column === 'Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Barcode'];\n\t    return React.createElement(\n\t      'td',\n\t      { className: classes },\n\t      React.createElement(\n\t        'a',\n\t        { href: specimenURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Parent Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Parent Barcode'];\n\t    return React.createElement(\n\t      'td',\n\t      { className: classes },\n\t      React.createElement(\n\t        'a',\n\t        { href: specimenURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Container Barcode') {\n\t    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Container Barcode'];\n\t    return React.createElement(\n\t      'td',\n\t      { className: classes },\n\t      React.createElement(\n\t        'a',\n\t        { href: containerURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  // if (column === 'Visit Label') {\n\t  //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n\t  //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n\t  //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n\t  //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n\t  //   }\n\t  // }\n\t\n\t  // if (column === 'Edit Metadata') {\n\t  //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n\t  //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n\t  // }\n\t\n\t  return React.createElement(\n\t    'td',\n\t    { className: classes },\n\t    cell\n\t  );\n\t}\n\t\n\texports.default = formatColumn;\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// modules/biobank/js/biobankIndex.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap cd8b274bcd979feae2ae","import FilterForm from 'FilterForm';\nimport BiobankSpecimenForm from './specimenForm';\nimport {Tabs, TabPane, Modal} from 'Tabs';\n//import Modal from '../../../htdocs/js/components/Modal';\nimport formatColumn from './columnFormatter';\n\nclass BiobankIndex extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoaded: false,\n      filter: {},\n      isOpen: false,\n    };\n\n    // Bind component instance to custom methods\n    this.fetchData = this.fetchData.bind(this);\n    this.updateFilter = this.updateFilter.bind(this);\n    this.resetFilters = this.resetFilters.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  /**\n   * Retrieve data from the provided URL and save it in state\n   * Additionaly add hiddenHeaders to global loris vairable\n   * for easy access by columnFormatter.\n   */\n  fetchData() {\n    $.ajax(this.props.DataURL, {\n      method: \"GET\",\n      dataType: 'json',\n      success: function(data) {\n        this.setState({\n          Data: data,\n          isLoaded: true\n        });\n      }.bind(this),\n      error: function(error) {\n        console.error(error);\n      }\n    });\n  }\n\n  updateFilter(filter) {\n    this.setState({filter});\n  }\n\n  resetFilters() {\n    this.refs.biobankFilter.clearFilter();\n  }\n\n  toggleModal() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n\n  render() {\n    // Waiting for async data to load\n    if (!this.state.isLoaded) {\n      return (\n        <button className=\"btn-info has-spinner\">\n          Loading\n          <span\n            className=\"glyphicon glyphicon-refresh glyphicon-refresh-animate\">\n          </span>\n        </button>\n      );\n    }\n\n    let tabList = [\n      {id: \"specimens\", label: \"Specimens\"},\n      {id: \"containers\", label: \"Containers\"}\n    ];\n\n    let addSpecimenButton;\n    let specimenForm;\n    if (loris.userHasPermission('biobank_write')) {\n       addSpecimenButton = (\n         <ButtonElement buttonClass=\"btn btn-success\" onUserInput={this.toggleModal} label=\"Add New Specimen\" type=\"button\"/>\n       );\n       specimenForm = (\n         <Modal show={this.state.isOpen} onClose={this.toggleModal}>\n           <BiobankSpecimenForm\n             DataURL={`${loris.BaseURL}/biobank/ajax/FileUpload.php?action=getFormData`}\n             action={`${loris.BaseURL}/biobank/ajax/FileUpload.php?action=submitSpecimen`}\n           />\n         </Modal>\n       );\n     }\n\n    return (\n    <div>\n      <Tabs tabs={tabList} defaultTab=\"specimens\" updateURL={true}>\n        <TabPane TabId={tabList[0].id}>\n          <FilterForm\n            Module=\"biobank\"\n            name=\"specimen_filter\"\n            id=\"specimen_filter_form\"\n            ref=\"specimenFilter\"\n            columns={3}\n            formElements={this.state.Data.form}\n            onUpdate={this.updateFilter}\n            filter={this.state.filter}\n          >\n            <br/>\n          {addSpecimenButton}\n            <ButtonElement label=\"Clear Filters\" type=\"reset\" onUserInput={this.resetFilters}/>\n          </FilterForm>\n          <StaticDataTable\n            Data={this.state.Data.Data}\n            Headers={this.state.Data.Headers}\n            Filter={this.state.filter}\n            getFormattedCell={formatColumn}\n          />\n        </TabPane>\n        <TabPane TabId={tabList[1].id}>\n          <FilterForm\n            Module=\"biobank\"\n            name=\"container_filter\"\n            id=\"container_filter_form\"\n            ref=\"containerFilter\"\n            columns={3}\n            formElements={this.state.Data.form}\n            onUpdate={this.updateFilter}\n            filter={this.state.filter}\n\t\t  >\n            <br/>\n            <ButtonElement label=\"Clear Filters\" type=\"reset\" onUserInput={this.resetFilters}/>\n          </FilterForm>\t\t\t\n          <StaticDataTable\n            Data={this.state.Data.Data}\n            Headers={this.state.Data.Headers}\n            Filter={this.state.filter}\n            getFormattedCell={formatColumn}\n          />\n        </TabPane>\n      </Tabs>\n      {specimenForm}\n      </div>\n    );\n  }\n}\n\n$(function() {\n  const biobankIndex = (\n    <div className=\"page-biobank\">\n      <BiobankIndex DataURL={`${loris.BaseURL}/biobank/?format=json`} />\n    </div>\n  );\n\n  ReactDOM.render(biobankIndex, document.getElementById(\"lorisworkspace\"));\n});\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/biobankIndex.js","/**\n * This file contains React component for FilterForm\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\nimport Panel from 'Panel';\n\n/**\n * FilterForm component.\n * A wrapper for form elements inside a selection filter.\n *\n * Adds necessary filter callbacks to all children and passes them to FormElement\n * for proper rendering.\n *\n * Keeps track of filter object and sends it to parent on every update.\n *\n * //HACK/NOTE: Loris has special behaviour for `candID` attribute in the query string,\n * making it impossible to use it for selection filters. This components renames\n * all `candID` fields to `candidateID` automatically before appending them to URL.\n *\n */\nclass FilterForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    // Bind component instance to custom methods\n    this.clearFilter = this.clearFilter.bind(this);\n    this.getFormChildren = this.getFormChildren.bind(this);\n    this.setFilter = this.setFilter.bind(this);\n    this.onElementUpdate = this.onElementUpdate.bind(this);\n\n    // Keeps track of querystring values\n    // Saved as class variable instead of keeping in state\n    this.queryString = QueryString.get();\n  }\n\n  componentDidMount() {\n    let filter = {};\n    let queryString = this.queryString;\n\n    // Initiaze filter using querystring value\n    Object.keys(queryString).forEach(function(key) {\n      let filterKey = (key === 'candidateID') ? 'candID' : key;\n      filter[filterKey] = {\n        value: queryString[key],\n        exactMatch: false\n      };\n    });\n\n    // Update parent component\n    this.props.onUpdate(filter);\n  }\n\n  /**\n   * Clear the filter object, querystring and input fields\n   */\n  clearFilter() {\n    this.queryString = QueryString.clear(this.props.Module);\n    this.props.onUpdate({});\n  }\n\n  /**\n   * Itterates through FilterForm children, sets necessary callback functions\n   * and initializes filterTable\n   *\n   * @return {Array} formChildren - array of children with necessary props\n   */\n  getFormChildren() {\n    let formChildren = [];\n    React.Children.forEach(this.props.children, function(child, key) {\n      // If child is a React component (i.e not a simple DOM element)\n      if (React.isValidElement(child) &&\n        typeof child.type === \"function\" &&\n        child.props.onUserInput\n      ) {\n        let callbackFunc = child.props.onUserInput;\n        let callbackName = callbackFunc.name;\n        let elementName = child.type.displayName;\n        let queryFieldName = (child.props.name === 'candID') ? 'candidateID' : child.props.name;\n        let filterValue = this.queryString[queryFieldName];\n        // If callback function was not set, set it to onElementUpdate() for form\n        // elements and to clearFilter() for <ButtonElement type='reset'/>.\n        if (callbackName === \"onUserInput\") {\n          if (elementName === \"ButtonElement\" && child.props.type === \"reset\") {\n            callbackFunc = this.clearFilter;\n          } else {\n            callbackFunc = this.onElementUpdate.bind(null, elementName);\n          }\n        }\n        // Pass onUserInput and value props to all children\n        formChildren.push(React.cloneElement(child, {\n          onUserInput: callbackFunc,\n          value: filterValue ? filterValue : '',\n          key: key\n        }));\n        // Initialize filter for StaticDataTable\n        this.setFilter(elementName, child.props.name, filterValue);\n      } else {\n        formChildren.push(React.cloneElement(child, {key: key}));\n      }\n    }.bind(this));\n\n    return formChildren;\n  }\n\n  /**\n   * Appends entry to filter object or deletes it if value is\n   * empty.\n   *\n   * Sets exactMatch to true for all SelectElements (i.e dropdowns)\n   * in order to force StaticDataTable to do exact comparaison\n   *\n   * @param {string} type - form element type (i.e component name)\n   * @param {string} key - the name of the form element\n   * @param {string} value - the value of the form element\n   *\n   * @return {{}} filter - filterData\n   */\n  setFilter(type, key, value) {\n    let filter = {};\n    if (this.props.filter) {\n      filter = JSON.parse(JSON.stringify(this.props.filter));\n    }\n\n    if (key && value) {\n      filter[key] = {};\n      filter[key].value = value;\n      filter[key].exactMatch = (type === \"SelectElement\");\n    } else if (filter && key && value === '') {\n      delete filter[key];\n    }\n\n    return filter;\n  }\n\n  /**\n   * Sets filter object and querystring to reflect values of input fields\n   *\n   * @param {string} type - form element type (i.e component name)\n   * @param {string} fieldName - the name of the form element\n   * @param {string} fieldValue - the value of the form element\n   */\n  onElementUpdate(type, fieldName, fieldValue) {\n    // Make sure both key/value are string before sending them to querystring\n    if (typeof fieldName !== \"string\" || typeof fieldValue !== \"string\") {\n      return;\n    }\n\n    // Update query string\n    let queryFieldName = (fieldName === 'candID') ? 'candidateID' : fieldName;\n    this.queryString = QueryString.set(this.queryString, queryFieldName, fieldValue);\n\n    // Update filter and get new filter object\n    let filter = this.setFilter(type, fieldName, fieldValue);\n    this.props.onUpdate(filter);\n  }\n\n  render() {\n    // Get formatted children\n    let formChildren = this.getFormChildren();\n    let formElements = this.props.formElements;\n\n    if (formElements) {\n      Object.keys(formElements).forEach(function(fieldName) {\n        let queryFieldName = (fieldName === 'candID') ? 'candidateID' : fieldName;\n        formElements[fieldName].onUserInput = this.onElementUpdate.bind(null, fieldName);\n        formElements[fieldName].value = this.queryString[queryFieldName];\n      }.bind(this));\n    }\n\n    return (\n      <Panel\n        id={this.props.id}\n        height={this.props.height}\n        title={this.props.title}\n      >\n        <FormElement {...this.props}>\n          {formChildren}\n        </FormElement>\n      </Panel>\n    );\n  }\n}\n\nFilterForm.defaultProps = {\n  id: 'selection-filter',\n  height: '100%',\n  title: 'Selection Filter',\n  onUpdate: function() {\n    console.warn('onUpdate() callback is not set!');\n  }\n};\nFilterForm.propTypes = {\n  Module: React.PropTypes.string.isRequired,\n  filter: React.PropTypes.object.isRequired,\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  onUpdate: React.PropTypes.func\n};\n\nexport default FilterForm;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/FilterForm.js","/**\n * This file contains React component for Panel\n *\n * @author Alex I.\n * @version 1.0.0\n *\n */\n\n/**\n * Panel component\n * Wraps children in a collapsible bootstrap panel\n */\nclass Panel extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsed: this.props.initCollapsed\n    };\n\n    // Initialize panel class based on collapsed status\n    this.panelClass = (\n      this.props.initCollapsed ?\n        \"panel-collapse collapse\" :\n        \"panel-collapse collapse in\"\n    );\n\n    this.toggleCollapsed = this.toggleCollapsed.bind(this);\n  }\n\n  toggleCollapsed() {\n    this.setState({collapsed: !this.state.collapsed});\n  }\n\n  render() {\n    // Change arrow direction based on collapse status\n    let glyphClass = (\n      this.state.collapsed ?\n        \"glyphicon pull-right glyphicon-chevron-down\" :\n        \"glyphicon pull-right glyphicon-chevron-up\"\n    );\n\n    // Add panel header, if title is set\n    const panelHeading = this.props.title ? (\n      <div\n        className=\"panel-heading\"\n        onClick={this.toggleCollapsed}\n        data-toggle=\"collapse\"\n        data-target={'#' + this.props.id}\n        style={{cursor: 'pointer'}}\n      >\n        {this.props.title}\n        <span className={glyphClass}></span>\n      </div>\n    ) : '';\n\n    return (\n      <div className=\"panel panel-primary\">\n        {panelHeading}\n        <div id={this.props.id} className={this.panelClass} role=\"tabpanel\">\n          <div className=\"panel-body\" style={{height: this.props.height}}>\n            {this.props.children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPanel.propTypes = {\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string\n};\nPanel.defaultProps = {\n  initCollapsed: false,\n  id: 'default-panel',\n  height: '100%'\n};\n\nexport default Panel;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Panel.js","import BiobankBarcodeForm from './barcodeForm.js';\n\n/**\n * Biobank Specimen Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankSpecimenForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      Data: {},\n      formData: {},\n      barcodeFormList: {},\n      errorMessage: null,\n      isLoaded: false,\n      formErrors: {},\n      countBarcodeForms: [1] \n    };\n\n    //this.getValidFileName = this.getValidFileName.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    //this.isValidFileName = this.isValidFileName.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.specimenSubmit = this.specimenSubmit.bind(this);\n    this.addBarcodeForm = this.addBarcodeForm.bind(this);\n    this.setBarcodeFormData = this.setBarcodeFormData.bind(this);\n  }\n\n  componentDidMount() {\n    var self = this;\n    $.ajax(this.props.DataURL, {\n      dataType: 'json',\n      success: function(data) {\n        self.setState({\n          Data: data,\n          isLoaded: true\n        });\n      },\n      error: function(data, errorCode, errorMsg) {\n        console.error(data, errorCode, errorMsg);\n        self.setState({\n          error: 'An error occurred when loading the form!'\n        });\n      }\n    });\n\n    //if this is a child specimen form then certain formData is set when component mounts\n    if (this.props.child) {\n      var formData = this.state.formData;\n      formData['parentSpecimen'] = this.props.specimenId;\n      formData['pscid'] = this.props.candidateId;\n      formData['visitLabel'] = this.props.sessionId;\n\n      this.setState({\n        formData: formData\n      });\n    }\n  }\n\n  render() {\n    // Data loading error\n    if (this.state.error !== undefined) {\n      return (\n        <div className=\"alert alert-danger text-center\">\n          <strong>\n            {this.state.error}\n          </strong>\n        </div>\n      );\n    }\n\n    // Waiting for data to load\n    if (!this.state.isLoaded) {\n      return (\n        <button className=\"btn-info has-spinner\">\n          Loading\n          <span\n            className=\"glyphicon glyphicon-refresh glyphicon-refresh-animate\">\n          </span>\n        </button>\n      );\n    }\n\n    //Styling for remove Barcode button\n    const glyphStyle = {\n     color: '#D3D3D3',\n     margin: 'auto',\n    }; \n    const buttonStyle = {\n      appearance: 'none',\n      outline: 'none',\n      boxShadow: 'none',\n      borderColor: 'transparent',\n      backgroundColor: 'transparent',\n       \n    };\n\n    //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n    var barcodeForms = [];\n    for (let i = 0; i < this.state.countBarcodeForms.length; i++) {\n      barcodeForms.push(\n        <BiobankBarcodeForm\n          setSpecimenFormData={this.setBarcodeFormData}\n          id={this.state.countBarcodeForms[i]}\n          specimenTypes={this.state.Data.specimenTypes}\n          containerTypesPrimary={this.state.Data.containerTypesPrimary}\n          containerBarcodesNonPrimary={this.state.Data.containerBarcodesNonPrimary}\n          specimenTypeAttributes={this.state.Data.specimenTypeAttributes}\n          attributeDatatypes={this.state.Data.attributeDatatypes}\n          capacities={this.state.Data.capacities}\n          units={this.state.Data.units}\n          button={i+1 === this.state.countBarcodeForms.length ? (\n            <button \n              type=\"button\"\n              className=\"btn btn-success btn-sm\"\n              onClick={this.addBarcodeForm}\n            >   \n              <span className=\"glyphicon glyphicon-plus\"/>\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"btn btn-primary-outline btn-sm\"\n              style={buttonStyle}\n              onClick={() => this.removeBarcodeForm(i)}\n            >\n            <span className=\"glyphicon glyphicon-remove\" style={glyphStyle}/>\n            </button>\n          )}\n        />\n      );\n    }\n\n\n    //Since Static Elements Can't be submitted as part of the form we need to decide if we should keep\n    //static elements or make the Select and Textbox Elements Disabled\n    let staticFields;\n    let selectFields;\n    if (this.props.child) {\n      staticFields = (   \n        <div>\n          <StaticElement\n            label=\"Parent Specimen\"\n            text={this.props.barcode}\n          />\n          <StaticElement\n            label=\"PSCID\"\n            text={this.state.Data.PSCIDs[this.props.candidateId]}\n          />\n          <StaticElement\n            label=\"Visit Label\"\n            text={this.state.Data.sessionData[this.state.Data.PSCIDs[this.props.candidateId]].visits[this.props.sessionId]}\n          />\n        </div>\n      );\n    } else {\n      selectFields = (\n          <div>\n            <SelectElement\n              name=\"pscid\"\n              label=\"PSCID\"\n              options={this.state.Data.PSCIDs}\n              onUserInput={this.setFormData}\n              ref=\"pscid\"\n              required={true}\n              value={this.state.formData.pscid}\n            />\n            <SelectElement\n              name=\"visitLabel\"\n              label=\"Visit Label\"\n              options={this.state.Data.visits}\n              onUserInput={this.setFormData}\n              ref=\"visitLabel\"\n              required={true}\n              value={this.state.formData.visitLabel}\n            />\n          </div>\n      );\n    }\n\n    //REPLACE PARENT CONTAINER TYPE WITH PARENT CONTAINER AND LIST ALL THE NON-PRIMARY\n    //CONTAINERS IN THE DATABASE YOU SILLY - Figure out if this is even necessary\n    //ALSO ALLOW THEM TO CANCEL THE FORM AND DELETE BARCODE FORMS\n    return (\n      <FormElement\n        name=\"biobankSpecimen\"\n        onSubmit={this.handleSubmit}\n        ref=\"form\"\n      >\n        <h3><b>Add New Specimen{this.state.countBarcodeForms > 1 ? \"s\" : \"\"}</b></h3>\n        <br/>\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            {staticFields}\n            {selectFields}\n            <DateElement\n              name=\"timeCollect\"\n              label=\"Collection Time\"\n              minYear=\"2000\"\n              maxYear=\"2017\"\n              onUserInput={this.setFormData}\n              ref=\"timeCollect\"\n              required={true}\n              value={this.state.formData.timeCollect}\n            />\n          </div>\n        </div>\n        {barcodeForms}\n        <div className=\"row\">\n          <div className=\"col-xs-9\"/>\n          <div className=\"col-xs-3\">\n            <ButtonElement label=\"Submit\"/>\n          </div>\n        </div>\n        {/*<ButtonElement label=\"Cancel\" type=\"button\" onUserInput={this.toggleModal}/>*/}\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n  /**\n   * Returns a valid name for the file to be specimened\n   *\n   * @param {string} pscid - PSCID selected from the dropdown\n   * @param {string} visitLabel - Visit label selected from the dropdown\n   * @param {string} instrument - Instrument selected from the dropdown\n   * @return {string} - Generated valid filename for the current selection\n   */\n//  getValidFileName(pscid, visitLabel, instrument) {\n//    var fileName = pscid + \"_\" + visitLabel;\n//    if (instrument) fileName += \"_\" + instrument;\n//\n//    return fileName;\n//  }\n\n\n  validateForm(formElement, value) {\n    let formErrors = this.state.formErrors;\n\n    //validate barcode regex\n    if (formElement === \"barcode\" && value !== \"\") {\n      if (!(/^hello/.test(this.state.formData.barcode))) {\n        formErrors.barcode = true;\n      } else {\n        formErrors.barcode = false;\n      }\n    }\n\n    //validate that quantity is a number and less than capacity\n    if (formElement === \"quantity\" && value !== \"\") {\n      if (isNaN(value) || (value > this.state.Data.capacities[this.state.currentContainerType])) {\n        formErrors.quantity = true;\n      } else {\n        formErrors.quantity = false;\n      }\n    }\n\n    //validate datatypes and regex of generated type attributes\n    var specimenTypeFieldsObject = this.state.Data.specimenTypeAttributes[this.state.currentSpecimenType];\n    var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n\n      let datatype = this.state.Data.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"number\") {\n        if (formElement === attribute) {\n          if (isNaN(value) && value !== \"\") {\n            formErrors[attribute] = true;\n          } else {\n            formErrors[attribute] = false;\n          }\n        }\n      }\n    })\n    \n\n    this.setState({\n      formErrors: formErrors\n    });\n\n\n  }\n\n\n  /**\n   * Handle form submission\n   * @param {object} e - Form submission event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    let formRefs = this.refs;\n    //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\n    // Validate the form\n    if (!this.isValidForm(formRefs, formData)) {\n      return;\n    }\n\n\n//    // Validate specimened file name\n//    let instrument = formData.instrument ? formData.instrument : null;\n//    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n//    let requiredFileName = this.getValidFileName(\n//      formData.pscid, formData.visitLabel, instrument\n//    );\n//    if (!this.isValidFileName(requiredFileName, fileName)) {\n//      swal(\n//        \"Invalid Specimen name!\",\n//        \"File name should begin with: \" + requiredFileName,\n//        \"error\"\n//      );\n//      return;\n//    }\n\n    // Check for duplicate file names\n//    let isDuplicate = biobankFiles.indexOf(fileName);\n//    if (isDuplicate >= 0) {\n//      swal({\n//        title: \"Are you sure?\",\n//        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n//        type: \"warning\",\n//        showCancelButton: true,\n//        confirmButtonText: 'Yes, I am sure!',\n//        cancelButtonText: \"No, cancel it!\"\n//      }, function(isConfirm) {\n//        if (isConfirm) {\n//          this.specimenFile();\n//        } else {\n//          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n//        }\n//      }.bind(this));\n//    } else {\n      formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n\n      this.setState({\n        formData: formData\n      });\n\n      this.specimenSubmit();\n//    }\n  }\n\n  /*\n   * Uploads the file to the server\n   */\n  specimenSubmit() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        // Trigger an update event to update all observers (i.e DataTable)\n        let event = new CustomEvent('update-datatable');\n        window.dispatchEvent(event);\n\n        this.setState({\n          formData: {}, // reset form data after successful file specimen\n          barcodeFormList: {}\n        });\n        swal(\"Specimen Submission Successful!\", \"\", \"success\");\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Checks if the inputted file name is valid\n   *\n   * @param {string} requiredFileName - Required file name\n   * @param {string} fileName - Provided file name\n   * @return {boolean} - true if fileName starts with requiredFileName, false\n   *   otherwise\n   */\n//  isValidFileName(requiredFileName, fileName) {\n//    if (fileName === null || requiredFileName === null) {\n//      return false;\n//    }\n//\n//    return (fileName.indexOf(requiredFileName) === 0);\n//  }\n\n  /**\n   * Validate the form\n   *\n   * @param {object} formRefs - Object containing references to React form elements\n   * @param {object} formData - Object containing form data inputed by user\n   * @return {boolean} - true if all required fields are filled, false otherwise\n   */\n  isValidForm(formRefs, formData) {\n    var isValidForm = true;\n\n    var requiredFields = {\n      pscid: null,\n      visitLabel: null,\n    };\n\n    Object.keys(requiredFields).map(function(field) {\n      if (formData[field]) {\n        requiredFields[field] = formData[field];\n      } else if (formRefs[field]) {\n        formRefs[field].props.hasError = true;\n        isValidForm = false;\n      }\n    });\n    this.forceUpdate();\n\n    return isValidForm;\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    // Only display visits and sites available for the current pscid\n    //let visitLabel = this.state.formData.visitLabel;\n    //let pscid = this.state.formData.pscid;\n   \n    if (formElement === \"pscid\" && value !== \"\") {\n      this.state.Data.visits = this.state.Data.sessionData[this.state.Data.PSCIDs[value]].visits;\n      //this.state.Data.sites = this.state.Data.sessionData[this.state.Data.PSCIDs[value]].sites;\n    }\n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  setBarcodeFormData(barcodeFormData, barcodeId) {\n    var formData = this.state.formData;\n    var barcodeFormList = this.state.barcodeFormList;\n    barcodeFormList[barcodeId] = barcodeFormData;\n    formData['barcodeFormList'] = barcodeFormList;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  addBarcodeForm() {\n    let countBarcodeForms = this.state.countBarcodeForms;\n    countBarcodeForms.push(countBarcodeForms[countBarcodeForms.length -1] + 1); \n    this.setState({\n      countBarcodeForms: countBarcodeForms\n    });\n  }\n\n  removeBarcodeForm(index) {\n    let countBarcodeForms = this.state.countBarcodeForms;\n    countBarcodeForms.splice(index, 1);\n    this.setState({\n      countBarcodeForms: countBarcodeForms\n    });\n  }\n}\n\nBiobankSpecimenForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired,\n  barcode: React.PropTypes.string\n};\n\nexport default BiobankSpecimenForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenForm.js","\n/**\n * Biobank Barcode Form\n *\n * Acts a subform for BiobankSpecimenForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass BiobankBarcodeForm extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      formData: {},\n      currentSpecimenType: null,\n      currentContainerType: null,\n      formErrors: {},\n    };\n   \n    this.setFormData = this.setFormData.bind(this);\n    this.getSpecimenTypeFields = this.getSpecimenTypeFields.bind(this);\n  }\n\n  render() {\n\n    var specimenFields;\n    var specimenTypeFields = this.getSpecimenTypeFields();\n    if (this.state.currentSpecimenType) {\n      specimenFields = (\n       <div>\n         <SelectElement\n           name=\"containerType\"\n           label=\"Container Type\"\n           options={this.props.containerTypesPrimary}\n           onUserInput={this.setFormData}\n           ref=\"containerType\"\n           required={true}\n           value={this.state.formData.containerType}\n         />\n         <SelectElement\n           name=\"parentContainer\"\n           label=\"Parent Container Barcode\"\n           options={this.props.containerBarcodesNonPrimary}\n           onUserInput={this.setFormData}\n           ref=\"parentContainer\"\n           required={false}\n           value={this.state.formData.parentContainer}\n         />\n         <TextboxElement\n           name=\"quantity\"\n           label={\"Quantity\" + (this.state.currentContainerType ?\n             \" (\" + this.props.units[this.state.currentContainerType] + \")\" : \"\")}\n           onUserInput={this.setFormData}\n           ref=\"quantity\"\n           required={true}\n           value={this.state.formData.quantity}\n           hasError={this.state.formErrors.quantity}\n         />\n         {specimenTypeFields}\n         <TextareaElement\n           name=\"notes\"\n           label=\"Notes\"\n           onUserInput={this.setFormData}\n           ref=\"notes\"\n           value={this.state.formData.notes}\n         />\n       </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"biobankBarcode\"\n      >\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <div \n              data-toggle=\"collapse\" \n              data-target={\"#\" + this.props.id}\n              color=\"blue\"\n            >\n              <TextboxElement\n              name={\"barcode\"}\n              label={\"Barcode \" + this.props.id}\n              onUserInput={this.setFormData}\n              ref={\"barcode\"}\n              required={true}\n              value={this.state.formData[\"barcode\"]}\n              hasError={this.state.formErrors[\"barcode\"]}\n              errorMessage=\"Incorrect Barcode format for this Specimen and Container Type\"\n              />\n            </div>\n          </div>\n          <div className=\"col-xs-1\">\n            {this.props.button}\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xs-2\"/>\n          <div className=\"col-xs-9\">\n            <div id={this.props.id} className=\"collapse\">\n              <SelectElement\n                name=\"specimenType\"\n                label=\"Specimen Type\"\n                options={this.props.specimenTypes}\n                onUserInput={this.setFormData}\n                ref=\"specimenType\"\n                required={true}\n                value={this.state.formData.specimenType}\n              />\n            {specimenFields}\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n\n    if (formElement === \"specimenType\" && value !== \"\") {\n      this.setState({\n        currentSpecimenType: value\n      });\n    }\n\n    if (formElement === \"containerType\" && value !== \"\") {\n      this.setState({\n        currentContainerType: value\n      });\n    }\n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState({\n      formData: formData\n    });\n \n    this.props.setSpecimenFormData(this.state.formData, this.props.id);\t\n  }\n\n  // This generates all the form fields for a given specimen type\n  getSpecimenTypeFields() {\n    if (this.state.currentSpecimenType) {\n      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n      if (specimenTypeFieldsObject) {\n        var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n          let datatype = this.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n          if (datatype === \"text\" || datatype === \"number\") {\n            if (specimenTypeFieldsObject[attribute]['refTableId'] == null) {\n              return (\n                <TextboxElement\n                  name={attribute}\n                  label={specimenTypeFieldsObject[attribute]['name']}\n                  onUserInput={this.setFormData}\n                  ref={attribute}\n                  required={specimenTypeFieldsObject[attribute]['required']}\n                  value={this.state.formData[attribute]}\n                  hasError={this.state.formErrors[attribute]}\n                  errorMessage={\"This is a \" + datatype + \" field.\"}\n                />\n              );\n            }\n\n            // OPTIONS FOR SELECT ELEMENT WILL MOST LIKELY BE PASSED VIA AJAX CALL\n            // BUT IT CAN ALSO BE PRELOADED --\n            // ASK RIDA HOW THIS SHOULD BE DONE\n            if (specimenTypeFieldsObject[attribute]['refTableId'] !== null) {\n              return (\n                <SelectElement\n                  name={attribute}\n                  label={specimenTypeFieldsObject[attribute]['name']}\n                  options=\"\"\n                  onUserInput={this.setFormData}\n                  ref={attribute}\n                  required={this.state.formData[attribute]}\n                  value={this.state.formData[attribute]}\n                />\n              );\n            }\n          }\n\n          if (datatype === \"datetime\") {\n            return (\n              <DateElement\n                name={attribute}\n                label={specimenTypeFieldsObject[attribute]['name']}\n                onUserInput={this.setFormData}\n                ref={attribute}\n                required={specimenTypeFieldsObject[attribute]['required']}\n                value={this.state.formData[attribute]}\n              />\n            );\n          }\n        })\n\n        return specimenTypeFields;\n      }\n    }\n  }\n}\n\nBiobankBarcodeForm.propTypes = {\n  \n  id: React.PropTypes.string,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n  units: React.PropTypes.object.isRequired,\n}\n\nexport default BiobankBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/barcodeForm.js","/**\n * This file contains React components for Tabs component.\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\n/**\n * Tabs Component.\n * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n * and corresponding tab panes.\n *\n * ================================================\n * Usage:\n *\n * 1. Define an array of tabs with IDs and labels\n *\n * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n *\n * 2. Pass tabList as <Tab> property and <TabPane> as child\n *  ```\n * <Tabs tabs={tabList} defaultTab=\"tab1\">\n *   <TabPane TabId={tabList[0].id}>\n *     // Tab content goes here\n *   </TabPane>\n * </Tabs>\n * ```\n * =================================================\n *\n */\nclass Tabs extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    const hash = window.location.hash;\n    let activeTab = \"\";\n\n    /**\n     * Determine the initial active tab in this order\n     * 1. Try to infer from the URL, otherwise\n     * 2. Try to infer from the defaultTab prop, otherwise\n     * 3. Set to be the first tab of the list\n     */\n    if (this.props.updateURL && hash) {\n      activeTab = hash.substr(1);\n    } else if (this.props.defaultTab) {\n      activeTab = this.props.defaultTab;\n    } else if (this.props.tabs.length > 0) {\n      activeTab = this.props.tabs[0].id;\n    }\n\n    this.state = {\n      activeTab: activeTab\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.getTabs = this.getTabs.bind(this);\n    this.getTabPanes = this.getTabPanes.bind(this);\n  }\n\n  handleClick(tabId, e) {\n    this.setState({activeTab: tabId});\n    this.props.onTabChange(tabId);\n\n    // Add tab href to URL querystring and scroll the page to top\n    if (this.props.updateURL) {\n      const scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n      window.location.hash = e.target.hash;\n      $('html,body').scrollTop(scrollDistance);\n    }\n  }\n\n  getTabs() {\n    let tabs = (this.props.tabs).map(function(tab) {\n      let tabClass = this.state.activeTab === tab.id ? 'active' : null;\n      let href = \"#\" + tab.id;\n      let tabID = \"tab-\" + tab.id;\n      return (\n        <li\n          role=\"presentation\"\n          className={tabClass}\n          key={tab.id}\n        >\n          <a id={tabID}\n             href={href}\n             role=\"tab\"\n             data-toggle=\"tab\"\n             onClick={this.handleClick.bind(null, tab.id)}\n          >\n            {tab.label}\n          </a>\n        </li>\n      );\n    }.bind(this));\n\n    return tabs;\n  }\n\n  getTabPanes() {\n    let tabPanes = React.Children.map(this.props.children, function(child, key) {\n      if (child) {\n        return React.cloneElement(child, {\n          activeTab: this.state.activeTab,\n          key: key\n        });\n      }\n    }.bind(this));\n\n    return tabPanes;\n  }\n\n  render() {\n    let tabs = this.getTabs();\n    let tabPanes = this.getTabPanes();\n    let tabStyle = {\n      marginLeft: 0,\n      marginBottom: '5px'\n    };\n\n    return (\n      <div>\n        <ul className=\"nav nav-tabs\" role=\"tablist\" style={tabStyle}>\n          {tabs}\n        </ul>\n        <div className=\"tab-content\">\n          {tabPanes}\n        </div>\n      </div>\n    );\n  }\n}\nTabs.propTypes = {\n  tabs: React.PropTypes.array.isRequired,\n  defaultTab: React.PropTypes.string,\n  updateURL: React.PropTypes.bool\n};\nTabs.defaultProps = {\n  onTabChange: function() {},\n  updateURL: false\n};\n\n/*\n * TabPane component.\n * Used to wrap content for every tab.\n */\nclass TabPane extends React.Component {\n  render() {\n    let classList = \"tab-pane\";\n    let title;\n\n    if (this.props.TabId === this.props.activeTab) {\n      classList += \" active\";\n    }\n    if (this.props.Title) {\n      title = <h1>{this.props.Title}</h1>;\n    }\n\n    return (\n      <div role=\"tabpanel\" className={classList} id={this.props.TabId}>\n        {title}\n        {this.props.children}\n      </div>\n    );\n  }\n}\nTabPane.propTypes = {\n  TabId: React.PropTypes.string.isRequired,\n  Title: React.PropTypes.string,\n  activeTab: React.PropTypes.string\n};\n\nclass Modal extends React.Component {\n\n  render() {\n    // Render nothing if the \"show\" prop is false\n    if(!this.props.show) {\n      return null;\n    }   \n\n    //White Modal Window\n    const modalStyle = { \n      position: 'relative',\n      maxWidth: 1000,        \n      maxHeight: '100%',\n      margin: '0 auto',\n      backgroundColor: '#fff',\n      padding: 30,\n      borderRadius: 10,\n      overflowY: 'auto',\n      zIndex: 9999,\n    };  \n\n    //Grey Background\n    const backdropStyle = {\n      position: 'fixed',\n      zIndex: 9998,\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundColor: 'rgba(0,0,0,0.3)',\n      padding: 50\n    };\n\n    return (\n    <div style={backdropStyle} onClick={this.props.onClose}>\n      <div style={modalStyle} onClick={(e) => {e.stopPropagation()}}>\n        {this.props.children}\n      </div>\n    </div>\n    ); \n  }\n}\nModal.propTypes = { \n  onClose: React.PropTypes.func.isRequired,\n  show: React.PropTypes.bool,\n  children: React.PropTypes.node\n};\n\nexport {\n  Tabs,\n  TabPane,\n  Modal\n};\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Tabs.js","/**\n * Modify behaviour of specified column cells in the Data Table component\n * @param {string} column - column name\n * @param {string} cell - cell content\n * @param {arrray} rowData - array of cell contents for a specific row\n * @param {arrray} rowHeaders - array of table headers (column names)\n * @return {*} a formated table cell for a given column\n */\nfunction formatColumn(column, cell, rowData, rowHeaders) {\n  // If a column if set as hidden, don't display it\n  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n  //  return null;\n  //}\n\n  // Create the mapping between rowHeaders and rowData in a row object.\n  var row = {};\n  rowHeaders.forEach(function(header, index) {\n    row[header] = rowData[index];\n  }, this);\n\n  // create array of classes to be added to td tag\n  var classes = [];\n  if (row['Hide File'] === '1') {\n    classes.push(\"bg-danger\");\n  }\n  // convert array to string, with blank space separator\n  classes = classes.join(\" \");\n\n  //const hasWritePermission = loris.userHasPermission('media_read');\n  if (column === 'Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Barcode'];\n    return <td className= {classes}><a href={specimenURL}>{cell}</a></td>;\n  }\n\n  if (column === 'Parent Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Parent Barcode'];\n    return <td className= {classes}><a href={specimenURL}>{cell}</a></td>; \n}\n\n  if (column === 'Container Barcode') {\n    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Container Barcode'];\n    return <td className= {classes}><a href={containerURL}>{cell}</a></td>;\n}\n\n // if (column === 'Visit Label') {\n //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n //   }\n // }\n\n // if (column === 'Edit Metadata') {\n //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n // }\n\n  return <td className={classes}>{cell}</td>;\n}\n\nexport default formatColumn;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/columnFormatter.js"],"sourceRoot":""}