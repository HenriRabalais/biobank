{"version":3,"sources":["webpack:///modules/biobank/js/biobankIndex.js","webpack:///webpack/bootstrap 466ad7c23982b1b02bbd?399d******","webpack:///./modules/biobank/jsx/biobankIndex.js","webpack:///./jsx/FilterForm.js","webpack:///./jsx/Panel.js","webpack:///./modules/biobank/jsx/collectionForm.js","webpack:///./modules/biobank/jsx/barcodeForm.js","webpack:///./modules/biobank/jsx/specimenForm.js","webpack:///./jsx/Tabs.js","webpack:///./modules/biobank/jsx/columnFormatter.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","_FilterForm","_FilterForm2","_collectionForm","_collectionForm2","_Tabs","_columnFormatter","_columnFormatter2","BiobankIndex","_React$Component","this","_this","getPrototypeOf","state","isLoaded","filter","isOpen","fetchSpecimenFilterData","bind","fetchCollectionFormData","updateFilter","resetFilters","toggleModal","$","ajax","specimenFilterDataURL","method","dataType","success","data","setState","Data","error","console","specimenFormDataURL","SpecimenData","refs","biobankFilter","clearFilter","React","createElement","className","tabList","label","addSpecimenButton","specimenForm","loris","userHasPermission","ButtonElement","buttonClass","onUserInput","type","Modal","show","onClose","specimenTypes","containerTypesPrimary","containerBarcodesNonPrimary","specimenTypeAttributes","attributeDatatypes","capacities","units","pSCIDs","visits","sessionData","action","BaseURL","closeModal","Tabs","tabs","defaultTab","updateURL","TabPane","TabId","Module","name","ref","columns","formElements","form","onUpdate","StaticDataTable","Headers","Filter","getFormattedCell","Component","biobankIndex","ReactDOM","render","document","getElementById","_Panel","_Panel2","FilterForm","getFormChildren","setFilter","onElementUpdate","queryString","QueryString","get","keys","forEach","filterKey","exactMatch","clear","formChildren","Children","children","child","isValidElement","callbackFunc","callbackName","elementName","displayName","queryFieldName","filterValue","push","cloneElement","JSON","parse","stringify","fieldName","fieldValue","set","height","title","FormElement","defaultProps","warn","propTypes","PropTypes","string","isRequired","object","func","Panel","collapsed","initCollapsed","panelClass","toggleCollapsed","glyphClass","pencilGlyph","edit","style","marginRight","cursor","onClick","plusGlyph","add","removeGlyph","cancel","panelHeading","data-toggle","data-target","role","_barcodeForm","_barcodeForm2","BiobankCollectionForm","formData","barcodeFormList","errorMessage","formErrors","countBarcodeForms","handleSubmit","validateForm","setFormData","specimenSubmit","addBarcodeForm","setBarcodeFormData","specimenId","candidateId","sessionId","_this2","glyphStyle","color","margin","buttonStyle","appearance","outline","boxShadow","borderColor","backgroundColor","barcodeForms","_loop","setParentFormData","button","removeBarcodeForm","staticFields","selectFields","StaticElement","text","barcode","pscid","visit","SelectElement","options","required","visitLabel","disabled","onSubmit","formElement","_this3","test","isNaN","currentContainerType","quantity","specimenTypeFieldsObject","currentSpecimenType","map","attribute","datatype","e","preventDefault","formRefs","isValidForm","formObj","FormData","append","url","cache","contentType","processData","xhr","window","XMLHttpRequest","event","CustomEvent","dispatchEvent","swal","err","msg","responseJSON","message","requiredFields","field","hasError","forceUpdate","barcodeFormData","barcodeId","index","splice","DataURL","_specimenForm","_specimenForm2","BiobankBarcodeForm","setSpecimenFormData","TextboxElement","stati","specimenFormData","_defineProperty","BiobankSpecimenForm","specimenType","containerType","setSpecimenTypeFieldFormData","getSpecimenTypeFields","handleUpdate","updateSpecimen","unit","collectDate","collectTime","notes","parentContainerField","parentContainer","updateButton","specimenFields","specimenTypeFields","DateElement","minYear","maxYear","TimeElement","TextareaElement","attribte","_$$ajax","updatePage","hash","location","activeTab","substr","handleClick","getTabs","getTabPanes","tabId","onTabChange","scrollDistance","scrollTop","tab","tabClass","href","tabID","tabPanes","tabStyle","marginLeft","marginBottom","array","bool","_React$Component2","apply","arguments","classList","Title","_React$Component3","modalStyle","position","maxWidth","maxHeight","padding","borderRadius","overflowY","zIndex","backdropStyle","top","bottom","left","right","stopPropagation","node","formatColumn","column","cell","rowData","rowHeaders","row","header","classes","join","specimenURL","containerURL"],"mappings":"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","file":"./modules/biobank/js/biobankIndex.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _FilterForm = __webpack_require__(1);\n\t\n\tvar _FilterForm2 = _interopRequireDefault(_FilterForm);\n\t\n\tvar _collectionForm = __webpack_require__(3);\n\t\n\tvar _collectionForm2 = _interopRequireDefault(_collectionForm);\n\t\n\tvar _Tabs = __webpack_require__(6);\n\t\n\tvar _columnFormatter = __webpack_require__(7);\n\t\n\tvar _columnFormatter2 = _interopRequireDefault(_columnFormatter);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t//import Modal from '../../../htdocs/js/components/Modal';\n\t\n\t\n\tvar BiobankIndex = function (_React$Component) {\n\t  _inherits(BiobankIndex, _React$Component);\n\t\n\t  function BiobankIndex(props) {\n\t    _classCallCheck(this, BiobankIndex);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankIndex.__proto__ || Object.getPrototypeOf(BiobankIndex)).call(this, props));\n\t\n\t    _this.state = {\n\t      isLoaded: false,\n\t      filter: {},\n\t      isOpen: false\n\t    };\n\t\n\t    // Bind component instance to custom methods\n\t    _this.fetchSpecimenFilterData = _this.fetchSpecimenFilterData.bind(_this);\n\t    _this.fetchCollectionFormData = _this.fetchCollectionFormData.bind(_this);\n\t    _this.updateFilter = _this.updateFilter.bind(_this);\n\t    _this.resetFilters = _this.resetFilters.bind(_this);\n\t    _this.toggleModal = _this.toggleModal.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankIndex, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      this.fetchSpecimenFilterData();\n\t      this.fetchCollectionFormData();\n\t    }\n\t\n\t    /**\n\t     * Retrieve data from the provided URL and save it in state\n\t     * Additionaly add hiddenHeaders to global loris variable\n\t     * for easy access by columnFormatter.\n\t     */\n\t\n\t  }, {\n\t    key: 'fetchSpecimenFilterData',\n\t    value: function fetchSpecimenFilterData() {\n\t      $.ajax(this.props.specimenFilterDataURL, {\n\t        method: \"GET\",\n\t        dataType: 'json',\n\t        success: function (data) {\n\t          this.setState({\n\t            Data: data,\n\t            isLoaded: true\n\t          });\n\t        }.bind(this),\n\t        error: function error(_error) {\n\t          console.error(_error);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'fetchCollectionFormData',\n\t    value: function fetchCollectionFormData() {\n\t      $.ajax(this.props.specimenFormDataURL, {\n\t        method: \"GET\",\n\t        dataType: 'json',\n\t        success: function (data) {\n\t          this.setState({\n\t            SpecimenData: data,\n\t            isLoaded: true\n\t          });\n\t        }.bind(this),\n\t        error: function error(_error2) {\n\t          console.error(_error2);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'updateFilter',\n\t    value: function updateFilter(filter) {\n\t      this.setState({ filter: filter });\n\t    }\n\t  }, {\n\t    key: 'resetFilters',\n\t    value: function resetFilters() {\n\t      this.refs.biobankFilter.clearFilter();\n\t    }\n\t  }, {\n\t    key: 'toggleModal',\n\t    value: function toggleModal() {\n\t      this.setState({\n\t        isOpen: !this.state.isOpen\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Waiting for async data to load\n\t      if (!this.state.isLoaded) {\n\t        return React.createElement(\n\t          'button',\n\t          { className: 'btn-info has-spinner' },\n\t          'Loading',\n\t          React.createElement('span', {\n\t            className: 'glyphicon glyphicon-refresh glyphicon-refresh-animate' })\n\t        );\n\t      }\n\t\n\t      var tabList = [{ id: \"specimens\", label: \"Specimens\" }, { id: \"containers\", label: \"Containers\" }];\n\t\n\t      var addSpecimenButton = void 0;\n\t      var specimenForm = void 0;\n\t      if (loris.userHasPermission('biobank_write')) {\n\t        addSpecimenButton = React.createElement(ButtonElement, { buttonClass: 'btn btn-success', onUserInput: this.toggleModal, label: 'Add New Specimen', type: 'button' });\n\t        specimenForm = React.createElement(\n\t          _Tabs.Modal,\n\t          { show: this.state.isOpen, onClose: this.toggleModal },\n\t          React.createElement(_collectionForm2.default, {\n\t            specimenTypes: this.state.SpecimenData.specimenTypes,\n\t            containerTypesPrimary: this.state.SpecimenData.containerTypesPrimary,\n\t            containerBarcodesNonPrimary: this.state.SpecimenData.containerBarcodesNonPrimary,\n\t            specimenTypeAttributes: this.state.SpecimenData.specimenTypeAttributes,\n\t            attributeDatatypes: this.state.SpecimenData.attributeDatatypes,\n\t            capacities: this.state.SpecimenData.capacities,\n\t            units: this.state.SpecimenData.units,\n\t            pSCIDs: this.state.SpecimenData.pSCIDs,\n\t            visits: this.state.SpecimenData.visits,\n\t            sessionData: this.state.SpecimenData.sessionData,\n\t            action: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=submitSpecimen',\n\t            closeModal: this.toggleModal\n\t          })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          _Tabs.Tabs,\n\t          { tabs: tabList, defaultTab: 'specimens', updateURL: true },\n\t          React.createElement(\n\t            _Tabs.TabPane,\n\t            { TabId: tabList[0].id },\n\t            React.createElement(\n\t              _FilterForm2.default,\n\t              {\n\t                Module: 'biobank',\n\t                name: 'specimen_filter',\n\t                id: 'specimen_filter_form',\n\t                ref: 'specimenFilter',\n\t                columns: 3,\n\t                formElements: this.state.Data.form,\n\t                onUpdate: this.updateFilter,\n\t                filter: this.state.filter\n\t              },\n\t              React.createElement('br', null),\n\t              addSpecimenButton,\n\t              React.createElement(ButtonElement, { label: 'Clear Filters', type: 'reset', onUserInput: this.resetFilters })\n\t            ),\n\t            React.createElement(StaticDataTable, {\n\t              Data: this.state.Data.Data,\n\t              Headers: this.state.Data.Headers,\n\t              Filter: this.state.filter,\n\t              getFormattedCell: _columnFormatter2.default\n\t            })\n\t          ),\n\t          React.createElement(\n\t            _Tabs.TabPane,\n\t            { TabId: tabList[1].id },\n\t            React.createElement(\n\t              _FilterForm2.default,\n\t              {\n\t                Module: 'biobank',\n\t                name: 'container_filter',\n\t                id: 'container_filter_form',\n\t                ref: 'containerFilter',\n\t                columns: 3,\n\t                formElements: this.state.Data.form,\n\t                onUpdate: this.updateFilter,\n\t                filter: this.state.filter\n\t              },\n\t              React.createElement('br', null),\n\t              React.createElement(ButtonElement, { label: 'Clear Filters', type: 'reset', onUserInput: this.resetFilters })\n\t            ),\n\t            React.createElement(StaticDataTable, {\n\t              Data: this.state.Data.Data,\n\t              Headers: this.state.Data.Headers,\n\t              Filter: this.state.filter,\n\t              getFormattedCell: _columnFormatter2.default\n\t            })\n\t          )\n\t        ),\n\t        specimenForm\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return BiobankIndex;\n\t}(React.Component);\n\t\n\t$(function () {\n\t  var biobankIndex = React.createElement(\n\t    'div',\n\t    { className: 'page-biobank' },\n\t    React.createElement(BiobankIndex, {\n\t      specimenFilterDataURL: loris.BaseURL + '/biobank/?format=json',\n\t      specimenFormDataURL: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=getCollectionFormData'\n\t    })\n\t  );\n\t\n\t  ReactDOM.render(biobankIndex, document.getElementById(\"lorisworkspace\"));\n\t});\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Panel = __webpack_require__(2);\n\t\n\tvar _Panel2 = _interopRequireDefault(_Panel);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file contains React component for FilterForm\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Loris Team\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.1.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/**\n\t * FilterForm component.\n\t * A wrapper for form elements inside a selection filter.\n\t *\n\t * Adds necessary filter callbacks to all children and passes them to FormElement\n\t * for proper rendering.\n\t *\n\t * Keeps track of filter object and sends it to parent on every update.\n\t *\n\t * //HACK/NOTE: Loris has special behaviour for `candID` attribute in the query string,\n\t * making it impossible to use it for selection filters. This components renames\n\t * all `candID` fields to `candidateID` automatically before appending them to URL.\n\t *\n\t */\n\tvar FilterForm = function (_React$Component) {\n\t  _inherits(FilterForm, _React$Component);\n\t\n\t  function FilterForm(props) {\n\t    _classCallCheck(this, FilterForm);\n\t\n\t    // Bind component instance to custom methods\n\t    var _this = _possibleConstructorReturn(this, (FilterForm.__proto__ || Object.getPrototypeOf(FilterForm)).call(this, props));\n\t\n\t    _this.clearFilter = _this.clearFilter.bind(_this);\n\t    _this.getFormChildren = _this.getFormChildren.bind(_this);\n\t    _this.setFilter = _this.setFilter.bind(_this);\n\t    _this.onElementUpdate = _this.onElementUpdate.bind(_this);\n\t\n\t    // Keeps track of querystring values\n\t    // Saved as class variable instead of keeping in state\n\t    _this.queryString = QueryString.get();\n\t    return _this;\n\t  }\n\t\n\t  _createClass(FilterForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var filter = {};\n\t      var queryString = this.queryString;\n\t\n\t      // Initiaze filter using querystring value\n\t      Object.keys(queryString).forEach(function (key) {\n\t        var filterKey = key === 'candidateID' ? 'candID' : key;\n\t        filter[filterKey] = {\n\t          value: queryString[key],\n\t          exactMatch: false\n\t        };\n\t      });\n\t\n\t      // Update parent component\n\t      this.props.onUpdate(filter);\n\t    }\n\t\n\t    /**\n\t     * Clear the filter object, querystring and input fields\n\t     */\n\t\n\t  }, {\n\t    key: 'clearFilter',\n\t    value: function clearFilter() {\n\t      this.queryString = QueryString.clear(this.props.Module);\n\t      this.props.onUpdate({});\n\t    }\n\t\n\t    /**\n\t     * Itterates through FilterForm children, sets necessary callback functions\n\t     * and initializes filterTable\n\t     *\n\t     * @return {Array} formChildren - array of children with necessary props\n\t     */\n\t\n\t  }, {\n\t    key: 'getFormChildren',\n\t    value: function getFormChildren() {\n\t      var formChildren = [];\n\t      React.Children.forEach(this.props.children, function (child, key) {\n\t        // If child is a React component (i.e not a simple DOM element)\n\t        if (React.isValidElement(child) && typeof child.type === \"function\" && child.props.onUserInput) {\n\t          var callbackFunc = child.props.onUserInput;\n\t          var callbackName = callbackFunc.name;\n\t          var elementName = child.type.displayName;\n\t          var queryFieldName = child.props.name === 'candID' ? 'candidateID' : child.props.name;\n\t          var filterValue = this.queryString[queryFieldName];\n\t          // If callback function was not set, set it to onElementUpdate() for form\n\t          // elements and to clearFilter() for <ButtonElement type='reset'/>.\n\t          if (callbackName === \"onUserInput\") {\n\t            if (elementName === \"ButtonElement\" && child.props.type === \"reset\") {\n\t              callbackFunc = this.clearFilter;\n\t            } else {\n\t              callbackFunc = this.onElementUpdate.bind(null, elementName);\n\t            }\n\t          }\n\t          // Pass onUserInput and value props to all children\n\t          formChildren.push(React.cloneElement(child, {\n\t            onUserInput: callbackFunc,\n\t            value: filterValue ? filterValue : '',\n\t            key: key\n\t          }));\n\t          // Initialize filter for StaticDataTable\n\t          this.setFilter(elementName, child.props.name, filterValue);\n\t        } else {\n\t          formChildren.push(React.cloneElement(child, { key: key }));\n\t        }\n\t      }.bind(this));\n\t\n\t      return formChildren;\n\t    }\n\t\n\t    /**\n\t     * Appends entry to filter object or deletes it if value is\n\t     * empty.\n\t     *\n\t     * Sets exactMatch to true for all SelectElements (i.e dropdowns)\n\t     * in order to force StaticDataTable to do exact comparaison\n\t     *\n\t     * @param {string} type - form element type (i.e component name)\n\t     * @param {string} key - the name of the form element\n\t     * @param {string} value - the value of the form element\n\t     *\n\t     * @return {{}} filter - filterData\n\t     */\n\t\n\t  }, {\n\t    key: 'setFilter',\n\t    value: function setFilter(type, key, value) {\n\t      var filter = {};\n\t      if (this.props.filter) {\n\t        filter = JSON.parse(JSON.stringify(this.props.filter));\n\t      }\n\t\n\t      if (key && value) {\n\t        filter[key] = {};\n\t        filter[key].value = value;\n\t        filter[key].exactMatch = type === \"SelectElement\";\n\t      } else if (filter && key && value === '') {\n\t        delete filter[key];\n\t      }\n\t\n\t      return filter;\n\t    }\n\t\n\t    /**\n\t     * Sets filter object and querystring to reflect values of input fields\n\t     *\n\t     * @param {string} type - form element type (i.e component name)\n\t     * @param {string} fieldName - the name of the form element\n\t     * @param {string} fieldValue - the value of the form element\n\t     */\n\t\n\t  }, {\n\t    key: 'onElementUpdate',\n\t    value: function onElementUpdate(type, fieldName, fieldValue) {\n\t      // Make sure both key/value are string before sending them to querystring\n\t      if (typeof fieldName !== \"string\" || typeof fieldValue !== \"string\") {\n\t        return;\n\t      }\n\t\n\t      // Update query string\n\t      var queryFieldName = fieldName === 'candID' ? 'candidateID' : fieldName;\n\t      this.queryString = QueryString.set(this.queryString, queryFieldName, fieldValue);\n\t\n\t      // Update filter and get new filter object\n\t      var filter = this.setFilter(type, fieldName, fieldValue);\n\t      this.props.onUpdate(filter);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Get formatted children\n\t      var formChildren = this.getFormChildren();\n\t      var formElements = this.props.formElements;\n\t\n\t      if (formElements) {\n\t        Object.keys(formElements).forEach(function (fieldName) {\n\t          var queryFieldName = fieldName === 'candID' ? 'candidateID' : fieldName;\n\t          formElements[fieldName].onUserInput = this.onElementUpdate.bind(null, fieldName);\n\t          formElements[fieldName].value = this.queryString[queryFieldName];\n\t        }.bind(this));\n\t      }\n\t\n\t      return React.createElement(\n\t        _Panel2.default,\n\t        {\n\t          id: this.props.id,\n\t          height: this.props.height,\n\t          title: this.props.title\n\t        },\n\t        React.createElement(\n\t          FormElement,\n\t          this.props,\n\t          formChildren\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return FilterForm;\n\t}(React.Component);\n\t\n\tFilterForm.defaultProps = {\n\t  id: 'selection-filter',\n\t  height: '100%',\n\t  title: 'Selection Filter',\n\t  onUpdate: function onUpdate() {\n\t    console.warn('onUpdate() callback is not set!');\n\t  }\n\t};\n\tFilterForm.propTypes = {\n\t  Module: React.PropTypes.string.isRequired,\n\t  filter: React.PropTypes.object.isRequired,\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  onUpdate: React.PropTypes.func\n\t};\n\t\n\texports.default = FilterForm;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Panel\n\t *\n\t * @author Alex I.\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Panel component\n\t * Wraps children in a collapsible bootstrap panel\n\t */\n\tvar Panel = function (_React$Component) {\n\t  _inherits(Panel, _React$Component);\n\t\n\t  function Panel(props) {\n\t    _classCallCheck(this, Panel);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).call(this, props));\n\t\n\t    _this.state = {\n\t      collapsed: _this.props.initCollapsed\n\t    };\n\t\n\t    // Initialize panel class based on collapsed status\n\t    _this.panelClass = _this.props.initCollapsed ? \"panel-collapse collapse\" : \"panel-collapse collapse in\";\n\t\n\t    _this.toggleCollapsed = _this.toggleCollapsed.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Panel, [{\n\t    key: \"toggleCollapsed\",\n\t    value: function toggleCollapsed() {\n\t      this.setState({ collapsed: !this.state.collapsed });\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      // Change arrow direction based on collapse status\n\t      var glyphClass = this.state.collapsed ? \"glyphicon pull-right glyphicon-chevron-down\" : \"glyphicon pull-right glyphicon-chevron-up\";\n\t\n\t      var pencilGlyph = void 0;\n\t      if (this.props.edit) {\n\t        pencilGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-pencil\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.edit\n\t        });\n\t      }\n\t\n\t      var plusGlyph = void 0;\n\t      if (this.props.add) {\n\t        plusGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-plus\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.add\n\t        });\n\t      }\n\t\n\t      var removeGlyph = void 0;\n\t      if (this.props.cancel) {\n\t        removeGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-remove\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.cancel\n\t        });\n\t      }\n\t\n\t      // Add panel header, if title is set\n\t      var panelHeading = this.props.title ? React.createElement(\n\t        \"div\",\n\t        {\n\t          className: \"panel-heading\"\n\t        },\n\t        React.createElement(\"span\", {\n\t          className: glyphClass,\n\t          onClick: this.toggleCollapsed,\n\t          \"data-toggle\": \"collapse\",\n\t          \"data-target\": '#' + this.props.id,\n\t          style: { cursor: 'pointer' }\n\t        }),\n\t        pencilGlyph,\n\t        plusGlyph,\n\t        removeGlyph,\n\t        this.props.title\n\t      ) : '';\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"panel panel-primary\" },\n\t        panelHeading,\n\t        React.createElement(\n\t          \"div\",\n\t          { id: this.props.id, className: this.panelClass, role: \"tabpanel\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"panel-body\", style: { height: this.props.height } },\n\t            this.props.children\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Panel;\n\t}(React.Component);\n\t\n\tPanel.propTypes = {\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  edit: React.PropTypes.func,\n\t  add: React.PropTypes.func\n\t};\n\tPanel.defaultProps = {\n\t  initCollapsed: false,\n\t  id: 'default-panel',\n\t  height: '100%'\n\t};\n\t\n\texports.default = Panel;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _barcodeForm = __webpack_require__(4);\n\t\n\tvar _barcodeForm2 = _interopRequireDefault(_barcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankCollectionForm = function (_React$Component) {\n\t  _inherits(BiobankCollectionForm, _React$Component);\n\t\n\t  function BiobankCollectionForm(props) {\n\t    _classCallCheck(this, BiobankCollectionForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankCollectionForm.__proto__ || Object.getPrototypeOf(BiobankCollectionForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      barcodeFormList: {},\n\t      errorMessage: null,\n\t      formErrors: {},\n\t      countBarcodeForms: [1]\n\t    };\n\t\n\t    //this.getValidFileName = this.getValidFileName.bind(this);\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    //this.isValidFileName = this.isValidFileName.bind(this);\n\t    _this.validateForm = _this.validateForm.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.specimenSubmit = _this.specimenSubmit.bind(_this);\n\t    _this.addBarcodeForm = _this.addBarcodeForm.bind(_this);\n\t    _this.setBarcodeFormData = _this.setBarcodeFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankCollectionForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t\n\t      //if this is a child specimen form then certain formData is set when component mounts\n\t      if (this.props.child) {\n\t        var formData = this.state.formData;\n\t        formData['parentSpecimen'] = this.props.specimenId;\n\t        formData['pscid'] = this.props.candidateId;\n\t        formData['visitLabel'] = this.props.sessionId;\n\t\n\t        this.setState({\n\t          formData: formData\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      //Styling for remove Barcode button\n\t      var glyphStyle = {\n\t        color: '#D3D3D3',\n\t        margin: 'auto'\n\t      };\n\t      var buttonStyle = {\n\t        appearance: 'none',\n\t        outline: 'none',\n\t        boxShadow: 'none',\n\t        borderColor: 'transparent',\n\t        backgroundColor: 'transparent'\n\t\n\t      };\n\t\n\t      //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n\t      var barcodeForms = [];\n\t\n\t      var _loop = function _loop(i) {\n\t        barcodeForms.push(React.createElement(_barcodeForm2.default, {\n\t          setParentFormData: _this2.setBarcodeFormData,\n\t          id: _this2.state.countBarcodeForms[i],\n\t          specimenTypes: _this2.props.specimenTypes,\n\t          containerTypesPrimary: _this2.props.containerTypesPrimary,\n\t          containerBarcodesNonPrimary: _this2.props.containerBarcodesNonPrimary,\n\t          specimenTypeAttributes: _this2.props.specimenTypeAttributes,\n\t          attributeDatatypes: _this2.props.attributeDatatypes,\n\t          capacities: _this2.props.capacities,\n\t          units: _this2.props.units,\n\t          button: i + 1 === _this2.state.countBarcodeForms.length ? React.createElement(\n\t            'button',\n\t            {\n\t              type: 'button',\n\t              className: 'btn btn-success btn-sm',\n\t              onClick: _this2.addBarcodeForm\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-plus' })\n\t          ) : React.createElement(\n\t            'button',\n\t            {\n\t              type: 'button',\n\t              className: 'btn btn-primary-outline btn-sm',\n\t              style: buttonStyle,\n\t              onClick: function onClick() {\n\t                return _this2.removeBarcodeForm(i);\n\t              }\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-remove', style: glyphStyle })\n\t          )\n\t        }));\n\t      };\n\t\n\t      for (var i = 0; i < this.state.countBarcodeForms.length; i++) {\n\t        _loop(i);\n\t      }\n\t\n\t      var staticFields = void 0;\n\t      var selectFields = void 0;\n\t      if (this.props.child) {\n\t        staticFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(StaticElement, {\n\t            label: 'Parent Specimen',\n\t            text: this.props.barcode\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'PSCID',\n\t            text: this.props.pscid\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Visit Label',\n\t            text: this.props.visit\n\t          })\n\t        );\n\t      } else {\n\t        selectFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'pscid',\n\t            label: 'PSCID',\n\t            options: this.props.pSCIDs,\n\t            onUserInput: this.setFormData,\n\t            ref: 'pscid',\n\t            required: true,\n\t            value: this.state.formData.pscid\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'visitLabel',\n\t            label: 'Visit Label',\n\t            options: this.state.visits,\n\t            onUserInput: this.setFormData,\n\t            ref: 'visitLabel',\n\t            required: true,\n\t            value: this.state.formData.visitLabel,\n\t            disabled: this.state.formData.pscid ? false : true\n\t          })\n\t        );\n\t      }\n\t\n\t      //ALLOW THEM TO CANCEL THE FORM AND DELETE BARCODE FORMS\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankCollection',\n\t          onSubmit: this.handleSubmit,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(\n\t          'h3',\n\t          null,\n\t          React.createElement(\n\t            'b',\n\t            null,\n\t            'Add New Specimen',\n\t            this.state.countBarcodeForms > 1 ? \"s\" : \"\"\n\t          )\n\t        ),\n\t        React.createElement('br', null),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            staticFields,\n\t            selectFields\n\t          )\n\t        ),\n\t        barcodeForms,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-xs-3 col-xs-offset-9' },\n\t          React.createElement(ButtonElement, { label: 'Submit' })\n\t        ),\n\t        React.createElement(\n\t          'a',\n\t          { onClick: this.toggleModal },\n\t          'Cancel'\n\t        )\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t    /**\n\t     * Returns a valid name for the file to be specimened\n\t     *\n\t     * @param {string} pscid - PSCID selected from the dropdown\n\t     * @param {string} visitLabel - Visit label selected from the dropdown\n\t     * @param {string} instrument - Instrument selected from the dropdown\n\t     * @return {string} - Generated valid filename for the current selection\n\t     */\n\t    //  getValidFileName(pscid, visitLabel, instrument) {\n\t    //    var fileName = pscid + \"_\" + visitLabel;\n\t    //    if (instrument) fileName += \"_\" + instrument;\n\t    //\n\t    //    return fileName;\n\t    //  }\n\t\n\t\n\t  }, {\n\t    key: 'validateForm',\n\t    value: function validateForm(formElement, value) {\n\t      var _this3 = this;\n\t\n\t      var formErrors = this.state.formErrors;\n\t\n\t      //validate barcode regex\n\t      if (formElement === \"barcode\" && value !== \"\") {\n\t        if (!/^hello/.test(this.state.formData.barcode)) {\n\t          formErrors.barcode = true;\n\t        } else {\n\t          formErrors.barcode = false;\n\t        }\n\t      }\n\t\n\t      //validate that quantity is a number and less than capacity\n\t      if (formElement === \"quantity\" && value !== \"\") {\n\t        if (isNaN(value) || value > this.props.capacities[this.state.currentContainerType]) {\n\t          formErrors.quantity = true;\n\t        } else {\n\t          formErrors.quantity = false;\n\t        }\n\t      }\n\t\n\t      //validate datatypes and regex of generated type attributes\n\t      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t      var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t\n\t        var datatype = _this3.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"number\") {\n\t          if (formElement === attribute) {\n\t            if (isNaN(value) && value !== \"\") {\n\t              formErrors[attribute] = true;\n\t            } else {\n\t              formErrors[attribute] = false;\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      this.setState({\n\t        formErrors: formErrors\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Handle form submission\n\t     * @param {object} e - Form submission event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      var formRefs = this.refs;\n\t      //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\t\n\t      // Validate the form\n\t      if (!this.isValidForm(formRefs, formData)) {\n\t        return;\n\t      }\n\t\n\t      //    // Validate specimened file name\n\t      //    let instrument = formData.instrument ? formData.instrument : null;\n\t      //    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n\t      //    let requiredFileName = this.getValidFileName(\n\t      //      formData.pscid, formData.visitLabel, instrument\n\t      //    );\n\t      //    if (!this.isValidFileName(requiredFileName, fileName)) {\n\t      //      swal(\n\t      //        \"Invalid Specimen name!\",\n\t      //        \"File name should begin with: \" + requiredFileName,\n\t      //        \"error\"\n\t      //      );\n\t      //      return;\n\t      //    }\n\t\n\t      // Check for duplicate file names\n\t      //    let isDuplicate = biobankFiles.indexOf(fileName);\n\t      //    if (isDuplicate >= 0) {\n\t      //      swal({\n\t      //        title: \"Are you sure?\",\n\t      //        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n\t      //        type: \"warning\",\n\t      //        showCancelButton: true,\n\t      //        confirmButtonText: 'Yes, I am sure!',\n\t      //        cancelButtonText: \"No, cancel it!\"\n\t      //      }, function(isConfirm) {\n\t      //        if (isConfirm) {\n\t      //          this.specimenFile();\n\t      //        } else {\n\t      //          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n\t      //        }\n\t      //      }.bind(this));\n\t      //    } else {\n\t\n\t      this.specimenSubmit();\n\t      //    }\n\t    }\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'specimenSubmit',\n\t    value: function specimenSubmit() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          // Trigger an update event to update all observers (i.e DataTable)\n\t          // THIS CURRENTLY DOES NOT WORK\n\t          var event = new CustomEvent('update-datatable');\n\t          window.dispatchEvent(event);\n\t\n\t          this.props.closeModal();\n\t          swal(\"Specimen Submission Successful!\", \"\", \"success\");\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Checks if the inputted file name is valid\n\t     *\n\t     * @param {string} requiredFileName - Required file name\n\t     * @param {string} fileName - Provided file name\n\t     * @return {boolean} - true if fileName starts with requiredFileName, false\n\t     *   otherwise\n\t     */\n\t    //  isValidFileName(requiredFileName, fileName) {\n\t    //    if (fileName === null || requiredFileName === null) {\n\t    //      return false;\n\t    //    }\n\t    //\n\t    //    return (fileName.indexOf(requiredFileName) === 0);\n\t    //  }\n\t\n\t    /**\n\t     * Validate the form\n\t     *\n\t     * @param {object} formRefs - Object containing references to React form elements\n\t     * @param {object} formData - Object containing form data inputed by user\n\t     * @return {boolean} - true if all required fields are filled, false otherwise\n\t     */\n\t\n\t  }, {\n\t    key: 'isValidForm',\n\t    value: function isValidForm(formRefs, formData) {\n\t      var isValidForm = true;\n\t\n\t      var requiredFields = {\n\t        pscid: null,\n\t        visitLabel: null\n\t      };\n\t\n\t      Object.keys(requiredFields).map(function (field) {\n\t        if (formData[field]) {\n\t          requiredFields[field] = formData[field];\n\t        } else if (formRefs[field]) {\n\t          formRefs[field].props.hasError = true;\n\t          isValidForm = false;\n\t        }\n\t      });\n\t      this.forceUpdate();\n\t\n\t      return isValidForm;\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      // Only display visits and sites available for the current pscid\n\t      //let visitLabel = this.state.formData.visitLabel;\n\t      //let pscid = this.state.formData.pscid;\n\t\n\t      //LOOK AT THIS LATER - THE SWITCH TO PROPS MESSED THIS ALL UP \n\t      if (formElement === \"pscid\" && value !== \"\") {\n\t        this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n\t        //this.state.Data.sites = this.state.Data.sessionData[this.state.Data.PSCIDs[value]].sites;\n\t      }\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setBarcodeFormData',\n\t    value: function setBarcodeFormData(barcodeFormData, barcodeId) {\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      barcodeFormList[barcodeId] = barcodeFormData;\n\t      formData['barcodeFormList'] = barcodeFormList;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'addBarcodeForm',\n\t    value: function addBarcodeForm() {\n\t      var countBarcodeForms = this.state.countBarcodeForms;\n\t      countBarcodeForms.push(countBarcodeForms[countBarcodeForms.length - 1] + 1);\n\t      this.setState({\n\t        countBarcodeForms: countBarcodeForms\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removeBarcodeForm',\n\t    value: function removeBarcodeForm(index) {\n\t      var countBarcodeForms = this.state.countBarcodeForms;\n\t      countBarcodeForms.splice(index, 1);\n\t      this.setState({\n\t        countBarcodeForms: countBarcodeForms\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return BiobankCollectionForm;\n\t}(React.Component);\n\t\n\tBiobankCollectionForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired,\n\t  barcode: React.PropTypes.string\n\t};\n\t\n\texports.default = BiobankCollectionForm;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _specimenForm = __webpack_require__(5);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Barcode Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar BiobankBarcodeForm = function (_React$Component) {\n\t  _inherits(BiobankBarcodeForm, _React$Component);\n\t\n\t  function BiobankBarcodeForm(props) {\n\t    _classCallCheck(this, BiobankBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankBarcodeForm.__proto__ || Object.getPrototypeOf(BiobankBarcodeForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      formErrors: {}\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setSpecimenFormData = _this.setSpecimenFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankBarcodeForm, [{\n\t    key: \"render\",\n\t    value: function render() {\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: \"biobankBarcode\"\n\t        },\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-11\" },\n\t            React.createElement(\n\t              \"div\",\n\t              {\n\t                \"data-toggle\": \"collapse\",\n\t                \"data-target\": \"#\" + this.props.id\n\t              },\n\t              React.createElement(TextboxElement, {\n\t                name: \"barcode\",\n\t                label: \"Barcode \" + this.props.id,\n\t                onUserInput: this.setFormData,\n\t                ref: \"barcode\",\n\t                required: true,\n\t                value: this.state.formData[\"barcode\"],\n\t                hasError: this.state.formErrors[\"barcode\"],\n\t                errorMessage: \"Incorrect Barcode format for this Specimen and Container Type\"\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-1\" },\n\t            this.props.button\n\t          )\n\t        ),\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row\" },\n\t          React.createElement(\"div\", { className: \"col-xs-2\" }),\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-9\" },\n\t            React.createElement(\n\t              \"div\",\n\t              { id: this.props.id, className: \"collapse\" },\n\t              React.createElement(_specimenForm2.default, {\n\t                setParentFormData: this.setSpecimenFormData,\n\t                specimenTypes: this.props.specimenTypes,\n\t                specimenTypeAttributes: this.props.specimenTypeAttributes,\n\t                attributeDatatypes: this.props.attributeDatatypes,\n\t                containerTypesPrimary: this.props.containerTypesPrimary,\n\t                containerBarcodesNonPrimary: this.props.containerBarcodesNonPrimary,\n\t                units: this.props.units,\n\t                stati: this.props.stati\n\t              })\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: \"setFormData\",\n\t    value: function setFormData(formElement, value) {\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: \"setSpecimenFormData\",\n\t    value: function setSpecimenFormData(specimenFormData) {\n\t      var formData = this.state.formData;\n\t\n\t      for (var attribute in specimenFormData) {\n\t        formData[attribute] = specimenFormData[attribute];\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: \"setParentFormData\",\n\t    value: function setParentFormData() {\n\t      this.props.setParentFormData(this.state.formData, this.props.id);\n\t    }\n\t  }]);\n\t\n\t  return BiobankBarcodeForm;\n\t}(React.Component);\n\t\n\tBiobankBarcodeForm.propTypes = {\n\t\n\t  id: React.PropTypes.string,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired,\n\t  units: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = BiobankBarcodeForm;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar BiobankSpecimenForm = function (_React$Component) {\n\t  _inherits(BiobankSpecimenForm, _React$Component);\n\t\n\t  function BiobankSpecimenForm(props) {\n\t    _classCallCheck(this, BiobankSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimenForm.__proto__ || Object.getPrototypeOf(BiobankSpecimenForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: { data: {} },\n\t      currentSpecimenType: _this.props.edit ? _this.props.specimenType : null,\n\t      currentContainerType: _this.props.edit ? _this.props.containerType : null,\n\t      formErrors: {}\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setSpecimenTypeFieldFormData = _this.setSpecimenTypeFieldFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    _this.getSpecimenTypeFields = _this.getSpecimenTypeFields.bind(_this);\n\t    _this.handleUpdate = _this.handleUpdate.bind(_this);\n\t    _this.updateSpecimen = _this.updateSpecimen.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimenForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var _this2 = this;\n\t\n\t      var formData = this.state.formData;\n\t      if (this.props.edit) {\n\t        formData['specimenId'] = this.props.specimenId;\n\t        formData['specimenType'] = this.props.specimenType;\n\t        formData['containerType'] = this.props.containerType;\n\t        formData['quantity'] = this.props.quantity;\n\t        formData['unit'] = this.props.unit;\n\t        formData['collectDate'] = this.props.collectDate;\n\t        formData['collectTime'] = this.props.collectTime;\n\t        formData['notes'] = this.props.notes;\n\t\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t        if (specimenTypeFieldsObject) {\n\t          var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t            formData.data[attribute] = _this2.props.data[attribute];\n\t          });\n\t        }\n\t      }\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      var parentContainerField;\n\t      if (!this.props.edit) {\n\t        parentContainerField = React.createElement(SelectElement, {\n\t          name: 'parentContainer',\n\t          label: 'Parent Container Barcode',\n\t          options: this.props.containerBarcodesNonPrimary,\n\t          onUserInput: this.setFormData,\n\t          ref: 'parentContainer',\n\t          required: false,\n\t          value: this.state.formData.parentContainer\n\t        });\n\t      }\n\t\n\t      var updateButton;\n\t      if (this.props.edit) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      }\n\t\n\t      var specimenFields;\n\t      var specimenTypeFields = this.getSpecimenTypeFields();\n\t      if (this.state.currentSpecimenType) {\n\t        specimenFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'containerType',\n\t            label: 'Container Type',\n\t            options: this.props.containerTypesPrimary,\n\t            onUserInput: this.setFormData,\n\t            ref: 'containerType',\n\t            required: true,\n\t            value: this.state.formData.containerType\n\t          }),\n\t          parentContainerField,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Quantity',\n\t            onUserInput: this.setFormData,\n\t            ref: 'quantity',\n\t            required: true,\n\t            value: this.state.formData.quantity,\n\t            hasError: this.state.formErrors.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unit',\n\t            label: 'Unit',\n\t            options: this.props.units,\n\t            onUserInput: this.setFormData,\n\t            ref: 'unit',\n\t            required: true,\n\t            value: this.state.formData.unit\n\t          }),\n\t          specimenTypeFields,\n\t          React.createElement(DateElement, {\n\t            name: 'collectDate',\n\t            label: 'Collection Date',\n\t            minYear: '2000',\n\t            maxYear: '2018',\n\t            onUserInput: this.setFormData,\n\t            ref: 'collectDate',\n\t            required: true,\n\t            value: this.state.formData.collectDate\n\t          }),\n\t          React.createElement(TimeElement, {\n\t            name: 'collectTime',\n\t            label: 'Collection Time',\n\t            onUserInput: this.setFormData,\n\t            ref: 'collectTime',\n\t            required: true,\n\t            value: this.state.formData.collectTime\n\t          }),\n\t          React.createElement(TextareaElement, {\n\t            name: 'notes',\n\t            label: 'Notes',\n\t            onUserInput: this.setFormData,\n\t            ref: 'notes',\n\t            value: this.state.formData.notes\n\t          }),\n\t          updateButton\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankSpecimen',\n\t          onSubmit: this.handleUpdate,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'specimenType',\n\t            label: 'Specimen Type',\n\t            options: this.props.specimenTypes,\n\t            onUserInput: this.setFormData,\n\t            ref: 'specimenType',\n\t            required: true,\n\t            value: this.state.formData.specimenType\n\t          }),\n\t          specimenFields\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t\n\t      var formData = this.state.formData;\n\t\n\t      if (formElement === \"specimenType\" && value !== \"\") {\n\t        //This is to eliminate the values for the specimen type fields\n\t        //This could potentially be improved later to retain the values\n\t        //for the fields that are common across specimen types\n\t        formData.data = {};\n\t        this.setState({\n\t          currentSpecimenType: value\n\t        });\n\t      }\n\t\n\t      if (formElement === \"containerType\" && value !== \"\") {\n\t        this.setState({\n\t          currentContainerType: value\n\t        });\n\t      }\n\t\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setSpecimenTypeFieldFormData',\n\t    value: function setSpecimenTypeFieldFormData(formElement, value) {\n\t      var formData = this.state.formData;\n\t      formData.data[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      if (!this.props.edit) {\n\t        var formData = this.state.formData;\n\t        this.props.setParentFormData(formData);\n\t      }\n\t    }\n\t\n\t    // This generates all the form fields for a given specimen type\n\t\n\t  }, {\n\t    key: 'getSpecimenTypeFields',\n\t    value: function getSpecimenTypeFields() {\n\t      var _this3 = this;\n\t\n\t      if (this.state.currentSpecimenType) {\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t        if (specimenTypeFieldsObject) {\n\t          var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t            var datatype = _this3.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t            if (datatype === \"text\" || datatype === \"number\") {\n\t              if (specimenTypeFieldsObject[attribute]['refTableId'] == null) {\n\t                return React.createElement(TextboxElement, {\n\t                  name: attribute,\n\t                  label: specimenTypeFieldsObject[attribute]['name'],\n\t                  onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t                  ref: attribute,\n\t                  required: specimenTypeFieldsObject[attribute]['required'],\n\t                  value: _this3.state.formData.data[attribute],\n\t                  hasError: _this3.state.formErrors[attribute],\n\t                  errorMessage: \"This is a \" + datatype + \" field.\"\n\t                });\n\t              }\n\t\n\t              // OPTIONS FOR SELECT ELEMENT WILL MOST LIKELY BE PASSED VIA AJAX CALL\n\t              // BUT IT CAN ALSO BE PRELOADED --\n\t              // ASK RIDA HOW THIS SHOULD BE DONE\n\t              if (specimenTypeFieldsObject[attribute]['refTableId'] !== null) {\n\t                return React.createElement(SelectElement, {\n\t                  name: attribute,\n\t                  label: specimenTypeFieldsObject[attribute]['name'],\n\t                  options: '',\n\t                  onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t                  ref: attribute,\n\t                  required: specimenTypeFieldsObject[attribte]['required'],\n\t                  value: _this3.state.formData.data[attribute]\n\t                });\n\t              }\n\t            }\n\t\n\t            if (datatype === \"datetime\") {\n\t              return React.createElement(DateElement, {\n\t                name: attribute,\n\t                label: specimenTypeFieldsObject[attribute]['name'],\n\t                onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t                ref: attribute,\n\t                required: specimenTypeFieldsObject[attribute]['required'],\n\t                value: _this3.state.formData.data[attribute]\n\t              });\n\t            }\n\t\n\t            if (datatype === \"boolean\") {}\n\t          });\n\t\n\t          return specimenTypeFields;\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'handleUpdate',\n\t    value: function handleUpdate(e) {\n\t      //more things will go here later\n\t      this.updateSpecimen();\n\t    }\n\t  }, {\n\t    key: 'updateSpecimen',\n\t    value: function updateSpecimen() {\n\t      var _$$ajax;\n\t\n\t      //it seems as though this updates the state even though there's no set state\n\t      //ask David why this is happening\n\t      var formData = this.state.formData;\n\t      formData['data'] = JSON.stringify(formData['data']);\n\t\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax((_$$ajax = {\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false\n\t      }, _defineProperty(_$$ajax, 'processData', false), _defineProperty(_$$ajax, 'xhr', function () {\n\t        var xhr = new window.XMLHttpRequest();\n\t        return xhr;\n\t      }.bind(this)), _defineProperty(_$$ajax, 'success', function () {\n\t        //Update Parent Specimen Page Here\n\t        this.props.updatePage(formData.specimenType, formData.quantity, formData.unit, JSON.parse(formData.data), formData.collectDate, formData.collectTime, formData.notes);\n\t        //swal(\"Specimen Update Successful!\", \"\", \"success\");\n\t      }.bind(this)), _defineProperty(_$$ajax, 'error', function (err) {\n\t        console.error(err);\n\t        var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t        //this is necessary because of the automatic state update above ^\n\t        //let formData = this.state.formData;\n\t        //formData['data'] = JSON.parse(formData['data']);\n\t        this.setState({\n\t          //  formData: formData,\n\t          errorMessage: msg\n\t        });\n\t        swal(msg, \"\", \"error\");\n\t      }.bind(this)), _$$ajax));\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimenForm;\n\t}(React.Component);\n\t\n\tBiobankSpecimenForm.propTypes = {\n\t  setParentFormData: React.PropTypes.func,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired,\n\t  units: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = BiobankSpecimenForm;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Tabs component.\n\t *\n\t * @author Loris Team\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Tabs Component.\n\t * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n\t * and corresponding tab panes.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * 1. Define an array of tabs with IDs and labels\n\t *\n\t * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n\t *\n\t * 2. Pass tabList as <Tab> property and <TabPane> as child\n\t *  ```\n\t * <Tabs tabs={tabList} defaultTab=\"tab1\">\n\t *   <TabPane TabId={tabList[0].id}>\n\t *     // Tab content goes here\n\t *   </TabPane>\n\t * </Tabs>\n\t * ```\n\t * =================================================\n\t *\n\t */\n\tvar Tabs = function (_React$Component) {\n\t  _inherits(Tabs, _React$Component);\n\t\n\t  function Tabs(props) {\n\t    _classCallCheck(this, Tabs);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call(this, props));\n\t\n\t    var hash = window.location.hash;\n\t    var activeTab = \"\";\n\t\n\t    /**\n\t     * Determine the initial active tab in this order\n\t     * 1. Try to infer from the URL, otherwise\n\t     * 2. Try to infer from the defaultTab prop, otherwise\n\t     * 3. Set to be the first tab of the list\n\t     */\n\t    if (_this.props.updateURL && hash) {\n\t      activeTab = hash.substr(1);\n\t    } else if (_this.props.defaultTab) {\n\t      activeTab = _this.props.defaultTab;\n\t    } else if (_this.props.tabs.length > 0) {\n\t      activeTab = _this.props.tabs[0].id;\n\t    }\n\t\n\t    _this.state = {\n\t      activeTab: activeTab\n\t    };\n\t\n\t    _this.handleClick = _this.handleClick.bind(_this);\n\t    _this.getTabs = _this.getTabs.bind(_this);\n\t    _this.getTabPanes = _this.getTabPanes.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Tabs, [{\n\t    key: 'handleClick',\n\t    value: function handleClick(tabId, e) {\n\t      this.setState({ activeTab: tabId });\n\t      this.props.onTabChange(tabId);\n\t\n\t      // Add tab href to URL querystring and scroll the page to top\n\t      if (this.props.updateURL) {\n\t        var scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n\t        window.location.hash = e.target.hash;\n\t        $('html,body').scrollTop(scrollDistance);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getTabs',\n\t    value: function getTabs() {\n\t      var tabs = this.props.tabs.map(function (tab) {\n\t        var tabClass = this.state.activeTab === tab.id ? 'active' : null;\n\t        var href = \"#\" + tab.id;\n\t        var tabID = \"tab-\" + tab.id;\n\t        return React.createElement(\n\t          'li',\n\t          {\n\t            role: 'presentation',\n\t            className: tabClass,\n\t            key: tab.id\n\t          },\n\t          React.createElement(\n\t            'a',\n\t            { id: tabID,\n\t              href: href,\n\t              role: 'tab',\n\t              'data-toggle': 'tab',\n\t              onClick: this.handleClick.bind(null, tab.id)\n\t            },\n\t            tab.label\n\t          )\n\t        );\n\t      }.bind(this));\n\t\n\t      return tabs;\n\t    }\n\t  }, {\n\t    key: 'getTabPanes',\n\t    value: function getTabPanes() {\n\t      var tabPanes = React.Children.map(this.props.children, function (child, key) {\n\t        if (child) {\n\t          return React.cloneElement(child, {\n\t            activeTab: this.state.activeTab,\n\t            key: key\n\t          });\n\t        }\n\t      }.bind(this));\n\t\n\t      return tabPanes;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var tabs = this.getTabs();\n\t      var tabPanes = this.getTabPanes();\n\t      var tabStyle = {\n\t        marginLeft: 0,\n\t        marginBottom: '5px'\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'ul',\n\t          { className: 'nav nav-tabs', role: 'tablist', style: tabStyle },\n\t          tabs\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tab-content' },\n\t          tabPanes\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Tabs;\n\t}(React.Component);\n\t\n\tTabs.propTypes = {\n\t  tabs: React.PropTypes.array.isRequired,\n\t  defaultTab: React.PropTypes.string,\n\t  updateURL: React.PropTypes.bool\n\t};\n\tTabs.defaultProps = {\n\t  onTabChange: function onTabChange() {},\n\t  updateURL: false\n\t};\n\t\n\t/*\n\t * TabPane component.\n\t * Used to wrap content for every tab.\n\t */\n\t\n\tvar TabPane = function (_React$Component2) {\n\t  _inherits(TabPane, _React$Component2);\n\t\n\t  function TabPane() {\n\t    _classCallCheck(this, TabPane);\n\t\n\t    return _possibleConstructorReturn(this, (TabPane.__proto__ || Object.getPrototypeOf(TabPane)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(TabPane, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var classList = \"tab-pane\";\n\t      var title = void 0;\n\t\n\t      if (this.props.TabId === this.props.activeTab) {\n\t        classList += \" active\";\n\t      }\n\t      if (this.props.Title) {\n\t        title = React.createElement(\n\t          'h1',\n\t          null,\n\t          this.props.Title\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { role: 'tabpanel', className: classList, id: this.props.TabId },\n\t        title,\n\t        this.props.children\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return TabPane;\n\t}(React.Component);\n\t\n\tTabPane.propTypes = {\n\t  TabId: React.PropTypes.string.isRequired,\n\t  Title: React.PropTypes.string,\n\t  activeTab: React.PropTypes.string\n\t};\n\t\n\tvar Modal = function (_React$Component3) {\n\t  _inherits(Modal, _React$Component3);\n\t\n\t  function Modal() {\n\t    _classCallCheck(this, Modal);\n\t\n\t    return _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Modal, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      // Render nothing if the \"show\" prop is false\n\t      if (!this.props.show) {\n\t        return null;\n\t      }\n\t\n\t      //White Modal Window\n\t      var modalStyle = {\n\t        position: 'relative',\n\t        maxWidth: 1000,\n\t        maxHeight: '100%',\n\t        margin: '0 auto',\n\t        backgroundColor: '#fff',\n\t        padding: 30,\n\t        borderRadius: 10,\n\t        overflowY: 'auto',\n\t        zIndex: 9999\n\t      };\n\t\n\t      //Grey Background\n\t      var backdropStyle = {\n\t        position: 'fixed',\n\t        zIndex: 9998,\n\t        top: 0,\n\t        bottom: 0,\n\t        left: 0,\n\t        right: 0,\n\t        backgroundColor: 'rgba(0,0,0,0.3)',\n\t        padding: 50\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { style: backdropStyle, onClick: this.props.onClose },\n\t        React.createElement(\n\t          'div',\n\t          { style: modalStyle, onClick: function onClick(e) {\n\t              e.stopPropagation();\n\t            } },\n\t          this.props.children\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Modal;\n\t}(React.Component);\n\t\n\tModal.propTypes = {\n\t  onClose: React.PropTypes.func.isRequired,\n\t  show: React.PropTypes.bool,\n\t  children: React.PropTypes.node\n\t};\n\t\n\texports.Tabs = Tabs;\n\texports.TabPane = TabPane;\n\texports.Modal = Modal;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\n\t * Modify behaviour of specified column cells in the Data Table component\n\t * @param {string} column - column name\n\t * @param {string} cell - cell content\n\t * @param {arrray} rowData - array of cell contents for a specific row\n\t * @param {arrray} rowHeaders - array of table headers (column names)\n\t * @return {*} a formated table cell for a given column\n\t */\n\tfunction formatColumn(column, cell, rowData, rowHeaders) {\n\t  // If a column if set as hidden, don't display it\n\t  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n\t  //  return null;\n\t  //}\n\t\n\t  // Create the mapping between rowHeaders and rowData in a row object.\n\t  var row = {};\n\t  rowHeaders.forEach(function (header, index) {\n\t    row[header] = rowData[index];\n\t  }, this);\n\t\n\t  // create array of classes to be added to td tag\n\t  var classes = [];\n\t  if (row['Hide File'] === '1') {\n\t    classes.push(\"bg-danger\");\n\t  }\n\t  // convert array to string, with blank space separator\n\t  classes = classes.join(\" \");\n\t\n\t  //const hasWritePermission = loris.userHasPermission('media_read');\n\t  if (column === 'Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Barcode'];\n\t    return React.createElement(\n\t      'td',\n\t      { className: classes },\n\t      React.createElement(\n\t        'a',\n\t        { href: specimenURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Parent Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Parent Barcode'];\n\t    return React.createElement(\n\t      'td',\n\t      { className: classes },\n\t      React.createElement(\n\t        'a',\n\t        { href: specimenURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Container Barcode') {\n\t    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Container Barcode'];\n\t    return React.createElement(\n\t      'td',\n\t      { className: classes },\n\t      React.createElement(\n\t        'a',\n\t        { href: containerURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  // if (column === 'Visit Label') {\n\t  //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n\t  //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n\t  //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n\t  //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n\t  //   }\n\t  // }\n\t\n\t  // if (column === 'Edit Metadata') {\n\t  //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n\t  //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n\t  // }\n\t\n\t  return React.createElement(\n\t    'td',\n\t    { className: classes },\n\t    cell\n\t  );\n\t}\n\t\n\texports.default = formatColumn;\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// modules/biobank/js/biobankIndex.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 466ad7c23982b1b02bbd","import FilterForm from 'FilterForm';\nimport BiobankCollectionForm from './collectionForm';\nimport {Tabs, TabPane, Modal} from 'Tabs';\n//import Modal from '../../../htdocs/js/components/Modal';\nimport formatColumn from './columnFormatter';\n\nclass BiobankIndex extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoaded: false,\n      filter: {},\n      isOpen: false,\n    };\n\n    // Bind component instance to custom methods\n    this.fetchSpecimenFilterData = this.fetchSpecimenFilterData.bind(this);\n    this.fetchCollectionFormData = this.fetchCollectionFormData.bind(this);\n    this.updateFilter = this.updateFilter.bind(this);\n    this.resetFilters = this.resetFilters.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchSpecimenFilterData();\n    this.fetchCollectionFormData();\n  }\n\n  /**\n   * Retrieve data from the provided URL and save it in state\n   * Additionaly add hiddenHeaders to global loris variable\n   * for easy access by columnFormatter.\n   */\n  fetchSpecimenFilterData() {\n    $.ajax(this.props.specimenFilterDataURL, {\n      method: \"GET\",\n      dataType: 'json',\n      success: function(data) {\n        this.setState({\n          Data: data,\n          isLoaded: true\n        });\n      }.bind(this),\n      error: function(error) {\n        console.error(error);\n      }\n    });\n  }\n\n  fetchCollectionFormData() {\n    $.ajax(this.props.specimenFormDataURL, {\n      method: \"GET\",\n      dataType: 'json',\n      success: function(data) {\n        this.setState({\n          SpecimenData: data,\n          isLoaded: true\n        });\n      }.bind(this),\n      error: function(error) {\n        console.error(error);\n      }\n    });\n  }\n\n  updateFilter(filter) {\n    this.setState({filter});\n  }\n\n  resetFilters() {\n    this.refs.biobankFilter.clearFilter();\n  }\n\n  toggleModal() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n\n  render() {\n    // Waiting for async data to load\n    if (!this.state.isLoaded) {\n      return (\n        <button className=\"btn-info has-spinner\">\n          Loading\n          <span\n            className=\"glyphicon glyphicon-refresh glyphicon-refresh-animate\">\n          </span>\n        </button>\n      );\n    }\n\n    let tabList = [\n      {id: \"specimens\", label: \"Specimens\"},\n      {id: \"containers\", label: \"Containers\"}\n    ];\n\n    let addSpecimenButton;\n    let specimenForm;\n    if (loris.userHasPermission('biobank_write')) {\n       addSpecimenButton = (\n         <ButtonElement buttonClass=\"btn btn-success\" onUserInput={this.toggleModal} label=\"Add New Specimen\" type=\"button\"/>\n       );\n       specimenForm = (\n         <Modal show={this.state.isOpen} onClose={this.toggleModal}>\n           <BiobankCollectionForm\n             specimenTypes={this.state.SpecimenData.specimenTypes}\n             containerTypesPrimary={this.state.SpecimenData.containerTypesPrimary}\n             containerBarcodesNonPrimary={this.state.SpecimenData.containerBarcodesNonPrimary}\n             specimenTypeAttributes={this.state.SpecimenData.specimenTypeAttributes}\n             attributeDatatypes={this.state.SpecimenData.attributeDatatypes}\n             capacities={this.state.SpecimenData.capacities}\n             units={this.state.SpecimenData.units}\n             pSCIDs={this.state.SpecimenData.pSCIDs}\n             visits={this.state.SpecimenData.visits}\n             sessionData={this.state.SpecimenData.sessionData}\n             action={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=submitSpecimen`}\n             closeModal={this.toggleModal}\n           />\n         </Modal>\n       );\n     }\n\n    return (\n    <div>\n      <Tabs tabs={tabList} defaultTab=\"specimens\" updateURL={true}>\n        <TabPane TabId={tabList[0].id}>\n          <FilterForm\n            Module=\"biobank\"\n            name=\"specimen_filter\"\n            id=\"specimen_filter_form\"\n            ref=\"specimenFilter\"\n            columns={3}\n            formElements={this.state.Data.form}\n            onUpdate={this.updateFilter}\n            filter={this.state.filter}\n          >\n            <br/>\n          {addSpecimenButton}\n            <ButtonElement label=\"Clear Filters\" type=\"reset\" onUserInput={this.resetFilters}/>\n          </FilterForm>\n          <StaticDataTable\n            Data={this.state.Data.Data}\n            Headers={this.state.Data.Headers}\n            Filter={this.state.filter}\n            getFormattedCell={formatColumn}\n          />\n        </TabPane>\n        <TabPane TabId={tabList[1].id}>\n          <FilterForm\n            Module=\"biobank\"\n            name=\"container_filter\"\n            id=\"container_filter_form\"\n            ref=\"containerFilter\"\n            columns={3}\n            formElements={this.state.Data.form}\n            onUpdate={this.updateFilter}\n            filter={this.state.filter}\n\t\t  >\n            <br/>\n            <ButtonElement label=\"Clear Filters\" type=\"reset\" onUserInput={this.resetFilters}/>\n          </FilterForm>\t\t\t\n          <StaticDataTable\n            Data={this.state.Data.Data}\n            Headers={this.state.Data.Headers}\n            Filter={this.state.filter}\n            getFormattedCell={formatColumn}\n          />\n        </TabPane>\n      </Tabs>\n      {specimenForm}\n      </div>\n    );\n  }\n}\n\n$(function() {\n  const biobankIndex = (\n    <div className=\"page-biobank\">\n      <BiobankIndex \n        specimenFilterDataURL={`${loris.BaseURL}/biobank/?format=json`} \n        specimenFormDataURL={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=getCollectionFormData`}\n      />\n    </div>\n  );\n\n  ReactDOM.render(biobankIndex, document.getElementById(\"lorisworkspace\"));\n});\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/biobankIndex.js","/**\n * This file contains React component for FilterForm\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\nimport Panel from 'Panel';\n\n/**\n * FilterForm component.\n * A wrapper for form elements inside a selection filter.\n *\n * Adds necessary filter callbacks to all children and passes them to FormElement\n * for proper rendering.\n *\n * Keeps track of filter object and sends it to parent on every update.\n *\n * //HACK/NOTE: Loris has special behaviour for `candID` attribute in the query string,\n * making it impossible to use it for selection filters. This components renames\n * all `candID` fields to `candidateID` automatically before appending them to URL.\n *\n */\nclass FilterForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    // Bind component instance to custom methods\n    this.clearFilter = this.clearFilter.bind(this);\n    this.getFormChildren = this.getFormChildren.bind(this);\n    this.setFilter = this.setFilter.bind(this);\n    this.onElementUpdate = this.onElementUpdate.bind(this);\n\n    // Keeps track of querystring values\n    // Saved as class variable instead of keeping in state\n    this.queryString = QueryString.get();\n  }\n\n  componentDidMount() {\n    let filter = {};\n    let queryString = this.queryString;\n\n    // Initiaze filter using querystring value\n    Object.keys(queryString).forEach(function(key) {\n      let filterKey = (key === 'candidateID') ? 'candID' : key;\n      filter[filterKey] = {\n        value: queryString[key],\n        exactMatch: false\n      };\n    });\n\n    // Update parent component\n    this.props.onUpdate(filter);\n  }\n\n  /**\n   * Clear the filter object, querystring and input fields\n   */\n  clearFilter() {\n    this.queryString = QueryString.clear(this.props.Module);\n    this.props.onUpdate({});\n  }\n\n  /**\n   * Itterates through FilterForm children, sets necessary callback functions\n   * and initializes filterTable\n   *\n   * @return {Array} formChildren - array of children with necessary props\n   */\n  getFormChildren() {\n    let formChildren = [];\n    React.Children.forEach(this.props.children, function(child, key) {\n      // If child is a React component (i.e not a simple DOM element)\n      if (React.isValidElement(child) &&\n        typeof child.type === \"function\" &&\n        child.props.onUserInput\n      ) {\n        let callbackFunc = child.props.onUserInput;\n        let callbackName = callbackFunc.name;\n        let elementName = child.type.displayName;\n        let queryFieldName = (child.props.name === 'candID') ? 'candidateID' : child.props.name;\n        let filterValue = this.queryString[queryFieldName];\n        // If callback function was not set, set it to onElementUpdate() for form\n        // elements and to clearFilter() for <ButtonElement type='reset'/>.\n        if (callbackName === \"onUserInput\") {\n          if (elementName === \"ButtonElement\" && child.props.type === \"reset\") {\n            callbackFunc = this.clearFilter;\n          } else {\n            callbackFunc = this.onElementUpdate.bind(null, elementName);\n          }\n        }\n        // Pass onUserInput and value props to all children\n        formChildren.push(React.cloneElement(child, {\n          onUserInput: callbackFunc,\n          value: filterValue ? filterValue : '',\n          key: key\n        }));\n        // Initialize filter for StaticDataTable\n        this.setFilter(elementName, child.props.name, filterValue);\n      } else {\n        formChildren.push(React.cloneElement(child, {key: key}));\n      }\n    }.bind(this));\n\n    return formChildren;\n  }\n\n  /**\n   * Appends entry to filter object or deletes it if value is\n   * empty.\n   *\n   * Sets exactMatch to true for all SelectElements (i.e dropdowns)\n   * in order to force StaticDataTable to do exact comparaison\n   *\n   * @param {string} type - form element type (i.e component name)\n   * @param {string} key - the name of the form element\n   * @param {string} value - the value of the form element\n   *\n   * @return {{}} filter - filterData\n   */\n  setFilter(type, key, value) {\n    let filter = {};\n    if (this.props.filter) {\n      filter = JSON.parse(JSON.stringify(this.props.filter));\n    }\n\n    if (key && value) {\n      filter[key] = {};\n      filter[key].value = value;\n      filter[key].exactMatch = (type === \"SelectElement\");\n    } else if (filter && key && value === '') {\n      delete filter[key];\n    }\n\n    return filter;\n  }\n\n  /**\n   * Sets filter object and querystring to reflect values of input fields\n   *\n   * @param {string} type - form element type (i.e component name)\n   * @param {string} fieldName - the name of the form element\n   * @param {string} fieldValue - the value of the form element\n   */\n  onElementUpdate(type, fieldName, fieldValue) {\n    // Make sure both key/value are string before sending them to querystring\n    if (typeof fieldName !== \"string\" || typeof fieldValue !== \"string\") {\n      return;\n    }\n\n    // Update query string\n    let queryFieldName = (fieldName === 'candID') ? 'candidateID' : fieldName;\n    this.queryString = QueryString.set(this.queryString, queryFieldName, fieldValue);\n\n    // Update filter and get new filter object\n    let filter = this.setFilter(type, fieldName, fieldValue);\n    this.props.onUpdate(filter);\n  }\n\n  render() {\n    // Get formatted children\n    let formChildren = this.getFormChildren();\n    let formElements = this.props.formElements;\n\n    if (formElements) {\n      Object.keys(formElements).forEach(function(fieldName) {\n        let queryFieldName = (fieldName === 'candID') ? 'candidateID' : fieldName;\n        formElements[fieldName].onUserInput = this.onElementUpdate.bind(null, fieldName);\n        formElements[fieldName].value = this.queryString[queryFieldName];\n      }.bind(this));\n    }\n\n    return (\n      <Panel\n        id={this.props.id}\n        height={this.props.height}\n        title={this.props.title}\n      >\n        <FormElement {...this.props}>\n          {formChildren}\n        </FormElement>\n      </Panel>\n    );\n  }\n}\n\nFilterForm.defaultProps = {\n  id: 'selection-filter',\n  height: '100%',\n  title: 'Selection Filter',\n  onUpdate: function() {\n    console.warn('onUpdate() callback is not set!');\n  }\n};\nFilterForm.propTypes = {\n  Module: React.PropTypes.string.isRequired,\n  filter: React.PropTypes.object.isRequired,\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  onUpdate: React.PropTypes.func\n};\n\nexport default FilterForm;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/FilterForm.js","/**\n * This file contains React component for Panel\n *\n * @author Alex I.\n * @version 1.0.0\n *\n */\n\n/**\n * Panel component\n * Wraps children in a collapsible bootstrap panel\n */\nclass Panel extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsed: this.props.initCollapsed\n    };\n\n    // Initialize panel class based on collapsed status\n    this.panelClass = (\n      this.props.initCollapsed ?\n        \"panel-collapse collapse\" :\n        \"panel-collapse collapse in\"\n    );\n\n    this.toggleCollapsed = this.toggleCollapsed.bind(this);\n  }\n\n  toggleCollapsed() {\n    this.setState({collapsed: !this.state.collapsed});\n  }\n\n  render() {\n    // Change arrow direction based on collapse status\n    let glyphClass = (\n      this.state.collapsed ?\n        \"glyphicon pull-right glyphicon-chevron-down\" :\n        \"glyphicon pull-right glyphicon-chevron-up\"\n    );\n\n    let pencilGlyph;\n    if (this.props.edit) {\n      pencilGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-pencil\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.edit}\n        /> \n      );\n    } \n\n    let plusGlyph;\n    if (this.props.add) {\n      plusGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-plus\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.add}\n        />\n      );\n    }\n\n    let removeGlyph;\n    if (this.props.cancel) {\n      removeGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-remove\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.cancel}\n        />\n      );\n    }\n\n    // Add panel header, if title is set\n    const panelHeading = this.props.title ? (\n      <div\n        className=\"panel-heading\"\n      >\n        <span \n          className={glyphClass}\n          onClick={this.toggleCollapsed}\n          data-toggle=\"collapse\"\n          data-target={'#' + this.props.id}\n          style={{cursor: 'pointer'}}\n        />\n        {pencilGlyph}\n        {plusGlyph}\n        {removeGlyph}\n        {this.props.title}\n      </div>\n    ) : '';\n\n    return (\n      <div className=\"panel panel-primary\">\n        {panelHeading}\n        <div id={this.props.id} className={this.panelClass} role=\"tabpanel\">\n          <div className=\"panel-body\" style={{height: this.props.height}}>\n            {this.props.children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPanel.propTypes = {\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  edit: React.PropTypes.func,\n  add: React.PropTypes.func\n};\nPanel.defaultProps = {\n  initCollapsed: false,\n  id: 'default-panel',\n  height: '100%'\n};\n\nexport default Panel;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Panel.js","import BiobankBarcodeForm from './barcodeForm.js';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankCollectionForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      barcodeFormList: {},\n      errorMessage: null,\n      formErrors: {},\n      countBarcodeForms: [1] \n    };\n\n    //this.getValidFileName = this.getValidFileName.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    //this.isValidFileName = this.isValidFileName.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.specimenSubmit = this.specimenSubmit.bind(this);\n    this.addBarcodeForm = this.addBarcodeForm.bind(this);\n    this.setBarcodeFormData = this.setBarcodeFormData.bind(this);\n  }\n\n  componentDidMount() {\n\n    //if this is a child specimen form then certain formData is set when component mounts\n    if (this.props.child) {\n      var formData = this.state.formData;\n      formData['parentSpecimen'] = this.props.specimenId;\n      formData['pscid'] = this.props.candidateId;\n      formData['visitLabel'] = this.props.sessionId;\n\n      this.setState({\n        formData: formData\n      });\n    }\n  }\n\n  render() {\n\n    //Styling for remove Barcode button\n    const glyphStyle = {\n     color: '#D3D3D3',\n     margin: 'auto',\n    }; \n    const buttonStyle = {\n      appearance: 'none',\n      outline: 'none',\n      boxShadow: 'none',\n      borderColor: 'transparent',\n      backgroundColor: 'transparent',\n       \n    };\n\n    //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n    var barcodeForms = [];\n    for (let i = 0; i < this.state.countBarcodeForms.length; i++) {\n      barcodeForms.push(\n        <BiobankBarcodeForm\n          setParentFormData={this.setBarcodeFormData}\n          id={this.state.countBarcodeForms[i]}\n          specimenTypes={this.props.specimenTypes}\n          containerTypesPrimary={this.props.containerTypesPrimary}\n          containerBarcodesNonPrimary={this.props.containerBarcodesNonPrimary}\n          specimenTypeAttributes={this.props.specimenTypeAttributes}\n          attributeDatatypes={this.props.attributeDatatypes}\n          capacities={this.props.capacities}\n          units={this.props.units}\n          button={i+1 === this.state.countBarcodeForms.length ? (\n            <button \n              type=\"button\"\n              className=\"btn btn-success btn-sm\"\n              onClick={this.addBarcodeForm}\n            >   \n              <span className=\"glyphicon glyphicon-plus\"/>\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"btn btn-primary-outline btn-sm\"\n              style={buttonStyle}\n              onClick={() => this.removeBarcodeForm(i)}\n            >\n            <span className=\"glyphicon glyphicon-remove\" style={glyphStyle}/>\n            </button>\n          )}\n        />\n      );\n    }\n\n\n    let staticFields;\n    let selectFields;\n    if (this.props.child) {\n      staticFields = (   \n        <div>\n          <StaticElement\n            label=\"Parent Specimen\"\n            text={this.props.barcode}\n          />\n          <StaticElement\n            label=\"PSCID\"\n            text={this.props.pscid}\n          />\n          <StaticElement\n            label=\"Visit Label\"\n            text={this.props.visit}\n          />\n        </div>\n      );\n    } else {\n      selectFields = (\n          <div>\n            <SelectElement\n              name=\"pscid\"\n              label=\"PSCID\"\n              options={this.props.pSCIDs}\n              onUserInput={this.setFormData}\n              ref=\"pscid\"\n              required={true}\n              value={this.state.formData.pscid}\n            />\n            <SelectElement\n              name=\"visitLabel\"\n              label=\"Visit Label\"\n              options={this.state.visits}\n              onUserInput={this.setFormData}\n              ref=\"visitLabel\"\n              required={true}\n              value={this.state.formData.visitLabel}\n              disabled={this.state.formData.pscid ? false : true}\n            />\n          </div>\n      );\n    }\n\n    //ALLOW THEM TO CANCEL THE FORM AND DELETE BARCODE FORMS\n    return (\n      <FormElement\n        name=\"biobankCollection\"\n        onSubmit={this.handleSubmit}\n        ref=\"form\"\n      >\n        <h3><b>Add New Specimen{this.state.countBarcodeForms > 1 ? \"s\" : \"\"}</b></h3>\n        <br/>\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            {staticFields}\n            {selectFields}\n          </div>\n        </div>\n        {barcodeForms}\n          <div className=\"col-xs-3 col-xs-offset-9\">\n            <ButtonElement label=\"Submit\"/>\n          </div>\n        <a onClick={this.toggleModal}>Cancel</a>\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n  /**\n   * Returns a valid name for the file to be specimened\n   *\n   * @param {string} pscid - PSCID selected from the dropdown\n   * @param {string} visitLabel - Visit label selected from the dropdown\n   * @param {string} instrument - Instrument selected from the dropdown\n   * @return {string} - Generated valid filename for the current selection\n   */\n//  getValidFileName(pscid, visitLabel, instrument) {\n//    var fileName = pscid + \"_\" + visitLabel;\n//    if (instrument) fileName += \"_\" + instrument;\n//\n//    return fileName;\n//  }\n\n\n  validateForm(formElement, value) {\n    let formErrors = this.state.formErrors;\n\n    //validate barcode regex\n    if (formElement === \"barcode\" && value !== \"\") {\n      if (!(/^hello/.test(this.state.formData.barcode))) {\n        formErrors.barcode = true;\n      } else {\n        formErrors.barcode = false;\n      }\n    }\n\n    //validate that quantity is a number and less than capacity\n    if (formElement === \"quantity\" && value !== \"\") {\n      if (isNaN(value) || (value > this.props.capacities[this.state.currentContainerType])) {\n        formErrors.quantity = true;\n      } else {\n        formErrors.quantity = false;\n      }\n    }\n\n    //validate datatypes and regex of generated type attributes\n    var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n    var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n\n      let datatype = this.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"number\") {\n        if (formElement === attribute) {\n          if (isNaN(value) && value !== \"\") {\n            formErrors[attribute] = true;\n          } else {\n            formErrors[attribute] = false;\n          }\n        }\n      }\n    })\n\n    this.setState({\n      formErrors: formErrors\n    });\n\n  }\n\n\n  /**\n   * Handle form submission\n   * @param {object} e - Form submission event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    let formRefs = this.refs;\n    //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\n    // Validate the form\n    if (!this.isValidForm(formRefs, formData)) {\n      return;\n    }\n\n\n//    // Validate specimened file name\n//    let instrument = formData.instrument ? formData.instrument : null;\n//    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n//    let requiredFileName = this.getValidFileName(\n//      formData.pscid, formData.visitLabel, instrument\n//    );\n//    if (!this.isValidFileName(requiredFileName, fileName)) {\n//      swal(\n//        \"Invalid Specimen name!\",\n//        \"File name should begin with: \" + requiredFileName,\n//        \"error\"\n//      );\n//      return;\n//    }\n\n    // Check for duplicate file names\n//    let isDuplicate = biobankFiles.indexOf(fileName);\n//    if (isDuplicate >= 0) {\n//      swal({\n//        title: \"Are you sure?\",\n//        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n//        type: \"warning\",\n//        showCancelButton: true,\n//        confirmButtonText: 'Yes, I am sure!',\n//        cancelButtonText: \"No, cancel it!\"\n//      }, function(isConfirm) {\n//        if (isConfirm) {\n//          this.specimenFile();\n//        } else {\n//          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n//        }\n//      }.bind(this));\n//    } else {\n\n    this.specimenSubmit();\n//    }\n  }\n\n  /*\n   * Uploads the file to the server\n   */\n  specimenSubmit() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        // Trigger an update event to update all observers (i.e DataTable)\n        // THIS CURRENTLY DOES NOT WORK\n        let event = new CustomEvent('update-datatable');\n        window.dispatchEvent(event);\n\n        this.props.closeModal();\n        swal(\"Specimen Submission Successful!\", \"\", \"success\");\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Checks if the inputted file name is valid\n   *\n   * @param {string} requiredFileName - Required file name\n   * @param {string} fileName - Provided file name\n   * @return {boolean} - true if fileName starts with requiredFileName, false\n   *   otherwise\n   */\n//  isValidFileName(requiredFileName, fileName) {\n//    if (fileName === null || requiredFileName === null) {\n//      return false;\n//    }\n//\n//    return (fileName.indexOf(requiredFileName) === 0);\n//  }\n\n  /**\n   * Validate the form\n   *\n   * @param {object} formRefs - Object containing references to React form elements\n   * @param {object} formData - Object containing form data inputed by user\n   * @return {boolean} - true if all required fields are filled, false otherwise\n   */\n  isValidForm(formRefs, formData) {\n    var isValidForm = true;\n\n    var requiredFields = {\n      pscid: null,\n      visitLabel: null,\n    };\n\n    Object.keys(requiredFields).map(function(field) {\n      if (formData[field]) {\n        requiredFields[field] = formData[field];\n      } else if (formRefs[field]) {\n        formRefs[field].props.hasError = true;\n        isValidForm = false;\n      }\n    });\n    this.forceUpdate();\n\n    return isValidForm;\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    // Only display visits and sites available for the current pscid\n    //let visitLabel = this.state.formData.visitLabel;\n    //let pscid = this.state.formData.pscid;\n  \n    //LOOK AT THIS LATER - THE SWITCH TO PROPS MESSED THIS ALL UP \n    if (formElement === \"pscid\" && value !== \"\") {\n      this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n      //this.state.Data.sites = this.state.Data.sessionData[this.state.Data.PSCIDs[value]].sites;\n    }\n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  setBarcodeFormData(barcodeFormData, barcodeId) {\n    var formData = this.state.formData;\n    var barcodeFormList = this.state.barcodeFormList;\n    barcodeFormList[barcodeId] = barcodeFormData;\n    formData['barcodeFormList'] = barcodeFormList;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  addBarcodeForm() {\n    let countBarcodeForms = this.state.countBarcodeForms;\n    countBarcodeForms.push(countBarcodeForms[countBarcodeForms.length -1] + 1); \n    this.setState({\n      countBarcodeForms: countBarcodeForms\n    });\n  }\n\n  removeBarcodeForm(index) {\n    let countBarcodeForms = this.state.countBarcodeForms;\n    countBarcodeForms.splice(index, 1);\n    this.setState({\n      countBarcodeForms: countBarcodeForms\n    });\n  }\n}\n\nBiobankCollectionForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired,\n  barcode: React.PropTypes.string\n};\n\nexport default BiobankCollectionForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/collectionForm.js","\nimport BiobankSpecimenForm from './specimenForm'\n\n/**\n * Biobank Barcode Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass BiobankBarcodeForm extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      formData: {},\n      formErrors: {},\n    };\n   \n    this.setFormData = this.setFormData.bind(this);\n    this.setSpecimenFormData = this.setSpecimenFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n  }\n\n  render() {\n\n    return (\n      <FormElement\n        name=\"biobankBarcode\"\n      >\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <div \n              data-toggle=\"collapse\" \n              data-target={\"#\" + this.props.id}\n            >   \n              <TextboxElement\n                name={\"barcode\"}\n                label={\"Barcode \" + this.props.id}\n                onUserInput={this.setFormData}\n                ref={\"barcode\"}\n                required={true}\n                value={this.state.formData[\"barcode\"]}\n                hasError={this.state.formErrors[\"barcode\"]}\n                errorMessage=\"Incorrect Barcode format for this Specimen and Container Type\"\n              />\n            </div>\n          </div>\n          <div className=\"col-xs-1\">\n            {this.props.button}\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xs-2\"/>\n          <div className=\"col-xs-9\">\n            <div id={this.props.id} className=\"collapse\">\n              <BiobankSpecimenForm\n                setParentFormData={this.setSpecimenFormData}\n                specimenTypes={this.props.specimenTypes}\n                specimenTypeAttributes={this.props.specimenTypeAttributes}\n                attributeDatatypes={this.props.attributeDatatypes}\n                containerTypesPrimary={this.props.containerTypesPrimary}\n                containerBarcodesNonPrimary={this.props.containerBarcodesNonPrimary}\n                units={this.props.units}\n                stati={this.props.stati}\n              />\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState(\n      {\n      formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setSpecimenFormData(specimenFormData) {\n    var formData = this.state.formData;\n    \n    for (var attribute in specimenFormData) {\n      formData[attribute] = specimenFormData[attribute]\n    }\n \n    this.setState(\n      {\n      formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    this.props.setParentFormData(this.state.formData, this.props.id);\n  }\n}\n\nBiobankBarcodeForm.propTypes = {\n  \n  id: React.PropTypes.string,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n  units: React.PropTypes.object.isRequired,\n}\n\nexport default BiobankBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/barcodeForm.js","\n/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass BiobankSpecimenForm extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      formData: {data:{}},\n      currentSpecimenType: this.props.edit ? this.props.specimenType : null,\n      currentContainerType: this.props.edit ? this.props.containerType : null,\n      formErrors: {},\n    };\n\n    this.setFormData = this.setFormData.bind(this);\n    this.setSpecimenTypeFieldFormData = this.setSpecimenTypeFieldFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n    this.getSpecimenTypeFields = this.getSpecimenTypeFields.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.updateSpecimen = this.updateSpecimen.bind(this);\n  }\n\n  componentDidMount() {\n    let formData = this.state.formData;\n    if (this.props.edit) {\n      formData['specimenId'] = this.props.specimenId;\n      formData['specimenType'] = this.props.specimenType;\n      formData['containerType'] = this.props.containerType;\n      formData['quantity'] = this.props.quantity;\n      formData['unit'] = this.props.unit;\n      formData['collectDate'] = this.props.collectDate;\n      formData['collectTime'] = this.props.collectTime;\n      formData['notes'] = this.props.notes;\n\n      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n      if (specimenTypeFieldsObject) {\n        var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n          formData.data[attribute] = this.props.data[attribute];\n        });\n      }\n    }\n    this.setState({\n      formData: formData\n    });\n  }\n\n  render() {\n\n    var parentContainerField;\n    if (!this.props.edit) {\n      parentContainerField = (\n        <SelectElement\n          name=\"parentContainer\"\n          label=\"Parent Container Barcode\"\n          options={this.props.containerBarcodesNonPrimary}\n          onUserInput={this.setFormData}\n          ref=\"parentContainer\"\n          required={false}\n          value={this.state.formData.parentContainer}\n        />\n      );\n    }\n\n    var updateButton;\n    if (this.props.edit) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    }\n\n    var specimenFields;\n    var specimenTypeFields = this.getSpecimenTypeFields();\n    if (this.state.currentSpecimenType) {\n      specimenFields = (\n        <div>\n          <SelectElement\n            name=\"containerType\"\n            label=\"Container Type\"\n            options={this.props.containerTypesPrimary}\n            onUserInput={this.setFormData}\n            ref=\"containerType\"\n            required={true}\n            value={this.state.formData.containerType}\n          />\n          {parentContainerField}\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Quantity\"\n            onUserInput={this.setFormData}\n            ref=\"quantity\"\n            required={true}\n            value={this.state.formData.quantity}\n            hasError={this.state.formErrors.quantity}\n          />\n          <SelectElement\n            name=\"unit\"\n            label=\"Unit\"\n            options={this.props.units}\n            onUserInput={this.setFormData}\n            ref=\"unit\"\n            required={true}\n            value={this.state.formData.unit}\n          />\n          {specimenTypeFields}\n          <DateElement\n            name=\"collectDate\"\n            label=\"Collection Date\"\n            minYear=\"2000\"\n            maxYear=\"2018\"\n            onUserInput={this.setFormData}\n            ref=\"collectDate\"\n            required={true}\n            value={this.state.formData.collectDate}\n          />\n          <TimeElement\n            name=\"collectTime\"\n            label=\"Collection Time\"\n            onUserInput={this.setFormData}\n            ref=\"collectTime\"\n            required={true}\n            value={this.state.formData.collectTime}\n          />\n          <TextareaElement\n            name=\"notes\"\n            label=\"Notes\"\n            onUserInput={this.setFormData}\n            ref=\"notes\"\n            value={this.state.formData.notes}\n          />\n          {updateButton}\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"biobankSpecimen\"\n        onSubmit={this.handleUpdate}\n        ref=\"form\"\n      >\n        <div>\n          <SelectElement\n            name=\"specimenType\"\n            label=\"Specimen Type\"\n            options={this.props.specimenTypes}\n            onUserInput={this.setFormData}\n            ref=\"specimenType\"\n            required={true}\n            value={this.state.formData.specimenType}\n          />\n        {specimenFields}\n        </div>\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n\n    let formData = this.state.formData;\n\n    if (formElement === \"specimenType\" && value !== \"\") {\n      //This is to eliminate the values for the specimen type fields\n      //This could potentially be improved later to retain the values\n      //for the fields that are common across specimen types\n      formData.data = {}; \n      this.setState({\n        currentSpecimenType: value\n      });\n    }\n\n    if (formElement === \"containerType\" && value !== \"\") {\n      this.setState({\n        currentContainerType: value\n      });\n    }\n\n    formData[formElement] = value;\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setSpecimenTypeFieldFormData(formElement, value) {\n    let formData = this.state.formData;\n    formData.data[formElement] = value;\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  \n  }\n\n  setParentFormData() {\n    if (!this.props.edit) {\n      var formData = this.state.formData;\n      this.props.setParentFormData(formData);\n    }\n  }\n\n  // This generates all the form fields for a given specimen type\n  getSpecimenTypeFields() {\n    if (this.state.currentSpecimenType) {\n      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n      if (specimenTypeFieldsObject) {\n        var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n          let datatype = this.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n          if (datatype === \"text\" || datatype === \"number\") {\n            if (specimenTypeFieldsObject[attribute]['refTableId'] == null) {\n              return (\n                <TextboxElement\n                  name={attribute}\n                  label={specimenTypeFieldsObject[attribute]['name']}\n                  onUserInput={this.setSpecimenTypeFieldFormData}\n                  ref={attribute}\n                  required={specimenTypeFieldsObject[attribute]['required']}\n                  value={this.state.formData.data[attribute]}\n                  hasError={this.state.formErrors[attribute]}\n                  errorMessage={\"This is a \" + datatype + \" field.\"}\n                />\n              );\n            }\n\n            // OPTIONS FOR SELECT ELEMENT WILL MOST LIKELY BE PASSED VIA AJAX CALL\n            // BUT IT CAN ALSO BE PRELOADED --\n            // ASK RIDA HOW THIS SHOULD BE DONE\n            if (specimenTypeFieldsObject[attribute]['refTableId'] !== null) {\n              return (\n                <SelectElement\n                  name={attribute}\n                  label={specimenTypeFieldsObject[attribute]['name']}\n                  options=\"\"\n                  onUserInput={this.setSpecimenTypeFieldFormData}\n                  ref={attribute}\n                  required={specimenTypeFieldsObject[attribte]['required']}\n                  value={this.state.formData.data[attribute]}\n                />\n              );\n            }\n          }\n\n          if (datatype === \"datetime\") {\n            return (\n              <DateElement\n                name={attribute}\n                label={specimenTypeFieldsObject[attribute]['name']}\n                onUserInput={this.setSpecimenTypeFieldFormData}\n                ref={attribute}\n                required={specimenTypeFieldsObject[attribute]['required']}\n                value={this.state.formData.data[attribute]}\n              />\n            );\n          }\n\n          if (datatype === \"boolean\") {\n          \n          }\n        })\n\n        return specimenTypeFields;\n      }\n    }\n  }\n\n  handleUpdate(e) {\n    //more things will go here later\n    this.updateSpecimen();\n  }\n\n  updateSpecimen() {\n    //it seems as though this updates the state even though there's no set state\n    //ask David why this is happening\n    let formData = this.state.formData;\n    formData['data'] = JSON.stringify(formData['data']);\n\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        //Update Parent Specimen Page Here\n        this.props.updatePage(\n          formData.specimenType, \n          formData.quantity, \n          formData.unit, \n          JSON.parse(formData.data), \n          formData.collectDate, \n          formData.collectTime, \n          formData.notes\n          );\n        //swal(\"Specimen Update Successful!\", \"\", \"success\");\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        //this is necessary because of the automatic state update above ^\n        //let formData = this.state.formData;\n        //formData['data'] = JSON.parse(formData['data']);\n        this.setState({\n        //  formData: formData,\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n}\n\nBiobankSpecimenForm.propTypes = {\n  setParentFormData: React.PropTypes.func,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n  units: React.PropTypes.object.isRequired,\n}\n\nexport default BiobankSpecimenForm;\n\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenForm.js","/**\n * This file contains React components for Tabs component.\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\n/**\n * Tabs Component.\n * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n * and corresponding tab panes.\n *\n * ================================================\n * Usage:\n *\n * 1. Define an array of tabs with IDs and labels\n *\n * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n *\n * 2. Pass tabList as <Tab> property and <TabPane> as child\n *  ```\n * <Tabs tabs={tabList} defaultTab=\"tab1\">\n *   <TabPane TabId={tabList[0].id}>\n *     // Tab content goes here\n *   </TabPane>\n * </Tabs>\n * ```\n * =================================================\n *\n */\nclass Tabs extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    const hash = window.location.hash;\n    let activeTab = \"\";\n\n    /**\n     * Determine the initial active tab in this order\n     * 1. Try to infer from the URL, otherwise\n     * 2. Try to infer from the defaultTab prop, otherwise\n     * 3. Set to be the first tab of the list\n     */\n    if (this.props.updateURL && hash) {\n      activeTab = hash.substr(1);\n    } else if (this.props.defaultTab) {\n      activeTab = this.props.defaultTab;\n    } else if (this.props.tabs.length > 0) {\n      activeTab = this.props.tabs[0].id;\n    }\n\n    this.state = {\n      activeTab: activeTab\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.getTabs = this.getTabs.bind(this);\n    this.getTabPanes = this.getTabPanes.bind(this);\n  }\n\n  handleClick(tabId, e) {\n    this.setState({activeTab: tabId});\n    this.props.onTabChange(tabId);\n\n    // Add tab href to URL querystring and scroll the page to top\n    if (this.props.updateURL) {\n      const scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n      window.location.hash = e.target.hash;\n      $('html,body').scrollTop(scrollDistance);\n    }\n  }\n\n  getTabs() {\n    let tabs = (this.props.tabs).map(function(tab) {\n      let tabClass = this.state.activeTab === tab.id ? 'active' : null;\n      let href = \"#\" + tab.id;\n      let tabID = \"tab-\" + tab.id;\n      return (\n        <li\n          role=\"presentation\"\n          className={tabClass}\n          key={tab.id}\n        >\n          <a id={tabID}\n             href={href}\n             role=\"tab\"\n             data-toggle=\"tab\"\n             onClick={this.handleClick.bind(null, tab.id)}\n          >\n            {tab.label}\n          </a>\n        </li>\n      );\n    }.bind(this));\n\n    return tabs;\n  }\n\n  getTabPanes() {\n    let tabPanes = React.Children.map(this.props.children, function(child, key) {\n      if (child) {\n        return React.cloneElement(child, {\n          activeTab: this.state.activeTab,\n          key: key\n        });\n      }\n    }.bind(this));\n\n    return tabPanes;\n  }\n\n  render() {\n    let tabs = this.getTabs();\n    let tabPanes = this.getTabPanes();\n    let tabStyle = {\n      marginLeft: 0,\n      marginBottom: '5px'\n    };\n\n    return (\n      <div>\n        <ul className=\"nav nav-tabs\" role=\"tablist\" style={tabStyle}>\n          {tabs}\n        </ul>\n        <div className=\"tab-content\">\n          {tabPanes}\n        </div>\n      </div>\n    );\n  }\n}\nTabs.propTypes = {\n  tabs: React.PropTypes.array.isRequired,\n  defaultTab: React.PropTypes.string,\n  updateURL: React.PropTypes.bool\n};\nTabs.defaultProps = {\n  onTabChange: function() {},\n  updateURL: false\n};\n\n/*\n * TabPane component.\n * Used to wrap content for every tab.\n */\nclass TabPane extends React.Component {\n  render() {\n    let classList = \"tab-pane\";\n    let title;\n\n    if (this.props.TabId === this.props.activeTab) {\n      classList += \" active\";\n    }\n    if (this.props.Title) {\n      title = <h1>{this.props.Title}</h1>;\n    }\n\n    return (\n      <div role=\"tabpanel\" className={classList} id={this.props.TabId}>\n        {title}\n        {this.props.children}\n      </div>\n    );\n  }\n}\nTabPane.propTypes = {\n  TabId: React.PropTypes.string.isRequired,\n  Title: React.PropTypes.string,\n  activeTab: React.PropTypes.string\n};\n\nclass Modal extends React.Component {\n\n  render() {\n    // Render nothing if the \"show\" prop is false\n    if(!this.props.show) {\n      return null;\n    }   \n\n    //White Modal Window\n    const modalStyle = { \n      position: 'relative',\n      maxWidth: 1000,        \n      maxHeight: '100%',\n      margin: '0 auto',\n      backgroundColor: '#fff',\n      padding: 30,\n      borderRadius: 10,\n      overflowY: 'auto',\n      zIndex: 9999,\n    };  \n\n    //Grey Background\n    const backdropStyle = {\n      position: 'fixed',\n      zIndex: 9998,\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundColor: 'rgba(0,0,0,0.3)',\n      padding: 50\n    };\n\n    return (\n    <div style={backdropStyle} onClick={this.props.onClose}>\n      <div style={modalStyle} onClick={(e) => {e.stopPropagation()}}>\n        {this.props.children}\n      </div>\n    </div>\n    ); \n  }\n}\nModal.propTypes = { \n  onClose: React.PropTypes.func.isRequired,\n  show: React.PropTypes.bool,\n  children: React.PropTypes.node\n};\n\nexport {\n  Tabs,\n  TabPane,\n  Modal\n};\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Tabs.js","/**\n * Modify behaviour of specified column cells in the Data Table component\n * @param {string} column - column name\n * @param {string} cell - cell content\n * @param {arrray} rowData - array of cell contents for a specific row\n * @param {arrray} rowHeaders - array of table headers (column names)\n * @return {*} a formated table cell for a given column\n */\nfunction formatColumn(column, cell, rowData, rowHeaders) {\n  // If a column if set as hidden, don't display it\n  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n  //  return null;\n  //}\n\n  // Create the mapping between rowHeaders and rowData in a row object.\n  var row = {};\n  rowHeaders.forEach(function(header, index) {\n    row[header] = rowData[index];\n  }, this);\n\n  // create array of classes to be added to td tag\n  var classes = [];\n  if (row['Hide File'] === '1') {\n    classes.push(\"bg-danger\");\n  }\n  // convert array to string, with blank space separator\n  classes = classes.join(\" \");\n\n  //const hasWritePermission = loris.userHasPermission('media_read');\n  if (column === 'Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Barcode'];\n    return <td className= {classes}><a href={specimenURL}>{cell}</a></td>;\n  }\n\n  if (column === 'Parent Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Parent Barcode'];\n    return <td className= {classes}><a href={specimenURL}>{cell}</a></td>; \n}\n\n  if (column === 'Container Barcode') {\n    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Container Barcode'];\n    return <td className= {classes}><a href={containerURL}>{cell}</a></td>;\n}\n\n // if (column === 'Visit Label') {\n //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n //   }\n // }\n\n // if (column === 'Edit Metadata') {\n //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n // }\n\n  return <td className={classes}>{cell}</td>;\n}\n\nexport default formatColumn;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/columnFormatter.js"],"sourceRoot":""}