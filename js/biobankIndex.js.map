{"version":3,"sources":["webpack:///modules/biobank/js/biobankIndex.js","webpack:///webpack/bootstrap 4582b18ca178b5b2e7c6?1306*******","webpack:///./modules/biobank/jsx/biobankIndex.js","webpack:///./jsx/FilterForm.js","webpack:///./jsx/Panel.js","webpack:///./modules/biobank/jsx/specimenForm.js","webpack:///./modules/biobank/jsx/barcodeForm.js","webpack:///./modules/biobank/jsx/collectionForm.js","webpack:///./modules/biobank/jsx/containerParentForm.js","webpack:///./modules/biobank/jsx/containerDisplay.js","webpack:///./modules/biobank/jsx/poolSpecimenForm.js","webpack:///./modules/biobank/jsx/preparationForm.js","webpack:///./modules/biobank/jsx/containerForm.js","webpack:///./modules/biobank/jsx/containerBarcodeForm.js","webpack:///./jsx/Tabs.js","webpack:///./jsx/FormModal.js","webpack:///./jsx/Modal.js","webpack:///./jsx/Loader.js","webpack:///./modules/biobank/jsx/columnFormatterSpecimen.js","webpack:///./modules/biobank/jsx/columnFormatterContainer.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_defineProperty","key","value","Object","defineProperty","enumerable","configurable","writable","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","create","constructor","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","i","length","descriptor","protoProps","staticProps","_FilterForm","_FilterForm2","_specimenForm","_specimenForm2","_poolSpecimenForm","_poolSpecimenForm2","_containerForm","_containerForm2","_Tabs","_FormModal","_FormModal2","_Loader","_Loader2","_columnFormatterSpecimen","_columnFormatterSpecimen2","_columnFormatterContainer","_columnFormatterContainer2","BiobankIndex","_React$Component","this","_this","getPrototypeOf","state","isLoaded","specimenFilter","containerFilter","isOpen","formOptions","show","specimenForm","containerForm","loadPage","bind","fetch","updateSpecimenFilter","updateContainerFilter","resetFilters","mapFormOptions","toggleModal","closeAllModals","specimenDataURL","formOptionsURL","containerDataURL","setState","request","url","$","ajax","method","dataType","success","data","error","console","refs","biobankFilter","clearFilter","rawObject","targetAttribute","stateKey","stateValue","_this2","React","createElement","addSpecimenButton","poolSpecimenButton","addContainerButton","loris","userHasPermission","containerTypesPrimary","containerStati","candidates","sessions","className","title","onClick","candidateSessions","sessionCenters","specimenTypes","specimenTypeUnits","specimenTypeAttributes","attributeOptions","attributeDatatypes","containersNonPrimary","containerDimensions","containerCoordinates","refreshParent","saveBarcodeList","BaseURL","poolSpecimenButtonContent","buttonClass","buttonContent","style","display","specimenProtocols","specimenProtocolAttributes","capacities","specimenUnits","specimenRequest","saveSpecimen","saveContainer","containerTypesNonPrimary","centers","tabList","label","Tabs","tabs","defaultTab","updateURL","TabPane","TabId","Module","name","ref","columns","formElements","specimenData","form","onUpdate","filter","StaticElement","ButtonElement","type","onUserInput","StaticDataTable","Data","Headers","Filter","getFormattedCell","containerData","Component","biobankIndex","ReactDOM","render","document","getElementById","_typeof","Symbol","iterator","_Panel","_Panel2","FilterForm","getFormChildren","setFilter","onElementUpdate","queryString","QueryString","get","keys","forEach","filterKey","exactMatch","clear","formChildren","Children","children","child","isValidElement","callbackFunc","callbackName","elementName","displayName","queryFieldName","filterValue","push","cloneElement","JSON","parse","stringify","fieldName","fieldValue","set","height","FormElement","defaultProps","warn","propTypes","PropTypes","string","isRequired","object","func","Panel","collapsed","initCollapsed","panelClass","toggleCollapsed","glyphClass","pencilGlyph","edit","marginRight","cursor","plusGlyph","add","removeGlyph","cancel","panelHeading","data-toggle","data-target","role","_barcodeForm","_barcodeForm2","BiobankSpecimenForm","formErrors","errorMessage","candidateId","sessionId","centerId","barcodeList","1","specimen","collection","container","count","copyMultiplier","toggleCollapse","setSpecimen","setContainer","addBarcode","setCopyMultiplier","copyBarcode","removeBarcode","save","availableId","find","barcode","statusId","temperature","locationId","originId","quantity","unitId","typeId","freezeThaw","fTCycle","candidate","CandID","session","ID","parentSpecimenId","then","onSuccess","_this3","Promise","resolve","cache","swal","err","textStatus","errorThrown","msg","responseJSON","message","onChange","Function","e","nextKey","multiplier","_this4","barcodeListArray","barcodes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","barcodeKey","units","_iterator","next","done","return","globalFields","remainingQuantityFields","text","PSCID","Visit_label","TextboxElement","setSpecimenData","required","SelectElement","options","emptyOption","placeHolder","disabled","onSubmit","columnSize","_collectionForm","_collectionForm2","_containerParentForm","_containerParentForm2","SpecimenBarcodeForm","copy","addBarcodeButton","addBarcodeText","copyBarcodeButton","copyBarcodeText","min","max","width","removeBarcodeButton","glyphStyle","color","marginLeft","fontSize","parentTypeId","paddingLeft","marginTop","position","right","setContainerData","SpecimenCollectionForm","getSpecimenTypeFields","setCollectionData","addData","setData","fieldsObject","specimenTypeFields","map","attribute","datatype","DateElement","updateButton","unit","specimenTypeFieldsObject","specimenFields","minYear","maxYear","date","TimeElement","time","TextareaElement","comments","_containerDisplay","_containerDisplay2","ContainerParentForm","apply","arguments","containerDisplay","containerBarcodesNonPrimary","parentContainerField","parentContainerId","dimensionId","dimensions","coordinatesTotal","dimension","coordinates","containerTypes","select","selectedCoordinate","coordinate","ContainerDisplay","redirectURL","drag","drop","tooltip","types","primary","window","location","href","preventDefault","dataTransfer","getData","newCoordinate","parseInt","saveChildContainer","column","row","y","x","nodeWidth","nodeStyle","nodeClass","tooltipTitle","dataHtml","dataToggle","dataPlacement","draggable","onDragStart","onDragOver","allowDrop","onDrop","status","coordinateDisplay","data-html","data-placement","data-original-title","rowHeight","rowStyle","_preparationForm","_preparationForm2","PoolSpecimenForm","formData","barcodeCount","preparation","step","handleSubmit","validateForm","setFormData","setPreparationFormData","setSpecimenFormData","submitForm","setBarcodeCount","previous","addPreparation","removePreparation","validate","formSwitch","preparationSwitch","runAjax","poolData","responseText","inputData","reject","field","inputForm","preparationButton","preparationForm","setParentFormData","insertAction","NumericElement","pscid","pSCIDs","visit","sessionData","visits","barcodesArray","values","barcodesString","join","parentSpecimenBarcodes","parentSpecimenIds","specimenIds","action","formElement","_this5","test","isNaN","currentContainerType","currentSpecimenType","log","formObj","FormData","append","contentType","processData","xhr","XMLHttpRequest","isValidForm","formRefs","requiredFields","visitLabel","hasError","forceUpdate","preparationFormData","specimenFormData","DataURL","refreshTable","SpecimenPreparationForm","getSpecimenProtocolFields","setPreparation","specimenProtocolFields","submitButton","protocolId","specimenProtocolFieldsObject","_containerBarcodeForm","_containerBarcodeForm2","BiobankContainerForm","containerList","countContainers","addContainer","copyContainer","removeContainer","saveContainerList","siteId","containerListArray","containers","containerKey","ContainerBarcodeForm","addContainerText","copyContainerButton","copyContainerText","removeContainerButton","hash","activeTab","substr","handleClick","getTabs","getTabPanes","tabId","onTabChange","scrollDistance","scrollTop","tab","tabClass","tabID","tabPanes","tabStyle","marginBottom","array","bool","VerticalTabs","_React$Component2","_React$Component3","classList","Title","_extends","assign","source","hasOwnProperty","_Modal","_Modal2","FormModal","closeModal","confirmClose","closeAction","throwWarning","showCancelButton","confirmButtonText","cancelButtonText","togglemodal","Modal","backdropStyle","zIndex","top","bottom","left","backgroundColor","padding","modalStyle","maxWidth","maxHeight","margin","borderRadius","overflowY","titleStyle","flexDirection","alignItems","background","borderTopRightRadius","bodyStyle","modal","stopPropagation","openModal","Loader","formatColumn","cell","rowData","rowHeaders","header","index","classes","specimenURL","containerURL"],"mappings":"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","file":"./modules/biobank/js/biobankIndex.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _FilterForm = __webpack_require__(1);\n\t\n\tvar _FilterForm2 = _interopRequireDefault(_FilterForm);\n\t\n\tvar _specimenForm = __webpack_require__(3);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tvar _poolSpecimenForm = __webpack_require__(8);\n\t\n\tvar _poolSpecimenForm2 = _interopRequireDefault(_poolSpecimenForm);\n\t\n\tvar _containerForm = __webpack_require__(10);\n\t\n\tvar _containerForm2 = _interopRequireDefault(_containerForm);\n\t\n\tvar _Tabs = __webpack_require__(12);\n\t\n\tvar _FormModal = __webpack_require__(13);\n\t\n\tvar _FormModal2 = _interopRequireDefault(_FormModal);\n\t\n\tvar _Loader = __webpack_require__(15);\n\t\n\tvar _Loader2 = _interopRequireDefault(_Loader);\n\t\n\tvar _columnFormatterSpecimen = __webpack_require__(16);\n\t\n\tvar _columnFormatterSpecimen2 = _interopRequireDefault(_columnFormatterSpecimen);\n\t\n\tvar _columnFormatterContainer = __webpack_require__(17);\n\t\n\tvar _columnFormatterContainer2 = _interopRequireDefault(_columnFormatterContainer);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar BiobankIndex = function (_React$Component) {\n\t  _inherits(BiobankIndex, _React$Component);\n\t\n\t  function BiobankIndex() {\n\t    _classCallCheck(this, BiobankIndex);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankIndex.__proto__ || Object.getPrototypeOf(BiobankIndex)).call(this));\n\t\n\t    _this.state = {\n\t      isLoaded: false,\n\t      specimenFilter: {},\n\t      containerFilter: {},\n\t      isOpen: false,\n\t      formOptions: {},\n\t      show: {\n\t        specimenForm: false,\n\t        containerForm: false\n\t      }\n\t    };\n\t\n\t    // Bind component instance to custom methods\n\t    _this.loadPage = _this.loadPage.bind(_this);\n\t    _this.fetch = _this.fetch.bind(_this);\n\t    _this.updateSpecimenFilter = _this.updateSpecimenFilter.bind(_this);\n\t    _this.updateContainerFilter = _this.updateContainerFilter.bind(_this);\n\t    _this.resetFilters = _this.resetFilters.bind(_this);\n\t    _this.mapFormOptions = _this.mapFormOptions.bind(_this);\n\t    _this.toggleModal = _this.toggleModal.bind(_this);\n\t    _this.closeAllModals = _this.closeAllModals.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankIndex, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      this.loadPage();\n\t    }\n\t  }, {\n\t    key: 'loadPage',\n\t    value: function loadPage() {\n\t      this.fetch('specimenData', this.props.specimenDataURL);\n\t      this.fetch('formOptions', this.props.formOptionsURL);\n\t      this.fetch('containerData', this.props.containerDataURL);\n\t      this.setState({ isLoaded: true });\n\t    }\n\t\n\t    /**\n\t     * Retrieve data from the provided URL and save it in state\n\t     */\n\t\n\t  }, {\n\t    key: 'fetch',\n\t    value: function fetch(request, url) {\n\t      $.ajax(url, {\n\t        method: \"GET\",\n\t        dataType: 'json',\n\t        success: function (data) {\n\t          this.setState(_defineProperty({}, request, data));\n\t        }.bind(this),\n\t        error: function error(_error) {\n\t          console.error(_error);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'updateSpecimenFilter',\n\t    value: function updateSpecimenFilter(specimenFilter) {\n\t      this.setState({ specimenFilter: specimenFilter });\n\t    }\n\t  }, {\n\t    key: 'updateContainerFilter',\n\t    value: function updateContainerFilter(containerFilter) {\n\t      this.setState({ containerFilter: containerFilter });\n\t    }\n\t  }, {\n\t    key: 'resetFilters',\n\t    value: function resetFilters() {\n\t      this.refs.biobankFilter.clearFilter();\n\t    }\n\t\n\t    //map options for forms\n\t\n\t  }, {\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(rawObject, targetAttribute) {\n\t      var data = {};\n\t      for (var id in rawObject) {\n\t        data[id] = rawObject[id][targetAttribute];\n\t      }\n\t\n\t      return data;\n\t    }\n\t  }, {\n\t    key: 'toggleModal',\n\t    value: function toggleModal(stateKey) {\n\t      var show = this.state.show;\n\t      var stateValue = show[stateKey];\n\t      show[stateKey] = !stateValue;\n\t      this.setState({ show: show });\n\t    }\n\t  }, {\n\t    key: 'closeAllModals',\n\t    value: function closeAllModals() {\n\t      var show = this.state.show;\n\t      for (var key in show) {\n\t        show[key] = false;\n\t      }\n\t      this.setState({ show: show });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      // Waiting for async data to load\n\t      if (!this.state.isLoaded) {\n\t        return React.createElement(_Loader2.default, null);\n\t      }\n\t\n\t      var addSpecimenButton = void 0;\n\t      var poolSpecimenButton = void 0;\n\t      var addContainerButton = void 0;\n\t      if (loris.userHasPermission('biobank_write')) {\n\t\n\t        /**\n\t         * Map Options for Form Select Elements of Specimen Form\n\t         */\n\t        var containerTypesPrimary = this.mapFormOptions(this.state.formOptions.containerTypesPrimary, 'label');\n\t        var containerStati = this.mapFormOptions(this.state.formOptions.containerStati, 'status');\n\t        var candidates = this.mapFormOptions(this.state.formOptions.candidates, 'pscid');\n\t        var sessions = this.mapFormOptions(this.state.formOptions.sessions, 'label');\n\t\n\t        addSpecimenButton = React.createElement(\n\t          'div',\n\t          {\n\t            className: 'action',\n\t            title: 'Add Specimen'\n\t          },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: function onClick() {\n\t                _this2.toggleModal('specimenForm');\n\t              }\n\t            },\n\t            React.createElement(\n\t              'span',\n\t              null,\n\t              '+'\n\t            )\n\t          ),\n\t          React.createElement(\n\t            _FormModal2.default,\n\t            {\n\t              title: 'Add New Specimen',\n\t              show: this.state.show.specimenForm,\n\t              toggleModal: function toggleModal() {\n\t                _this2.toggleModal('specimenForm');\n\t              }\n\t            },\n\t            React.createElement(_specimenForm2.default, {\n\t              candidates: candidates,\n\t              sessions: sessions,\n\t              candidateSessions: this.state.formOptions.candidateSessions,\n\t              sessionCenters: this.state.formOptions.sessionCenters,\n\t              specimenTypes: this.state.formOptions.specimenTypes,\n\t              specimenTypeUnits: this.state.formOptions.specimenTypeUnits,\n\t              specimenTypeAttributes: this.state.formOptions.specimenTypeAttributes,\n\t              attributeOptions: this.state.formOptions.attributeOptions,\n\t              attributeDatatypes: this.state.formOptions.attributeDatatypes,\n\t              containerTypesPrimary: containerTypesPrimary,\n\t              containersNonPrimary: this.state.formOptions.containersNonPrimary,\n\t              containerDimensions: this.state.formOptions.containerDimensions,\n\t              containerCoordinates: this.state.formOptions.containerCoordinates,\n\t              containerStati: containerStati,\n\t              refreshParent: this.loadPage,\n\t              mapFormOptions: this.mapFormOptions,\n\t              saveBarcodeList: loris.BaseURL + '/biobank/ajax/submitData.php?action=saveBarcodeList'\n\t            })\n\t          )\n\t        );\n\t\n\t        var poolSpecimenButtonContent = React.createElement('span', { className: 'glyphicon glyphicon-resize-small' });\n\t\n\t        poolSpecimenButton = React.createElement(\n\t          _FormModal2.default,\n\t          {\n\t            title: 'Pool Specimens',\n\t            buttonClass: 'action-button pool',\n\t            buttonContent: poolSpecimenButtonContent,\n\t            style: { display: 'inline-block' }\n\t          },\n\t          React.createElement(_poolSpecimenForm2.default, {\n\t            specimenTypes: this.state.formOptions.specimenTypes,\n\t            containerTypesPrimary: containerTypesPrimary,\n\t            containersNonPrimary: this.state.formOptions.containersNonPrimary,\n\t            specimenTypeAttributes: this.state.formOptions.specimenTypeAttributes,\n\t            specimenProtocols: this.state.formOptions.specimenProtocols,\n\t            specimenProtocolAttributes: this.state.formOptions.specimenProtocolAttributes,\n\t            attributeDatatypes: this.state.formOptions.attributeDatatypes,\n\t            attributeOptions: this.state.formOptions.attributeOptions,\n\t            capacities: this.state.formOptions.capacities,\n\t            containerDimensions: this.state.formOptions.containerDimensions,\n\t            containerCoordinates: this.state.formOptions.containerCoordinates,\n\t            specimenTypeUnits: this.state.formOptions.specimenTypeUnits,\n\t            specimenUnits: this.state.formOptions.specimenUnits,\n\t            candidates: candidates,\n\t            candidateSessions: this.state.formOptions.candidateSessions,\n\t            sessionCenters: this.state.formOptions.sessionCenters,\n\t            specimenRequest: loris.BaseURL + '/biobank/ajax/requestData.php?action=getSpecimenDataFromBarcode',\n\t            refreshParent: this.loadPage,\n\t            mapFormOptions: this.mapFormOptions,\n\t            saveSpecimen: loris.BaseURL + '/biobank/ajax/submitData.php?action=saveSpecimen',\n\t            saveContainer: loris.BaseURL + '/biobank/ajax/submitData.php?action=saveContainer'\n\t          })\n\t        );\n\t\n\t        var containerTypesNonPrimary = this.mapFormOptions(this.state.formOptions.containerTypesNonPrimary, 'label');\n\t\n\t        addContainerButton = React.createElement(\n\t          'div',\n\t          {\n\t            className: 'action',\n\t            title: 'Add Container'\n\t          },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: function onClick() {\n\t                _this2.toggleModal('containerForm');\n\t              }\n\t            },\n\t            React.createElement(\n\t              'span',\n\t              null,\n\t              '+'\n\t            )\n\t          ),\n\t          React.createElement(\n\t            _FormModal2.default,\n\t            {\n\t              title: 'Add New Container',\n\t              show: this.state.show.containerForm,\n\t              toggleModal: function toggleModal() {\n\t                _this2.toggleModal('containerForm');\n\t              }\n\t            },\n\t            React.createElement(_containerForm2.default, {\n\t              containerTypesNonPrimary: containerTypesNonPrimary,\n\t              centers: this.state.formOptions.centers,\n\t              containerStati: containerStati,\n\t              refreshParent: this.loadPage,\n\t              saveContainer: loris.BaseURL + '/biobank/ajax/submitData.php?action=saveContainer'\n\t            })\n\t          )\n\t        );\n\t      }\n\t\n\t      var tabList = [{ id: \"specimens\", label: \"Specimens\" }, { id: \"containers\", label: \"Containers\" }];\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { id: 'biobank-page' },\n\t        React.createElement(\n\t          _Tabs.Tabs,\n\t          { tabs: tabList, defaultTab: 'specimens', updateURL: true },\n\t          React.createElement(\n\t            _Tabs.TabPane,\n\t            { TabId: tabList[0].id },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'row' },\n\t              React.createElement(\n\t                'div',\n\t                { className: 'col-lg-10' },\n\t                React.createElement(\n\t                  _FilterForm2.default,\n\t                  {\n\t                    Module: 'biobank',\n\t                    name: 'specimen_filter',\n\t                    id: 'specimen_filter',\n\t                    ref: 'specimenFilter',\n\t                    columns: 3,\n\t                    formElements: this.state.specimenData.form,\n\t                    onUpdate: this.updateSpecimenFilter,\n\t                    filter: this.state.specimenFilter\n\t                  },\n\t                  React.createElement('br', null),\n\t                  React.createElement(StaticElement, null),\n\t                  React.createElement(StaticElement, null),\n\t                  React.createElement(ButtonElement, { label: 'Clear Filters', type: 'reset', onUserInput: this.resetFilters })\n\t                )\n\t              ),\n\t              React.createElement(\n\t                'div',\n\t                { className: 'col-lg-2' },\n\t                React.createElement(\n\t                  'span',\n\t                  { className: 'action' },\n\t                  addSpecimenButton,\n\t                  React.createElement(\n\t                    'div',\n\t                    { className: 'action-title' },\n\t                    'Add Specimen'\n\t                  )\n\t                ),\n\t                React.createElement('br', null),\n\t                React.createElement('br', null),\n\t                React.createElement(\n\t                  'span',\n\t                  { className: 'action' },\n\t                  poolSpecimenButton,\n\t                  React.createElement(\n\t                    'div',\n\t                    { className: 'action-title' },\n\t                    'Pool Specimens'\n\t                  )\n\t                )\n\t              )\n\t            ),\n\t            React.createElement(StaticDataTable, {\n\t              Data: this.state.specimenData.Data,\n\t              Headers: this.state.specimenData.Headers,\n\t              Filter: this.state.specimenFilter,\n\t              getFormattedCell: _columnFormatterSpecimen2.default\n\t            })\n\t          ),\n\t          React.createElement(\n\t            _Tabs.TabPane,\n\t            { TabId: tabList[1].id },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'row' },\n\t              React.createElement(\n\t                'div',\n\t                { className: 'col-lg-10' },\n\t                React.createElement(\n\t                  _FilterForm2.default,\n\t                  {\n\t                    Module: 'biobank',\n\t                    name: 'container_filter',\n\t                    id: 'container_filter',\n\t                    ref: 'containerFilter',\n\t                    columns: 3,\n\t                    formElements: this.state.containerData.form,\n\t                    onUpdate: this.updateContainerFilter,\n\t                    filter: this.state.containerFilter\n\t                  },\n\t                  React.createElement('br', null),\n\t                  React.createElement(StaticElement, null),\n\t                  React.createElement(StaticElement, null),\n\t                  React.createElement(ButtonElement, { label: 'Clear Filters', type: 'reset', onUserInput: this.resetFilters })\n\t                )\n\t              ),\n\t              React.createElement(\n\t                'div',\n\t                { className: 'col-lg-2' },\n\t                React.createElement(\n\t                  'span',\n\t                  { className: 'action' },\n\t                  addContainerButton,\n\t                  React.createElement(\n\t                    'div',\n\t                    { className: 'action-title' },\n\t                    'New Container'\n\t                  )\n\t                )\n\t              )\n\t            ),\n\t            React.createElement(StaticDataTable, {\n\t              Data: this.state.containerData.Data,\n\t              Headers: this.state.containerData.Headers,\n\t              Filter: this.state.containerFilter,\n\t              getFormattedCell: _columnFormatterContainer2.default\n\t            })\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return BiobankIndex;\n\t}(React.Component);\n\t\n\t$(function () {\n\t  var biobankIndex = React.createElement(\n\t    'div',\n\t    { className: 'page-biobank' },\n\t    React.createElement(BiobankIndex, {\n\t      specimenDataURL: loris.BaseURL + '/biobank/?format=json',\n\t      containerDataURL: loris.BaseURL + '/biobank/ajax/requestData.php?action=getContainerFilterData',\n\t      formOptionsURL: loris.BaseURL + '/biobank/ajax/requestData.php?action=getFormOptions'\n\t    })\n\t  );\n\t\n\t  ReactDOM.render(biobankIndex, document.getElementById(\"lorisworkspace\"));\n\t});\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Panel = __webpack_require__(2);\n\t\n\tvar _Panel2 = _interopRequireDefault(_Panel);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file contains React component for FilterForm\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Loris Team\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.1.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/**\n\t * FilterForm component.\n\t * A wrapper for form elements inside a selection filter.\n\t *\n\t * Adds necessary filter callbacks to all children and passes them to FormElement\n\t * for proper rendering.\n\t *\n\t * Keeps track of filter object and sends it to parent on every update.\n\t *\n\t * //HACK/NOTE: Loris has special behaviour for `candID` attribute in the query string,\n\t * making it impossible to use it for selection filters. This components renames\n\t * all `candID` fields to `candidateID` automatically before appending them to URL.\n\t *\n\t */\n\tvar FilterForm = function (_React$Component) {\n\t  _inherits(FilterForm, _React$Component);\n\t\n\t  function FilterForm(props) {\n\t    _classCallCheck(this, FilterForm);\n\t\n\t    // Bind component instance to custom methods\n\t    var _this = _possibleConstructorReturn(this, (FilterForm.__proto__ || Object.getPrototypeOf(FilterForm)).call(this, props));\n\t\n\t    _this.clearFilter = _this.clearFilter.bind(_this);\n\t    _this.getFormChildren = _this.getFormChildren.bind(_this);\n\t    _this.setFilter = _this.setFilter.bind(_this);\n\t    _this.onElementUpdate = _this.onElementUpdate.bind(_this);\n\t\n\t    // Keeps track of querystring values\n\t    // Saved as class variable instead of keeping in state\n\t    _this.queryString = QueryString.get();\n\t    return _this;\n\t  }\n\t\n\t  _createClass(FilterForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var filter = {};\n\t      var queryString = this.queryString;\n\t\n\t      // Initiaze filter using querystring value\n\t      Object.keys(queryString).forEach(function (key) {\n\t        var filterKey = key === 'candidateID' ? 'candID' : key;\n\t        filter[filterKey] = {\n\t          value: queryString[key],\n\t          exactMatch: false\n\t        };\n\t      });\n\t\n\t      // Update parent component\n\t      this.props.onUpdate(filter);\n\t    }\n\t\n\t    /**\n\t     * Clear the filter object, querystring and input fields\n\t     */\n\t\n\t  }, {\n\t    key: 'clearFilter',\n\t    value: function clearFilter() {\n\t      this.queryString = QueryString.clear(this.props.Module);\n\t      this.props.onUpdate({});\n\t    }\n\t\n\t    /**\n\t     * Itterates through FilterForm children, sets necessary callback functions\n\t     * and initializes filterTable\n\t     *\n\t     * @return {Array} formChildren - array of children with necessary props\n\t     */\n\t\n\t  }, {\n\t    key: 'getFormChildren',\n\t    value: function getFormChildren() {\n\t      var formChildren = [];\n\t      React.Children.forEach(this.props.children, function (child, key) {\n\t        // If child is a React component (i.e not a simple DOM element)\n\t        if (React.isValidElement(child) && typeof child.type === \"function\" && child.props.onUserInput) {\n\t          var callbackFunc = child.props.onUserInput;\n\t          var callbackName = callbackFunc.name;\n\t          var elementName = child.type.displayName;\n\t          var queryFieldName = child.props.name === 'candID' ? 'candidateID' : child.props.name;\n\t          var filterValue = this.queryString[queryFieldName];\n\t          // If callback function was not set, set it to onElementUpdate() for form\n\t          // elements and to clearFilter() for <ButtonElement type='reset'/>.\n\t          if (callbackName === \"onUserInput\") {\n\t            if (elementName === \"ButtonElement\" && child.props.type === \"reset\") {\n\t              callbackFunc = this.clearFilter;\n\t            } else {\n\t              callbackFunc = this.onElementUpdate.bind(null, elementName);\n\t            }\n\t          }\n\t          // Pass onUserInput and value props to all children\n\t          formChildren.push(React.cloneElement(child, {\n\t            onUserInput: callbackFunc,\n\t            value: filterValue ? filterValue : '',\n\t            key: key\n\t          }));\n\t          // Initialize filter for StaticDataTable\n\t          this.setFilter(elementName, child.props.name, filterValue);\n\t        } else {\n\t          formChildren.push(React.cloneElement(child, { key: key }));\n\t        }\n\t      }.bind(this));\n\t\n\t      return formChildren;\n\t    }\n\t\n\t    /**\n\t     * Appends entry to filter object or deletes it if value is\n\t     * empty.\n\t     *\n\t     * Sets exactMatch to true for all SelectElements (i.e dropdowns)\n\t     * in order to force StaticDataTable to do exact comparaison\n\t     *\n\t     * @param {string} type - form element type (i.e component name)\n\t     * @param {string} key - the name of the form element\n\t     * @param {string} value - the value of the form element\n\t     *\n\t     * @return {{}} filter - filterData\n\t     */\n\t\n\t  }, {\n\t    key: 'setFilter',\n\t    value: function setFilter(type, key, value) {\n\t      var filter = {};\n\t      if (this.props.filter) {\n\t        filter = JSON.parse(JSON.stringify(this.props.filter));\n\t      }\n\t      if (key) {\n\t        filter[key] = {};\n\t        if (value.length === 0) {\n\t          filter[key].value = '';\n\t        } else if (key && value) {\n\t          filter[key].value = value;\n\t        }\n\t        filter[key].exactMatch = type === \"SelectElement\";\n\t      } else if (filter && key && value === '') {\n\t        delete filter[key];\n\t      }\n\t      return filter;\n\t    }\n\t\n\t    /**\n\t     * Sets filter object and querystring to reflect values of input fields\n\t     *\n\t     * @param {string} type - form element type (i.e component name)\n\t     * @param {string} fieldName - the name of the form element\n\t     * @param {string} fieldValue - the value of the form element\n\t     */\n\t\n\t  }, {\n\t    key: 'onElementUpdate',\n\t    value: function onElementUpdate(type, fieldName, fieldValue) {\n\t      // Make sure key is of string type and value is of string or object type\n\t      // before sending them to querystring\n\t      if (typeof fieldName !== 'string' || typeof fieldValue !== 'string' && (typeof fieldValue === 'undefined' ? 'undefined' : _typeof(fieldValue)) !== 'object') {\n\t        return;\n\t      }\n\t\n\t      // Update query string\n\t      var queryFieldName = fieldName === 'candID' ? 'candidateID' : fieldName;\n\t      this.queryString = QueryString.set(this.queryString, queryFieldName, fieldValue);\n\t\n\t      // Update filter and get new filter object\n\t      var filter = this.setFilter(type, fieldName, fieldValue);\n\t      this.props.onUpdate(filter);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Get formatted children\n\t      var formChildren = this.getFormChildren();\n\t      var formElements = this.props.formElements;\n\t\n\t      if (formElements) {\n\t        Object.keys(formElements).forEach(function (fieldName) {\n\t          var queryFieldName = fieldName === 'candID' ? 'candidateID' : fieldName;\n\t          formElements[fieldName].onUserInput = this.onElementUpdate.bind(null, fieldName);\n\t          formElements[fieldName].value = this.queryString[queryFieldName];\n\t        }.bind(this));\n\t      }\n\t\n\t      return React.createElement(\n\t        _Panel2.default,\n\t        {\n\t          id: this.props.id,\n\t          height: this.props.height,\n\t          title: this.props.title\n\t        },\n\t        React.createElement(\n\t          FormElement,\n\t          this.props,\n\t          formChildren\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return FilterForm;\n\t}(React.Component);\n\t\n\tFilterForm.defaultProps = {\n\t  id: 'selection-filter',\n\t  height: '100%',\n\t  title: 'Selection Filter',\n\t  onUpdate: function onUpdate() {\n\t    console.warn('onUpdate() callback is not set!');\n\t  }\n\t};\n\tFilterForm.propTypes = {\n\t  Module: React.PropTypes.string.isRequired,\n\t  filter: React.PropTypes.object.isRequired,\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  onUpdate: React.PropTypes.func\n\t};\n\t\n\texports.default = FilterForm;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Panel\n\t *\n\t * @author Alex I.\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Panel component\n\t * Wraps children in a collapsible bootstrap panel\n\t */\n\tvar Panel = function (_React$Component) {\n\t  _inherits(Panel, _React$Component);\n\t\n\t  function Panel(props) {\n\t    _classCallCheck(this, Panel);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).call(this, props));\n\t\n\t    _this.state = {\n\t      collapsed: _this.props.initCollapsed\n\t    };\n\t\n\t    // Initialize panel class based on collapsed status\n\t    _this.panelClass = _this.props.initCollapsed ? \"panel-collapse collapse\" : \"panel-collapse collapse in\";\n\t\n\t    _this.toggleCollapsed = _this.toggleCollapsed.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Panel, [{\n\t    key: \"toggleCollapsed\",\n\t    value: function toggleCollapsed() {\n\t      this.setState({ collapsed: !this.state.collapsed });\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      // Change arrow direction based on collapse status\n\t      var glyphClass = this.state.collapsed ? \"glyphicon pull-right glyphicon-chevron-down\" : \"glyphicon pull-right glyphicon-chevron-up\";\n\t\n\t      var pencilGlyph = void 0;\n\t      if (this.props.edit) {\n\t        pencilGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-pencil\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.edit\n\t        });\n\t      }\n\t\n\t      var plusGlyph = void 0;\n\t      if (this.props.add) {\n\t        plusGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-plus\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.add\n\t        });\n\t      }\n\t\n\t      var removeGlyph = void 0;\n\t      if (this.props.cancel) {\n\t        removeGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-remove\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.cancel\n\t        });\n\t      }\n\t\n\t      // Add panel header, if title is set\n\t      var panelHeading = this.props.title ? React.createElement(\n\t        \"div\",\n\t        {\n\t          className: \"panel-heading\"\n\t        },\n\t        React.createElement(\"span\", {\n\t          className: glyphClass,\n\t          onClick: this.toggleCollapsed,\n\t          \"data-toggle\": \"collapse\",\n\t          \"data-target\": '#' + this.props.id,\n\t          style: { cursor: 'pointer' }\n\t        }),\n\t        pencilGlyph,\n\t        plusGlyph,\n\t        removeGlyph,\n\t        this.props.title\n\t      ) : '';\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"panel panel-primary\" },\n\t        panelHeading,\n\t        React.createElement(\n\t          \"div\",\n\t          { id: this.props.id, className: this.panelClass, role: \"tabpanel\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"panel-body\", style: { height: this.props.height } },\n\t            this.props.children\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Panel;\n\t}(React.Component);\n\t\n\tPanel.propTypes = {\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  edit: React.PropTypes.func,\n\t  add: React.PropTypes.func\n\t};\n\tPanel.defaultProps = {\n\t  initCollapsed: false,\n\t  id: 'default-panel',\n\t  height: '100%'\n\t};\n\t\n\texports.default = Panel;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _barcodeForm = __webpack_require__(4);\n\t\n\tvar _barcodeForm2 = _interopRequireDefault(_barcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankSpecimenForm = function (_React$Component) {\n\t  _inherits(BiobankSpecimenForm, _React$Component);\n\t\n\t  function BiobankSpecimenForm() {\n\t    _classCallCheck(this, BiobankSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimenForm.__proto__ || Object.getPrototypeOf(BiobankSpecimenForm)).call(this));\n\t\n\t    _this.state = {\n\t      formErrors: {},\n\t      errorMessage: null,\n\t      candidateId: null,\n\t      sessionId: null,\n\t      centerId: null,\n\t      barcodeList: { 1: { specimen: { collection: {} }, container: {} } },\n\t      count: 1,\n\t      collapsed: { 1: true },\n\t      copyMultiplier: 1\n\t    };\n\t\n\t    _this.toggleCollapse = _this.toggleCollapse.bind(_this);\n\t    _this.setSpecimen = _this.setSpecimen.bind(_this);\n\t    _this.setContainer = _this.setContainer.bind(_this);\n\t    _this.addBarcode = _this.addBarcode.bind(_this);\n\t    _this.setCopyMultiplier = _this.setCopyMultiplier.bind(_this);\n\t    _this.copyBarcode = _this.copyBarcode.bind(_this);\n\t    _this.removeBarcode = _this.removeBarcode.bind(_this);\n\t    _this.saveBarcodeList = _this.saveBarcodeList.bind(_this);\n\t    _this.save = _this.save.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimenForm, [{\n\t    key: 'toggleCollapse',\n\t    value: function toggleCollapse(key) {\n\t      var collapsed = this.state.collapsed;\n\t      collapsed[key] = !collapsed[key];\n\t      this.setState({ collapsed: collapsed });\n\t    }\n\t  }, {\n\t    key: 'saveBarcodeList',\n\t    value: function saveBarcodeList() {\n\t      var _this2 = this;\n\t\n\t      var barcodeList = JSON.parse(JSON.stringify(this.state.barcodeList));\n\t      var availableId = Object.keys(this.props.containerStati).find(function (key) {\n\t        return _this2.props.containerStati[key] === 'Available';\n\t      });\n\t\n\t      for (var barcode in barcodeList) {\n\t        //set container values\n\t        var container = barcodeList[barcode].container;\n\t        container.statusId = availableId;\n\t        container.temperature = 20;\n\t        container.locationId = this.state.centerId;\n\t        container.originId = this.state.centerId;\n\t\n\t        //set specimen values\n\t        var specimen = barcodeList[barcode].specimen;\n\t        specimen.candidateId = this.state.candidateId;\n\t        specimen.sessionId = this.state.sessionId;\n\t        specimen.quantity = specimen.collection.quantity;\n\t        specimen.unitId = specimen.collection.unitId;\n\t        specimen.collection.locationId = this.state.centerId;\n\t        if (this.props.specimenTypes[specimen.typeId].freezeThaw === 1) {\n\t          specimen.fTCycle = 0;\n\t        }\n\t\n\t        //if this is an aliquot form, reset some of the values.\n\t        //TODO: these will eventually be higher level states.\n\t        if (this.props.data) {\n\t          specimen.candidateId = this.props.data.candidate.CandID;\n\t          specimen.sessionId = this.props.data.session.ID;\n\t          specimen.parentSpecimenId = this.props.data.specimen.id;\n\t          specimen.collection.locationId = this.props.data.container.locationId;\n\t          container.locationId = this.props.data.container.locationId;\n\t          container.originId = this.props.data.container.locationId;\n\t        }\n\t\n\t        barcodeList[barcode].container = container;\n\t        barcodeList[barcode].specimen = specimen;\n\t      }\n\t\n\t      this.save(barcodeList, this.props.saveBarcodeList).then(function () {\n\t        _this2.props.refreshParent();_this2.props.onSuccess();\n\t      });\n\t    }\n\t  }, {\n\t    key: 'save',\n\t    value: function save(data, url) {\n\t      var _this3 = this;\n\t\n\t      return new Promise(function (resolve) {\n\t        $.ajax({\n\t          type: 'POST',\n\t          url: url,\n\t          data: { data: JSON.stringify(data) },\n\t          cache: false,\n\t          success: function success() {\n\t            resolve();\n\t            swal(\"Save Successful!\", \"\", \"success\");\n\t          },\n\t          error: function error(err, textStatus, errorThrown) {\n\t            var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t            _this3.setState({\n\t              errorMessage: msg\n\t            });\n\t            swal(msg, \"\", \"error\");\n\t          }\n\t        });\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setSpecimen',\n\t    value: function setSpecimen(name, value, key) {\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t      var centerId = this.state.centerId;\n\t      var candidateId = this.state.candidateId;\n\t      var sessionId = this.state.sessionId;\n\t      var barcodeList = this.state.barcodeList;\n\t\n\t      if (name === 'candidateId') {\n\t        candidateId = value;\n\t      } else if (name === 'sessionId') {\n\t        sessionId = value;\n\t        centerId = this.props.sessionCenters[sessionId].centerId;\n\t      } else {\n\t        //this is eliminate values if specimen type is changed\n\t        if (name === 'typeId') {\n\t          barcodeList[key].specimen = { collection: {} };\n\t        }\n\t        barcodeList[key].specimen[name] = value;\n\t      }\n\t\n\t      this.setState({ barcodeList: barcodeList, centerId: centerId, candidateId: candidateId, sessionId: sessionId });\n\t    }\n\t  }, {\n\t    key: 'setContainer',\n\t    value: function setContainer(name, value, key) {\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t      var barcodeList = this.state.barcodeList;\n\t      barcodeList[key].container[name] = value;\n\t      this.setState({ barcodeList: barcodeList });\n\t    }\n\t  }, {\n\t    key: 'addBarcode',\n\t    value: function addBarcode() {\n\t      var barcodeList = this.state.barcodeList;\n\t      var count = this.state.count;\n\t      var collapsed = this.state.collapsed;\n\t\n\t      barcodeList[count + 1] = { specimen: {}, container: { collection: {} } };\n\t      collapsed[count + 1] = true;\n\t      count = count + 1;\n\t\n\t      this.setState({ barcodeList: barcodeList, collapsed: collapsed, count: count });\n\t    }\n\t  }, {\n\t    key: 'setCopyMultiplier',\n\t    value: function setCopyMultiplier(e) {\n\t      var copyMultiplier = e.target.value;\n\t      this.setState({ copyMultiplier: copyMultiplier });\n\t    }\n\t  }, {\n\t    key: 'copyBarcode',\n\t    value: function copyBarcode(key) {\n\t      var count = this.state.count;\n\t      var collapsed = this.state.collapsed;\n\t      var nextKey = count + 1;\n\t      var barcodeList = this.state.barcodeList;\n\t      var multiplier = this.state.copyMultiplier;\n\t\n\t      for (var i = 1; i <= multiplier; i++) {\n\t        barcodeList[nextKey] = JSON.parse(JSON.stringify(barcodeList[key]));\n\t        delete barcodeList[nextKey].container.barcode;\n\t        collapsed[nextKey] = true;\n\t        nextKey++;\n\t      }\n\t\n\t      this.setState({\n\t        barcodeList: barcodeList,\n\t        count: nextKey,\n\t        collapsed: collapsed\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removeBarcode',\n\t    value: function removeBarcode(key) {\n\t      var barcodeList = this.state.barcodeList;\n\t      delete barcodeList[key];\n\t      this.setState({ barcodeList: barcodeList });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this4 = this;\n\t\n\t      //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n\t      var barcodeListArray = Object.keys(this.state.barcodeList);\n\t      var barcodes = [];\n\t      var i = 1;\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        var _loop = function _loop() {\n\t          var key = _step.value;\n\t\n\t          barcodes.push(React.createElement(_barcodeForm2.default, {\n\t            data: _this4.props.data || null,\n\t            key: key,\n\t            barcodeKey: key,\n\t            id: i,\n\t            collapsed: _this4.state.collapsed[key],\n\t            toggleCollapse: _this4.toggleCollapse,\n\t            mapFormOptions: _this4.props.mapFormOptions,\n\t            container: _this4.state.barcodeList[key].container || null,\n\t            specimen: _this4.state.barcodeList[key].specimen || null,\n\t            removeBarcode: barcodeListArray.length !== 1 ? function () {\n\t              return _this4.removeBarcode(key);\n\t            } : null,\n\t            addBarcode: i == barcodeListArray.length ? _this4.addBarcode : null,\n\t            setCopyMultiplier: _this4.setCopyMultiplier,\n\t            copyMultiplier: _this4.state.copyMultiplier,\n\t            copyBarcode: i == barcodeListArray.length && _this4.state.barcodeList[key] ? _this4.copyBarcode : null,\n\t            setContainer: _this4.setContainer,\n\t            setSpecimen: _this4.setSpecimen,\n\t            onChange: _this4.props.onChange,\n\t            specimenTypes: _this4.props.specimenTypes,\n\t            containerTypesPrimary: _this4.props.containerTypesPrimary,\n\t            containersNonPrimary: _this4.props.containersNonPrimary,\n\t            specimenTypeAttributes: _this4.props.specimenTypeAttributes,\n\t            attributeDatatypes: _this4.props.attributeDatatypes,\n\t            attributeOptions: _this4.props.attributeOptions,\n\t            capacities: _this4.props.capacities,\n\t            containerDimensions: _this4.props.containerDimensions,\n\t            containerCoordinates: _this4.props.containerCoordinates,\n\t            specimenTypeUnits: _this4.props.specimenTypeUnits,\n\t            units: _this4.props.units\n\t          }));\n\t\n\t          i++;\n\t        };\n\t\n\t        for (var _iterator = barcodeListArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          _loop();\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t\n\t      var globalFields = void 0;\n\t      var remainingQuantityFields = void 0;\n\t      if (this.props.data) {\n\t        globalFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(StaticElement, {\n\t            label: 'Parent Specimen',\n\t            text: this.props.data.container.barcode\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'PSCID',\n\t            text: this.props.data.candidate.PSCID\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Visit Label',\n\t            text: this.props.data.session.Visit_label\n\t          })\n\t        );\n\t\n\t        remainingQuantityFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Remaining Quantity',\n\t            onUserInput: this.props.setSpecimenData,\n\t            required: true,\n\t            value: this.props.specimen.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: this.props.specimenUnits,\n\t            onUserInput: this.props.setSpecimenData,\n\t            emptyOption: false,\n\t            required: true,\n\t            value: this.props.specimen.unitId\n\t          })\n\t        );\n\t      } else {\n\t        var sessions = {};\n\t        if (this.state.candidateId) {\n\t          sessions = this.props.mapFormOptions(this.props.candidateSessions[this.state.candidateId], 'label');\n\t        }\n\t        //TODO: not sure why, but I'm now having trouble with the SearchableDropdown\n\t        globalFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'candidateId',\n\t            label: 'PSCID',\n\t            options: this.props.candidates,\n\t            onUserInput: this.setSpecimen,\n\t            required: true,\n\t            value: this.state.candidateId,\n\t            placeHolder: 'Search for a PSCID'\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'sessionId',\n\t            label: 'Visit Label',\n\t            options: sessions,\n\t            onUserInput: this.setSpecimen,\n\t            required: true,\n\t            value: this.state.sessionId,\n\t            disabled: this.state.candidateId ? false : true\n\t          })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenForm',\n\t          id: 'specimenForm',\n\t          onSubmit: function onSubmit() {\n\t            _this4.saveBarcodeList();\n\t            _this4.props.saveSpecimen instanceof Function && _this4.props.saveSpecimen();\n\t          },\n\t          ref: 'form'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-9 col-xs-offset-1' },\n\t            globalFields,\n\t            remainingQuantityFields\n\t          )\n\t        ),\n\t        barcodes,\n\t        React.createElement(ButtonElement, {\n\t          label: 'Submit',\n\t          columnSize: 'col-sm-2 col-sm-offset-10'\n\t        })\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimenForm;\n\t}(React.Component);\n\t\n\tBiobankSpecimenForm.propTypes = {};\n\t\n\texports.default = BiobankSpecimenForm;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _collectionForm = __webpack_require__(5);\n\t\n\tvar _collectionForm2 = _interopRequireDefault(_collectionForm);\n\t\n\tvar _containerParentForm = __webpack_require__(6);\n\t\n\tvar _containerParentForm2 = _interopRequireDefault(_containerParentForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Barcode Form\n\t *\n\t * Acts a subform for BiobankSpecimenForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenBarcodeForm = function (_React$Component) {\n\t  _inherits(SpecimenBarcodeForm, _React$Component);\n\t\n\t  function SpecimenBarcodeForm() {\n\t    _classCallCheck(this, SpecimenBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenBarcodeForm.__proto__ || Object.getPrototypeOf(SpecimenBarcodeForm)).call(this));\n\t\n\t    _this.setContainer = _this.setContainer.bind(_this);\n\t    _this.setSpecimen = _this.setSpecimen.bind(_this);\n\t    _this.copy = _this.copy.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenBarcodeForm, [{\n\t    key: 'setContainer',\n\t    value: function setContainer(name, value) {\n\t      this.props.setContainer(name, value, this.props.barcodeKey);\n\t    }\n\t  }, {\n\t    key: 'setSpecimen',\n\t    value: function setSpecimen(name, value) {\n\t      this.props.setSpecimen(name, value, this.props.barcodeKey);\n\t    }\n\t  }, {\n\t    key: 'copy',\n\t    value: function copy() {\n\t      this.props.copyBarcode(this.props.copyMultiplier);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      var addBarcodeButton = void 0;\n\t      var addBarcodeText = void 0;\n\t      var copyBarcodeButton = void 0;\n\t      var copyBarcodeText = void 0;\n\t      if (this.props.addBarcode) {\n\t        addBarcodeButton = React.createElement(\n\t          'span',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: this.props.addBarcode\n\t            },\n\t            '+'\n\t          )\n\t        );\n\t\n\t        addBarcodeText = React.createElement(\n\t          'span',\n\t          { className: 'action-title' },\n\t          'New Entry'\n\t        );\n\t      }\n\t\n\t      if (this.props.copyBarcode) {\n\t        copyBarcodeButton = React.createElement(\n\t          'span',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: this.copy\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-duplicate' })\n\t          )\n\t        );\n\t        copyBarcodeText = React.createElement(\n\t          'span',\n\t          { className: 'action-title' },\n\t          React.createElement('input', {\n\t            className: 'form-control input-sm',\n\t            type: 'number',\n\t            min: '1',\n\t            max: '50',\n\t            style: { width: 50, display: 'inline' },\n\t            onChange: this.props.setCopyMultiplier,\n\t            value: this.props.copyMultiplier\n\t          }),\n\t          'Copies'\n\t        );\n\t      }\n\t\n\t      var removeBarcodeButton = void 0;\n\t      if (this.props.removeBarcode) {\n\t        var glyphStyle = {\n\t          color: '#DDDDDD',\n\t          marginLeft: 10,\n\t          cursor: 'pointer',\n\t          fontSize: 15\n\t        };\n\t\n\t        removeBarcodeButton = React.createElement('span', {\n\t          className: 'glyphicon glyphicon-remove',\n\t          onClick: this.props.removeBarcode,\n\t          style: glyphStyle\n\t        });\n\t      }\n\t\n\t      var specimenTypes = {};\n\t      if (this.props.data) {\n\t        for (var id in this.props.specimenTypes) {\n\t          if (this.props.specimenTypes[id].parentTypeId == this.props.data.specimen.typeId || id == this.props.data.specimen.typeId) {\n\t            specimenTypes[id] = this.props.specimenTypes[id]['type'];\n\t          }\n\t        }\n\t      } else {\n\t        specimenTypes = this.props.mapFormOptions(this.props.specimenTypes, 'type');\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankBarcode'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-9 col-xs-offset-1' },\n\t            React.createElement(\n\t              'div',\n\t              null,\n\t              React.createElement(TextboxElement, {\n\t                name: 'barcode',\n\t                label: 'Barcode ' + this.props.id,\n\t                onUserInput: this.setContainer,\n\t                required: true,\n\t                value: this.props.container.barcode\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-1', style: { paddingLeft: 0, marginTop: 10 } },\n\t            React.createElement('span', {\n\t              className: this.props.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up',\n\t              style: { cursor: 'pointer', fontSize: 15, position: 'relative', right: 40 },\n\t              'data-toggle': 'collapse',\n\t              'data-target': '#item-' + this.props.barcodeKey,\n\t              onClick: function onClick() {\n\t                return _this2.props.toggleCollapse(_this2.props.barcodeKey);\n\t              }\n\t            }),\n\t            removeBarcodeButton\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement('div', { className: 'col-xs-2' }),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-8' },\n\t            React.createElement(\n\t              'div',\n\t              { id: 'item-' + this.props.barcodeKey, className: 'collapse' },\n\t              React.createElement(SelectElement, {\n\t                name: 'typeId',\n\t                label: 'Specimen Type',\n\t                options: specimenTypes,\n\t                onUserInput: this.setSpecimen,\n\t                required: true,\n\t                value: this.props.specimen.typeId\n\t              }),\n\t              React.createElement(SelectElement, {\n\t                name: 'typeId',\n\t                label: 'Container Type',\n\t                options: this.props.containerTypesPrimary,\n\t                onUserInput: this.setContainer,\n\t                ref: 'containerType',\n\t                required: true,\n\t                value: this.props.container.typeId\n\t              }),\n\t              React.createElement(_collectionForm2.default, {\n\t                specimen: this.props.specimen,\n\t                setSpecimenData: this.setSpecimen,\n\t                specimenTypeUnits: this.props.specimenTypeUnits,\n\t                specimenTypeAttributes: this.props.specimenTypeAttributes,\n\t                attributeDatatypes: this.props.attributeDatatypes,\n\t                attributeOptions: this.props.attributeOptions\n\t              }),\n\t              React.createElement(_containerParentForm2.default, {\n\t                setContainerData: this.setContainer,\n\t                mapFormOptions: this.props.mapFormOptions,\n\t                container: this.props.container,\n\t                containersNonPrimary: this.props.containersNonPrimary,\n\t                containerDimensions: this.props.containerDimensions,\n\t                containerCoordinates: this.props.containerCoordinates\n\t              })\n\t            )\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement('div', { className: 'col-xs-4' }),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-3 action' },\n\t              addBarcodeButton,\n\t              addBarcodeText\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-3 action' },\n\t              copyBarcodeButton,\n\t              copyBarcodeText\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return SpecimenBarcodeForm;\n\t}(React.Component);\n\t\n\tSpecimenBarcodeForm.propTypes = {};\n\t\n\texports.default = SpecimenBarcodeForm;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenCollectionForm = function (_React$Component) {\n\t  _inherits(SpecimenCollectionForm, _React$Component);\n\t\n\t  function SpecimenCollectionForm() {\n\t    _classCallCheck(this, SpecimenCollectionForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenCollectionForm.__proto__ || Object.getPrototypeOf(SpecimenCollectionForm)).call(this));\n\t\n\t    _this.getSpecimenTypeFields = _this.getSpecimenTypeFields.bind(_this);\n\t    _this.setCollectionData = _this.setCollectionData.bind(_this);\n\t    _this.addData = _this.addData.bind(_this);\n\t    _this.setData = _this.setData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenCollectionForm, [{\n\t    key: 'setCollectionData',\n\t    value: function setCollectionData(name, value) {\n\t      var collection = this.props.specimen.collection;\n\t      collection[name] = value;\n\t      this.props.setSpecimenData('collection', collection);\n\t    }\n\t\n\t    //TODO: this function may not be necessary\n\t\n\t  }, {\n\t    key: 'addData',\n\t    value: function addData() {\n\t      var collection = this.props.specimen.collection;\n\t      collection.data = {};\n\t      this.props.setSpecimenData('collection', collection);\n\t    }\n\t  }, {\n\t    key: 'setData',\n\t    value: function setData(name, value) {\n\t      var data = this.props.specimen.collection.data;\n\t      data[name] = value;\n\t      this.setCollectionData('data', data);\n\t    }\n\t\n\t    // This generates all the form fields for a given specimen type\n\t\n\t  }, {\n\t    key: 'getSpecimenTypeFields',\n\t    value: function getSpecimenTypeFields(fieldsObject) {\n\t      var _this2 = this;\n\t\n\t      var specimenTypeFields = Object.keys(fieldsObject).map(function (attribute) {\n\t        var datatype = _this2.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"text\" || datatype === \"number\") {\n\t\n\t          if (fieldsObject[attribute]['refTableId'] == null) {\n\t            return React.createElement(TextboxElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              onUserInput: _this2.setData,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this2.props.specimen.collection.data[attribute]\n\t            });\n\t          }\n\t\n\t          if (fieldsObject[attribute]['refTableId'] !== null) {\n\t            return React.createElement(SelectElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              options: _this2.props.attributeOptions[fieldsObject[attribute]['refTableId']],\n\t              onUserInput: _this2.setData,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this2.props.specimen.collection.data[attribute]\n\t            });\n\t          }\n\t        }\n\t\n\t        if (datatype === \"datetime\") {\n\t          return React.createElement(DateElement, {\n\t            name: attribute,\n\t            label: fieldsObject[attribute]['name'],\n\t            onUserInput: _this2.setData,\n\t            ref: attribute,\n\t            required: fieldsObject[attribute]['required'],\n\t            value: _this2.props.specimen.collection.data[attribute]\n\t          });\n\t        }\n\t\n\t        if (datatype === \"boolean\") {\n\t          // There is currently no CheckboxElement or RadioElement in loris/jsx/Form.js and therefore\n\t          // this is not possible.     \n\t        }\n\t      });\n\t\n\t      return specimenTypeFields;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var updateButton = void 0;\n\t      if (((this.props.data || {}).specimen || {}).collection) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      }\n\t\n\t      var specimenTypeUnits = {};\n\t      var specimenTypeFields = void 0;\n\t      if (this.props.specimen.typeId) {\n\t\n\t        //This modifies the selections for unit drop down based on the chosen\n\t        //specimen type \n\t        for (var id in this.props.specimenTypeUnits[this.props.specimen.typeId]) {\n\t          specimenTypeUnits[id] = this.props.specimenTypeUnits[this.props.specimen.typeId][id].unit;\n\t        }\n\t\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.props.specimen.typeId];\n\t        if (specimenTypeFieldsObject) {\n\t          if (((this.props.specimen || {}).collection || {}).data) {\n\t            specimenTypeFields = this.getSpecimenTypeFields(specimenTypeFieldsObject);\n\t          } else {\n\t            this.addData();\n\t          }\n\t        }\n\t      }\n\t\n\t      var specimenFields = void 0;\n\t      if (this.props.specimen.typeId) {\n\t        specimenFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Quantity',\n\t            onUserInput: this.setCollectionData,\n\t            required: true,\n\t            value: this.props.specimen.collection.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: specimenTypeUnits,\n\t            onUserInput: this.setCollectionData,\n\t            required: true,\n\t            value: this.props.specimen.collection.unitId\n\t          }),\n\t          specimenTypeFields,\n\t          React.createElement(DateElement, {\n\t            name: 'date',\n\t            label: 'Date',\n\t            minYear: '2000',\n\t            maxYear: '2018',\n\t            onUserInput: this.setCollectionData,\n\t            required: true,\n\t            value: this.props.specimen.collection.date\n\t          }),\n\t          React.createElement(TimeElement, {\n\t            name: 'time',\n\t            label: 'Time',\n\t            onUserInput: this.setCollectionData,\n\t            required: true,\n\t            value: this.props.specimen.collection.time\n\t          }),\n\t          React.createElement(TextareaElement, {\n\t            name: 'comments',\n\t            label: 'Comments',\n\t            onUserInput: this.setCollectionData,\n\t            ref: 'comments',\n\t            value: this.props.specimen.collection.comments\n\t          })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankSpecimen',\n\t          onSubmit: this.props.saveSpecimen,\n\t          ref: 'form'\n\t        },\n\t        specimenFields,\n\t        updateButton\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return SpecimenCollectionForm;\n\t}(React.Component);\n\t\n\tSpecimenCollectionForm.propTypes = {\n\t  setSpecimenData: React.PropTypes.func.isRequired,\n\t  saveSpecimen: React.PropTypes.func,\n\t  specimen: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  attributeOptions: React.PropTypes.object.isRequired,\n\t  specimenTypeUnits: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = SpecimenCollectionForm;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _containerDisplay = __webpack_require__(7);\n\t\n\tvar _containerDisplay2 = _interopRequireDefault(_containerDisplay);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Biobank Container Parent Form\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Fetches data from Loris backend and displays a form allowing\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * to specimen a biobank file attached to a specific instrument\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Henri Rabalais\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.0.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\tn\t\n\tvar ContainerParentForm = function (_React$Component) {\n\t  _inherits(ContainerParentForm, _React$Component);\n\t\n\t  function ContainerParentForm() {\n\t    _classCallCheck(this, ContainerParentForm);\n\t\n\t    return _possibleConstructorReturn(this, (ContainerParentForm.__proto__ || Object.getPrototypeOf(ContainerParentForm)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(ContainerParentForm, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var containerDisplay = void 0;\n\t      var containerBarcodesNonPrimary = this.props.mapFormOptions(this.props.containersNonPrimary, 'barcode');\n\t      var parentContainerField = React.createElement(SelectElement, {\n\t        name: 'parentContainerId',\n\t        label: 'Parent Container Barcode',\n\t        options: containerBarcodesNonPrimary,\n\t        onUserInput: this.props.setContainerData,\n\t        required: true,\n\t        value: this.props.container.parentContainerId\n\t      });\n\t\n\t      if (this.props.container.parentContainerId) {\n\t        var dimensionId = this.props.containersNonPrimary[this.props.container.parentContainerId].dimensionId;\n\t\n\t        if (dimensionId) {\n\t          // This will eventually become unecessary\n\t          var dimensions = this.props.containerDimensions[dimensionId];\n\t\n\t          // Total coordinates is determined by the product of the dimensions\n\t          var coordinatesTotal = 1;\n\t          for (var dimension in dimensions) {\n\t            coordinatesTotal = coordinatesTotal * dimensions[dimension];\n\t          }\n\t\n\t          // Mapping of options for the SelectElement\n\t          var coordinates = {};\n\t          for (var i = 1; i <= coordinatesTotal; i++) {\n\t            // If the coordinate is already taken, skip it.\n\t            // this doubling of if statements seems unnecessary\n\t            if (this.props.containerCoordinates[this.props.container.parentContainerId]) {\n\t              if (this.props.containerCoordinates[this.props.container.parentContainerId][i]) {\n\t                continue;\n\t              }\n\t            }\n\t\n\t            coordinates[i] = i;\n\t          }\n\t\n\t          containerDisplay = React.createElement(_containerDisplay2.default, {\n\t            dimensions: this.props.containerDimensions[this.props.containersNonPrimary[this.props.container.parentContainerId].dimensionId],\n\t            coordinates: this.props.containerCoordinates[this.props.container.parentContainerId],\n\t            containerTypes: this.props.containerTypes,\n\t            containerStati: this.props.containerStati,\n\t            select: true,\n\t            selectedCoordinate: this.props.container.coordinate,\n\t            setContainerData: this.props.setContainerData\n\t          });\n\t        }\n\t      }\n\t\n\t      var updateButton = void 0;\n\t      if ((this.props.data || {}).container) {\n\t        updateButton = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement('br', null),\n\t          React.createElement(ButtonElement, { label: 'Update' })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          onSubmit: this.props.saveContainer\n\t        },\n\t        parentContainerField,\n\t        containerDisplay,\n\t        updateButton\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return ContainerParentForm;\n\t}(React.Component);\n\t\n\tContainerParentForm.propTypes = {\n\t  mapFormOptions: React.PropTypes.func.isRequired,\n\t  setContainerData: React.PropTypes.func.isRequired,\n\t  saveContainer: React.PropTypes.func,\n\t  data: React.PropTypes.object,\n\t  container: React.PropTypes.object.isRequired,\n\t  containersNonPrimary: React.PropTypes.object.isRequired,\n\t  containerDimensions: React.PropTypes.object.isRequired,\n\t  containerCoordinates: React.PropTypes.object.isRequired,\n\t  containerTypes: React.PropTypes.object,\n\t  containerStati: React.PropTypes.object\n\t};\n\t\n\texports.default = ContainerParentForm;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * ContainerDisplay\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar ContainerDisplay = function (_React$Component) {\n\t  _inherits(ContainerDisplay, _React$Component);\n\t\n\t  function ContainerDisplay() {\n\t    _classCallCheck(this, ContainerDisplay);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ContainerDisplay.__proto__ || Object.getPrototypeOf(ContainerDisplay)).call(this));\n\t\n\t    _this.redirectURL = _this.redirectURL.bind(_this);\n\t    _this.drag = _this.drag.bind(_this);\n\t    _this.drop = _this.drop.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ContainerDisplay, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      $('[data-toggle=\"tooltip\"]').tooltip();\n\t    }\n\t  }, {\n\t    key: 'componenDidUpdate',\n\t    value: function componenDidUpdate() {\n\t      $('[data-toggle=\"tooltip\"]').tooltip();\n\t    }\n\t  }, {\n\t    key: 'redirectURL',\n\t    value: function redirectURL(e) {\n\t      var coordinate = e.target.id;\n\t      if (this.props.coordinates[coordinate]) {\n\t        var type = this.props.types[this.props.children[this.props.coordinates[coordinate]].typeId].primary ? 'specimen' : 'container';\n\t        var url = loris.BaseURL + '/biobank/' + type + '/?barcode=' + this.props.children[this.props.coordinates[coordinate]].barcode;\n\t\n\t        window.location.href = url;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'allowDrop',\n\t    value: function allowDrop(e) {\n\t      e.preventDefault();\n\t    }\n\t  }, {\n\t    key: 'drag',\n\t    value: function drag(e) {\n\t      var container = JSON.stringify(this.props.children[this.props.coordinates[e.target.id]]);\n\t      e.dataTransfer.setData(\"text/plain\", container);\n\t    }\n\t  }, {\n\t    key: 'drop',\n\t    value: function drop(e) {\n\t      e.preventDefault();\n\t\n\t      var container = JSON.parse(e.dataTransfer.getData(\"text/plain\"));\n\t      var newCoordinate = parseInt(e.target.id);\n\t\n\t      container.coordinate = newCoordinate;\n\t\n\t      this.props.saveChildContainer(container);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      // This is eventually need to be reworked and cleaned up\n\t      var column = [];\n\t      var row = [];\n\t      var display = void 0;\n\t      var coordinate = 1;\n\t      if (this.props.dimensions) {\n\t        for (var y = 0; y < this.props.dimensions.y; y++) {\n\t          column = [];\n\t          for (var x = 1; x <= this.props.dimensions.x; x++) {\n\t\n\t            var nodeWidth = 500 / this.props.dimensions.x - 500 / this.props.dimensions.x * 0.08;\n\t            var nodeStyle = { width: nodeWidth };\n\t            var nodeClass = 'node';\n\t            var tooltipTitle = null;\n\t            var dataHtml = 'false';\n\t            var dataToggle = null;\n\t            var dataPlacement = null;\n\t            var draggable = 'false';\n\t            var onDragStart = null;\n\t            var onDragOver = this.allowDrop;\n\t            var onDrop = this.drop;\n\t            var onClick = null;\n\t\n\t            if (!this.props.select) {\n\t              // This double if statement doesn't sound great\n\t              if (this.props.coordinates) {\n\t                if (this.props.coordinates[coordinate]) {\n\t                  nodeClass = 'node occupied';\n\t                  dataHtml = 'true';\n\t                  dataToggle = 'tooltip';\n\t                  dataPlacement = 'top';\n\t                  tooltipTitle = '<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + '<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + '<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n\t                  draggable = 'true';\n\t                  onDragStart = this.drag;\n\t                  onDragOver = null;\n\t                  onDrop = null;\n\t                  onClick = this.redirectURL;\n\t                }\n\t              }\n\t            }\n\t\n\t            if (this.props.select) {\n\t              if (coordinate == this.props.selectedCoordinate) {\n\t                nodeClass = 'node occupied';\n\t              } else if (!this.props.coordinates) {\n\t                nodeClass = 'node available';\n\t                onClick = function onClick(e) {\n\t                  return _this2.props.setContainerData('coordinate', e.target.id);\n\t                };\n\t              } else if (this.props.coordinates) {\n\t                if (!this.props.coordinates[coordinate]) {\n\t                  nodeClass = 'node available';\n\t                  onClick = function onClick(e) {\n\t                    return _this2.props.setContainerData('coordinate', e.target.id);\n\t                  };\n\t                } else if (this.props.coordinates[coordinate]) {\n\t                  // TODO: --- This is currently not working ---\n\t                  //  dataHtml = 'true';\n\t                  //  dataToggle = 'tooltip';\n\t                  //  dataPlacement = 'top';\n\t                  //  tooltipTitle = \n\t                  //'<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + \n\t                  //'<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + \n\t                  //'<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n\t                }\n\t              }\n\t            }\n\t\n\t            var coordinateDisplay = void 0;\n\t            if (true) {\n\t              coordinateDisplay = x + this.props.dimensions.x * y;\n\t            } else if (false) {\n\t              coordinateDisplay = String.fromCharCode(65 + y) + '' + x;\n\t            }\n\t\n\t            column.push(React.createElement(\n\t              'div',\n\t              {\n\t                id: coordinate,\n\t                className: nodeClass,\n\t                'data-html': dataHtml,\n\t                'data-toggle': dataToggle,\n\t                'data-placement': dataPlacement,\n\t                'data-original-title': tooltipTitle,\n\t                style: nodeStyle,\n\t                onClick: onClick,\n\t                draggable: draggable,\n\t                onDragStart: onDragStart,\n\t                onDragOver: onDragOver,\n\t                onDrop: onDrop\n\t              },\n\t              coordinateDisplay\n\t            ));\n\t\n\t            coordinate++;\n\t          }\n\t\n\t          var rowHeight = 500 / this.props.dimensions.y - 500 / this.props.dimensions.y * 0.08;\n\t          var rowMargin = 500 / this.props.dimensions.y * 0.04;\n\t          var rowStyle = {\n\t            height: rowHeight\n\t          };\n\t\n\t          row.push(React.createElement(\n\t            'div',\n\t            {\n\t              className: 'row',\n\t              style: rowStyle\n\t            },\n\t            column\n\t          ));\n\t        }\n\t\n\t        display = row;\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { className: 'display' },\n\t        display\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return ContainerDisplay;\n\t}(React.Component);\n\t\n\tContainerDisplay.propTypes = {};\n\t\n\texports.default = ContainerDisplay;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _barcodeForm = __webpack_require__(4);\n\t\n\tvar _barcodeForm2 = _interopRequireDefault(_barcodeForm);\n\t\n\tvar _specimenForm = __webpack_require__(3);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tvar _preparationForm = __webpack_require__(9);\n\t\n\tvar _preparationForm2 = _interopRequireDefault(_preparationForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Pool Specimen Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\tvar PoolSpecimenForm = function (_React$Component) {\n\t  _inherits(PoolSpecimenForm, _React$Component);\n\t\n\t  function PoolSpecimenForm(props) {\n\t    _classCallCheck(this, PoolSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (PoolSpecimenForm.__proto__ || Object.getPrototypeOf(PoolSpecimenForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      barcodeList: {},\n\t      errorMessage: null,\n\t      formErrors: {},\n\t      barcodeCount: 2,\n\t      preparation: false,\n\t      step: 1\n\t    };\n\t\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    _this.validateForm = _this.validateForm.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setPreparationFormData = _this.setPreparationFormData.bind(_this);\n\t    _this.setSpecimenFormData = _this.setSpecimenFormData.bind(_this);\n\t    _this.submitForm = _this.submitForm.bind(_this);\n\t    _this.setBarcodeCount = _this.setBarcodeCount.bind(_this);\n\t    _this.next = _this.next.bind(_this);\n\t    _this.previous = _this.previous.bind(_this);\n\t    _this.addPreparation = _this.addPreparation.bind(_this);\n\t    _this.removePreparation = _this.removePreparation.bind(_this);\n\t    _this.validate = _this.validate.bind(_this);\n\t    _this.formSwitch = _this.formSwitch.bind(_this);\n\t    _this.preparationSwitch = _this.preparationSwitch.bind(_this);\n\t    _this.runAjax = _this.runAjax.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(PoolSpecimenForm, [{\n\t    key: 'next',\n\t    value: function next() {\n\t      var _this2 = this;\n\t\n\t      this.validate().then(function (data) {\n\t        _this2.setState({\n\t          poolData: data,\n\t          step: _this2.state.step + 1\n\t        });\n\t      }, function (error) {\n\t        swal(\"Oops!\", error.responseText, \"error\");\n\t      });\n\t    }\n\t  }, {\n\t    key: 'previous',\n\t    value: function previous() {\n\t      this.setState({\n\t        step: this.state.step - 1\n\t      });\n\t    }\n\t  }, {\n\t    key: 'validate',\n\t    value: function validate() {\n\t      return this.runAjax(this.props.specimenRequest, { barcodeList: this.state.barcodeList });\n\t    }\n\t  }, {\n\t    key: 'runAjax',\n\t    value: function runAjax(url, inputData) {\n\t      var _this3 = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        $.ajax(url, {\n\t          method: \"GET\",\n\t          dataType: 'json',\n\t          data: inputData,\n\t          success: function (data) {\n\t            resolve(data);\n\t          }.bind(_this3),\n\t          error: function error(_error, textStatus, errorThrown) {\n\t            reject(_error);\n\t            console.error(_error);\n\t          }\n\t        });\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setBarcodeCount',\n\t    value: function setBarcodeCount(field, value) {\n\t      var barcodeCount = value;\n\t      var barcodeList = this.state.barcodeList;\n\t      for (var barcode in barcodeList) {\n\t        if (barcode > barcodeCount) {\n\t          delete barcodeList[barcode];\n\t        }\n\t      }\n\t\n\t      this.setState({ barcodeCount: barcodeCount, barcodeList: barcodeList });\n\t    }\n\t  }, {\n\t    key: 'formSwitch',\n\t    value: function formSwitch(inputForm, specimenForm) {\n\t      switch (this.state.step) {\n\t        case 1:\n\t          return inputForm;\n\t        case 2:\n\t          return specimenForm;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'preparationSwitch',\n\t    value: function preparationSwitch(preparationButton, preparationForm) {\n\t      switch (this.state.preparation) {\n\t        case false:\n\t          return preparationButton;\n\t        case true:\n\t          return preparationForm;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'addPreparation',\n\t    value: function addPreparation() {\n\t      var _this4 = this;\n\t\n\t      this.validate().then(function (data) {\n\t        _this4.setState({\n\t          poolData: data,\n\t          preparation: true\n\t        });\n\t      }, function (error) {\n\t        swal('Oh no!', error.responseText, 'error');\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removePreparation',\n\t    value: function removePreparation() {\n\t      var formData = this.state.formData;\n\t      //TODO: is it better to set it to empty, or delete it?\n\t      formData.preparationForm = {};\n\t      this.setState({\n\t        preparation: false,\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      //Generates barcodes\n\t      var barcodes = [];\n\t      for (var i = 1; i <= this.state.barcodeCount; i++) {\n\t        barcodes.push(React.createElement(TextboxElement, {\n\t          name: i,\n\t          label: 'Barcode ' + i,\n\t          onUserInput: this.setFormData,\n\t          required: true,\n\t          value: this.state.barcodeList[i],\n\t          errorMessage: this.state.formErrors[i]\n\t        }));\n\t      }\n\t\n\t      var preparationButton = React.createElement(\n\t        'div',\n\t        { className: 'row' },\n\t        React.createElement('div', { className: 'col-xs-4' }),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-xs 4 action' },\n\t          React.createElement(\n\t            'span',\n\t            { className: 'action' },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                className: 'action-button add',\n\t                onClick: this.addPreparation\n\t              },\n\t              '+'\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'action-title' },\n\t            'Add Preparation'\n\t          )\n\t        )\n\t      );\n\t\n\t      var preparationForm = void 0;\n\t      if (this.state.poolData) {\n\t\n\t        var specimenProtocolAttributes = this.props.specimenProtocolAttributes[this.state.poolData.typeId];\n\t\n\t        var specimenProtocols = {};\n\t        for (var id in specimenProtocolAttributes) {\n\t          specimenProtocols[id] = this.props.specimenProtocols[id];\n\t        }\n\t        specimenProtocols = this.props.mapFormOptions(specimenProtocols, 'protocol');\n\t\n\t        preparationForm = React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-sm-9 col-sm-offset-1' },\n\t            React.createElement(_preparationForm2.default, {\n\t              formData: this.state.formData.preparationForm,\n\t              specimenProtocols: specimenProtocols,\n\t              specimenProtocolAttributes: specimenProtocolAttributes,\n\t              attributeDatatypes: this.props.attributeDatatypes,\n\t              attributeOptions: this.props.attributeOptions,\n\t              setParentFormData: this.setPreparationFormData,\n\t              insertAction: loris.BaseURL + '/biobank/ajax/submitData.php?action=insertSpecimenPreparation'\n\t            }),\n\t            React.createElement(\n\t              'a',\n\t              { className: 'pull-right', style: { cursor: 'pointer' }, onClick: this.removePreparation },\n\t              'Cancel Preparation'\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      var inputForm = React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-sm-9 col-sm-offset-1' },\n\t            React.createElement(StaticElement, {\n\t              label: 'Pooling Note',\n\t              text: 'Select or Scan the specimens to be pooled. Please ensure that they are the same type, and share the same PSCID and Visit Label'\n\t            }),\n\t            React.createElement(NumericElement, {\n\t              label: '\\u2116 of Specimens',\n\t              min: '2',\n\t              max: '100',\n\t              value: this.state.barcodeCount,\n\t              onUserInput: this.setBarcodeCount\n\t            }),\n\t            barcodes\n\t          )\n\t        ),\n\t        this.preparationSwitch(preparationButton, preparationForm),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-sm-3 col-xs-offset-9 action' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'action-title' },\n\t            'Next'\n\t          ),\n\t          React.createElement(\n\t            'span',\n\t            { className: 'action' },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                className: 'action-button update',\n\t                onClick: this.next\n\t              },\n\t              React.createElement('span', { className: 'glyphicon glyphicon-chevron-right' })\n\t            )\n\t          )\n\t        )\n\t      );\n\t\n\t      //TODO: Things here need to be in the proper order!!!\n\t      var specimenForm = void 0;\n\t      if (this.state.poolData) {\n\t\n\t        // This is to provide the options for the output specimens\n\t        var specimenTypes = {};\n\t        if (this.state.poolData.typeId) {\n\t          specimenTypes[this.state.poolData.typeId] = this.props.specimenTypes[this.state.poolData.typeId];\n\t        }\n\t\n\t        var pscid = this.props.pSCIDs[this.state.poolData.candidateId];\n\t        var visit = this.props.sessionData[pscid].visits[this.state.poolData.sessionId];\n\t\n\t        var barcodesArray = Object.values(this.state.barcodeList);\n\t        var barcodesString = barcodesArray.join(', ');\n\t\n\t        // TODO: rather than all specimen units this should really be specific to the\n\t        // type\n\t        var specimenUnits = this.props.mapFormOptions(this.props.specimenUnits, 'unit');\n\t\n\t        specimenForm = React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-12' },\n\t            React.createElement(_specimenForm2.default, {\n\t              formData: this.state.formData.specimenForm,\n\t              candidateId: this.state.poolData.candidateId,\n\t              pscid: pscid,\n\t              sessionId: this.state.poolData.sessionId,\n\t              visit: visit,\n\t              parentSpecimenBarcodes: barcodesString,\n\t              parentSpecimenIds: this.state.poolData.specimenIds,\n\t              specimenTypes: specimenTypes,\n\t              specimenTypeUnits: this.props.specimenTypeUnits,\n\t              specimenUnits: specimenUnits,\n\t              containerTypesPrimary: this.props.containerTypesPrimary,\n\t              containersNonPrimary: this.props.containersNonPrimary,\n\t              specimenTypeAttributes: this.props.specimenTypeAttributes,\n\t              attributeDatatypes: this.props.attributeDatatypes,\n\t              attributeOptions: this.props.attributeOptions,\n\t              capacities: this.props.capacities,\n\t              containerDimensions: this.props.containerDimensions,\n\t              containerCoordinates: this.props.containerCoordinates,\n\t              setParentFormData: this.setSpecimenFormData,\n\t              action: loris.BaseURL + '/biobank/ajax/submitData.php?action=submitSpecimen',\n\t              refreshParent: this.props.refreshParent\n\t            }),\n\t            React.createElement(ButtonElement, {\n\t              label: 'Submit'\n\t            })\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-sm-3 col-xs-offset-2 action' },\n\t            React.createElement(\n\t              'span',\n\t              { className: 'action' },\n\t              React.createElement(\n\t                'div',\n\t                {\n\t                  className: 'action-button update',\n\t                  onClick: this.previous\n\t                },\n\t                React.createElement('span', { className: 'glyphicon glyphicon-chevron-left' })\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'action-title' },\n\t              'Previous'\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'poolSpecimenForm',\n\t          id: 'poolSpecimenForm',\n\t          onSubmit: this.handleSubmit,\n\t          ref: 'form'\n\t        },\n\t        this.formSwitch(inputForm, specimenForm)\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t  }, {\n\t    key: 'validateForm',\n\t    value: function validateForm(formElement, value) {\n\t      var _this5 = this;\n\t\n\t      var formErrors = this.state.formErrors;\n\t\n\t      //validate barcode regex\n\t      if (formElement === \"barcode\" && value !== \"\") {\n\t        if (!/^hello/.test(this.state.formData.barcode)) {\n\t          formErrors.barcode = true;\n\t        } else {\n\t          formErrors.barcode = false;\n\t        }\n\t      }\n\t\n\t      //validate that quantity is a number and less than capacity\n\t      if (formElement === \"quantity\" && value !== \"\") {\n\t        if (isNaN(value) || value > this.props.capacities[this.state.currentContainerType]) {\n\t          formErrors.quantity = true;\n\t        } else {\n\t          formErrors.quantity = false;\n\t        }\n\t      }\n\t\n\t      //validate datatypes and regex of generated type attributes\n\t      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t      var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t\n\t        var datatype = _this5.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"number\") {\n\t          if (formElement === attribute) {\n\t            if (isNaN(value) && value !== \"\") {\n\t              formErrors[attribute] = true;\n\t            } else {\n\t              formErrors[attribute] = false;\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      this.setState({\n\t        formErrors: formErrors\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Handle form submission\n\t     * @param {object} e - Form submission event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      this.submitForm();\n\t    }\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'submitForm',\n\t    value: function submitForm() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var preparationForm = this.state.formData.preparationForm;\n\t      var specimenForm = this.state.formData.specimenForm;\n\t      formData['preparationForm'] = JSON.stringify(preparationForm);\n\t      formData['specimenForm'] = JSON.stringify(specimenForm);\n\t\n\t      console.log(formData.specimenForm);\n\t      console.log(formData.preparationForm);\n\t\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          //this.props.refreshParent();\n\t          swal(\"Specimens Pooled Successful!\", \"\", \"success\");\n\t          this.props.onSuccess();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Checks if the inputted file name is valid\n\t     *\n\t     * @param {string} requiredFileName - Required file name\n\t     * @param {string} fileName - Provided file name\n\t     * @return {boolean} - true if fileName starts with requiredFileName, false\n\t     *   otherwise\n\t     */\n\t    //  isValidFileName(requiredFileName, fileName) {\n\t    //    if (fileName === null || requiredFileName === null) {\n\t    //      return false;\n\t    //    }\n\t    //\n\t    //    return (fileName.indexOf(requiredFileName) === 0);\n\t    //  }\n\t\n\t    /**\n\t     * Validate the form\n\t     *\n\t     * @param {object} formRefs - Object containing references to React form elements\n\t     * @param {object} formData - Object containing form data inputed by user\n\t     * @return {boolean} - true if all required fields are filled, false otherwise\n\t     */\n\t\n\t  }, {\n\t    key: 'isValidForm',\n\t    value: function isValidForm(formRefs, formData) {\n\t      var isValidForm = true;\n\t\n\t      var requiredFields = {\n\t        pscid: null,\n\t        visitLabel: null\n\t      };\n\t\n\t      Object.keys(requiredFields).map(function (field) {\n\t        if (formData[field]) {\n\t          requiredFields[field] = formData[field];\n\t        } else if (formRefs[field]) {\n\t          formRefs[field].props.hasError = true;\n\t          isValidForm = false;\n\t        }\n\t      });\n\t      this.forceUpdate();\n\t\n\t      return isValidForm;\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      // This lets the modal window know that there is formData\n\t      // and will cause a warning to be thrown of the modal window\n\t      // is exited\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t\n\t      if (formElement === \"pscid\" && value !== \"\" && value !== undefined) {\n\t        this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n\t      }\n\t\n\t      var formData = this.state.formData;\n\t      var barcodeList = this.state.barcodeList;\n\t\n\t      //TODO: there must be a better way to do this\n\t      if (isNaN(formElement)) {\n\t        formData[formElement] = value;\n\t      } else {\n\t        barcodeList[formElement] = value;\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData,\n\t        barcodeList: barcodeList\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setPreparationFormData',\n\t    value: function setPreparationFormData(preparationFormData) {\n\t      var formData = this.state.formData;\n\t      formData.preparationForm = preparationFormData;\n\t\n\t      this.setState({ formData: formData });\n\t    }\n\t  }, {\n\t    key: 'setSpecimenFormData',\n\t    value: function setSpecimenFormData(specimenFormData) {\n\t      var formData = this.state.formData;\n\t      formData.specimenForm = specimenFormData;\n\t\n\t      this.setState({ formData: formData });\n\t    }\n\t  }]);\n\t\n\t  return PoolSpecimenForm;\n\t}(React.Component);\n\t\n\tPoolSpecimenForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired,\n\t  refreshTable: React.PropTypes.func\n\t};\n\t\n\texports.default = PoolSpecimenForm;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenPreparationForm = function (_React$Component) {\n\t  _inherits(SpecimenPreparationForm, _React$Component);\n\t\n\t  function SpecimenPreparationForm() {\n\t    _classCallCheck(this, SpecimenPreparationForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenPreparationForm.__proto__ || Object.getPrototypeOf(SpecimenPreparationForm)).call(this));\n\t\n\t    _this.getSpecimenProtocolFields = _this.getSpecimenProtocolFields.bind(_this);\n\t    _this.setPreparation = _this.setPreparation.bind(_this);\n\t    _this.addData = _this.addData.bind(_this);\n\t    _this.setData = _this.setData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenPreparationForm, [{\n\t    key: 'setPreparation',\n\t    value: function setPreparation(name, value) {\n\t      var preparation = this.props.specimen.preparation;\n\t      preparation[name] = value;\n\t      this.props.setSpecimenData('preparation', preparation);\n\t    }\n\t  }, {\n\t    key: 'addData',\n\t    value: function addData() {\n\t      var preparation = this.props.specimen.preparation;\n\t      preparation.data = {};\n\t      this.props.setSpecimenData('preparation', preparation);\n\t    }\n\t  }, {\n\t    key: 'setData',\n\t    value: function setData(name, value) {\n\t      var data = this.props.specimen.preparation.data;\n\t      data[name] = value;\n\t      this.setPreparation('data', data);\n\t    }\n\t\n\t    // TODO: decouple this code from the collectionForm by make it a React Component\n\t    // This generates all the form fields for a given specimen protocol\n\t\n\t  }, {\n\t    key: 'getSpecimenProtocolFields',\n\t    value: function getSpecimenProtocolFields(fieldsObject) {\n\t      var _this2 = this;\n\t\n\t      var specimenProtocolFields = Object.keys(fieldsObject).map(function (attribute) {\n\t        var datatype = _this2.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\t\n\t        if (datatype === \"text\" || datatype === \"number\") {\n\t          if (fieldsObject[attribute]['refTableId'] == null) {\n\t            return React.createElement(TextboxElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              onUserInput: _this2.setData,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this2.props.specimen.preparation.data[attribute]\n\t            });\n\t          }\n\t\n\t          if (fieldsObject[attribute]['refTableId'] !== null) {\n\t            return React.createElement(SelectElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              options: _this2.props.attributeOptions[fieldsObject[attribute]['refTableId']],\n\t              onUserInput: _this2.setData,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this2.props.specimen.preparation.data[attribute]\n\t            });\n\t          }\n\t        }\n\t\n\t        if (datatype === \"datetime\") {\n\t          return React.createElement(DateElement, {\n\t            name: attribute,\n\t            label: fieldsObject[attribute]['name'],\n\t            onUserInput: _this2.setData,\n\t            ref: attribute,\n\t            required: fieldsObject[attribute]['required'],\n\t            value: _this2.props.specimen.preparation.data[attribute]\n\t          });\n\t        }\n\t\n\t        if (datatype === \"boolean\") {}\n\t      });\n\t\n\t      return specimenProtocolFields;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      var submitButton = void 0;\n\t      if (this.props.data.specimen.preparation) {\n\t        submitButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      } else {\n\t        submitButton = React.createElement(ButtonElement, { label: 'Submit' });\n\t      }\n\t\n\t      var specimenProtocolFields = void 0;\n\t      if (this.props.specimen.preparation.protocolId) {\n\t        var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.props.specimen.preparation.protocolId];\n\t\n\t        if (specimenProtocolFieldsObject) {\n\t          if (this.props.specimen.preparation.data) {\n\t            specimenProtocolFields = this.getSpecimenProtocolFields(specimenProtocolFieldsObject);\n\t          } else {\n\t            this.addData();\n\t          }\n\t        }\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenPreparation',\n\t          onSubmit: this.props.saveSpecimen,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(SelectElement, {\n\t          name: 'protocolId',\n\t          label: 'Protocol',\n\t          options: this.props.specimenProtocols,\n\t          onUserInput: this.setPreparation,\n\t          required: true,\n\t          value: this.props.specimen.preparation.protocolId\n\t        }),\n\t        specimenProtocolFields,\n\t        React.createElement(DateElement, {\n\t          name: 'date',\n\t          label: 'Date',\n\t          onUserInput: this.setPreparation,\n\t          required: true,\n\t          value: this.props.specimen.preparation.date\n\t        }),\n\t        React.createElement(TimeElement, {\n\t          name: 'time',\n\t          label: 'Time',\n\t          onUserInput: this.setPreparation,\n\t          required: true,\n\t          value: this.props.specimen.preparation.time\n\t        }),\n\t        React.createElement(TextareaElement, {\n\t          name: 'comments',\n\t          label: 'Comments',\n\t          onUserInput: this.setPreparation,\n\t          value: this.props.specimen.preparation.comments\n\t        }),\n\t        submitButton\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return SpecimenPreparationForm;\n\t}(React.Component);\n\t\n\tSpecimenPreparationForm.propTypes = {};\n\t\n\texports.default = SpecimenPreparationForm;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _containerBarcodeForm = __webpack_require__(11);\n\t\n\tvar _containerBarcodeForm2 = _interopRequireDefault(_containerBarcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankContainerForm = function (_React$Component) {\n\t  _inherits(BiobankContainerForm, _React$Component);\n\t\n\t  function BiobankContainerForm(props) {\n\t    _classCallCheck(this, BiobankContainerForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankContainerForm.__proto__ || Object.getPrototypeOf(BiobankContainerForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formErrors: {},\n\t      errorMessage: null,\n\t      containerList: { 1: {} },\n\t      countContainers: 1,\n\t      collapsed: { 1: true },\n\t      copyMultiplier: 1\n\t    };\n\t\n\t    _this.toggleCollapse = _this.toggleCollapse.bind(_this);\n\t    _this.addContainer = _this.addContainer.bind(_this);\n\t    _this.setContainer = _this.setContainer.bind(_this);\n\t    _this.setCopyMultiplier = _this.setCopyMultiplier.bind(_this);\n\t    _this.copyContainer = _this.copyContainer.bind(_this);\n\t    _this.removeContainer = _this.removeContainer.bind(_this);\n\t    _this.saveContainerList = _this.saveContainerList.bind(_this);\n\t    _this.save = _this.save.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankContainerForm, [{\n\t    key: 'toggleCollapse',\n\t    value: function toggleCollapse(key) {\n\t      var collapsed = this.state.collapsed;\n\t      collapsed[key] = !collapsed[key];\n\t      this.setState({ collapsed: collapsed });\n\t    }\n\t  }, {\n\t    key: 'saveContainerList',\n\t    value: function saveContainerList() {\n\t      var _this2 = this;\n\t\n\t      var containerList = this.state.containerList;\n\t      var availableId = Object.keys(this.props.containerStati).find(function (key) {\n\t        return _this2.props.containerStati[key] === 'Available';\n\t      });\n\t\n\t      for (var container in containerList) {\n\t        containerList[container].statusId = availableId;\n\t        containerList[container].temperature = 20;\n\t        this.save(containerList[container], this.props.saveContainer).then(function () {\n\t          _this2.props.refreshParent();_this2.props.onSuccess();\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'save',\n\t    value: function save(data, url) {\n\t      var _this3 = this;\n\t\n\t      return new Promise(function (resolve) {\n\t        $.ajax({\n\t          type: 'POST',\n\t          url: url,\n\t          data: { data: JSON.stringify(data) },\n\t          cache: false,\n\t          success: function success() {\n\t            resolve();\n\t            swal(\"Container Submission Successful!\", \"\", \"success\");\n\t          },\n\t          error: function (err) {\n\t            console.error(err);\n\t            var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t            this.setState({\n\t              errorMessage: msg\n\t            });\n\t            swal(msg, \"\", \"error\");\n\t          }.bind(_this3)\n\t        });\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setContainer',\n\t    value: function setContainer(name, value, key) {\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t      var siteId = this.state.siteId;\n\t      var containerList = this.state.containerList;\n\t      if (name === 'siteId') {\n\t        siteId = value;\n\t        for (var container in containerList) {\n\t          containerList[container].originId = siteId;\n\t          containerList[container].locationId = siteId;\n\t        }\n\t      } else {\n\t        containerList[key][name] = value;\n\t      }\n\t      this.setState({ containerList: containerList, siteId: siteId });\n\t    }\n\t  }, {\n\t    key: 'addContainer',\n\t    value: function addContainer() {\n\t      var _this4 = this;\n\t\n\t      var containerList = this.state.containerList;\n\t      var count = this.state.countContainers;\n\t      var collapsed = this.state.collapsed;\n\t      var siteId = this.state.siteId;\n\t      var temperature = 20;\n\t\n\t      // get Id of available status\n\t      var statusId = Object.keys(this.props.containerStati).find(function (key) {\n\t        return _this4.props.containerStati[key] === 'Available';\n\t      });\n\t\n\t      containerList[count + 1] = {\n\t        statusId: statusId,\n\t        originId: siteId,\n\t        locationId: siteId,\n\t        temperature: temperature\n\t      };\n\t\n\t      collapsed[count + 1] = true;\n\t\n\t      this.setState({\n\t        containerList: containerList,\n\t        countContainers: count + 1,\n\t        collapsed: collapsed\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setCopyMultiplier',\n\t    value: function setCopyMultiplier(e) {\n\t      var copyMultiplier = e.target.value;\n\t      this.setState({ copyMultiplier: copyMultiplier });\n\t    }\n\t  }, {\n\t    key: 'copyContainer',\n\t    value: function copyContainer(key) {\n\t      var count = this.state.countContainers;\n\t      var collapsed = this.state.collapsed;\n\t      var nextKey = count + 1;\n\t      var containerList = this.state.containerList;\n\t      var multiplier = this.state.copyMultiplier;\n\t\n\t      for (var i = 1; i <= multiplier; i++) {\n\t        containerList[nextKey] = JSON.parse(JSON.stringify(containerList[key]));\n\t        delete containerList[nextKey].barcode;\n\t        collapsed[nextKey] = true;\n\t        nextKey++;\n\t      }\n\t\n\t      this.setState({\n\t        containerList: containerList,\n\t        countContainers: nextKey,\n\t        collapsed: collapsed\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removeContainer',\n\t    value: function removeContainer(key) {\n\t      var containerList = this.state.containerList;\n\t      delete containerList[key];\n\t      this.setState({ containerList: containerList });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this5 = this;\n\t\n\t      //Generates new Barcode Form everytime the addContainer button is pressed\n\t      var containerListArray = Object.keys(this.state.containerList);\n\t      var containers = [];\n\t      var i = 1;\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        var _loop = function _loop() {\n\t          var key = _step.value;\n\t\n\t          containers.push(React.createElement(_containerBarcodeForm2.default, {\n\t            key: key,\n\t            containerKey: key,\n\t            id: i,\n\t            collapsed: _this5.state.collapsed[key],\n\t            toggleCollapse: _this5.toggleCollapse,\n\t            container: _this5.state.containerList[key] || null,\n\t            removeContainer: containerListArray.length !== 1 ? function () {\n\t              return _this5.removeContainer(key);\n\t            } : null,\n\t            addContainer: i == containerListArray.length ? _this5.addContainer : null,\n\t            setCopyMultiplier: _this5.setCopyMultiplier,\n\t            copyMultiplier: _this5.state.copyMultiplier,\n\t            copyContainer: i == containerListArray.length && _this5.state.containerList[key] ? _this5.copyContainer : null,\n\t            setContainer: _this5.setContainer,\n\t            onChange: _this5.props.onChange,\n\t            containerTypesNonPrimary: _this5.props.containerTypesNonPrimary,\n\t            containerBarcodesNonPrimary: _this5.props.containerBarcodesNonPrimary\n\t          }));\n\t\n\t          i++;\n\t        };\n\t\n\t        for (var _iterator = containerListArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          _loop();\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'containerForm',\n\t          onSubmit: this.saveContainerList,\n\t          ref: 'form'\n\t        },\n\t        React.createElement('br', null),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement(SelectElement, {\n\t              name: 'siteId',\n\t              label: 'Site',\n\t              options: this.props.centers,\n\t              onUserInput: this.setContainer,\n\t              required: true,\n\t              value: this.state.siteId\n\t            })\n\t          )\n\t        ),\n\t        containers,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-xs-3 col-xs-offset-9' },\n\t          React.createElement(ButtonElement, { label: 'Submit' })\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return BiobankContainerForm;\n\t}(React.Component);\n\t\n\tBiobankContainerForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  barcode: React.PropTypes.string,\n\t  refreshTable: React.PropTypes.func\n\t};\n\t\n\texports.default = BiobankContainerForm;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Container Barcode Form\n\t *\n\t * Acts a subform for ContainerForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar ContainerBarcodeForm = function (_React$Component) {\n\t  _inherits(ContainerBarcodeForm, _React$Component);\n\t\n\t  function ContainerBarcodeForm() {\n\t    _classCallCheck(this, ContainerBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ContainerBarcodeForm.__proto__ || Object.getPrototypeOf(ContainerBarcodeForm)).call(this));\n\t\n\t    _this.setContainer = _this.setContainer.bind(_this);\n\t    _this.copy = _this.copy.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ContainerBarcodeForm, [{\n\t    key: 'copy',\n\t    value: function copy() {\n\t      this.props.copyContainer(this.props.containerKey);\n\t    }\n\t\n\t    //TODO: change form.js so this isn't necessary\n\t\n\t  }, {\n\t    key: 'setContainer',\n\t    value: function setContainer(name, value) {\n\t      this.props.setContainer(name, value, this.props.containerKey);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      // HR TODO: All this CSS should eventually be moved\n\t      var addContainerButton = void 0;\n\t      var addContainerText = void 0;\n\t      var copyContainerButton = void 0;\n\t      var copyContainerText = void 0;\n\t      if (this.props.addContainer) {\n\t        addContainerButton = React.createElement(\n\t          'span',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: this.props.addContainer\n\t            },\n\t            '+'\n\t          )\n\t        );\n\t\n\t        addContainerText = React.createElement(\n\t          'span',\n\t          { className: 'action-title' },\n\t          'New Entry'\n\t        );\n\t      }\n\t\n\t      if (this.props.copyContainer) {\n\t        copyContainerButton = React.createElement(\n\t          'span',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: this.copy\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-duplicate' })\n\t          )\n\t        );\n\t        copyContainerText = React.createElement(\n\t          'span',\n\t          { className: 'action-title' },\n\t          React.createElement('input', {\n\t            className: 'form-control input-sm',\n\t            type: 'number',\n\t            min: '1',\n\t            max: '50',\n\t            style: { width: 50, display: 'inline' },\n\t            onChange: this.props.setCopyMultiplier,\n\t            value: this.props.copyMultiplier\n\t          }),\n\t          'Copies'\n\t        );\n\t      }\n\t\n\t      var removeContainerButton = void 0;\n\t      if (this.props.removeContainer) {\n\t        var glyphStyle = {\n\t          color: '#DDDDDD',\n\t          marginLeft: 10,\n\t          cursor: 'pointer',\n\t          fontSize: 15\n\t        };\n\t\n\t        removeContainerButton = React.createElement('span', {\n\t          className: 'glyphicon glyphicon-remove',\n\t          onClick: this.props.removeContainer,\n\t          style: glyphStyle\n\t        });\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'container'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement(\n\t              'div',\n\t              null,\n\t              React.createElement(TextboxElement, {\n\t                name: 'barcode',\n\t                label: 'Barcode ' + this.props.id,\n\t                onUserInput: this.setContainer,\n\t                ref: 'barcode',\n\t                required: true,\n\t                value: this.props.container.barcode\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-1', style: { paddingLeft: 0, marginTop: 10 } },\n\t            React.createElement('span', {\n\t              className: this.props.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up',\n\t              style: { cursor: 'pointer', fontSize: 15, position: 'relative', right: 40 },\n\t              'data-toggle': 'collapse',\n\t              'data-target': '#item-' + this.props.containerKey,\n\t              onClick: function onClick() {\n\t                return _this2.props.toggleCollapse(_this2.props.containerKey);\n\t              }\n\t            }),\n\t            removeContainerButton\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement('div', { className: 'col-xs-2' }),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-9' },\n\t            React.createElement(\n\t              'div',\n\t              { id: 'item-' + this.props.containerKey, className: 'collapse' },\n\t              React.createElement(SelectElement, {\n\t                name: 'typeId',\n\t                label: 'Container Type',\n\t                options: this.props.containerTypesNonPrimary,\n\t                onUserInput: this.setContainer,\n\t                required: true,\n\t                value: this.props.container.typeId\n\t              })\n\t            )\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement('div', { className: 'col-xs-3' }),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-4 action' },\n\t              addContainerButton,\n\t              addContainerText\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-4 action' },\n\t              copyContainerButton,\n\t              copyContainerText\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return ContainerBarcodeForm;\n\t}(React.Component);\n\t\n\tContainerBarcodeForm.propTypes = {};\n\t\n\texports.default = ContainerBarcodeForm;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Tabs component.\n\t *\n\t * @author Loris Team\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Tabs Component.\n\t * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n\t * and corresponding tab panes.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * 1. Define an array of tabs with IDs and labels\n\t *\n\t * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n\t *\n\t * 2. Pass tabList as <Tab> property and <TabPane> as child\n\t *  ```\n\t * <Tabs tabs={tabList} defaultTab=\"tab1\">\n\t *   <TabPane TabId={tabList[0].id}>\n\t *     // Tab content goes here\n\t *   </TabPane>\n\t * </Tabs>\n\t * ```\n\t * =================================================\n\t *\n\t */\n\tvar Tabs = function (_React$Component) {\n\t  _inherits(Tabs, _React$Component);\n\t\n\t  function Tabs(props) {\n\t    _classCallCheck(this, Tabs);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call(this, props));\n\t\n\t    var hash = window.location.hash;\n\t    var activeTab = \"\";\n\t\n\t    /**\n\t     * Determine the initial active tab in this order\n\t     * 1. Try to infer from the URL, otherwise\n\t     * 2. Try to infer from the defaultTab prop, otherwise\n\t     * 3. Set to be the first tab of the list\n\t     */\n\t    if (_this.props.updateURL && hash) {\n\t      activeTab = hash.substr(1);\n\t    } else if (_this.props.defaultTab) {\n\t      activeTab = _this.props.defaultTab;\n\t    } else if (_this.props.tabs.length > 0) {\n\t      activeTab = _this.props.tabs[0].id;\n\t    }\n\t\n\t    _this.state = {\n\t      activeTab: activeTab\n\t    };\n\t\n\t    _this.handleClick = _this.handleClick.bind(_this);\n\t    _this.getTabs = _this.getTabs.bind(_this);\n\t    _this.getTabPanes = _this.getTabPanes.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Tabs, [{\n\t    key: 'handleClick',\n\t    value: function handleClick(tabId, e) {\n\t      this.setState({ activeTab: tabId });\n\t      this.props.onTabChange(tabId);\n\t\n\t      // Add tab href to URL querystring and scroll the page to top\n\t      if (this.props.updateURL) {\n\t        var scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n\t        window.location.hash = e.target.hash;\n\t        $('html,body').scrollTop(scrollDistance);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getTabs',\n\t    value: function getTabs() {\n\t      var tabs = this.props.tabs.map(function (tab) {\n\t        var tabClass = this.state.activeTab === tab.id ? 'active' : null;\n\t        var href = \"#\" + tab.id;\n\t        var tabID = \"tab-\" + tab.id;\n\t        return React.createElement(\n\t          'li',\n\t          {\n\t            role: 'presentation',\n\t            className: tabClass,\n\t            key: tab.id\n\t          },\n\t          React.createElement(\n\t            'a',\n\t            { id: tabID,\n\t              href: href,\n\t              role: 'tab',\n\t              'data-toggle': 'tab',\n\t              onClick: this.handleClick.bind(null, tab.id)\n\t            },\n\t            tab.label\n\t          )\n\t        );\n\t      }.bind(this));\n\t\n\t      return tabs;\n\t    }\n\t  }, {\n\t    key: 'getTabPanes',\n\t    value: function getTabPanes() {\n\t      var tabPanes = React.Children.map(this.props.children, function (child, key) {\n\t        if (child) {\n\t          return React.cloneElement(child, {\n\t            activeTab: this.state.activeTab,\n\t            key: key\n\t          });\n\t        }\n\t      }.bind(this));\n\t\n\t      return tabPanes;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var tabs = this.getTabs();\n\t      var tabPanes = this.getTabPanes();\n\t      var tabStyle = {\n\t        marginLeft: 0,\n\t        marginBottom: '5px'\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'ul',\n\t          { className: 'nav nav-tabs', role: 'tablist', style: tabStyle },\n\t          tabs\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tab-content' },\n\t          tabPanes\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Tabs;\n\t}(React.Component);\n\t\n\tTabs.propTypes = {\n\t  tabs: React.PropTypes.array.isRequired,\n\t  defaultTab: React.PropTypes.string,\n\t  updateURL: React.PropTypes.bool\n\t};\n\tTabs.defaultProps = {\n\t  onTabChange: function onTabChange() {},\n\t  // Set updateURL to default to true but allow for change\n\t  // Nested tabs should set this variable to false\n\t  updateURL: true\n\t};\n\t\n\t/**\n\t * Allows to dynamically render vertical tabs corresponding to tab panes.\n\t */\n\t\n\tvar VerticalTabs = function (_React$Component2) {\n\t  _inherits(VerticalTabs, _React$Component2);\n\t\n\t  function VerticalTabs(props) {\n\t    _classCallCheck(this, VerticalTabs);\n\t\n\t    var _this2 = _possibleConstructorReturn(this, (VerticalTabs.__proto__ || Object.getPrototypeOf(VerticalTabs)).call(this, props));\n\t\n\t    var hash = window.location.hash;\n\t    var activeTab = \"\";\n\t\n\t    /**\n\t     * Determine the initial active tab in this order\n\t     * 1. Try to infer from the URL, otherwise\n\t     * 2. Try to infer from the defaultTab prop, otherwise\n\t     * 3. Set to be the first tab of the list\n\t     */\n\t    if (_this2.props.updateURL && hash) {\n\t      activeTab = hash.substr(1);\n\t    } else if (_this2.props.defaultTab) {\n\t      activeTab = _this2.props.defaultTab;\n\t    } else if (_this2.props.tabs.length > 0) {\n\t      activeTab = _this2.props.tabs[0].id;\n\t    }\n\t\n\t    _this2.state = {\n\t      activeTab: activeTab\n\t    };\n\t\n\t    _this2.handleClick = _this2.handleClick.bind(_this2);\n\t    _this2.getTabs = _this2.getTabs.bind(_this2);\n\t    _this2.getTabPanes = _this2.getTabPanes.bind(_this2);\n\t    return _this2;\n\t  }\n\t\n\t  _createClass(VerticalTabs, [{\n\t    key: 'handleClick',\n\t    value: function handleClick(tabId, e) {\n\t      this.setState({ activeTab: tabId });\n\t      this.props.onTabChange(tabId);\n\t\n\t      // Add tab href to URL querystring and scroll the page to top\n\t      if (this.props.updateURL) {\n\t        var scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n\t        window.location.hash = e.target.hash;\n\t        $('html,body').scrollTop(scrollDistance);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getTabs',\n\t    value: function getTabs() {\n\t      var tabs = this.props.tabs.map(function (tab) {\n\t        var tabClass = this.state.activeTab === tab.id ? 'active' : null;\n\t        var href = \"#\" + tab.id;\n\t        var tabID = \"tab-\" + tab.id;\n\t        return React.createElement(\n\t          'li',\n\t          {\n\t            role: 'presentation',\n\t            className: tabClass,\n\t            key: tab.id\n\t          },\n\t          React.createElement(\n\t            'a',\n\t            { id: tabID,\n\t              href: href,\n\t              role: 'tab',\n\t              'data-toggle': 'tab',\n\t              onClick: this.handleClick.bind(null, tab.id)\n\t            },\n\t            tab.label\n\t          )\n\t        );\n\t      }.bind(this));\n\t\n\t      return tabs;\n\t    }\n\t  }, {\n\t    key: 'getTabPanes',\n\t    value: function getTabPanes() {\n\t      var tabPanes = React.Children.map(this.props.children, function (child, key) {\n\t        if (child) {\n\t          return React.cloneElement(child, {\n\t            activeTab: this.state.activeTab,\n\t            key: key\n\t          });\n\t        }\n\t      }.bind(this));\n\t\n\t      return tabPanes;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var tabs = this.getTabs();\n\t      var tabPanes = this.getTabPanes();\n\t      var tabStyle = {\n\t        marginLeft: 0,\n\t        marginBottom: '5px'\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tabbable col-md-3 col-sm-3' },\n\t          React.createElement(\n\t            'ul',\n\t            { className: 'nav nav-pills nav-stacked', role: 'tablist', style: tabStyle },\n\t            tabs\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tab-content col-md-9 col-sm-9' },\n\t          tabPanes\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return VerticalTabs;\n\t}(React.Component);\n\t\n\tVerticalTabs.propTypes = {\n\t  tabs: React.PropTypes.array.isRequired,\n\t  defaultTab: React.PropTypes.string,\n\t  updateURL: React.PropTypes.bool\n\t};\n\tVerticalTabs.defaultProps = {\n\t  onTabChange: function onTabChange() {},\n\t  // Set updateURL to default to true but allow for change\n\t  // Nested tabs should set this variable to false\n\t  updateURL: true\n\t};\n\t\n\t/*\n\t * TabPane component.\n\t * Used to wrap content for every tab.\n\t */\n\t\n\tvar TabPane = function (_React$Component3) {\n\t  _inherits(TabPane, _React$Component3);\n\t\n\t  function TabPane() {\n\t    _classCallCheck(this, TabPane);\n\t\n\t    return _possibleConstructorReturn(this, (TabPane.__proto__ || Object.getPrototypeOf(TabPane)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(TabPane, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var classList = \"tab-pane\";\n\t      var title = void 0;\n\t\n\t      if (this.props.TabId === this.props.activeTab) {\n\t        classList += \" active\";\n\t      }\n\t      if (this.props.Title) {\n\t        title = React.createElement(\n\t          'h1',\n\t          null,\n\t          this.props.Title\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { role: 'tabpanel', className: classList, id: this.props.TabId },\n\t        title,\n\t        this.props.children\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return TabPane;\n\t}(React.Component);\n\t\n\tTabPane.propTypes = {\n\t  TabId: React.PropTypes.string.isRequired,\n\t  Title: React.PropTypes.string,\n\t  activeTab: React.PropTypes.string\n\t};\n\t\n\texports.Tabs = Tabs;\n\texports.VerticalTabs = VerticalTabs;\n\texports.TabPane = TabPane;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Modal = __webpack_require__(14);\n\t\n\tvar _Modal2 = _interopRequireDefault(_Modal);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file contains React components for Modal component.\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Henri Rabalais\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.1.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/**\n\t * Modal Component.\n\t * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * =================================================\n\t *\n\t */\n\t\n\tvar FormModal = function (_React$Component) {\n\t  _inherits(FormModal, _React$Component);\n\t\n\t  function FormModal() {\n\t    _classCallCheck(this, FormModal);\n\t\n\t    var _this = _possibleConstructorReturn(this, (FormModal.__proto__ || Object.getPrototypeOf(FormModal)).call(this));\n\t\n\t    _this.closeModal = _this.closeModal.bind(_this);\n\t    _this.confirmClose = _this.confirmClose.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(FormModal, [{\n\t    key: \"closeModal\",\n\t    value: function closeModal() {\n\t      this.props.closeAction instanceof Function && this.props.closeAction();\n\t      this.props.toggleModal();\n\t    }\n\t  }, {\n\t    key: \"confirmClose\",\n\t    value: function confirmClose() {\n\t      if (this.props.throwWarning) {\n\t        swal({\n\t          title: \"Are You Sure?\",\n\t          text: \"Leaving the form will result in the loss of any information entered.\",\n\t          type: \"warning\",\n\t          showCancelButton: true,\n\t          confirmButtonText: 'Proceed',\n\t          cancelButtonText: 'Cancel'\n\t        }, function () {\n\t          this.closeModal();\n\t        }.bind(this));\n\t      } else {\n\t        this.closeModal();\n\t      }\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      return React.createElement(\n\t        _Modal2.default,\n\t        _extends({\n\t          closeModal: this.confirmClose,\n\t          show: this.props.show\n\t        }, this.props),\n\t        this.props.children\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return FormModal;\n\t}(React.Component);\n\t\n\tFormModal.propTypes = {\n\t  closeAction: React.PropTypes.func,\n\t  togglemodal: React.PropTypes.func.isRequired,\n\t  throwWarning: React.PropTypes.bool.isRequired\n\t};\n\t\n\tFormModal.defaultProps = {\n\t  throwWarning: true\n\t};\n\t\n\texports.default = FormModal;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Modal component.\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Modal Component.\n\t * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * =================================================\n\t *\n\t */\n\tvar Modal = function (_React$Component) {\n\t  _inherits(Modal, _React$Component);\n\t\n\t  function Modal(props) {\n\t    _classCallCheck(this, Modal);\n\t\n\t    return _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));\n\t  }\n\t\n\t  _createClass(Modal, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      // Black Background with Alpha Channel\n\t      var backdropStyle = {\n\t        position: 'fixed',\n\t        zIndex: 9998,\n\t        top: 0,\n\t        bottom: 0,\n\t        left: 0,\n\t        right: 0,\n\t        backgroundColor: 'rgba(0,0,0,0.3)',\n\t        padding: 50\n\t      };\n\t\n\t      // White Modal Window\n\t      var modalStyle = {\n\t        position: 'relative',\n\t        maxWidth: 1000,\n\t        maxHeight: '100%',\n\t        margin: '0 auto',\n\t        backgroundColor: '#fff',\n\t        borderRadius: 10,\n\t        overflowY: 'auto',\n\t        zIndex: 9999\n\t      };\n\t\n\t      var titleStyle = {\n\t        display: 'flex',\n\t        flexDirection: 'row',\n\t        alignItems: 'center',\n\t        background: '#093782',\n\t        height: '70px',\n\t        borderTopRightRadius: '10',\n\t        color: '#FFFFFF',\n\t        fontSize: 24,\n\t        padding: 20\n\t      };\n\t\n\t      var glyphStyle = {\n\t        marginLeft: 'auto',\n\t        cursor: 'pointer'\n\t      };\n\t\n\t      var bodyStyle = {\n\t        padding: 15\n\t      };\n\t\n\t      var modal = void 0;\n\t      if (this.props.show) {\n\t        modal = React.createElement(\n\t          'div',\n\t          { style: backdropStyle, onClick: this.props.closeModal },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              style: modalStyle,\n\t              onClick: function onClick(e) {\n\t                e.stopPropagation();\n\t              }\n\t            },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                style: titleStyle\n\t              },\n\t              this.props.title,\n\t              React.createElement(\n\t                'span',\n\t                {\n\t                  style: glyphStyle,\n\t                  onClick: this.props.closeModal\n\t                },\n\t                '\\xD7'\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                style: bodyStyle\n\t              },\n\t              this.props.children\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        modal\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Modal;\n\t}(React.Component);\n\t\n\tModal.propTypes = {\n\t  title: React.PropTypes.string,\n\t  show: React.PropTypes.bool.isRequired,\n\t  closeModal: React.PropTypes.func,\n\t  openModal: React.PropTypes.func\n\t};\n\t\n\texports.default = Modal;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Loader\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Loader component\n\t */\n\tvar Loader = function (_React$Component) {\n\t  _inherits(Loader, _React$Component);\n\t\n\t  function Loader(props) {\n\t    _classCallCheck(this, Loader);\n\t\n\t    return _possibleConstructorReturn(this, (Loader.__proto__ || Object.getPrototypeOf(Loader)).call(this, props));\n\t  }\n\t\n\t  _createClass(Loader, [{\n\t    key: \"render\",\n\t    value: function render() {\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"loader-container\" },\n\t        React.createElement(\"div\", { className: \"loader\" })\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Loader;\n\t}(React.Component);\n\t\n\texports.default = Loader;\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\n\t * Modify behaviour of specified column cells in the Data Table component\n\t * @param {string} column - column name\n\t * @param {string} cell - cell content\n\t * @param {arrray} rowData - array of cell contents for a specific row\n\t * @param {arrray} rowHeaders - array of table headers (column names)\n\t * @return {*} a formated table cell for a given column\n\t */\n\tfunction formatColumn(column, cell, rowData, rowHeaders) {\n\t  // If a column if set as hidden, don't display it\n\t  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n\t  //  return null;\n\t  //}\n\t\n\t  // Create the mapping between rowHeaders and rowData in a row object.\n\t  var row = {};\n\t  rowHeaders.forEach(function (header, index) {\n\t    row[header] = rowData[index];\n\t  }, this);\n\t\n\t  // create array of classes to be added to td tag\n\t  var classes = [];\n\t\n\t  // convert array to string, with blank space separator\n\t  classes = classes.join(\" \");\n\t\n\t  //const hasWritePermission = loris.userHasPermission('media_read');\n\t  if (column === 'Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: specimenURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Parent Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Parent Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: specimenURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Container Barcode') {\n\t    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Container Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: containerURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  // if (column === 'Visit Label') {\n\t  //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n\t  //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n\t  //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n\t  //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n\t  //   }\n\t  // }\n\t\n\t  // if (column === 'Edit Metadata') {\n\t  //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n\t  //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n\t  // }\n\t\n\t  return React.createElement(\n\t    \"td\",\n\t    { className: classes },\n\t    cell\n\t  );\n\t}\n\t\n\texports.default = formatColumn;\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t/**\n\t * Modify behaviour of specified column cells in the Data Table component\n\t * @param {string} column - column name\n\t * @param {string} cell - cell content\n\t * @param {arrray} rowData - array of cell contents for a specific row\n\t * @param {arrray} rowHeaders - array of table headers (column names)\n\t * @return {*} a formated table cell for a given column\n\t */\n\tfunction formatColumn(column, cell, rowData, rowHeaders) {\n\t  // If a column if set as hidden, don't display it\n\t  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n\t  //  return null;\n\t  //}\n\t\n\t  // Create the mapping between rowHeaders and rowData in a row object.\n\t  var row = {};\n\t  rowHeaders.forEach(function (header, index) {\n\t    row[header] = rowData[index];\n\t  }, this);\n\t\n\t  // create array of classes to be added to td tag\n\t  var classes = [];\n\t\n\t  // convert array to string, with blank space separator\n\t  classes = classes.join(\" \");\n\t\n\t  //const hasWritePermission = loris.userHasPermission('media_read');\n\t  if (column === 'Barcode') {\n\t    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: containerURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  if (column === 'Parent Barcode') {\n\t    var specimenURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Parent Barcode'];\n\t    return React.createElement(\n\t      \"td\",\n\t      { className: classes },\n\t      React.createElement(\n\t        \"a\",\n\t        { href: containerURL },\n\t        cell\n\t      )\n\t    );\n\t  }\n\t\n\t  // if (column === 'Visit Label') {\n\t  //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n\t  //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n\t  //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n\t  //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n\t  //   }\n\t  // }\n\t\n\t  // if (column === 'Edit Metadata') {\n\t  //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n\t  //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n\t  // }\n\t\n\t  return React.createElement(\n\t    \"td\",\n\t    { className: classes },\n\t    cell\n\t  );\n\t}\n\t\n\texports.default = formatColumn;\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// modules/biobank/js/biobankIndex.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4582b18ca178b5b2e7c6","import FilterForm from 'FilterForm';\nimport BiobankSpecimenForm from './specimenForm';\nimport PoolSpecimenForm from './poolSpecimenForm';\nimport BiobankContainerForm from './containerForm';\nimport {Tabs, TabPane} from 'Tabs';\nimport FormModal from 'FormModal';\nimport Loader from 'Loader';\nimport formatColumnSpecimen from './columnFormatterSpecimen';\nimport formatColumnContainer from './columnFormatterContainer';\n\nclass BiobankIndex extends React.Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      isLoaded: false,\n      specimenFilter: {},\n      containerFilter: {},\n      isOpen: false,\n      formOptions: {},\n      show: {\n        specimenForm: false,\n        containerForm: false,\n      },\n    };\n\n    // Bind component instance to custom methods\n    this.loadPage = this.loadPage.bind(this);\n    this.fetch = this.fetch.bind(this);\n    this.updateSpecimenFilter = this.updateSpecimenFilter.bind(this);\n    this.updateContainerFilter = this.updateContainerFilter.bind(this);\n    this.resetFilters = this.resetFilters.bind(this);\n    this.mapFormOptions = this.mapFormOptions.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n    this.closeAllModals = this.closeAllModals.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadPage();\n  }\n\n  loadPage() {\n    this.fetch('specimenData', this.props.specimenDataURL);\n    this.fetch('formOptions', this.props.formOptionsURL);\n    this.fetch('containerData', this.props.containerDataURL);\n    this.setState({isLoaded: true});\n  }\n\n  /**\n   * Retrieve data from the provided URL and save it in state\n   */\n  fetch(request, url) {\n    $.ajax(url, {\n      method: \"GET\",\n      dataType: 'json',\n      success: function(data) {\n        this.setState({\n          [request]: data,\n        });\n      }.bind(this),\n      error: function(error) {\n        console.error(error);\n      }\n    });\n  }\n\n  updateSpecimenFilter(specimenFilter) {\n    this.setState({specimenFilter});\n  }\n\n  updateContainerFilter(containerFilter) {\n    this.setState({containerFilter});\n  }\n\n  resetFilters() {\n    this.refs.biobankFilter.clearFilter();\n  }\n\n //map options for forms\n  mapFormOptions(rawObject, targetAttribute) {\n    let data = {}; \n    for (let id in rawObject) {\n      data[id] = rawObject[id][targetAttribute];\n    }   \n\n    return data;\n  }\n\n  toggleModal(stateKey) {\n    let show = this.state.show;\n    let stateValue = show[stateKey];\n    show[stateKey] = !stateValue;\n    this.setState({show});\n  }\n\n  closeAllModals() {\n    let show = this.state.show;\n    for (let key in show) {\n      show[key] = false;\n    }\n    this.setState({show});\n  }\n\n  render() {\n    // Waiting for async data to load\n    if (!this.state.isLoaded) {\n      return (\n        <Loader/>\n      );\n    }\n\n    let addSpecimenButton;\n    let poolSpecimenButton;\n    let addContainerButton;\n    if (loris.userHasPermission('biobank_write')) {\n\n       /**\n        * Map Options for Form Select Elements of Specimen Form\n        */\n       let containerTypesPrimary = this.mapFormOptions(this.state.formOptions.containerTypesPrimary, 'label');\n       let containerStati = this.mapFormOptions(this.state.formOptions.containerStati, 'status');\n       let candidates = this.mapFormOptions(this.state.formOptions.candidates, 'pscid');\n       let sessions = this.mapFormOptions(this.state.formOptions.sessions, 'label');\n        \n       addSpecimenButton = (\n         <div\n           className='action'\n           title='Add Specimen'\n         >\n           <div\n             className='action-button add'\n             onClick={()=>{this.toggleModal('specimenForm')}}\n           >\n             <span>+</span>\n           </div>\n           <FormModal\n             title='Add New Specimen'\n             show={this.state.show.specimenForm}\n             toggleModal={()=>{this.toggleModal('specimenForm')}}\n           >\n             <BiobankSpecimenForm\n               candidates={candidates}\n               sessions={sessions}\n               candidateSessions={this.state.formOptions.candidateSessions}\n               sessionCenters={this.state.formOptions.sessionCenters}\n               specimenTypes={this.state.formOptions.specimenTypes}\n               specimenTypeUnits={this.state.formOptions.specimenTypeUnits}\n               specimenTypeAttributes={this.state.formOptions.specimenTypeAttributes}\n               attributeOptions={this.state.formOptions.attributeOptions}\n               attributeDatatypes={this.state.formOptions.attributeDatatypes}\n               containerTypesPrimary={containerTypesPrimary}\n               containersNonPrimary={this.state.formOptions.containersNonPrimary}\n               containerDimensions={this.state.formOptions.containerDimensions}\n               containerCoordinates={this.state.formOptions.containerCoordinates}\n               containerStati={containerStati}\n               refreshParent={this.loadPage}\n               mapFormOptions={this.mapFormOptions}\n               saveBarcodeList={`${loris.BaseURL}/biobank/ajax/submitData.php?action=saveBarcodeList`}\n             />\n           </FormModal>\n         </div>\n       );\n\n       let poolSpecimenButtonContent = (\n         <span className='glyphicon glyphicon-resize-small'/>\n       )\n\n       poolSpecimenButton = (\n         <FormModal\n           title='Pool Specimens'\n           buttonClass='action-button pool'\n           buttonContent={poolSpecimenButtonContent}\n           style={{display:'inline-block'}}\n         >\n           <PoolSpecimenForm\n             specimenTypes={this.state.formOptions.specimenTypes}\n             containerTypesPrimary={containerTypesPrimary}\n             containersNonPrimary={this.state.formOptions.containersNonPrimary}\n             specimenTypeAttributes={this.state.formOptions.specimenTypeAttributes}\n             specimenProtocols={this.state.formOptions.specimenProtocols}\n             specimenProtocolAttributes={this.state.formOptions.specimenProtocolAttributes}\n             attributeDatatypes={this.state.formOptions.attributeDatatypes}\n             attributeOptions={this.state.formOptions.attributeOptions}\n             capacities={this.state.formOptions.capacities}\n             containerDimensions={this.state.formOptions.containerDimensions}\n             containerCoordinates={this.state.formOptions.containerCoordinates}\n             specimenTypeUnits={this.state.formOptions.specimenTypeUnits}\n             specimenUnits={this.state.formOptions.specimenUnits}\n             candidates={candidates}\n             candidateSessions={this.state.formOptions.candidateSessions}\n             sessionCenters={this.state.formOptions.sessionCenters}\n             specimenRequest={`${loris.BaseURL}/biobank/ajax/requestData.php?action=getSpecimenDataFromBarcode`}\n             refreshParent={this.loadPage}\n             mapFormOptions={this.mapFormOptions}\n             saveSpecimen={`${loris.BaseURL}/biobank/ajax/submitData.php?action=saveSpecimen`}\n             saveContainer={`${loris.BaseURL}/biobank/ajax/submitData.php?action=saveContainer`}\n           />\n         </FormModal>\n       );\n\n       let containerTypesNonPrimary = this.mapFormOptions(this.state.formOptions.containerTypesNonPrimary, 'label');\n\n       addContainerButton = (\n         <div\n           className='action'\n           title='Add Container'\n         >\n           <div\n             className='action-button add'\n             onClick={()=>{this.toggleModal('containerForm')}}\n           >\n             <span>+</span>\n           </div>\n           <FormModal\n             title='Add New Container'\n             show={this.state.show.containerForm}\n             toggleModal={()=>{this.toggleModal('containerForm')}}\n           >\n             <BiobankContainerForm\n               containerTypesNonPrimary={containerTypesNonPrimary}\n               centers={this.state.formOptions.centers}\n               containerStati={containerStati}\n               refreshParent={this.loadPage}\n               saveContainer={`${loris.BaseURL}/biobank/ajax/submitData.php?action=saveContainer`}\n             />\n           </FormModal>\n         </div>\n       ); \n    }\n\n    var tabList = [\n      {id: \"specimens\", label: \"Specimens\"},\n      {id: \"containers\", label: \"Containers\"}\n    ];\n\n    return (\n    <div id='biobank-page'>\n      <Tabs tabs={tabList} defaultTab=\"specimens\" updateURL={true}>\n        <TabPane TabId={tabList[0].id}>\n          <div className='row'>\n            <div className='col-lg-10'>\n              <FilterForm\n                Module=\"biobank\"\n                name=\"specimen_filter\"\n                id=\"specimen_filter\"\n                ref=\"specimenFilter\"\n                columns={3}\n                formElements={this.state.specimenData.form}\n                onUpdate={this.updateSpecimenFilter}\n                filter={this.state.specimenFilter}\n              >\n                <br/>\n                <StaticElement/>\n                <StaticElement/>\n                <ButtonElement label=\"Clear Filters\" type=\"reset\" onUserInput={this.resetFilters}/>\n              </FilterForm>\n            </div>\n            <div className='col-lg-2'>\n              <span className='action'>\n                {addSpecimenButton}\n                <div className='action-title'>\n                  Add Specimen\n                </div>\n              </span>\n              <br/><br/>\n              <span className='action'>\n                {poolSpecimenButton}\n                <div className='action-title'>\n                  Pool Specimens\n                </div>\n              </span>\n            </div>\n          </div>\n          <StaticDataTable\n            Data={this.state.specimenData.Data}\n            Headers={this.state.specimenData.Headers}\n            Filter={this.state.specimenFilter}\n            getFormattedCell={formatColumnSpecimen}\n          />\n        </TabPane>\n        <TabPane TabId={tabList[1].id}>\n          <div className='row'>\n            <div className='col-lg-10'>\n              <FilterForm\n                Module=\"biobank\"\n                name=\"container_filter\"\n                id=\"container_filter\"\n                ref=\"containerFilter\"\n                columns={3}\n                formElements={this.state.containerData.form}\n                onUpdate={this.updateContainerFilter}\n                filter={this.state.containerFilter}\n\t\t          >\n                <br/>\n                <StaticElement/>\n                <StaticElement/>\n                <ButtonElement label=\"Clear Filters\" type=\"reset\" onUserInput={this.resetFilters}/>\n              </FilterForm>\t\t\t\n            </div>\n            <div className='col-lg-2'>\n              <span className='action'>\n                {addContainerButton}\n                <div className='action-title'>\n                  New Container\n                </div>\n              </span>\n            </div>\n          </div>\n          <StaticDataTable\n            Data={this.state.containerData.Data}\n            Headers={this.state.containerData.Headers}\n            Filter={this.state.containerFilter}\n            getFormattedCell={formatColumnContainer}\n          />\n        </TabPane>\n      </Tabs>\n      </div>\n    );\n  }\n}\n\n$(function() {\n  const biobankIndex = (\n    <div className=\"page-biobank\">\n      <BiobankIndex \n        specimenDataURL={`${loris.BaseURL}/biobank/?format=json`} \n        containerDataURL={`${loris.BaseURL}/biobank/ajax/requestData.php?action=getContainerFilterData`} \n        formOptionsURL={`${loris.BaseURL}/biobank/ajax/requestData.php?action=getFormOptions`}\n      />\n    </div>\n  );\n\n  ReactDOM.render(biobankIndex, document.getElementById(\"lorisworkspace\"));\n});\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/biobankIndex.js","/**\n * This file contains React component for FilterForm\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\nimport Panel from 'Panel';\n\n/**\n * FilterForm component.\n * A wrapper for form elements inside a selection filter.\n *\n * Adds necessary filter callbacks to all children and passes them to FormElement\n * for proper rendering.\n *\n * Keeps track of filter object and sends it to parent on every update.\n *\n * //HACK/NOTE: Loris has special behaviour for `candID` attribute in the query string,\n * making it impossible to use it for selection filters. This components renames\n * all `candID` fields to `candidateID` automatically before appending them to URL.\n *\n */\nclass FilterForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    // Bind component instance to custom methods\n    this.clearFilter = this.clearFilter.bind(this);\n    this.getFormChildren = this.getFormChildren.bind(this);\n    this.setFilter = this.setFilter.bind(this);\n    this.onElementUpdate = this.onElementUpdate.bind(this);\n\n    // Keeps track of querystring values\n    // Saved as class variable instead of keeping in state\n    this.queryString = QueryString.get();\n  }\n\n  componentDidMount() {\n    let filter = {};\n    let queryString = this.queryString;\n\n    // Initiaze filter using querystring value\n    Object.keys(queryString).forEach(function(key) {\n      let filterKey = (key === 'candidateID') ? 'candID' : key;\n      filter[filterKey] = {\n        value: queryString[key],\n        exactMatch: false\n      };\n    });\n\n    // Update parent component\n    this.props.onUpdate(filter);\n  }\n\n  /**\n   * Clear the filter object, querystring and input fields\n   */\n  clearFilter() {\n    this.queryString = QueryString.clear(this.props.Module);\n    this.props.onUpdate({});\n  }\n\n  /**\n   * Itterates through FilterForm children, sets necessary callback functions\n   * and initializes filterTable\n   *\n   * @return {Array} formChildren - array of children with necessary props\n   */\n  getFormChildren() {\n    let formChildren = [];\n    React.Children.forEach(this.props.children, function(child, key) {\n      // If child is a React component (i.e not a simple DOM element)\n      if (React.isValidElement(child) &&\n        typeof child.type === \"function\" &&\n        child.props.onUserInput\n      ) {\n        let callbackFunc = child.props.onUserInput;\n        let callbackName = callbackFunc.name;\n        let elementName = child.type.displayName;\n        let queryFieldName = (child.props.name === 'candID') ? 'candidateID' : child.props.name;\n        let filterValue = this.queryString[queryFieldName];\n        // If callback function was not set, set it to onElementUpdate() for form\n        // elements and to clearFilter() for <ButtonElement type='reset'/>.\n        if (callbackName === \"onUserInput\") {\n          if (elementName === \"ButtonElement\" && child.props.type === \"reset\") {\n            callbackFunc = this.clearFilter;\n          } else {\n            callbackFunc = this.onElementUpdate.bind(null, elementName);\n          }\n        }\n        // Pass onUserInput and value props to all children\n        formChildren.push(React.cloneElement(child, {\n          onUserInput: callbackFunc,\n          value: filterValue ? filterValue : '',\n          key: key\n        }));\n        // Initialize filter for StaticDataTable\n        this.setFilter(elementName, child.props.name, filterValue);\n      } else {\n        formChildren.push(React.cloneElement(child, {key: key}));\n      }\n    }.bind(this));\n\n    return formChildren;\n  }\n\n  /**\n   * Appends entry to filter object or deletes it if value is\n   * empty.\n   *\n   * Sets exactMatch to true for all SelectElements (i.e dropdowns)\n   * in order to force StaticDataTable to do exact comparaison\n   *\n   * @param {string} type - form element type (i.e component name)\n   * @param {string} key - the name of the form element\n   * @param {string} value - the value of the form element\n   *\n   * @return {{}} filter - filterData\n   */\n  setFilter(type, key, value) {\n    let filter = {};\n    if (this.props.filter) {\n      filter = JSON.parse(JSON.stringify(this.props.filter));\n    }\n    if (key) {\n      filter[key] = {};\n      if (value.length === 0) {\n        filter[key].value = '';\n      } else if (key && value) {\n        filter[key].value = value;\n      }\n      filter[key].exactMatch = (type === \"SelectElement\");\n    } else if (filter && key && value === '') {\n      delete filter[key];\n    }\n    return filter;\n  }\n\n  /**\n   * Sets filter object and querystring to reflect values of input fields\n   *\n   * @param {string} type - form element type (i.e component name)\n   * @param {string} fieldName - the name of the form element\n   * @param {string} fieldValue - the value of the form element\n   */\n  onElementUpdate(type, fieldName, fieldValue) {\n    // Make sure key is of string type and value is of string or object type\n    // before sending them to querystring\n    if (typeof fieldName !== 'string' ||\n        (typeof fieldValue !== 'string' && typeof fieldValue !== 'object')) {\n      return;\n    }\n\n    // Update query string\n    let queryFieldName = (fieldName === 'candID') ? 'candidateID' : fieldName;\n    this.queryString = QueryString.set(this.queryString, queryFieldName, fieldValue);\n\n    // Update filter and get new filter object\n    let filter = this.setFilter(type, fieldName, fieldValue);\n    this.props.onUpdate(filter);\n  }\n\n  render() {\n    // Get formatted children\n    let formChildren = this.getFormChildren();\n    let formElements = this.props.formElements;\n\n    if (formElements) {\n      Object.keys(formElements).forEach(function(fieldName) {\n        let queryFieldName = (fieldName === 'candID') ? 'candidateID' : fieldName;\n        formElements[fieldName].onUserInput = this.onElementUpdate.bind(null, fieldName);\n        formElements[fieldName].value = this.queryString[queryFieldName];\n      }.bind(this));\n    }\n\n    return (\n      <Panel\n        id={this.props.id}\n        height={this.props.height}\n        title={this.props.title}\n      >\n        <FormElement {...this.props}>\n          {formChildren}\n        </FormElement>\n      </Panel>\n    );\n  }\n}\n\nFilterForm.defaultProps = {\n  id: 'selection-filter',\n  height: '100%',\n  title: 'Selection Filter',\n  onUpdate: function() {\n    console.warn('onUpdate() callback is not set!');\n  }\n};\nFilterForm.propTypes = {\n  Module: React.PropTypes.string.isRequired,\n  filter: React.PropTypes.object.isRequired,\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  onUpdate: React.PropTypes.func\n};\n\nexport default FilterForm;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/FilterForm.js","/**\n * This file contains React component for Panel\n *\n * @author Alex I.\n * @version 1.0.0\n *\n */\n\n/**\n * Panel component\n * Wraps children in a collapsible bootstrap panel\n */\nclass Panel extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsed: this.props.initCollapsed\n    };\n\n    // Initialize panel class based on collapsed status\n    this.panelClass = (\n      this.props.initCollapsed ?\n        \"panel-collapse collapse\" :\n        \"panel-collapse collapse in\"\n    );\n\n    this.toggleCollapsed = this.toggleCollapsed.bind(this);\n  }\n\n  toggleCollapsed() {\n    this.setState({collapsed: !this.state.collapsed});\n  }\n\n  render() {\n    // Change arrow direction based on collapse status\n    let glyphClass = (\n      this.state.collapsed ?\n        \"glyphicon pull-right glyphicon-chevron-down\" :\n        \"glyphicon pull-right glyphicon-chevron-up\"\n    );\n\n    let pencilGlyph;\n    if (this.props.edit) {\n      pencilGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-pencil\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.edit}\n        /> \n      );\n    } \n\n    let plusGlyph;\n    if (this.props.add) {\n      plusGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-plus\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.add}\n        />\n      );\n    }\n\n    let removeGlyph;\n    if (this.props.cancel) {\n      removeGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-remove\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.cancel}\n        />\n      );\n    }\n\n    // Add panel header, if title is set\n    const panelHeading = this.props.title ? (\n      <div\n        className=\"panel-heading\"\n      >\n        <span \n          className={glyphClass}\n          onClick={this.toggleCollapsed}\n          data-toggle=\"collapse\"\n          data-target={'#' + this.props.id}\n          style={{cursor: 'pointer'}}\n        />\n        {pencilGlyph}\n        {plusGlyph}\n        {removeGlyph}\n        {this.props.title}\n      </div>\n    ) : '';\n\n    return (\n      <div className=\"panel panel-primary\">\n        {panelHeading}\n        <div id={this.props.id} className={this.panelClass} role=\"tabpanel\">\n          <div className=\"panel-body\" style={{height: this.props.height}}>\n            {this.props.children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPanel.propTypes = {\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  edit: React.PropTypes.func,\n  add: React.PropTypes.func\n};\nPanel.defaultProps = {\n  initCollapsed: false,\n  id: 'default-panel',\n  height: '100%'\n};\n\nexport default Panel;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Panel.js","import SpecimenBarcodeForm from './barcodeForm.js';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankSpecimenForm extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      formErrors: {},\n      errorMessage: null,\n      candidateId: null,\n      sessionId: null,\n      centerId: null,\n      barcodeList: {1: {specimen: {collection: {}}, container: {}}},\n      count: 1,\n      collapsed: {1: true},\n      copyMultiplier: 1,\n    };\n\n    this.toggleCollapse = this.toggleCollapse.bind(this);\n    this.setSpecimen = this.setSpecimen.bind(this);\n    this.setContainer = this.setContainer.bind(this);\n    this.addBarcode = this.addBarcode.bind(this);\n    this.setCopyMultiplier = this.setCopyMultiplier.bind(this);\n    this.copyBarcode = this.copyBarcode.bind(this);\n    this.removeBarcode = this.removeBarcode.bind(this);\n    this.saveBarcodeList = this.saveBarcodeList.bind(this);\n    this.save = this.save.bind(this);\n  }\n\n  toggleCollapse(key) {\n    let collapsed = this.state.collapsed;\n    collapsed[key] = !collapsed[key];\n    this.setState({collapsed});\n  }\n\n  saveBarcodeList() {\n    let barcodeList = JSON.parse(JSON.stringify(this.state.barcodeList));\n    let availableId = Object.keys(this.props.containerStati).find(\n      key => this.props.containerStati[key] === 'Available'\n    );\n\n    for (let barcode in barcodeList) {\n      //set container values\n      let container = barcodeList[barcode].container;\n      container.statusId = availableId;\n      container.temperature = 20;\n      container.locationId = this.state.centerId;\n      container.originId = this.state.centerId;\n\n      //set specimen values\n      let specimen = barcodeList[barcode].specimen;\n      specimen.candidateId = this.state.candidateId;\n      specimen.sessionId = this.state.sessionId;\n      specimen.quantity = specimen.collection.quantity;\n      specimen.unitId = specimen.collection.unitId;\n      specimen.collection.locationId = this.state.centerId;\n      if (this.props.specimenTypes[specimen.typeId].freezeThaw === 1) {\n        specimen.fTCycle = 0;\n      }\n\n      //if this is an aliquot form, reset some of the values.\n      //TODO: these will eventually be higher level states.\n      if (this.props.data) {\n        specimen.candidateId = this.props.data.candidate.CandID;\n        specimen.sessionId = this.props.data.session.ID;\n        specimen.parentSpecimenId = this.props.data.specimen.id;\n        specimen.collection.locationId = this.props.data.container.locationId;\n        container.locationId = this.props.data.container.locationId;\n        container.originId = this.props.data.container.locationId;\n      }\n    \n      barcodeList[barcode].container = container;\n      barcodeList[barcode].specimen = specimen;\n    }\n\n    this.save(barcodeList, this.props.saveBarcodeList).then(\n      () => {this.props.refreshParent(); this.props.onSuccess();}\n    );\n  }\n\n  save(data, url) {\n    return new Promise(resolve => {\n      $.ajax({\n        type: 'POST',\n        url: url,\n        data: {data: JSON.stringify(data)},\n        cache: false,\n        success: () => {\n          resolve();\n          swal(\"Save Successful!\", \"\", \"success\");\n        },\n        error: (err, textStatus, errorThrown) => {\n          let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n          this.setState({\n            errorMessage: msg,\n          });\n          swal(msg, \"\", \"error\");\n        }\n      });\n    });\n  }\n\n  setSpecimen(name, value, key) {\n    this.props.onChange instanceof Function && this.props.onChange();\n    let centerId = this.state.centerId;\n    let candidateId = this.state.candidateId;\n    let sessionId = this.state.sessionId;\n    let barcodeList = this.state.barcodeList;\n\n    if (name === 'candidateId') {\n      candidateId = value;\n    } else if (name === 'sessionId') {\n      sessionId = value;\n      centerId = this.props.sessionCenters[sessionId].centerId;\n    } else {\n      //this is eliminate values if specimen type is changed\n      if (name === 'typeId') {\n        barcodeList[key].specimen = {collection:{}};\n      }\n      barcodeList[key].specimen[name] = value;\n    }\n\n    this.setState({barcodeList, centerId, candidateId, sessionId})\n  }\n\n  setContainer(name, value, key) {\n    this.props.onChange instanceof Function && this.props.onChange();\n    let barcodeList = this.state.barcodeList;\n    barcodeList[key].container[name] = value;\n    this.setState({barcodeList});\n  }\n\n  addBarcode() {\n    let barcodeList = this.state.barcodeList;\n    let count = this.state.count;\n    let collapsed = this.state.collapsed;\n\n    barcodeList[count+1] = {specimen: {}, container: {collection:{}}}; \n    collapsed[count+1] = true;\n    count = count+1\n\n    this.setState({barcodeList, collapsed, count});\n  }\n\n  setCopyMultiplier(e) {\n    let copyMultiplier = e.target.value;\n    this.setState({copyMultiplier});\n  }\n\n  copyBarcode(key) {\n    let count = this.state.count;\n    let collapsed = this.state.collapsed;\n    let nextKey = count+1;\n    let barcodeList = this.state.barcodeList;\n    let multiplier = this.state.copyMultiplier\n\n    for (let i=1; i<=multiplier; i++) {\n      barcodeList[nextKey] = JSON.parse(JSON.stringify(barcodeList[key])); \n      delete barcodeList[nextKey].container.barcode;\n      collapsed[nextKey] = true;\n      nextKey++;\n    }\n\n    this.setState({\n      barcodeList: barcodeList,\n      count: nextKey,\n      collapsed: collapsed,\n    });\n  }\n\n  removeBarcode(key) {\n    let barcodeList = this.state.barcodeList;\n    delete barcodeList[key];\n    this.setState({barcodeList: barcodeList});\n  }\n\n  render() {\n    //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n    let barcodeListArray = Object.keys(this.state.barcodeList);\n    let barcodes = [];\n    let i = 1;\n    for (let key of barcodeListArray) {\n      barcodes.push(\n        <SpecimenBarcodeForm\n          data={this.props.data || null}\n          key={key}\n          barcodeKey={key}\n          id={i} \n          collapsed={this.state.collapsed[key]}\n          toggleCollapse={this.toggleCollapse}\n          mapFormOptions={this.props.mapFormOptions}\n          container={this.state.barcodeList[key].container || null}\n          specimen={this.state.barcodeList[key].specimen || null}\n          removeBarcode={barcodeListArray.length !== 1 ?\n            () => this.removeBarcode(key) : null}\n          addBarcode={i == barcodeListArray.length ? this.addBarcode : null}\n          setCopyMultiplier={this.setCopyMultiplier}\n          copyMultiplier={this.state.copyMultiplier}\n          copyBarcode={i == barcodeListArray.length && this.state.barcodeList[key] ? \n            this.copyBarcode : null}\n          setContainer={this.setContainer}\n          setSpecimen={this.setSpecimen}\n          onChange={this.props.onChange}\n          specimenTypes={this.props.specimenTypes}\n          containerTypesPrimary={this.props.containerTypesPrimary}\n          containersNonPrimary={this.props.containersNonPrimary}\n          specimenTypeAttributes={this.props.specimenTypeAttributes}\n          attributeDatatypes={this.props.attributeDatatypes}\n          attributeOptions={this.props.attributeOptions}\n          capacities={this.props.capacities}\n          containerDimensions={this.props.containerDimensions}\n          containerCoordinates={this.props.containerCoordinates}\n          specimenTypeUnits={this.props.specimenTypeUnits}\n          units={this.props.units}\n        />\n      )\n      \n      i++;\n    }\n\n    let globalFields;\n    let remainingQuantityFields;\n    if (this.props.data) {\n      globalFields = (\n        <div>\n          <StaticElement\n            label=\"Parent Specimen\"\n            text={this.props.data.container.barcode}\n          />\n          <StaticElement\n            label=\"PSCID\"\n            text={this.props.data.candidate.PSCID}\n          />\n          <StaticElement\n            label=\"Visit Label\"\n            text={this.props.data.session.Visit_label}\n          />\n        </div>\n      );\n\n      remainingQuantityFields = (\n        <div>\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Remaining Quantity\"\n            onUserInput={this.props.setSpecimenData}\n            required={true}\n            value={this.props.specimen.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={this.props.specimenUnits}\n            onUserInput={this.props.setSpecimenData}\n            emptyOption={false}\n            required={true}\n            value={this.props.specimen.unitId}\n          />\n        </div>\n      );\n    } else {\n     let sessions = {};\n     if (this.state.candidateId) {\n       sessions = this.props.mapFormOptions(this.props.candidateSessions[this.state.candidateId], 'label'); \n     }\n      //TODO: not sure why, but I'm now having trouble with the SearchableDropdown\n      globalFields = (\n        <div>\n          <SelectElement\n            name=\"candidateId\"\n            label=\"PSCID\"\n            options={this.props.candidates}\n            onUserInput={this.setSpecimen}\n            required={true}\n            value={this.state.candidateId}\n            placeHolder='Search for a PSCID'\n          />\n          <SelectElement\n            name='sessionId'\n            label='Visit Label'\n            options={sessions}\n            onUserInput={this.setSpecimen}\n            required={true}\n            value={this.state.sessionId}\n            disabled={this.state.candidateId ? false : true}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"specimenForm\"\n        id='specimenForm'\n        onSubmit={() => {\n          this.saveBarcodeList();\n          this.props.saveSpecimen instanceof Function && this.props.saveSpecimen()}}\n        ref=\"form\"\n      >\n        <div className='row'>\n          <div className=\"col-xs-9 col-xs-offset-1\">\n            {globalFields}\n            {remainingQuantityFields}\n          </div>\n        </div>\n        {barcodes}\n        <ButtonElement\n          label='Submit'\n          columnSize='col-sm-2 col-sm-offset-10'\n        />\n      </FormElement>\n    );\n  }\n}\n\nBiobankSpecimenForm.propTypes = {\n};\n\nexport default BiobankSpecimenForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenForm.js","import SpecimenCollectionForm from './collectionForm'\nimport ContainerParentForm from './containerParentForm'\n\n/**\n * Biobank Barcode Form\n *\n * Acts a subform for BiobankSpecimenForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenBarcodeForm extends React.Component {\n  constructor() {\n    super();\n    this.setContainer = this.setContainer.bind(this);\n    this.setSpecimen = this.setSpecimen.bind(this);\n    this.copy = this.copy.bind(this);\n  }\n\n  setContainer(name, value) {\n    this.props.setContainer(name, value, this.props.barcodeKey);\n  }\n\n  setSpecimen(name, value) {\n    this.props.setSpecimen(name, value, this.props.barcodeKey);\n  }\n\n  copy() {\n    this.props.copyBarcode(this.props.copyMultiplier);\n  }\n\n  render() {\n    let addBarcodeButton;\n    let addBarcodeText;\n    let copyBarcodeButton;\n    let copyBarcodeText;\n    if (this.props.addBarcode) {\n      addBarcodeButton = (\n        <span className='action'>\n          <div\n            className='action-button add'\n            onClick={this.props.addBarcode}\n          >\n          +\n          </div>\n        </span>\n      );\n\n      addBarcodeText = (\n        <span className='action-title'>\n          New Entry\n        </span>\n      );\n    }\n\t\n    if (this.props.copyBarcode) {\n      copyBarcodeButton = (\n        <span className='action'>\n          <div\n            className='action-button add'\n            onClick={this.copy}\n          >\n            <span className='glyphicon glyphicon-duplicate'/>\n          </div>\n        </span>\n      );\n      copyBarcodeText = (\n        <span className='action-title'>\n          <input \n            className='form-control input-sm'\n            type='number'\n            min='1'\n            max='50'\n            style={{width: 50, display: 'inline'}}\n            onChange={this.props.setCopyMultiplier}\n            value={this.props.copyMultiplier}\n          />\n          Copies\n        </span>\n      );\n    }\n\n    let removeBarcodeButton;\n    if (this.props.removeBarcode) {\n      const glyphStyle = {\n        color: '#DDDDDD',\n        marginLeft: 10,\n        cursor: 'pointer',\n        fontSize: 15\n      }\n\n      removeBarcodeButton = (\n        <span \n          className='glyphicon glyphicon-remove' \n          onClick={this.props.removeBarcode}\n          style={glyphStyle}\n        />\n      );\n    }\n\n    let specimenTypes = {};\n    if (this.props.data) {\n      for (let id in this.props.specimenTypes) {\n        if (\n             (this.props.specimenTypes[id].parentTypeId ==\n             this.props.data.specimen.typeId) ||\n             (id == this.props.data.specimen.typeId)\n        ) {\n          specimenTypes[id] = this.props.specimenTypes[id]['type'];\n        }\n      }\n    } else {\n      specimenTypes = this.props.mapFormOptions(this.props.specimenTypes, 'type');\n    }\n\n    return (\n      <FormElement\n        name='biobankBarcode'\n      >\n        <div className='row'>\n          <div className='col-xs-9 col-xs-offset-1'>\n            <div>   \n              <TextboxElement\n                name='barcode'\n                label={'Barcode ' + this.props.id}\n                onUserInput={this.setContainer}\n                required={true}\n                value={this.props.container.barcode}\n              />\n            </div>\n          </div>\n          <div className='col-xs-1' style={{paddingLeft:0, marginTop:10}}>\n            <span \n              className= {this.props.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up'}\n              style={{cursor: 'pointer', fontSize:15, position:'relative', right:40}}\n              data-toggle='collapse' \n              data-target={'#item-' + this.props.barcodeKey}\n              onClick={() => this.props.toggleCollapse(this.props.barcodeKey)}\n            />\n            {removeBarcodeButton}\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xs-2'/>\n          <div className='col-xs-8'>\n            <div id={'item-' + this.props.barcodeKey} className='collapse'>\n              <SelectElement\n                name=\"typeId\"\n                label=\"Specimen Type\"\n                options={specimenTypes}\n                onUserInput={this.setSpecimen}\n                required={true}\n                value={this.props.specimen.typeId}\n              />\n              <SelectElement\n                name=\"typeId\"\n                label=\"Container Type\"                                              \n                options={this.props.containerTypesPrimary}                          \n                onUserInput={this.setContainer}\n                ref=\"containerType\"                                                 \n                required={true}                                                     \n                value={this.props.container.typeId}                           \n              />            \n              <SpecimenCollectionForm\n                specimen={this.props.specimen}\n                setSpecimenData={this.setSpecimen}\n                specimenTypeUnits={this.props.specimenTypeUnits}\n                specimenTypeAttributes={this.props.specimenTypeAttributes}\n                attributeDatatypes={this.props.attributeDatatypes}\n                attributeOptions={this.props.attributeOptions}\n              />\n              <ContainerParentForm                                                    \n                setContainerData={this.setContainer}\n                mapFormOptions={this.props.mapFormOptions}\n                container={this.props.container}\n                containersNonPrimary={this.props.containersNonPrimary}\n                containerDimensions={this.props.containerDimensions}\n                containerCoordinates={this.props.containerCoordinates}\n              />\n            </div>\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xs-11'>\n            <div className='col-xs-4'/>\n            <div className='col-xs-3 action'>\n              {addBarcodeButton}\n              {addBarcodeText}\n            </div>\n            <div className='col-xs-3 action'>\n              {copyBarcodeButton}\n              {copyBarcodeText}\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n}\n\nSpecimenBarcodeForm.propTypes = {\n}\n\nexport default SpecimenBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/barcodeForm.js","/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenCollectionForm extends React.Component {\n  constructor() {\n    super();\n    \n    this.getSpecimenTypeFields = this.getSpecimenTypeFields.bind(this);\n    this.setCollectionData = this.setCollectionData.bind(this);\n    this.addData = this.addData.bind(this);\n    this.setData = this.setData.bind(this);\n  }\n\n  setCollectionData(name, value) {\n    let collection = this.props.specimen.collection;\n    collection[name] = value;\n    this.props.setSpecimenData('collection', collection);\n  }\n\n  //TODO: this function may not be necessary\n  addData() {\n    let collection = this.props.specimen.collection;\n    collection.data = {};\n    this.props.setSpecimenData('collection', collection)\n  }\n\n  setData(name, value) {\n    let data = this.props.specimen.collection.data;\n    data[name] = value;\n    this.setCollectionData('data', data);\n  }\n\n  // This generates all the form fields for a given specimen type\n  getSpecimenTypeFields(fieldsObject) {\n    let specimenTypeFields = Object.keys(fieldsObject).map((attribute) => {\n      let datatype = this.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"text\" || datatype === \"number\") {\n\n        if (fieldsObject[attribute]['refTableId'] == null) {\n          return (\n            <TextboxElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              onUserInput={this.setData}\n              required={fieldsObject[attribute]['required']}\n              value={this.props.specimen.collection.data[attribute]}\n            />\n          );\n        }\n\n        if (fieldsObject[attribute]['refTableId'] !== null) {\n          return (\n            <SelectElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              options={this.props.attributeOptions[fieldsObject[attribute]['refTableId']]}\n              onUserInput={this.setData}\n              required={fieldsObject[attribute]['required']}\n              value={this.props.specimen.collection.data[attribute]}\n            />\n          );\n        }\n      }\n\n      if (datatype === \"datetime\") {\n        return (\n          <DateElement\n            name={attribute}\n            label={fieldsObject[attribute]['name']}\n            onUserInput={this.setData}\n            ref={attribute}\n            required={fieldsObject[attribute]['required']}\n            value={this.props.specimen.collection.data[attribute]}\n          />\n        );\n      }\n\n      if (datatype === \"boolean\") {\n        // There is currently no CheckboxElement or RadioElement in loris/jsx/Form.js and therefore\n        // this is not possible.     \n      }\n    })\n\n    return specimenTypeFields;\n  }\n\n  render() {\n    let updateButton;\n    if (((this.props.data||{}).specimen||{}).collection) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    }\n\n    let specimenTypeUnits = {};\n    let specimenTypeFields;\n    if (this.props.specimen.typeId) {\n      \n      //This modifies the selections for unit drop down based on the chosen\n      //specimen type \n      for (let id in this.props.specimenTypeUnits[this.props.specimen.typeId]) {\n        specimenTypeUnits[id] = this.props.specimenTypeUnits[this.props.specimen.typeId][id].unit;\n      }\n\n      let specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.props.specimen.typeId];\n      if (specimenTypeFieldsObject) {\n        if (((this.props.specimen||{}).collection||{}).data) {\n          specimenTypeFields = this.getSpecimenTypeFields(specimenTypeFieldsObject);\n        } else {\n          this.addData();\n        }\n      }\n    }\n\n    let specimenFields;\n    if (this.props.specimen.typeId) {\n      specimenFields = (\n        <div>\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Quantity\"\n            onUserInput={this.setCollectionData}\n            required={true}\n            value={this.props.specimen.collection.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={specimenTypeUnits}\n            onUserInput={this.setCollectionData}\n            required={true}\n            value={this.props.specimen.collection.unitId}\n          />\n          {specimenTypeFields}\n          <DateElement\n            name=\"date\"\n            label=\"Date\"\n            minYear=\"2000\"\n            maxYear=\"2018\"\n            onUserInput={this.setCollectionData}\n            required={true}\n            value={this.props.specimen.collection.date}\n          />\n          <TimeElement\n            name=\"time\"\n            label=\"Time\"\n            onUserInput={this.setCollectionData}\n            required={true}\n            value={this.props.specimen.collection.time}\n          />\n          <TextareaElement\n            name=\"comments\"\n            label=\"Comments\"\n            onUserInput={this.setCollectionData}\n            ref=\"comments\"\n            value={this.props.specimen.collection.comments}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"biobankSpecimen\"\n        onSubmit={this.props.saveSpecimen}\n        ref=\"form\"\n      >\n        {specimenFields}\n        {updateButton}\n      </FormElement>\n    );\n  }\n}\n\n\nSpecimenCollectionForm.propTypes = {\n  setSpecimenData: React.PropTypes.func.isRequired,\n  saveSpecimen: React.PropTypes.func,\n  specimen: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  attributeOptions: React.PropTypes.object.isRequired,\n  specimenTypeUnits: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n}\n\nexport default SpecimenCollectionForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/collectionForm.js","/**\n * Biobank Container Parent Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\n\nimport ContainerDisplay from './containerDisplay.js';\n\nclass ContainerParentForm extends React.Component {\n\n  render() {\n    let containerDisplay;\n    let containerBarcodesNonPrimary = this.props.mapFormOptions(\n      this.props.containersNonPrimary, 'barcode'\n    );\n    let parentContainerField = ( \n      <SelectElement\n        name=\"parentContainerId\"\n        label=\"Parent Container Barcode\"\n        options={containerBarcodesNonPrimary}\n        onUserInput={this.props.setContainerData}\n        required={true}\n        value={this.props.container.parentContainerId}\n      />  \n    );  \n\n    if (this.props.container.parentContainerId) {\n      let dimensionId = this.props.containersNonPrimary[\n        this.props.container.parentContainerId\n      ].dimensionId;\n\n      if (dimensionId) {\n        // This will eventually become unecessary\n        let dimensions = this.props.containerDimensions[dimensionId];\n\n        // Total coordinates is determined by the product of the dimensions\n        let coordinatesTotal = 1;\n        for (let dimension in dimensions) {\n          coordinatesTotal = coordinatesTotal * dimensions[dimension];\n        }\n\n        // Mapping of options for the SelectElement\n        let coordinates = {}; \n        for (let i = 1; i <= coordinatesTotal; i++) {\n          // If the coordinate is already taken, skip it.\n          // this doubling of if statements seems unnecessary\n          if (this.props.containerCoordinates[this.props.container.parentContainerId]) {\n            if (this.props.containerCoordinates[this.props.container.parentContainerId][i]) {\n              continue; \n            }\n          }\n\n          coordinates[i] = i;\n        }   \n\n        containerDisplay = (\n          <ContainerDisplay\n            dimensions = {\n              this.props.containerDimensions[\n                this.props.containersNonPrimary[\n                  this.props.container.parentContainerId\n                ].dimensionId\n              ]\n            }\n            coordinates = {\n              this.props.containerCoordinates[this.props.container.parentContainerId]\n            }\n            containerTypes = {this.props.containerTypes}\n            containerStati = {this.props.containerStati} \n            select = {true}\n            selectedCoordinate = {this.props.container.coordinate}\n            setContainerData = {this.props.setContainerData}\n          />\n        );\n      }\n    }   \n\n    let updateButton;\n    if ((this.props.data||{}).container) {\n      updateButton = (\n        <div>\n          <br/>\n          <ButtonElement label='Update'/>\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        onSubmit={this.props.saveContainer}\n      >\n        {parentContainerField}\n        {containerDisplay}\n        {updateButton}\n      </FormElement>\n    );\n  }\n}\n\nContainerParentForm.propTypes = {\n  mapFormOptions: React.PropTypes.func.isRequired,\n  setContainerData: React.PropTypes.func.isRequired,\n  saveContainer: React.PropTypes.func,\n  data: React.PropTypes.object,\n  container: React.PropTypes.object.isRequired,\n  containersNonPrimary: React.PropTypes.object.isRequired,\n  containerDimensions: React.PropTypes.object.isRequired,\n  containerCoordinates: React.PropTypes.object.isRequired,\n  containerTypes: React.PropTypes.object,\n  containerStati: React.PropTypes.object,\n};\n\nexport default ContainerParentForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerParentForm.js","/**\n * ContainerDisplay\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass ContainerDisplay extends React.Component {\n  constructor() {\n    super();\n   \n    this.redirectURL = this.redirectURL.bind(this);\n    this.drag = this.drag.bind(this);\n    this.drop = this.drop.bind(this);\n  }\n\n  componentDidMount() {\n    $('[data-toggle=\"tooltip\"]').tooltip();\n  }\n\n  componenDidUpdate() {\n    $('[data-toggle=\"tooltip\"]').tooltip();\n  }\n\n  redirectURL(e) {\n    let coordinate = e.target.id;\n    if (this.props.coordinates[coordinate]) {\n      let type = this.props.types[\n        this.props.children[this.props.coordinates[coordinate]].typeId\n      ].primary ? 'specimen' : 'container';\n      let url = loris.BaseURL+'/biobank/'+type+'/?barcode='+\n        this.props.children[this.props.coordinates[coordinate]].barcode;\n\n      window.location.href = url;\n    }\n  }\n\n  allowDrop(e) {\n      e.preventDefault();\n  }\n  \n  drag(e) {\n      let container = JSON.stringify(\n        this.props.children[this.props.coordinates[e.target.id]]\n      );\n      e.dataTransfer.setData(\"text/plain\", container);\n  }\n  \n  drop(e) {\n    e.preventDefault();\n\n    let container = JSON.parse(e.dataTransfer.getData(\"text/plain\"));\n    let newCoordinate = parseInt(e.target.id);\n   \n    container.coordinate = newCoordinate;\n\n    this.props.saveChildContainer(container);\n  }\n\n  render() {\n  // This is eventually need to be reworked and cleaned up\n  let column = [];\n  let row = [];\n  let display;\n  var coordinate = 1;\n  if (this.props.dimensions) {\n    for (let y=0; y < this.props.dimensions.y; y++) {\n      column = [];\n      for (let x=1; x <= this.props.dimensions.x; x++) {\n        \n        let nodeWidth = (500/this.props.dimensions.x) - (500/this.props.dimensions.x * 0.08);\n        let nodeStyle = {width: nodeWidth}\n        let nodeClass = 'node';\n        let tooltipTitle = null;\n        let dataHtml = 'false';\n        let dataToggle = null;\n        let dataPlacement = null;\n        let draggable = 'false';\n        let onDragStart = null;\n        let onDragOver = this.allowDrop;\n        let onDrop = this.drop;\n        let onClick = null;\n\n        if (!this.props.select) {\n          // This double if statement doesn't sound great\n          if (this.props.coordinates) {\n            if (this.props.coordinates[coordinate]) {\n              nodeClass = 'node occupied';\n              dataHtml = 'true';\n              dataToggle = 'tooltip';\n              dataPlacement = 'top';\n              tooltipTitle = \n            '<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + \n            '<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + \n            '<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n              draggable = 'true';\n              onDragStart = this.drag;\n              onDragOver = null;\n              onDrop = null;\n              onClick = this.redirectURL;\n            }\n          }\n        }\n      \n        if (this.props.select) {\n          if (coordinate == this.props.selectedCoordinate) {\n            nodeClass = 'node occupied';\n          }\n          else if (!this.props.coordinates) {\n            nodeClass = 'node available';\n            onClick = (e) => this.props.setContainerData('coordinate', e.target.id);\n          } \n          else if (this.props.coordinates) {\n            if (!this.props.coordinates[coordinate]) {\n              nodeClass = 'node available';\n\t\t\t  onClick = (e) => this.props.setContainerData('coordinate', e.target.id);\n            }\n            else if (this.props.coordinates[coordinate]){\n            // TODO: --- This is currently not working ---\n            //  dataHtml = 'true';\n            //  dataToggle = 'tooltip';\n            //  dataPlacement = 'top';\n            //  tooltipTitle = \n            //'<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + \n            //'<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + \n            //'<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n            }\n          }\n        }\n\n        let coordinateDisplay;\n        if (true) {\n          coordinateDisplay = x + (this.props.dimensions.x * y);\n        } else if (false) {\n          coordinateDisplay = String.fromCharCode(65+y)+''+x;\n        }\n\n        column.push(\n          <div\n            id={coordinate}\n            className={nodeClass}\n            data-html={dataHtml}\n            data-toggle={dataToggle}\n            data-placement={dataPlacement}\n            data-original-title={tooltipTitle}\n            style={nodeStyle}\n            onClick={onClick}\n            draggable={draggable}\n            onDragStart={onDragStart}\n            onDragOver={onDragOver}\n            onDrop={onDrop}\n          >\n            {coordinateDisplay}\n          </div>\n        );\n\n        coordinate++;\n      }\n\n      let rowHeight = (500/this.props.dimensions.y) - (500/this.props.dimensions.y * 0.08);\n      let rowMargin = (500/this.props.dimensions.y * 0.04);\n      let rowStyle = {\n        height: rowHeight,\n      }\n      \n      row.push(\n        <div\n          className='row'\n          style={rowStyle} \n        >\n          {column}\n        </div>\n      )\n    }\n    \n    display = row;\n  }\n \n    return (\n      <div className='display'>\n        {display}\n      </div>\n    );\n  }\n}\n\nContainerDisplay.propTypes = {\n}\n\nexport default ContainerDisplay;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerDisplay.js","import SpecimenBarcodeForm from './barcodeForm';\nimport BiobankSpecimenForm from './specimenForm';\nimport SpecimenPreparationForm from './preparationForm';\n\n/**\n * Biobank Pool Specimen Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\nclass PoolSpecimenForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      barcodeList: {},\n      errorMessage: null,\n      formErrors: {},\n      barcodeCount: 2,\n      preparation: false,\n      step: 1\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.setPreparationFormData = this.setPreparationFormData.bind(this);\n    this.setSpecimenFormData = this.setSpecimenFormData.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n    this.setBarcodeCount = this.setBarcodeCount.bind(this);\n    this.next = this.next.bind(this);\n    this.previous = this.previous.bind(this);\n    this.addPreparation = this.addPreparation.bind(this);\n    this.removePreparation = this.removePreparation.bind(this);\n    this.validate = this.validate.bind(this);\n    this.formSwitch = this.formSwitch.bind(this);\n    this.preparationSwitch = this.preparationSwitch.bind(this);\n    this.runAjax = this.runAjax.bind(this);\n  }\n\n  next() {\n    this.validate().then(\n      data => {\n        this.setState({\n          poolData: data,\n          step: this.state.step+1\n        });\n      }, \n      error => {\n        swal(\"Oops!\", error.responseText, \"error\");\n      }\n    );\n  }\n\n  previous() {\n    this.setState({\n      step: this.state.step-1\n    });\n  }\n\n  validate() {\n    return this.runAjax(this.props.specimenRequest, {barcodeList: this.state.barcodeList});\n  }\n\n  runAjax(url, inputData) {\n    return new Promise((resolve, reject) => {\n      $.ajax(url, {\n        method: \"GET\",\n        dataType: 'json',\n        data: inputData,\n        success: function(data) {\n          resolve(data);\n        }.bind(this),\n        error: function(error, textStatus, errorThrown) {\n          reject(error);\n          console.error(error);\n        }\n      });  \n    })\n  }\n\n  setBarcodeCount(field, value) {\n    let barcodeCount = value;\n    let barcodeList = this.state.barcodeList;\n    for (let barcode in barcodeList) {\n      if (barcode > barcodeCount) {\n        delete barcodeList[barcode];\n      }\n    }\n\n    this.setState({barcodeCount, barcodeList});\n  }\n\n  formSwitch(inputForm, specimenForm) {\n    switch(this.state.step) {\n      case 1:\n        return inputForm;\n      case 2:\n        return specimenForm;\n    }\n  }\n\n  preparationSwitch(preparationButton, preparationForm) {\n    switch(this.state.preparation) {\n      case false:\n        return preparationButton;\n      case true:\n        return preparationForm;\n    }\n  }\n\n  addPreparation() {\n    this.validate().then(\n      data => {\n        this.setState({\n          poolData: data,\n          preparation: true\n        });\n      },\n      error => {\n        swal('Oh no!', error.responseText, 'error');\n      }\n    );\n  }\n\n  removePreparation() {\n    let formData = this.state.formData;\n    //TODO: is it better to set it to empty, or delete it?\n    formData.preparationForm = {};\n    this.setState({\n      preparation: false,\n      formData\n    });\n  }\n\n  render() {\n    //Generates barcodes\n    let barcodes = [];\n    for (let i=1; i<=this.state.barcodeCount; i++) {\n      barcodes.push(\n        <TextboxElement\n          name={i}\n          label={'Barcode ' + i}\n          onUserInput={this.setFormData}\n          required={true}\n          value={this.state.barcodeList[i]}\n          errorMessage={this.state.formErrors[i]}\n        />\n      )\n    }\n    \n    let preparationButton = ( \n      <div className='row'>\n        <div className='col-xs-4'/>\n        <div className='col-xs 4 action'>\n            <span className='action'>\n            <div \n              className='action-button add'\n              onClick={this.addPreparation}\n            >\n              +\n            </div>\n            </span>\n            <div className='action-title'>\n              Add Preparation\n            </div>\n        </div>\n      </div>\n    );\n\n    let preparationForm;\n    if (this.state.poolData) {\n\n      const specimenProtocolAttributes = this.props.specimenProtocolAttributes[this.state.poolData.typeId]\n \n      let specimenProtocols = {};\n      for (let id in specimenProtocolAttributes) {\n        specimenProtocols[id] = this.props.specimenProtocols[id];\n      }\n      specimenProtocols = this.props.mapFormOptions(specimenProtocols, 'protocol');\n\n      preparationForm = (\n        <div className='row'>\n          <div className='col-sm-9 col-sm-offset-1'>\n            <SpecimenPreparationForm\n              formData={this.state.formData.preparationForm}\n              specimenProtocols={specimenProtocols}\n              specimenProtocolAttributes={specimenProtocolAttributes}\n              attributeDatatypes={this.props.attributeDatatypes}\n              attributeOptions={this.props.attributeOptions}\n              setParentFormData={this.setPreparationFormData}\n              insertAction={`${loris.BaseURL}/biobank/ajax/submitData.php?action=insertSpecimenPreparation`}\n            />\n            <a className='pull-right' style={{cursor:'pointer'}} onClick={this.removePreparation}>Cancel Preparation</a>\n          </div>\n        </div>\n      );\n    }\n\n    let inputForm = (\n      <div>\n        <div className='row'>\n          <div className='col-sm-9 col-sm-offset-1'>\n            <StaticElement\n              label='Pooling Note'\n              text='Select or Scan the specimens to be pooled. Please ensure that they\n                    are the same type, and share the same PSCID and Visit Label'\n            />\n            <NumericElement\n              label='№ of Specimens'\n              min='2'\n              max='100'\n              value={this.state.barcodeCount}\n              onUserInput={this.setBarcodeCount}\n            />\n            {barcodes}\n          </div>\n        </div>\n        {this.preparationSwitch(preparationButton, preparationForm)}\n        <div className='col-sm-3 col-xs-offset-9 action'>\n          <div className='action-title'>\n            Next\n          </div>\n          <span className='action'>\n            <div \n              className='action-button update'\n              onClick={this.next}\n            >\n              <span className='glyphicon glyphicon-chevron-right'/>\n            </div>\n          </span>\n        </div>\n      </div>\n    );\n\n    //TODO: Things here need to be in the proper order!!!\n    let specimenForm;\n    if (this.state.poolData) {\n\n      // This is to provide the options for the output specimens\n      let specimenTypes = {};\n      if (this.state.poolData.typeId) {\n        specimenTypes[this.state.poolData.typeId] = this.props.specimenTypes[this.state.poolData.typeId];\n      }\n  \n      let pscid = this.props.pSCIDs[this.state.poolData.candidateId];\n      let visit = this.props.sessionData[pscid].visits[this.state.poolData.sessionId];\n\n      let barcodesArray = Object.values(this.state.barcodeList); \n      let barcodesString = barcodesArray.join(', ');  \n\n      // TODO: rather than all specimen units this should really be specific to the\n      // type\n      let specimenUnits = this.props.mapFormOptions(this.props.specimenUnits, 'unit');\n\n      specimenForm = (\n        <div className='row'>\n          <div className='col-xs-12'>\n            <BiobankSpecimenForm\n              formData={this.state.formData.specimenForm}\n              candidateId={this.state.poolData.candidateId}\n              pscid={pscid}\n              sessionId={this.state.poolData.sessionId}\n              visit={visit}\n              parentSpecimenBarcodes={barcodesString}\n              parentSpecimenIds={this.state.poolData.specimenIds}\n              specimenTypes={specimenTypes}\n              specimenTypeUnits={this.props.specimenTypeUnits}\n              specimenUnits={specimenUnits}\n              containerTypesPrimary={this.props.containerTypesPrimary}\n              containersNonPrimary={this.props.containersNonPrimary}\n              specimenTypeAttributes={this.props.specimenTypeAttributes}\n              attributeDatatypes={this.props.attributeDatatypes}\n              attributeOptions={this.props.attributeOptions}\n              capacities={this.props.capacities}\n              containerDimensions={this.props.containerDimensions}\n              containerCoordinates={this.props.containerCoordinates}\n              setParentFormData={this.setSpecimenFormData}\n              action={`${loris.BaseURL}/biobank/ajax/submitData.php?action=submitSpecimen`}\n              refreshParent={this.props.refreshParent}\n            />\n            <ButtonElement\n              label='Submit'\n            />\n          </div>\n          <div className='col-sm-3 col-xs-offset-2 action'>\n            <span className='action'>\n              <div \n                className='action-button update'\n                onClick={this.previous}\n              >\n                <span className='glyphicon glyphicon-chevron-left'/>\n              </div>\n            </span>\n            <div className='action-title'>\n              Previous\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"poolSpecimenForm\"\n        id='poolSpecimenForm'\n        onSubmit={this.handleSubmit}\n        ref=\"form\"\n      >\n        {this.formSwitch(inputForm, specimenForm)}\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n\n  validateForm(formElement, value) {\n    let formErrors = this.state.formErrors;\n\n    //validate barcode regex\n    if (formElement === \"barcode\" && value !== \"\") {\n      if (!(/^hello/.test(this.state.formData.barcode))) {\n        formErrors.barcode = true;\n      } else {\n        formErrors.barcode = false;\n      }\n    }\n\n    //validate that quantity is a number and less than capacity\n    if (formElement === \"quantity\" && value !== \"\") {\n      if (isNaN(value) || (value > this.props.capacities[this.state.currentContainerType])) {\n        formErrors.quantity = true;\n      } else {\n        formErrors.quantity = false;\n      }\n    }\n\n    //validate datatypes and regex of generated type attributes\n    let specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n    let specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n\n      let datatype = this.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"number\") {\n        if (formElement === attribute) {\n          if (isNaN(value) && value !== \"\") {\n            formErrors[attribute] = true;\n          } else {\n            formErrors[attribute] = false;\n          }\n        }\n      }\n    })\n\n    this.setState({\n      formErrors: formErrors\n    });\n  }\n\n\n  /**\n   * Handle form submission\n   * @param {object} e - Form submission event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    this.submitForm();\n  }\n\n  /*\n   * Uploads the file to the server\n   */\n  submitForm() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let preparationForm = this.state.formData.preparationForm;\n    let specimenForm = this.state.formData.specimenForm;\n    formData['preparationForm'] = JSON.stringify(preparationForm);\n    formData['specimenForm'] = JSON.stringify(specimenForm);\n\n    console.log(formData.specimenForm);\n    console.log(formData.preparationForm);\n\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        //this.props.refreshParent();\n        swal(\"Specimens Pooled Successful!\", \"\", \"success\");\n        this.props.onSuccess();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Checks if the inputted file name is valid\n   *\n   * @param {string} requiredFileName - Required file name\n   * @param {string} fileName - Provided file name\n   * @return {boolean} - true if fileName starts with requiredFileName, false\n   *   otherwise\n   */\n//  isValidFileName(requiredFileName, fileName) {\n//    if (fileName === null || requiredFileName === null) {\n//      return false;\n//    }\n//\n//    return (fileName.indexOf(requiredFileName) === 0);\n//  }\n\n  /**\n   * Validate the form\n   *\n   * @param {object} formRefs - Object containing references to React form elements\n   * @param {object} formData - Object containing form data inputed by user\n   * @return {boolean} - true if all required fields are filled, false otherwise\n   */\n  isValidForm(formRefs, formData) {\n    let isValidForm = true;\n\n    let requiredFields = {\n      pscid: null,\n      visitLabel: null,\n    };\n\n    Object.keys(requiredFields).map(function(field) {\n      if (formData[field]) {\n        requiredFields[field] = formData[field];\n      } else if (formRefs[field]) {\n        formRefs[field].props.hasError = true;\n        isValidForm = false;\n      }\n    });\n    this.forceUpdate();\n\n    return isValidForm;\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    // This lets the modal window know that there is formData\n    // and will cause a warning to be thrown of the modal window\n    // is exited\n    this.props.onChange instanceof Function && this.props.onChange();\n  \n    if (formElement === \"pscid\" && value !== \"\" && value !== undefined) {\n      this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n    }\n\n    let formData = this.state.formData;\n    let barcodeList = this.state.barcodeList;\n \n    //TODO: there must be a better way to do this\n    if (isNaN(formElement)) {\n      formData[formElement] = value;\n    } else {\n      barcodeList[formElement] = value;\n    }\n\n    this.setState({\n      formData,\n      barcodeList\n    });\n  }\n\n  setPreparationFormData(preparationFormData) {\n    let formData = this.state.formData;\n    formData.preparationForm = preparationFormData;\n    \n    this.setState({formData});\n  }\n\n  setSpecimenFormData(specimenFormData) {\n    let formData = this.state.formData;\n    formData.specimenForm = specimenFormData;\n  \n    this.setState({formData});\n  }\n}\n\nPoolSpecimenForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired,\n  refreshTable: React.PropTypes.func\n};\n\nexport default PoolSpecimenForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/poolSpecimenForm.js","\n/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenPreparationForm extends React.Component {\n  constructor() {\n    super();\n\n    this.getSpecimenProtocolFields = this.getSpecimenProtocolFields.bind(this);\n    this.setPreparation = this.setPreparation.bind(this);\n    this.addData = this.addData.bind(this);\n    this.setData = this.setData.bind(this);\n  }\n\n  setPreparation(name, value) {\n    let preparation = this.props.specimen.preparation;\n    preparation[name] = value;\n    this.props.setSpecimenData('preparation', preparation);\n  }\n\n  addData() {\n    let preparation = this.props.specimen.preparation;\n    preparation.data = {};\n    this.props.setSpecimenData('preparation', preparation);\n  }\n\n  setData(name, value) {\n    let data = this.props.specimen.preparation.data;\n    data[name] = value;\n    this.setPreparation('data', data);\n  }\n\n  // TODO: decouple this code from the collectionForm by make it a React Component\n  // This generates all the form fields for a given specimen protocol\n  getSpecimenProtocolFields(fieldsObject) {\n    let specimenProtocolFields = Object.keys(fieldsObject).map((attribute) => {\n      let datatype = this.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\n      if (datatype === \"text\" || datatype === \"number\") {\n        if (fieldsObject[attribute]['refTableId'] == null) {\n          return (\n            <TextboxElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              onUserInput={this.setData}\n              required={fieldsObject[attribute]['required']}\n              value={this.props.specimen.preparation.data[attribute]}\n            />\n          );\n        }\n\n        if (fieldsObject[attribute]['refTableId'] !== null) {\n          return (\n            <SelectElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              options={this.props.attributeOptions[fieldsObject[attribute]['refTableId']]}\n              onUserInput={this.setData}\n              required={fieldsObject[attribute]['required']}\n              value={this.props.specimen.preparation.data[attribute]}\n            />\n          );\n        }\n      }\n\n      if (datatype === \"datetime\") {\n        return (\n          <DateElement\n            name={attribute}\n            label={fieldsObject[attribute]['name']}\n            onUserInput={this.setData}\n            ref={attribute}\n            required={fieldsObject[attribute]['required']}\n            value={this.props.specimen.preparation.data[attribute]}\n          />\n        );\n      }\n\n      if (datatype === \"boolean\") {\n      }\n    });\n\n    return specimenProtocolFields;\n  }\n\n  render() {\n\n    let submitButton;\n    if (this.props.data.specimen.preparation) {\n      submitButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    } else {\n      submitButton = (\n        <ButtonElement label=\"Submit\"/>\n      );\n    }\n\n    let specimenProtocolFields;\n    if (this.props.specimen.preparation.protocolId) {\n      let specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.props.specimen.preparation.protocolId];\n\n      if (specimenProtocolFieldsObject) {\n        if (this.props.specimen.preparation.data) {\n          specimenProtocolFields = this.getSpecimenProtocolFields(specimenProtocolFieldsObject);\n        } else {\n          this.addData();\n        }\n      }\n    }\n\n    return (\n      <FormElement\n        name=\"specimenPreparation\"\n        onSubmit={this.props.saveSpecimen}\n        ref=\"form\"\n      >\n        <SelectElement\n          name=\"protocolId\"\n          label=\"Protocol\"\n          options={this.props.specimenProtocols}\n          onUserInput={this.setPreparation}\n          required={true}\n          value={this.props.specimen.preparation.protocolId}\n        />\n        {specimenProtocolFields}\n        <DateElement\n          name=\"date\"\n          label=\"Date\"\n          onUserInput={this.setPreparation}\n          required={true}\n          value={this.props.specimen.preparation.date}\n        />\n        <TimeElement\n          name=\"time\"\n          label=\"Time\"\n          onUserInput={this.setPreparation}\n          required={true}\n          value={this.props.specimen.preparation.time}\n        />\n        <TextareaElement\n          name=\"comments\"\n          label=\"Comments\"\n          onUserInput={this.setPreparation}\n          value={this.props.specimen.preparation.comments}\n        />\n        {submitButton} \n      </FormElement>\n    );\n  }\n\n}\n\nSpecimenPreparationForm.propTypes = {\n}\n\nexport default SpecimenPreparationForm;\n\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/preparationForm.js","import ContainerBarcodeForm from './containerBarcodeForm.js';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankContainerForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formErrors: {},\n      errorMessage: null,\n      containerList: {1: {}},\n      countContainers: 1,\n      collapsed: {1: true},\n      copyMultiplier: 1,\n    };\n\n    this.toggleCollapse = this.toggleCollapse.bind(this);\n    this.addContainer = this.addContainer.bind(this);\n    this.setContainer = this.setContainer.bind(this);\n    this.setCopyMultiplier = this.setCopyMultiplier.bind(this);\n    this.copyContainer = this.copyContainer.bind(this);\n    this.removeContainer = this.removeContainer.bind(this);\n    this.saveContainerList = this.saveContainerList.bind(this);\n    this.save = this.save.bind(this);\n  }\n\n  toggleCollapse(key) {\n    let collapsed = this.state.collapsed;\n    collapsed[key] = !collapsed[key];\n    this.setState({collapsed});\n  }\n\n  saveContainerList() {\n    let containerList = this.state.containerList;\n    let availableId = Object.keys(this.props.containerStati).find(\n      key => this.props.containerStati[key] === 'Available'\n    );\n\n    for (let container in containerList) {\n      containerList[container].statusId = availableId;\n      containerList[container].temperature = 20;\n      this.save(containerList[container], this.props.saveContainer).then(\n        () => {this.props.refreshParent(); this.props.onSuccess();}\n      );\n    }\n  }\n\n  save(data, url) {\n    return new Promise(resolve => {\n      $.ajax({\n        type: 'POST',\n        url: url,\n        data: {data: JSON.stringify(data)},\n        cache: false,\n        success: () => {\n          resolve();\n          swal(\"Container Submission Successful!\", \"\", \"success\");\n        },\n        error: function(err) {\n          console.error(err);\n          let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n          this.setState({\n            errorMessage: msg,\n          });\n          swal(msg, \"\", \"error\");\n        }.bind(this)\n      });\n    });\n  }\n\n  setContainer(name, value, key) {\n    this.props.onChange instanceof Function && this.props.onChange();\n    let siteId = this.state.siteId;\n    let containerList = this.state.containerList;\n    if (name === 'siteId') {\n       siteId = value;\n       for (let container in containerList) {\n         containerList[container].originId = siteId;\n         containerList[container].locationId = siteId;\n       }\n    } else {\n      containerList[key][name] = value;\n    }\n    this.setState({containerList, siteId});\n  }\n\n  addContainer() {\n    let containerList = this.state.containerList;\n    let count = this.state.countContainers;\n    let collapsed = this.state.collapsed;\n    let siteId = this.state.siteId;\n    let temperature = 20;\n\n    // get Id of available status\n    let statusId = Object.keys(this.props.containerStati).find(\n      key => this.props.containerStati[key] === 'Available'\n    );\n\n    containerList[count+1] = {\n      statusId: statusId,\n      originId: siteId,\n      locationId: siteId,\n      temperature: temperature\n    };\n\n    collapsed[count+1] = true;  \n\n    this.setState({\n      containerList: containerList,\n      countContainers: count + 1,\n      collapsed: collapsed,\n    });\n  }\n\n  setCopyMultiplier(e) {\n    let copyMultiplier = e.target.value;\n    this.setState({copyMultiplier});\n  }\n\n  copyContainer(key) {\n    let count = this.state.countContainers;\n    let collapsed = this.state.collapsed;\n    let nextKey = count+1;\n    let containerList = this.state.containerList;\n    let multiplier = this.state.copyMultiplier\n\n    for (let i=1; i<=multiplier; i++) {\n      containerList[nextKey] = JSON.parse(JSON.stringify(containerList[key]));\n      delete containerList[nextKey].barcode;\n      collapsed[nextKey] = true;\n      nextKey++;\n    }    \n\n    this.setState({\n      containerList: containerList,\n      countContainers: nextKey,\n      collapsed: collapsed\n    });\n  }\n\n  removeContainer(key) {\n    let containerList = this.state.containerList;\n    delete containerList[key];\n    this.setState({containerList});\n  }\n\n  render() {\n    //Generates new Barcode Form everytime the addContainer button is pressed\n    let containerListArray = Object.keys(this.state.containerList);\n    let containers = [];\n    let i = 1;\n    for (let key of containerListArray) {\n      containers.push(\n        <ContainerBarcodeForm\n          key={key}\n          containerKey={key}\n          id={i}\n          collapsed={this.state.collapsed[key]}\n          toggleCollapse={this.toggleCollapse}\n          container={this.state.containerList[key] || null}\n          removeContainer={containerListArray.length !== 1 ? () => this.removeContainer(key) : null}\n          addContainer={i == containerListArray.length ? this.addContainer : null}\n          setCopyMultiplier={this.setCopyMultiplier}\n          copyMultiplier={this.state.copyMultiplier}\n          copyContainer={i == containerListArray.length && this.state.containerList[key] ? this.copyContainer : null}\n          setContainer={this.setContainer}\n          onChange={this.props.onChange}\n          containerTypesNonPrimary={this.props.containerTypesNonPrimary}\n          containerBarcodesNonPrimary={this.props.containerBarcodesNonPrimary}\n        />\n      );\n     \n      i++;\n    }\n\n    return (\n      <FormElement\n        name=\"containerForm\"\n        onSubmit={this.saveContainerList}\n        ref=\"form\"\n      >\n        <br/>\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <SelectElement\n              name=\"siteId\"\n              label=\"Site\"\n              options={this.props.centers}\n              onUserInput={this.setContainer}\n              required={true}\n              value={this.state.siteId}\n            />\n          </div>\n        </div>\n        {containers}\n          <div className=\"col-xs-3 col-xs-offset-9\">\n            <ButtonElement label=\"Submit\"/>\n          </div>\n      </FormElement>\n    );\n  }\n}\n\nBiobankContainerForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  barcode: React.PropTypes.string,\n  refreshTable: React.PropTypes.func\n};\n\nexport default BiobankContainerForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerForm.js","/**\n * Container Barcode Form\n *\n * Acts a subform for ContainerForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass ContainerBarcodeForm extends React.Component {\n  constructor() {\n    super();\n   \n    this.setContainer = this.setContainer.bind(this);\n    this.copy = this.copy.bind(this);\n  }\n\n  copy() {\n    this.props.copyContainer(this.props.containerKey);\n  }\n\n  //TODO: change form.js so this isn't necessary\n  setContainer(name, value) {\n    this.props.setContainer(name, value, this.props.containerKey);\n  }\n\n  render() {\n    // HR TODO: All this CSS should eventually be moved\n    let addContainerButton;\n    let addContainerText;\n    let copyContainerButton;\n    let copyContainerText;\n    if (this.props.addContainer) {\n      addContainerButton = (\n        <span className='action'>\n          <div\n            className='action-button add'\n            onClick={this.props.addContainer}\n          >\n          +\n          </div>\n        </span>\n      );\n\n      addContainerText = (\n        <span className='action-title'>\n          New Entry\n        </span>\n      );\n    }   \n    \n    if (this.props.copyContainer) {\n      copyContainerButton = ( \n        <span className='action'>\n          <div\n            className='action-button add'\n            onClick={this.copy}\n          >   \n            <span className='glyphicon glyphicon-duplicate'/>\n          </div>\n        </span>\n      );  \n      copyContainerText = ( \n        <span className='action-title'>\n          <input \n            className='form-control input-sm'\n            type='number'\n            min='1'\n            max='50'\n            style={{width: 50, display: 'inline'}}\n            onChange={this.props.setCopyMultiplier}\n            value={this.props.copyMultiplier}\n          />  \n          Copies\n        </span>\n      );  \n    }   \n\n    let removeContainerButton;\n    if (this.props.removeContainer) {\n      const glyphStyle = { \n        color: '#DDDDDD',\n        marginLeft: 10, \n        cursor: 'pointer',\n        fontSize: 15\n      }   \n\n      removeContainerButton = ( \n        <span \n          className='glyphicon glyphicon-remove' \n          onClick={this.props.removeContainer}\n          style={glyphStyle}\n        />\n      );  \n    }\n\n    return (\n      <FormElement\n        name='container'\n      >\n        <div className='row'>\n          <div className='col-xs-11'>\n            <div>\n            <TextboxElement\n              name='barcode'\n              label={'Barcode ' + this.props.id}\n              onUserInput={this.setContainer}\n              ref='barcode'\n              required={true}\n              value={this.props.container.barcode}\n            />\n            </div>\n          </div>\n          <div className='col-xs-1' style={{paddingLeft:0, marginTop:10}}>\n            <span\n              className= {this.props.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up'}\n              style={{cursor: 'pointer', fontSize:15, position:'relative', right:40}}\n              data-toggle='collapse'\n              data-target={'#item-' + this.props.containerKey}\n              onClick={() => this.props.toggleCollapse(this.props.containerKey)}\n            />\n            {removeContainerButton}\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xs-2'/>\n          <div className='col-xs-9'>\n            <div id={'item-' + this.props.containerKey} className='collapse'>\n              <SelectElement\n                name='typeId'\n                label='Container Type'\n                options={this.props.containerTypesNonPrimary}\n                onUserInput={this.setContainer}\n                required={true}\n                value={this.props.container.typeId}\n              />\n            </div>\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xs-11'>\n            <div className='col-xs-3'/>\n            <div className='col-xs-4 action'>\n              {addContainerButton}\n              {addContainerText}\n            </div>\n            <div className='col-xs-4 action'>\n              {copyContainerButton}\n              {copyContainerText}\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n}\n\nContainerBarcodeForm.propTypes = {\n}\n\nexport default ContainerBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerBarcodeForm.js","/**\n * This file contains React components for Tabs component.\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\n/**\n * Tabs Component.\n * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n * and corresponding tab panes.\n *\n * ================================================\n * Usage:\n *\n * 1. Define an array of tabs with IDs and labels\n *\n * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n *\n * 2. Pass tabList as <Tab> property and <TabPane> as child\n *  ```\n * <Tabs tabs={tabList} defaultTab=\"tab1\">\n *   <TabPane TabId={tabList[0].id}>\n *     // Tab content goes here\n *   </TabPane>\n * </Tabs>\n * ```\n * =================================================\n *\n */\nclass Tabs extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    const hash = window.location.hash;\n    let activeTab = \"\";\n\n    /**\n     * Determine the initial active tab in this order\n     * 1. Try to infer from the URL, otherwise\n     * 2. Try to infer from the defaultTab prop, otherwise\n     * 3. Set to be the first tab of the list\n     */\n    if (this.props.updateURL && hash) {\n      activeTab = hash.substr(1);\n    } else if (this.props.defaultTab) {\n      activeTab = this.props.defaultTab;\n    } else if (this.props.tabs.length > 0) {\n      activeTab = this.props.tabs[0].id;\n    }\n\n    this.state = {\n      activeTab: activeTab\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.getTabs = this.getTabs.bind(this);\n    this.getTabPanes = this.getTabPanes.bind(this);\n  }\n\n  handleClick(tabId, e) {\n    this.setState({activeTab: tabId});\n    this.props.onTabChange(tabId);\n\n    // Add tab href to URL querystring and scroll the page to top\n    if (this.props.updateURL) {\n      const scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n      window.location.hash = e.target.hash;\n      $('html,body').scrollTop(scrollDistance);\n    }\n  }\n\n  getTabs() {\n    let tabs = (this.props.tabs).map(function(tab) {\n      let tabClass = this.state.activeTab === tab.id ? 'active' : null;\n      let href = \"#\" + tab.id;\n      let tabID = \"tab-\" + tab.id;\n      return (\n        <li\n          role=\"presentation\"\n          className={tabClass}\n          key={tab.id}\n        >\n          <a id={tabID}\n             href={href}\n             role=\"tab\"\n             data-toggle=\"tab\"\n             onClick={this.handleClick.bind(null, tab.id)}\n          >\n            {tab.label}\n          </a>\n        </li>\n      );\n    }.bind(this));\n\n    return tabs;\n  }\n\n  getTabPanes() {\n    let tabPanes = React.Children.map(this.props.children, function(child, key) {\n      if (child) {\n        return React.cloneElement(child, {\n          activeTab: this.state.activeTab,\n          key: key\n        });\n      }\n    }.bind(this));\n\n    return tabPanes;\n  }\n\n  render() {\n    let tabs = this.getTabs();\n    let tabPanes = this.getTabPanes();\n    let tabStyle = {\n      marginLeft: 0,\n      marginBottom: '5px'\n    };\n\n    return (\n      <div>\n        <ul className=\"nav nav-tabs\" role=\"tablist\" style={tabStyle}>\n          {tabs}\n        </ul>\n        <div className=\"tab-content\">\n          {tabPanes}\n        </div>\n      </div>\n    );\n  }\n}\nTabs.propTypes = {\n  tabs: React.PropTypes.array.isRequired,\n  defaultTab: React.PropTypes.string,\n  updateURL: React.PropTypes.bool\n};\nTabs.defaultProps = {\n  onTabChange: function() {},\n  // Set updateURL to default to true but allow for change\n  // Nested tabs should set this variable to false\n  updateURL: true\n};\n\n/**\n * Allows to dynamically render vertical tabs corresponding to tab panes.\n */\n\nclass VerticalTabs extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const hash = window.location.hash;\n    let activeTab = \"\";\n\n    /**\n     * Determine the initial active tab in this order\n     * 1. Try to infer from the URL, otherwise\n     * 2. Try to infer from the defaultTab prop, otherwise\n     * 3. Set to be the first tab of the list\n     */\n    if (this.props.updateURL && hash) {\n      activeTab = hash.substr(1);\n    } else if (this.props.defaultTab) {\n      activeTab = this.props.defaultTab;\n    } else if (this.props.tabs.length > 0) {\n      activeTab = this.props.tabs[0].id;\n    }\n\n    this.state = {\n      activeTab: activeTab\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.getTabs = this.getTabs.bind(this);\n    this.getTabPanes = this.getTabPanes.bind(this);\n  }\n\n  handleClick(tabId, e) {\n    this.setState({activeTab: tabId});\n    this.props.onTabChange(tabId);\n\n    // Add tab href to URL querystring and scroll the page to top\n    if (this.props.updateURL) {\n      const scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n      window.location.hash = e.target.hash;\n      $('html,body').scrollTop(scrollDistance);\n    }\n  }\n\n  getTabs() {\n    let tabs = (this.props.tabs).map(function(tab) {\n      let tabClass = this.state.activeTab === tab.id ? 'active' : null;\n      let href = \"#\" + tab.id;\n      let tabID = \"tab-\" + tab.id;\n      return (\n        <li\n          role=\"presentation\"\n          className={tabClass}\n          key={tab.id}\n        >\n          <a id={tabID}\n             href={href}\n             role=\"tab\"\n             data-toggle=\"tab\"\n             onClick={this.handleClick.bind(null, tab.id)}\n          >\n            {tab.label}\n          </a>\n        </li>\n      );\n    }.bind(this));\n\n    return tabs;\n  }\n\n  getTabPanes() {\n    let tabPanes = React.Children.map(this.props.children, function(child, key) {\n      if (child) {\n        return React.cloneElement(child, {\n          activeTab: this.state.activeTab,\n          key: key\n        });\n      }\n    }.bind(this));\n\n    return tabPanes;\n  }\n\n  render() {\n    let tabs = this.getTabs();\n    let tabPanes = this.getTabPanes();\n    let tabStyle = {\n      marginLeft: 0,\n      marginBottom: '5px'\n    };\n\n    return (\n      <div>\n        <div className=\"tabbable col-md-3 col-sm-3\">\n          <ul className=\"nav nav-pills nav-stacked\" role=\"tablist\" style={tabStyle}>\n            {tabs}\n          </ul>\n        </div>\n        <div className=\"tab-content col-md-9 col-sm-9\">\n          {tabPanes}\n        </div>\n      </div>\n    );\n  }\n}\nVerticalTabs.propTypes = {\n  tabs: React.PropTypes.array.isRequired,\n  defaultTab: React.PropTypes.string,\n  updateURL: React.PropTypes.bool\n};\nVerticalTabs.defaultProps = {\n  onTabChange: function() {},\n  // Set updateURL to default to true but allow for change\n  // Nested tabs should set this variable to false\n  updateURL: true\n};\n\n/*\n * TabPane component.\n * Used to wrap content for every tab.\n */\nclass TabPane extends React.Component {\n  render() {\n    let classList = \"tab-pane\";\n    let title;\n\n    if (this.props.TabId === this.props.activeTab) {\n      classList += \" active\";\n    }\n    if (this.props.Title) {\n      title = <h1>{this.props.Title}</h1>;\n    }\n\n    return (\n      <div role=\"tabpanel\" className={classList} id={this.props.TabId}>\n        {title}\n        {this.props.children}\n      </div>\n    );\n  }\n}\nTabPane.propTypes = {\n  TabId: React.PropTypes.string.isRequired,\n  Title: React.PropTypes.string,\n  activeTab: React.PropTypes.string\n};\n\nexport {\n  Tabs,\n  VerticalTabs,\n  TabPane\n};\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Tabs.js","/**\n * This file contains React components for Modal component.\n *\n * @author Henri Rabalais\n * @version 1.1.0\n *\n */\n\nimport Modal from './Modal';\n\n/**\n * Modal Component.\n * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n *\n * ================================================\n * Usage:\n *\n * =================================================\n *\n */\n\nclass FormModal extends React.Component {\n  constructor() {\n    super();\n    this.closeModal = this.closeModal.bind(this);\n    this.confirmClose = this.confirmClose.bind(this);\n  }\n\n  closeModal() {\n    this.props.closeAction instanceof Function && this.props.closeAction();\n    this.props.toggleModal();\n  }\n\n  confirmClose() {\n    if (this.props.throwWarning) {\n      swal({\n        title: \"Are You Sure?\",\n        text: \"Leaving the form will result in the loss of any information entered.\",\n        type: \"warning\",\n        showCancelButton: true,\n        confirmButtonText: 'Proceed',\n        cancelButtonText: 'Cancel',\n      },\n      function() {\n        this.closeModal();\n      }.bind(this));\n    } else {\n      this.closeModal();\n    }\n  }\n\n  render() {\n    return (\n      <Modal \n        closeModal={this.confirmClose} \n        show={this.props.show}\n        {...this.props} \n      >\n        {this.props.children}\n      </Modal>\n    );\n  }\n}\n\nFormModal.propTypes = {\n  closeAction: React.PropTypes.func,\n  togglemodal: React.PropTypes.func.isRequired,\n  throwWarning: React.PropTypes.bool.isRequired,\n};\n\nFormModal.defaultProps = {\n  throwWarning: true,\n}\n\nexport default FormModal;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/FormModal.js","/**\n * This file contains React components for Modal component.\n *\n * @author Henri Rabalais\n * @version 1.1.0\n *\n */\n\n/**\n * Modal Component.\n * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n *\n * ================================================\n * Usage:\n *\n * =================================================\n *\n */\nclass Modal extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n  }\n\n  render() {\n    // Black Background with Alpha Channel\n    const backdropStyle = {\n      position: 'fixed',\n      zIndex: 9998,\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundColor: 'rgba(0,0,0,0.3)',\n      padding: 50\n    };\n\n    // White Modal Window\n    const modalStyle = {\n      position: 'relative',\n      maxWidth: 1000,\n      maxHeight: '100%',\n      margin: '0 auto',\n      backgroundColor: '#fff',\n      borderRadius: 10,\n      overflowY: 'auto',\n      zIndex: 9999\n    };\n\n    const titleStyle = {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      background: '#093782',\n      height: '70px',\n      borderTopRightRadius: '10',\n      color: '#FFFFFF',\n      fontSize: 24,\n      padding: 20,\n    }\n\n    const glyphStyle = {\n      marginLeft: 'auto',\n      cursor: 'pointer'\n    }\n\n    const bodyStyle = {\n      padding: 15\n    }\n  \n    let modal;\n    if (this.props.show) {\n      modal = (\n        <div style={backdropStyle} onClick={this.props.closeModal}>\n          <div\n            style={modalStyle}\n            onClick={e => {\n              e.stopPropagation();\n            }}\n          >\n            <div\n              style={titleStyle}\n            >\n              {this.props.title}\n              <span \n                style={glyphStyle}\n                onClick={this.props.closeModal}\n              >\n                ×\n              </span>\n            </div>\n            <div\n              style={bodyStyle}\n            >\n              {this.props.children}\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {modal}\n      </div>\n    );\n  }\n}\n\nModal.propTypes = {\n  title: React.PropTypes.string,\n  show: React.PropTypes.bool.isRequired,\n  closeModal: React.PropTypes.func,\n  openModal: React.PropTypes.func\n};\n\nexport default Modal;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Modal.js","/**\n * This file contains React component for Loader\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n */\n\n/**\n * Loader component\n */\nclass Loader extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n\n    return (\n      <div className='loader-container'>\n        <div className=\"loader\"/>\n      </div>\n\n\n    );\n  }\n}\n\nexport default Loader;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Loader.js","/**\n * Modify behaviour of specified column cells in the Data Table component\n * @param {string} column - column name\n * @param {string} cell - cell content\n * @param {arrray} rowData - array of cell contents for a specific row\n * @param {arrray} rowHeaders - array of table headers (column names)\n * @return {*} a formated table cell for a given column\n */\nfunction formatColumn(column, cell, rowData, rowHeaders) {\n  // If a column if set as hidden, don't display it\n  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n  //  return null;\n  //}\n\n  // Create the mapping between rowHeaders and rowData in a row object.\n  var row = {};\n  rowHeaders.forEach(function(header, index) {\n    row[header] = rowData[index];\n  }, this);\n\n  // create array of classes to be added to td tag\n  var classes = [];\n\n  // convert array to string, with blank space separator\n  classes = classes.join(\" \");\n\n  //const hasWritePermission = loris.userHasPermission('media_read');\n  if (column === 'Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Barcode'];\n    return <td className= {classes}><a href={specimenURL}>{cell}</a></td>;\n  }\n\n  if (column === 'Parent Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\" + row['Parent Barcode'];\n    return <td className= {classes}><a href={specimenURL}>{cell}</a></td>; \n}\n\n  if (column === 'Container Barcode') {\n    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Container Barcode'];\n    return <td className= {classes}><a href={containerURL}>{cell}</a></td>;\n}\n\n // if (column === 'Visit Label') {\n //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n //   }\n // }\n\n // if (column === 'Edit Metadata') {\n //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n // }\n\n  return <td className={classes}>{cell}</td>;\n}\n\nexport default formatColumn;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/columnFormatterSpecimen.js","/**\n * Modify behaviour of specified column cells in the Data Table component\n * @param {string} column - column name\n * @param {string} cell - cell content\n * @param {arrray} rowData - array of cell contents for a specific row\n * @param {arrray} rowHeaders - array of table headers (column names)\n * @return {*} a formated table cell for a given column\n */\nfunction formatColumn(column, cell, rowData, rowHeaders) {\n  // If a column if set as hidden, don't display it\n  //if (loris.hiddenHeaders.indexOf(column) > -1) {\n  //  return null;\n  //}\n\n  // Create the mapping between rowHeaders and rowData in a row object.\n  var row = {};\n  rowHeaders.forEach(function(header, index) {\n    row[header] = rowData[index];\n  }, this);\n\n  // create array of classes to be added to td tag\n  var classes = [];\n\n  // convert array to string, with blank space separator\n  classes = classes.join(\" \");\n\n  //const hasWritePermission = loris.userHasPermission('media_read');\n  if (column === 'Barcode') {\n    var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Barcode'];\n    return <td className= {classes}><a href={containerURL}>{cell}</a></td>;\n  }\n\n  if (column === 'Parent Barcode') {\n    var specimenURL = loris.BaseURL + \"/biobank/container/?barcode=\" + row['Parent Barcode'];\n    return <td className= {classes}><a href={containerURL}>{cell}</a></td>; \n}\n\n // if (column === 'Visit Label') {\n //   if (row[\"Cand ID\"] !== null && row[\"Session ID\"]) {\n //     var sessionURL = loris.BaseURL + \"/instrument_list/?candID=\" +\n //       row[\"Cand ID\"] + \"&sessionID=\" + row[\"Session ID\"];\n //     return <td className={classes}><a href={sessionURL}>{cell}</a></td>;\n //   }\n // }\n\n // if (column === 'Edit Metadata') {\n //   var editURL = loris.BaseURL + \"/biobank/edit/?id=\" + row['Edit Metadata'];\n //   return <td className={classes}><a href={editURL}>Edit</a></td>;\n // }\n\n  return <td className={classes}>{cell}</td>;\n}\n\nexport default formatColumn;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/columnFormatterContainer.js"],"sourceRoot":""}