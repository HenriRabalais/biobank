{"version":3,"sources":["webpack:///modules/biobank/js/specimenIndex.js","webpack:///webpack/bootstrap 4408ccbeb91cf7c794fc?9d57********","webpack:///./modules/biobank/jsx/specimenIndex.js","webpack:///./jsx/Panel.js?b4c8","webpack:///./modules/biobank/jsx/specimenForm.js?35c0","webpack:///./modules/biobank/jsx/barcodeForm.js?02a4","webpack:///./modules/biobank/jsx/collectionForm.js?e0f7","webpack:///./jsx/Modal.js?d3d7","webpack:///./jsx/Loader.js?06c1*","webpack:///./modules/biobank/jsx/lifeCycle.js?5ad9","webpack:///./modules/biobank/jsx/specimen.js","webpack:///./modules/biobank/jsx/preparationForm.js","webpack:///./modules/biobank/jsx/containerMoveForm.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_specimen","_specimen2","args","QueryString","get","document","currentScript","src","$","biobankSpecimen","React","createElement","className","specimenPageDataURL","loris","BaseURL","barcode","ReactDOM","render","getElementById","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","Panel","_React$Component","this","_this","getPrototypeOf","state","collapsed","initCollapsed","panelClass","toggleCollapsed","bind","setState","glyphClass","pencilGlyph","edit","style","marginRight","cursor","onClick","plusGlyph","add","removeGlyph","cancel","panelHeading","title","data-toggle","data-target","role","height","children","Component","propTypes","PropTypes","string","func","defaultProps","_barcodeForm","_barcodeForm2","BiobankSpecimenForm","formData","barcodeFormList","errorMessage","formErrors","countBarcodeForms","handleSubmit","validateForm","setFormData","specimenSubmit","addBarcodeForm","setBarcodeFormData","child","specimenId","candidateId","sessionId","unitId","_this2","glyphStyle","color","margin","buttonStyle","appearance","outline","boxShadow","borderColor","backgroundColor","barcodeForms","_loop","push","setParentFormData","specimenTypes","containerTypesPrimary","containerBarcodesNonPrimary","specimenTypeAttributes","attributeDatatypes","capacities","specimenTypeUnits","units","button","type","removeBarcodeForm","globalFields","remainingQuantityFields","StaticElement","label","text","pscid","visit","TextboxElement","name","onUserInput","required","quantity","SelectElement","options","specimenUnits","emptyOption","pSCIDs","ref","visits","visitLabel","disabled","FormElement","onSubmit","ButtonElement","formElement","_this3","test","isNaN","currentContainerType","specimenTypeFieldsObject","currentSpecimenType","keys","map","attribute","datatype","e","preventDefault","formRefs","refs","isValidForm","JSON","stringify","formObj","FormData","append","ajax","url","action","data","cache","contentType","processData","xhr","window","XMLHttpRequest","success","event","CustomEvent","dispatchEvent","refreshTable","swal","closeModal","error","err","console","msg","responseJSON","message","requiredFields","field","hasError","forceUpdate","sessionData","barcodeFormData","barcodeId","index","splice","DataURL","isRequired","_collectionForm","_collectionForm2","BiobankBarcodeForm","setSpecimenFormData","stati","specimenFormData","object","_defineProperty","SpecimenCollectionForm","specimenType","containerType","setSpecimenTypeFieldFormData","getSpecimenTypeFields","handleUpdate","updateSpecimen","containerId","collection","date","time","comments","parentContainerField","parentContainer","updateButton","unit","specimenTypeFields","specimenFields","DateElement","minYear","maxYear","TimeElement","TextareaElement","showCancelButton","confirmButtonText","cancelButtonText","isConfirm","toggleEdit","fieldsObject","attribte","_$$ajax","parse","updateCollection","Modal","show","openModal","modal","backdropStyle","position","zIndex","top","bottom","left","right","padding","modalStyle","maxWidth","maxHeight","borderRadius","overflowY","titleStyle","display","flexDirection","alignItems","background","borderTopRightRadius","fontSize","bodyStyle","footerStyle","buttonClass","buttonContent","stopPropagation","Loader","LifeCycle","tooltip","collectionNode","collectionTooltip","data-html","data-placement","sites","locationId","preparationNode","preparation","analysisNode","analysis","line","_preparationForm","_preparationForm2","_containerMoveForm","_containerMoveForm2","_Modal","_Modal2","_Panel","_Panel2","_Loader","_Loader2","_specimenForm","_specimenForm2","_lifeCycle","_lifeCycle2","BiobankSpecimen","Data","isLoaded","loadedData","editCollection","addPreparation","editPreparation","fetchSpecimenData","toggleEditCollection","toggleAddPreparation","toggleEditPreparation","mapFormOptions","updatePreparation","dataType","errorCode","errorMsg","rawObject","targetAttribute","undefined","parentSpecimenBarcode","specimenURL","href","parentContainerBarcode","containerURL","containersNonPrimary","marginLeft","addAliquotButton","userHasPermission","parentTypeId","specimen","typeId","addAliquotButtonContent","container","candidateInfo","PSCID","sessionInfo","Visit_label","addPreparationButton","collectionPanel","collectionPanelForm","cancelEditCollectionButton","dataObject","preparationPanel","preparationPanelForm","cancelAddPreparationButton","cancelEditPreparationButton","specimenProtocolAttributes","specimenProtocols","insertAction","updateAction","protocolId","protocol","analysisPanel","globals","containerStati","statusId","status","RBiobankSpecimen","createFactory","SpecimenPreparationForm","currentProtocol","setSpecimenProtocolFieldFormData","getSpecimenProtocolFields","handleSave","savePreparation","specimenProtocolFieldsObject","submitButton","specimenProtocolFields","currentSpecimenProtocol","preparationFields","ContainerMoveForm","containerSubmit"],"mappings":"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","file":"./modules/biobank/js/specimenIndex.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _specimen = __webpack_require__(16);\n\t\n\tvar _specimen2 = _interopRequireDefault(_specimen);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar args = QueryString.get(document.currentScript.src); /* global ReactDOM */\n\t\n\t$(function () {\n\t  var biobankSpecimen = React.createElement(\n\t    \"div\",\n\t    { className: \"page-specimen-form\" },\n\t    React.createElement(\n\t      \"div\",\n\t      { className: \"row\" },\n\t      React.createElement(\n\t        \"div\",\n\t        { className: \"col-md-9 col-lg-12\" },\n\t        React.createElement(_specimen2.default, {\n\t          specimenPageDataURL: loris.BaseURL + \"/biobank/ajax/SpecimenInfo.php?action=getSpecimenData&barcode=\" + args.barcode\n\t        })\n\t      )\n\t    )\n\t  );\n\t\n\t  ReactDOM.render(biobankSpecimen, document.getElementById(\"lorisworkspace\"));\n\t});\n\n/***/ },\n/* 1 */,\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Panel\n\t *\n\t * @author Alex I.\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Panel component\n\t * Wraps children in a collapsible bootstrap panel\n\t */\n\tvar Panel = function (_React$Component) {\n\t  _inherits(Panel, _React$Component);\n\t\n\t  function Panel(props) {\n\t    _classCallCheck(this, Panel);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).call(this, props));\n\t\n\t    _this.state = {\n\t      collapsed: _this.props.initCollapsed\n\t    };\n\t\n\t    // Initialize panel class based on collapsed status\n\t    _this.panelClass = _this.props.initCollapsed ? \"panel-collapse collapse\" : \"panel-collapse collapse in\";\n\t\n\t    _this.toggleCollapsed = _this.toggleCollapsed.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Panel, [{\n\t    key: \"toggleCollapsed\",\n\t    value: function toggleCollapsed() {\n\t      this.setState({ collapsed: !this.state.collapsed });\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      // Change arrow direction based on collapse status\n\t      var glyphClass = this.state.collapsed ? \"glyphicon pull-right glyphicon-chevron-down\" : \"glyphicon pull-right glyphicon-chevron-up\";\n\t\n\t      var pencilGlyph = void 0;\n\t      if (this.props.edit) {\n\t        pencilGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-pencil\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.edit\n\t        });\n\t      }\n\t\n\t      var plusGlyph = void 0;\n\t      if (this.props.add) {\n\t        plusGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-plus\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.add\n\t        });\n\t      }\n\t\n\t      var removeGlyph = void 0;\n\t      if (this.props.cancel) {\n\t        removeGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-remove\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.cancel\n\t        });\n\t      }\n\t\n\t      // Add panel header, if title is set\n\t      var panelHeading = this.props.title ? React.createElement(\n\t        \"div\",\n\t        {\n\t          className: \"panel-heading\"\n\t        },\n\t        React.createElement(\"span\", {\n\t          className: glyphClass,\n\t          onClick: this.toggleCollapsed,\n\t          \"data-toggle\": \"collapse\",\n\t          \"data-target\": '#' + this.props.id,\n\t          style: { cursor: 'pointer' }\n\t        }),\n\t        pencilGlyph,\n\t        plusGlyph,\n\t        removeGlyph,\n\t        this.props.title\n\t      ) : '';\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"panel panel-primary\" },\n\t        panelHeading,\n\t        React.createElement(\n\t          \"div\",\n\t          { id: this.props.id, className: this.panelClass, role: \"tabpanel\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"panel-body\", style: { height: this.props.height } },\n\t            this.props.children\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Panel;\n\t}(React.Component);\n\t\n\tPanel.propTypes = {\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  edit: React.PropTypes.func,\n\t  add: React.PropTypes.func\n\t};\n\tPanel.defaultProps = {\n\t  initCollapsed: false,\n\t  id: 'default-panel',\n\t  height: '100%'\n\t};\n\t\n\texports.default = Panel;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _barcodeForm = __webpack_require__(4);\n\t\n\tvar _barcodeForm2 = _interopRequireDefault(_barcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankSpecimenForm = function (_React$Component) {\n\t  _inherits(BiobankSpecimenForm, _React$Component);\n\t\n\t  function BiobankSpecimenForm(props) {\n\t    _classCallCheck(this, BiobankSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimenForm.__proto__ || Object.getPrototypeOf(BiobankSpecimenForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      barcodeFormList: {},\n\t      errorMessage: null,\n\t      formErrors: {},\n\t      countBarcodeForms: [1]\n\t    };\n\t\n\t    //this.getValidFileName = this.getValidFileName.bind(this);\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    //this.isValidFileName = this.isValidFileName.bind(this);\n\t    _this.validateForm = _this.validateForm.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.specimenSubmit = _this.specimenSubmit.bind(_this);\n\t    _this.addBarcodeForm = _this.addBarcodeForm.bind(_this);\n\t    _this.setBarcodeFormData = _this.setBarcodeFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimenForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t\n\t      //if this is a child specimen form then certain formData is set when component mounts\n\t      if (this.props.child) {\n\t        var formData = this.state.formData;\n\t        formData['parentSpecimen'] = this.props.specimenId;\n\t        formData['pscid'] = this.props.candidateId;\n\t        formData['visitLabel'] = this.props.sessionId;\n\t        formData['unitId'] = this.props.unitId;\n\t\n\t        this.setState({\n\t          formData: formData\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      //Styling for remove Barcode button\n\t      var glyphStyle = {\n\t        color: '#D3D3D3',\n\t        margin: 'auto'\n\t      };\n\t      var buttonStyle = {\n\t        appearance: 'none',\n\t        outline: 'none',\n\t        boxShadow: 'none',\n\t        borderColor: 'transparent',\n\t        backgroundColor: 'transparent'\n\t\n\t      };\n\t\n\t      //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n\t      var barcodeForms = [];\n\t\n\t      var _loop = function _loop(i) {\n\t        barcodeForms.push(React.createElement(_barcodeForm2.default, {\n\t          setParentFormData: _this2.setBarcodeFormData,\n\t          id: _this2.state.countBarcodeForms[i],\n\t          specimenTypes: _this2.props.specimenTypes,\n\t          containerTypesPrimary: _this2.props.containerTypesPrimary,\n\t          containerBarcodesNonPrimary: _this2.props.containerBarcodesNonPrimary,\n\t          specimenTypeAttributes: _this2.props.specimenTypeAttributes,\n\t          attributeDatatypes: _this2.props.attributeDatatypes,\n\t          capacities: _this2.props.capacities,\n\t          specimenTypeUnits: _this2.props.specimenTypeUnits,\n\t          units: _this2.props.units,\n\t          button: i + 1 === _this2.state.countBarcodeForms.length ? React.createElement(\n\t            'button',\n\t            {\n\t              type: 'button',\n\t              className: 'btn btn-success btn-sm',\n\t              onClick: _this2.addBarcodeForm\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-plus' })\n\t          ) : React.createElement(\n\t            'button',\n\t            {\n\t              type: 'button',\n\t              className: 'btn btn-primary-outline btn-sm',\n\t              style: buttonStyle,\n\t              onClick: function onClick() {\n\t                return _this2.removeBarcodeForm(i);\n\t              }\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-remove', style: glyphStyle })\n\t          )\n\t        }));\n\t      };\n\t\n\t      for (var i = 0; i < this.state.countBarcodeForms.length; i++) {\n\t        _loop(i);\n\t      }\n\t\n\t      var globalFields = void 0;\n\t      var remainingQuantityFields = void 0;\n\t      if (this.props.child) {\n\t        globalFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(StaticElement, {\n\t            label: 'Parent Specimen',\n\t            text: this.props.barcode\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'PSCID',\n\t            text: this.props.pscid\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Visit Label',\n\t            text: this.props.visit\n\t          })\n\t        );\n\t\n\t        //It may be wise to make unit static and forced, or atleast prepopulated --\n\t        remainingQuantityFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Remaining Quantity',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: this.props.specimenUnits,\n\t            onUserInput: this.setFormData,\n\t            emptyOption: false,\n\t            required: true,\n\t            value: this.state.formData.unitId\n\t          })\n\t        );\n\t      } else {\n\t        globalFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'pscid',\n\t            label: 'PSCID',\n\t            options: this.props.pSCIDs,\n\t            onUserInput: this.setFormData,\n\t            ref: 'pscid',\n\t            required: true,\n\t            value: this.state.formData.pscid\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'visitLabel',\n\t            label: 'Visit Label',\n\t            options: this.state.visits,\n\t            onUserInput: this.setFormData,\n\t            ref: 'visitLabel',\n\t            required: true,\n\t            value: this.state.formData.visitLabel,\n\t            disabled: this.state.formData.pscid ? false : true\n\t          })\n\t        );\n\t      }\n\t\n\t      //ALLOW THEM TO CANCEL THE FORM AND DELETE BARCODE FORMS\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenForm',\n\t          id: 'specimenForm',\n\t          onSubmit: this.handleSubmit,\n\t          ref: 'form'\n\t        },\n\t        React.createElement('br', null),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            globalFields\n\t          )\n\t        ),\n\t        barcodeForms,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            remainingQuantityFields\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-xs-3 col-xs-offset-9' },\n\t          React.createElement(ButtonElement, { label: 'Submit' })\n\t        )\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t    /**\n\t     * Returns a valid name for the file to be specimened\n\t     *\n\t     * @param {string} pscid - PSCID selected from the dropdown\n\t     * @param {string} visitLabel - Visit label selected from the dropdown\n\t     * @param {string} instrument - Instrument selected from the dropdown\n\t     * @return {string} - Generated valid filename for the current selection\n\t     */\n\t    //  getValidFileName(pscid, visitLabel, instrument) {\n\t    //    var fileName = pscid + \"_\" + visitLabel;\n\t    //    if (instrument) fileName += \"_\" + instrument;\n\t    //\n\t    //    return fileName;\n\t    //  }\n\t\n\t\n\t  }, {\n\t    key: 'validateForm',\n\t    value: function validateForm(formElement, value) {\n\t      var _this3 = this;\n\t\n\t      var formErrors = this.state.formErrors;\n\t\n\t      //validate barcode regex\n\t      if (formElement === \"barcode\" && value !== \"\") {\n\t        if (!/^hello/.test(this.state.formData.barcode)) {\n\t          formErrors.barcode = true;\n\t        } else {\n\t          formErrors.barcode = false;\n\t        }\n\t      }\n\t\n\t      //validate that quantity is a number and less than capacity\n\t      if (formElement === \"quantity\" && value !== \"\") {\n\t        if (isNaN(value) || value > this.props.capacities[this.state.currentContainerType]) {\n\t          formErrors.quantity = true;\n\t        } else {\n\t          formErrors.quantity = false;\n\t        }\n\t      }\n\t\n\t      //validate datatypes and regex of generated type attributes\n\t      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t      var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t\n\t        var datatype = _this3.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"number\") {\n\t          if (formElement === attribute) {\n\t            if (isNaN(value) && value !== \"\") {\n\t              formErrors[attribute] = true;\n\t            } else {\n\t              formErrors[attribute] = false;\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      this.setState({\n\t        formErrors: formErrors\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Handle form submission\n\t     * @param {object} e - Form submission event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      var formRefs = this.refs;\n\t      //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\t\n\t      // Validate the form\n\t      if (!this.isValidForm(formRefs, formData)) {\n\t        return;\n\t      }\n\t\n\t      //    // Validate specimened file name\n\t      //    let instrument = formData.instrument ? formData.instrument : null;\n\t      //    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n\t      //    let requiredFileName = this.getValidFileName(\n\t      //      formData.pscid, formData.visitLabel, instrument\n\t      //    );\n\t      //    if (!this.isValidFileName(requiredFileName, fileName)) {\n\t      //      swal(\n\t      //        \"Invalid Specimen name!\",\n\t      //        \"File name should begin with: \" + requiredFileName,\n\t      //        \"error\"\n\t      //      );\n\t      //      return;\n\t      //    }\n\t\n\t      // Check for duplicate file names\n\t      //    let isDuplicate = biobankFiles.indexOf(fileName);\n\t      //    if (isDuplicate >= 0) {\n\t      //      swal({\n\t      //        title: \"Are you sure?\",\n\t      //        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n\t      //        type: \"warning\",\n\t      //        showCancelButton: true,\n\t      //        confirmButtonText: 'Yes, I am sure!',\n\t      //        cancelButtonText: \"No, cancel it!\"\n\t      //      }, function(isConfirm) {\n\t      //        if (isConfirm) {\n\t      //          this.specimenFile();\n\t      //        } else {\n\t      //          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n\t      //        }\n\t      //      }.bind(this));\n\t      //    } else {\n\t\n\t      this.specimenSubmit();\n\t      //    }\n\t    }\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'specimenSubmit',\n\t    value: function specimenSubmit() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          // FOR SOME REASON THIS IS NO LONGER WORKING\n\t          // Trigger an update event to update all observers (i.e DataTable)\n\t          // THIS CURRENTLY DOES NOT WORK - LOOK INTO IT\n\t          var event = new CustomEvent('update-datatable');\n\t          window.dispatchEvent(event);\n\t\n\t          //refreshes table if not a child\n\t          if (!this.props.child) {\n\t            this.props.refreshTable();\n\t          }\n\t          swal(\"Specimen Submission Successful!\", \"\", \"success\");\n\t          this.props.closeModal();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Checks if the inputted file name is valid\n\t     *\n\t     * @param {string} requiredFileName - Required file name\n\t     * @param {string} fileName - Provided file name\n\t     * @return {boolean} - true if fileName starts with requiredFileName, false\n\t     *   otherwise\n\t     */\n\t    //  isValidFileName(requiredFileName, fileName) {\n\t    //    if (fileName === null || requiredFileName === null) {\n\t    //      return false;\n\t    //    }\n\t    //\n\t    //    return (fileName.indexOf(requiredFileName) === 0);\n\t    //  }\n\t\n\t    /**\n\t     * Validate the form\n\t     *\n\t     * @param {object} formRefs - Object containing references to React form elements\n\t     * @param {object} formData - Object containing form data inputed by user\n\t     * @return {boolean} - true if all required fields are filled, false otherwise\n\t     */\n\t\n\t  }, {\n\t    key: 'isValidForm',\n\t    value: function isValidForm(formRefs, formData) {\n\t      var isValidForm = true;\n\t\n\t      var requiredFields = {\n\t        pscid: null,\n\t        visitLabel: null\n\t      };\n\t\n\t      Object.keys(requiredFields).map(function (field) {\n\t        if (formData[field]) {\n\t          requiredFields[field] = formData[field];\n\t        } else if (formRefs[field]) {\n\t          formRefs[field].props.hasError = true;\n\t          isValidForm = false;\n\t        }\n\t      });\n\t      this.forceUpdate();\n\t\n\t      return isValidForm;\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      // Only display visits and sites available for the current pscid\n\t      //let visitLabel = this.state.formData.visitLabel;\n\t      //let pscid = this.state.formData.pscid;\n\t\n\t      //LOOK AT THIS LATER - THE SWITCH TO PROPS MESSED THIS ALL UP \n\t      if (formElement === \"pscid\" && value !== \"\") {\n\t        this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n\t        //this.state.Data.sites = this.state.Data.sessionData[this.state.Data.PSCIDs[value]].sites;\n\t      }\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setBarcodeFormData',\n\t    value: function setBarcodeFormData(barcodeFormData, barcodeId) {\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      barcodeFormList[barcodeId] = barcodeFormData;\n\t      formData['barcodeFormList'] = barcodeFormList;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'addBarcodeForm',\n\t    value: function addBarcodeForm() {\n\t      var countBarcodeForms = this.state.countBarcodeForms;\n\t      countBarcodeForms.push(countBarcodeForms[countBarcodeForms.length - 1] + 1);\n\t      this.setState({\n\t        countBarcodeForms: countBarcodeForms\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removeBarcodeForm',\n\t    value: function removeBarcodeForm(index) {\n\t      var countBarcodeForms = this.state.countBarcodeForms;\n\t      countBarcodeForms.splice(index, 1);\n\t      this.setState({\n\t        countBarcodeForms: countBarcodeForms\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimenForm;\n\t}(React.Component);\n\t\n\tBiobankSpecimenForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired,\n\t  barcode: React.PropTypes.string,\n\t  refreshTable: React.PropTypes.func\n\t};\n\t\n\texports.default = BiobankSpecimenForm;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _collectionForm = __webpack_require__(5);\n\t\n\tvar _collectionForm2 = _interopRequireDefault(_collectionForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Barcode Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar BiobankBarcodeForm = function (_React$Component) {\n\t  _inherits(BiobankBarcodeForm, _React$Component);\n\t\n\t  function BiobankBarcodeForm(props) {\n\t    _classCallCheck(this, BiobankBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankBarcodeForm.__proto__ || Object.getPrototypeOf(BiobankBarcodeForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      formErrors: {}\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setSpecimenFormData = _this.setSpecimenFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankBarcodeForm, [{\n\t    key: \"render\",\n\t    value: function render() {\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: \"biobankBarcode\"\n\t        },\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-11\" },\n\t            React.createElement(\n\t              \"div\",\n\t              {\n\t                \"data-toggle\": \"collapse\",\n\t                \"data-target\": \"#\" + this.props.id\n\t              },\n\t              React.createElement(TextboxElement, {\n\t                name: \"barcode\",\n\t                label: \"Barcode \" + this.props.id,\n\t                onUserInput: this.setFormData,\n\t                ref: \"barcode\",\n\t                required: true,\n\t                value: this.state.formData[\"barcode\"],\n\t                hasError: this.state.formErrors[\"barcode\"],\n\t                errorMessage: \"Incorrect Barcode format for this Specimen and Container Type\"\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-1\" },\n\t            this.props.button\n\t          )\n\t        ),\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row\" },\n\t          React.createElement(\"div\", { className: \"col-xs-2\" }),\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-9\" },\n\t            React.createElement(\n\t              \"div\",\n\t              { id: this.props.id, className: \"collapse\" },\n\t              React.createElement(_collectionForm2.default, {\n\t                setParentFormData: this.setSpecimenFormData,\n\t                specimenTypes: this.props.specimenTypes,\n\t                specimenTypeAttributes: this.props.specimenTypeAttributes,\n\t                attributeDatatypes: this.props.attributeDatatypes,\n\t                containerTypesPrimary: this.props.containerTypesPrimary,\n\t                containerBarcodesNonPrimary: this.props.containerBarcodesNonPrimary,\n\t                specimenTypeUnits: this.props.specimenTypeUnits,\n\t                stati: this.props.stati\n\t              })\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: \"setFormData\",\n\t    value: function setFormData(formElement, value) {\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: \"setSpecimenFormData\",\n\t    value: function setSpecimenFormData(specimenFormData) {\n\t      var formData = this.state.formData;\n\t\n\t      for (var attribute in specimenFormData) {\n\t        formData[attribute] = specimenFormData[attribute];\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: \"setParentFormData\",\n\t    value: function setParentFormData() {\n\t      this.props.setParentFormData(this.state.formData, this.props.id);\n\t    }\n\t  }]);\n\t\n\t  return BiobankBarcodeForm;\n\t}(React.Component);\n\t\n\tBiobankBarcodeForm.propTypes = {\n\t\n\t  id: React.PropTypes.string,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = BiobankBarcodeForm;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenCollectionForm = function (_React$Component) {\n\t  _inherits(SpecimenCollectionForm, _React$Component);\n\t\n\t  function SpecimenCollectionForm(props) {\n\t    _classCallCheck(this, SpecimenCollectionForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenCollectionForm.__proto__ || Object.getPrototypeOf(SpecimenCollectionForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: { data: {} },\n\t      currentSpecimenType: _this.props.edit ? _this.props.specimenType : null,\n\t      currentContainerType: _this.props.edit ? _this.props.containerType : null,\n\t      formErrors: {}\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setSpecimenTypeFieldFormData = _this.setSpecimenTypeFieldFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    _this.getSpecimenTypeFields = _this.getSpecimenTypeFields.bind(_this);\n\t    _this.handleUpdate = _this.handleUpdate.bind(_this);\n\t    _this.updateSpecimen = _this.updateSpecimen.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenCollectionForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var _this2 = this;\n\t\n\t      var formData = this.state.formData;\n\t      if (this.props.edit) {\n\t        formData['specimenId'] = this.props.specimenId;\n\t        formData['containerId'] = this.props.containerId;\n\t        formData['specimenType'] = this.props.specimenType;\n\t        formData['containerType'] = this.props.containerType;\n\t        formData['quantity'] = this.props.collection.quantity;\n\t        formData['unitId'] = this.props.collection.unitId;\n\t        formData['date'] = this.props.collection.date;\n\t        formData['time'] = this.props.collection.time;\n\t        formData['comments'] = this.props.collection.comments;\n\t\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t        if (specimenTypeFieldsObject) {\n\t          var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t            formData.data[attribute] = _this2.props.collection.data[attribute];\n\t          });\n\t        }\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      var parentContainerField;\n\t      if (!this.props.edit) {\n\t        parentContainerField = React.createElement(SelectElement, {\n\t          name: 'parentContainer',\n\t          label: 'Parent Container Barcode',\n\t          options: this.props.containerBarcodesNonPrimary,\n\t          onUserInput: this.setFormData,\n\t          ref: 'parentContainer',\n\t          required: false,\n\t          value: this.state.formData.parentContainer\n\t        });\n\t      }\n\t\n\t      var updateButton;\n\t      if (this.props.edit) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      }\n\t\n\t      //This block of code should potentially be moved to setFormData();\n\t      //Consider Refactoring...\n\t      var specimenTypeUnits = {};\n\t      if (this.state.currentSpecimenType) {\n\t\n\t        //This modifies the selections for unit drop down based on the chosend specimen type \n\t        for (var id in this.props.specimenTypeUnits[this.state.currentSpecimenType]) {\n\t          specimenTypeUnits[id] = this.props.specimenTypeUnits[this.state.currentSpecimenType][id].unit;\n\t        }\n\t\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t        if (specimenTypeFieldsObject) {\n\t          var specimenTypeFields = this.getSpecimenTypeFields(specimenTypeFieldsObject);\n\t        }\n\t      }\n\t\n\t      var specimenFields;\n\t      if (this.state.currentSpecimenType) {\n\t        specimenFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'containerType',\n\t            label: 'Container Type',\n\t            options: this.props.containerTypesPrimary,\n\t            onUserInput: this.setFormData,\n\t            ref: 'containerType',\n\t            required: true,\n\t            value: this.state.formData.containerType\n\t          }),\n\t          parentContainerField,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Quantity',\n\t            onUserInput: this.setFormData,\n\t            ref: 'quantity',\n\t            required: true,\n\t            value: this.state.formData.quantity,\n\t            hasError: this.state.formErrors.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: specimenTypeUnits,\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.unitId\n\t          }),\n\t          specimenTypeFields,\n\t          React.createElement(DateElement, {\n\t            name: 'date',\n\t            label: 'Date',\n\t            minYear: '2000',\n\t            maxYear: '2018',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.date\n\t          }),\n\t          React.createElement(TimeElement, {\n\t            name: 'time',\n\t            label: 'Time',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.time\n\t          }),\n\t          React.createElement(TextareaElement, {\n\t            name: 'comments',\n\t            label: 'Comments',\n\t            onUserInput: this.setFormData,\n\t            ref: 'comments',\n\t            value: this.state.formData.comments\n\t          }),\n\t          updateButton\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankSpecimen',\n\t          onSubmit: this.handleUpdate,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'specimenType',\n\t            label: 'Specimen Type',\n\t            options: this.props.specimenTypes,\n\t            onUserInput: this.setFormData,\n\t            ref: 'specimenType',\n\t            required: true,\n\t            value: this.state.formData.specimenType\n\t          }),\n\t          specimenFields\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      if (formElement === \"specimenType\" && value !== \"\") {\n\t        //This throws a warning if the specimen type is changed because of the cascading effects this \n\t        //would cause.\n\t        if (this.props.edit) {\n\t          swal({\n\t            title: \"Warning\",\n\t            text: \"Changing the specimen type will result in the loss of any preparation or anaylsis \" + \"data for this specimen. You will also need to manually change the specimen type of any \" + \"aliquots derived from this specimen. Proceed with caution.\",\n\t            type: \"warning\",\n\t            showCancelButton: true,\n\t            confirmButtonText: 'Cancel Change',\n\t            cancelButtonText: 'Proceed'\n\t          }, function (isConfirm) {\n\t            if (isConfirm) {\n\t              this.props.toggleEdit();\n\t            } else {}\n\t          }.bind(this));\n\t        }\n\t\n\t        //This is to eliminate the values for the specimen type fields\n\t        //This could potentially be improved later to retain the values\n\t        //for the fields that are common across specimen types\n\t        formData.data = {};\n\t        this.setState({\n\t          currentSpecimenType: value\n\t        });\n\t      }\n\t\n\t      if (formElement === \"containerType\" && value !== \"\") {\n\t        this.setState({\n\t          currentContainerType: value\n\t        });\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setSpecimenTypeFieldFormData',\n\t    value: function setSpecimenTypeFieldFormData(formElement, value) {\n\t      var formData = this.state.formData;\n\t      formData.data[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      if (!this.props.edit) {\n\t        var formData = this.state.formData;\n\t        this.props.setParentFormData(formData);\n\t      }\n\t    }\n\t\n\t    // This generates all the form fields for a given specimen type\n\t\n\t  }, {\n\t    key: 'getSpecimenTypeFields',\n\t    value: function getSpecimenTypeFields(fieldsObject) {\n\t      var _this3 = this;\n\t\n\t      var specimenTypeFields = Object.keys(fieldsObject).map(function (attribute) {\n\t        var datatype = _this3.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"text\" || datatype === \"number\") {\n\t          if (fieldsObject[attribute]['refTableId'] == null) {\n\t            return React.createElement(TextboxElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this3.state.formData.data[attribute],\n\t              hasError: _this3.state.formErrors[attribute],\n\t              errorMessage: \"This is a \" + datatype + \" field.\"\n\t            });\n\t          }\n\t\n\t          // OPTIONS FOR SELECT ELEMENT WILL MOST LIKELY BE PASSED VIA AJAX CALL\n\t          // BUT IT CAN ALSO BE PRELOADED --\n\t          // ASK RIDA HOW THIS SHOULD BE DONE\n\t          if (fieldsObject[attribute]['refTableId'] !== null) {\n\t            return React.createElement(SelectElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              options: '',\n\t              onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribte]['required'],\n\t              value: _this3.state.formData.data[attribute]\n\t            });\n\t          }\n\t        }\n\t\n\t        if (datatype === \"datetime\") {\n\t          return React.createElement(DateElement, {\n\t            name: attribute,\n\t            label: fieldsObject[attribute]['name'],\n\t            onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t            ref: attribute,\n\t            required: fieldsObject[attribute]['required'],\n\t            value: _this3.state.formData.data[attribute]\n\t          });\n\t        }\n\t\n\t        if (datatype === \"boolean\") {}\n\t      });\n\t\n\t      return specimenTypeFields;\n\t    }\n\t  }, {\n\t    key: 'handleUpdate',\n\t    value: function handleUpdate(e) {\n\t      //more things will go here later\n\t      this.updateSpecimen();\n\t    }\n\t  }, {\n\t    key: 'updateSpecimen',\n\t    value: function updateSpecimen() {\n\t      var _$$ajax;\n\t\n\t      var formData = this.state.formData;\n\t      formData['data'] = JSON.stringify(formData['data']);\n\t\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax((_$$ajax = {\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false\n\t      }, _defineProperty(_$$ajax, 'processData', false), _defineProperty(_$$ajax, 'xhr', function () {\n\t        var xhr = new window.XMLHttpRequest();\n\t        return xhr;\n\t      }.bind(this)), _defineProperty(_$$ajax, 'success', function () {\n\t        //Update Parent Specimen Page Here\n\t        formData.data = JSON.parse(formData.data);\n\t        this.props.updateCollection(formData);\n\t      }.bind(this)), _defineProperty(_$$ajax, 'error', function (err) {\n\t        console.error(err);\n\t        var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t        this.setState({\n\t          errorMessage: msg\n\t        });\n\t        swal(msg, \"\", \"error\");\n\t      }.bind(this)), _$$ajax));\n\t    }\n\t  }]);\n\t\n\t  return SpecimenCollectionForm;\n\t}(React.Component);\n\t\n\tSpecimenCollectionForm.propTypes = {\n\t  setParentFormData: React.PropTypes.func,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = SpecimenCollectionForm;\n\n/***/ },\n/* 6 */,\n/* 7 */,\n/* 8 */,\n/* 9 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Modal component.\n\t *\n\t * @author Loris Team\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Modal Component.\n\t * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * 1. Define an array of tabs with IDs and labels\n\t *\n\t * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n\t *\n\t * 2. Pass tabList as <Tab> property and <TabPane> as child\n\t *  ```\n\t * <Tabs tabs={tabList} defaultTab=\"tab1\">\n\t *   <TabPane TabId={tabList[0].id}>\n\t *     // Tab content goes here\n\t *   </TabPane>\n\t * </Tabs>\n\t * ```\n\t * =================================================\n\t *\n\t */\n\tvar Modal = function (_React$Component) {\n\t  _inherits(Modal, _React$Component);\n\t\n\t  function Modal(props) {\n\t    _classCallCheck(this, Modal);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));\n\t\n\t    _this.state = {\n\t      show: false\n\t    };\n\t\n\t    _this.openModal = _this.openModal.bind(_this);\n\t    _this.closeModal = _this.closeModal.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Modal, [{\n\t    key: 'openModal',\n\t    value: function openModal() {\n\t      this.setState({\n\t        show: true\n\t      });\n\t    }\n\t  }, {\n\t    key: 'closeModal',\n\t    value: function closeModal() {\n\t      this.setState({\n\t        show: false\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Black Background with Alpha Channel\n\t      var backdropStyle = {\n\t        position: 'fixed',\n\t        zIndex: 9998,\n\t        top: 0,\n\t        bottom: 0,\n\t        left: 0,\n\t        right: 0,\n\t        backgroundColor: 'rgba(0,0,0,0.3)',\n\t        padding: 50\n\t      };\n\t\n\t      // White Modal Window\n\t      var modalStyle = {\n\t        position: 'relative',\n\t        maxWidth: 1000,\n\t        maxHeight: '80%',\n\t        margin: '5% auto',\n\t        backgroundColor: '#fff',\n\t        borderRadius: 10,\n\t        overflowY: 'auto',\n\t        zIndex: 9999\n\t      };\n\t\n\t      var titleStyle = {\n\t        display: 'flex',\n\t        flexDirection: 'row',\n\t        alignItems: 'center',\n\t        background: '#093782',\n\t        height: '70px',\n\t        borderTopRightRadius: '10',\n\t        color: '#FFFFFF',\n\t        fontSize: 24,\n\t        padding: 20\n\t      };\n\t\n\t      var bodyStyle = {\n\t        padding: 15\n\t      };\n\t\n\t      var footerStyle = {\n\t        padding: 15\n\t      };\n\t\n\t      var button = React.createElement(\n\t        'button',\n\t        {\n\t          type: 'button',\n\t          className: this.props.buttonClass,\n\t          onClick: this.openModal,\n\t          style: this.props.buttonStyle\n\t        },\n\t        this.props.buttonContent\n\t      );\n\t\n\t      var modal;\n\t      if (this.state.show) {\n\t        modal = React.createElement(\n\t          'div',\n\t          { style: backdropStyle, onClick: this.closeModal },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              style: modalStyle,\n\t              onClick: function onClick(e) {\n\t                e.stopPropagation();\n\t              }\n\t            },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                style: titleStyle\n\t              },\n\t              this.props.title\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                style: bodyStyle\n\t              },\n\t              this.props.children\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { style: footerStyle, onClick: this.closeModal },\n\t              React.createElement(\n\t                'a',\n\t                null,\n\t                'Cancel'\n\t              )\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        button,\n\t        modal\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Modal;\n\t}(React.Component);\n\t\n\tModal.propTypes = {\n\t  title: React.PropTypes.string,\n\t  buttonClass: React.PropTypes.string,\n\t  buttonStyle: React.PropTypes.object,\n\t  buttonContent: React.PropTypes.object\n\t};\n\tModal.defaultProps = {\n\t  buttonClass: 'btn btn-primary'\n\t};\n\t\n\texports.default = Modal;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Loader\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Loader component\n\t */\n\tvar Loader = function (_React$Component) {\n\t  _inherits(Loader, _React$Component);\n\t\n\t  function Loader(props) {\n\t    _classCallCheck(this, Loader);\n\t\n\t    return _possibleConstructorReturn(this, (Loader.__proto__ || Object.getPrototypeOf(Loader)).call(this, props));\n\t  }\n\t\n\t  _createClass(Loader, [{\n\t    key: \"render\",\n\t    value: function render() {\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"loader-container\" },\n\t        React.createElement(\"div\", { className: \"loader\" })\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Loader;\n\t}(React.Component);\n\t\n\texports.default = Loader;\n\n/***/ },\n/* 11 */,\n/* 12 */,\n/* 13 */,\n/* 14 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * LifeCycle\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar LifeCycle = function (_React$Component) {\n\t  _inherits(LifeCycle, _React$Component);\n\t\n\t  function LifeCycle(props) {\n\t    _classCallCheck(this, LifeCycle);\n\t\n\t    var _this = _possibleConstructorReturn(this, (LifeCycle.__proto__ || Object.getPrototypeOf(LifeCycle)).call(this, props));\n\t\n\t    _this.state = {};\n\t\n\t    return _this;\n\t  }\n\t\n\t  _createClass(LifeCycle, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      $('[data-toggle=\"tooltip\"]').tooltip();\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      var collectionNode = void 0;\n\t      var collectionTooltip = void 0;\n\t      if (this.props.collection) {\n\t        collectionTooltip = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(\n\t            'h',\n\t            null,\n\t            'Collection'\n\t          ),\n\t          React.createElement(\n\t            'p',\n\t            null,\n\t            'Date:'\n\t          )\n\t        );\n\t\n\t        collectionNode = React.createElement(\n\t          'div',\n\t          {\n\t            className: 'lifecycle-node',\n\t            'data-html': 'true',\n\t            'data-toggle': 'tooltip',\n\t            'data-placement': 'auto',\n\t            title: '<h5>' + this.props.sites[this.props.collection.locationId] + '</h5>' + '<h5>' + this.props.collection.date + '</h5>'\n\t          },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'letter' },\n\t            'C'\n\t          )\n\t        );\n\t      }\n\t\n\t      var preparationNode = void 0;\n\t      if (this.props.preparation) {\n\t        preparationNode = React.createElement(\n\t          'div',\n\t          {\n\t            className: 'lifecycle-node',\n\t            'data-html': 'true',\n\t            'data-toggle': 'tooltip',\n\t            'data-placement': 'auto',\n\t            title: '<h5>' + this.props.sites[this.props.preparation.locationId] + '</h5>' + '<h5>' + this.props.preparation.date + '</h5>'\n\t          },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'letter' },\n\t            'P'\n\t          )\n\t        );\n\t      }\n\t\n\t      var analysisNode = void 0;\n\t      if (this.props.analysis) {\n\t        analysisNode = React.createElement(\n\t          'div',\n\t          { className: 'lifecycle-node-container' },\n\t          React.createElement('div', { className: 'lifecycle-node' }),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'lifecycle-text' },\n\t            'Analysis'\n\t          )\n\t        );\n\t      }\n\t\n\t      var line = void 0;\n\t      line = React.createElement('div', { className: 'lifecycle-line' });\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { className: 'lifecycle' },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'lifecycle-graphic' },\n\t          collectionNode,\n\t          line,\n\t          preparationNode,\n\t          analysisNode\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return LifeCycle;\n\t}(React.Component);\n\t\n\tLifeCycle.propTypes = {};\n\t\n\texports.default = LifeCycle;\n\n/***/ },\n/* 15 */,\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _collectionForm = __webpack_require__(5);\n\t\n\tvar _collectionForm2 = _interopRequireDefault(_collectionForm);\n\t\n\tvar _preparationForm = __webpack_require__(17);\n\t\n\tvar _preparationForm2 = _interopRequireDefault(_preparationForm);\n\t\n\tvar _containerMoveForm = __webpack_require__(18);\n\t\n\tvar _containerMoveForm2 = _interopRequireDefault(_containerMoveForm);\n\t\n\tvar _Modal = __webpack_require__(9);\n\t\n\tvar _Modal2 = _interopRequireDefault(_Modal);\n\t\n\tvar _Panel = __webpack_require__(2);\n\t\n\tvar _Panel2 = _interopRequireDefault(_Panel);\n\t\n\tvar _Loader = __webpack_require__(10);\n\t\n\tvar _Loader2 = _interopRequireDefault(_Loader);\n\t\n\tvar _specimenForm = __webpack_require__(3);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tvar _lifeCycle = __webpack_require__(14);\n\t\n\tvar _lifeCycle2 = _interopRequireDefault(_lifeCycle);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* exported RBiobankSpecimen */\n\t\n\t/**\n\t * Biobank Specimen\n\t *\n\t * Fetches data corresponding to a given Specimen from Loris backend and\n\t * displays a page allowing viewing of meta information of the specimen\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankSpecimen = function (_React$Component) {\n\t  _inherits(BiobankSpecimen, _React$Component);\n\t\n\t  function BiobankSpecimen(props) {\n\t    _classCallCheck(this, BiobankSpecimen);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimen.__proto__ || Object.getPrototypeOf(BiobankSpecimen)).call(this, props));\n\t\n\t    _this.state = {\n\t      Data: {},\n\t      isLoaded: false,\n\t      loadedData: 0,\n\t      editCollection: false,\n\t      addPreparation: false,\n\t      editPreparation: false\n\t    };\n\t\n\t    _this.fetchSpecimenData = _this.fetchSpecimenData.bind(_this);\n\t    _this.toggleEditCollection = _this.toggleEditCollection.bind(_this);\n\t    _this.toggleAddPreparation = _this.toggleAddPreparation.bind(_this);\n\t    _this.toggleEditPreparation = _this.toggleEditPreparation.bind(_this);\n\t    _this.mapFormOptions = _this.mapFormOptions.bind(_this);\n\t    _this.updateCollection = _this.updateCollection.bind(_this);\n\t    _this.updatePreparation = _this.updatePreparation.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimen, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      this.fetchSpecimenData();\n\t    }\n\t  }, {\n\t    key: 'fetchSpecimenData',\n\t    value: function fetchSpecimenData() {\n\t      var self = this;\n\t      $.ajax(this.props.specimenPageDataURL, {\n\t        dataType: 'json',\n\t        success: function success(data) {\n\t          self.setState({\n\t            Data: data,\n\t            isLoaded: true\n\t          });\n\t        },\n\t        error: function error(_error, errorCode, errorMsg) {\n\t          console.error(_error, errorCode, errorMsg);\n\t          self.setState({\n\t            error: 'An error occurred when loading the form!'\n\t          });\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'toggleEditCollection',\n\t    value: function toggleEditCollection() {\n\t      var editCollection = this.state.editCollection;\n\t      this.setState({\n\t        editCollection: !editCollection\n\t      });\n\t    }\n\t  }, {\n\t    key: 'toggleAddPreparation',\n\t    value: function toggleAddPreparation() {\n\t      var addPreparation = this.state.addPreparation;\n\t      this.setState({\n\t        addPreparation: !addPreparation\n\t      });\n\t    }\n\t  }, {\n\t    key: 'toggleEditPreparation',\n\t    value: function toggleEditPreparation() {\n\t      var editPreparation = this.state.editPreparation;\n\t      this.setState({\n\t        editPreparation: !editPreparation\n\t      });\n\t    }\n\t\n\t    //map options for forms\n\t\n\t  }, {\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(rawObject, targetAttribute) {\n\t      var data = {};\n\t      for (var id in rawObject) {\n\t        data[id] = rawObject[id][targetAttribute];\n\t      }\n\t\n\t      return data;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      // Data loading error\n\t      if (this.state.error !== undefined) {\n\t        return React.createElement(\n\t          'div',\n\t          { className: 'alert alert-danger text-center' },\n\t          React.createElement(\n\t            'strong',\n\t            null,\n\t            this.state.error\n\t          )\n\t        );\n\t      }\n\t\n\t      // Waiting for data to load\n\t      if (!this.state.isLoaded) {\n\t        return React.createElement(_Loader2.default, null);\n\t      }\n\t\n\t      //checks if parent specimen exists and returns static element with href\n\t      if (this.state.Data.parentSpecimenBarcode) {\n\t        var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\";\n\t        var parentSpecimenBarcode = React.createElement(\n\t          'div',\n\t          { className: 'item' },\n\t          React.createElement(\n\t            'a',\n\t            { href: specimenURL + this.state.Data.parentSpecimenBarcode, className: 'field' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'value' },\n\t              this.state.Data.parentSpecimenBarcode\n\t            ),\n\t            'Parent Specimen'\n\t          )\n\t        );\n\t      } else {\n\t        var parentSpecimenBarcode = React.createElement(\n\t          'div',\n\t          { className: 'item' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'field' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'value' },\n\t              'None'\n\t            ),\n\t            'Parent Specimen'\n\t          )\n\t        );\n\t      }\n\t\n\t      //checks if parent container exists and returns static element with href\n\t      if (this.state.Data.parentContainerBarcode) {\n\t        var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\";\n\t        var containerBarcodesNonPrimary = this.mapFormOptions(this.state.Data.containersNonPrimary, 'barcode');\n\t        var parentContainerBarcode = React.createElement(\n\t          'div',\n\t          { className: 'item' },\n\t          React.createElement(\n\t            'a',\n\t            { href: containerURL + this.state.Data.parentContainerBarcode, className: 'field' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'value' },\n\t              this.state.Data.parentContainerBarcode\n\t            ),\n\t            'Parent Container'\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'action' },\n\t            React.createElement(\n\t              _Modal2.default,\n\t              {\n\t                title: 'Assign Location',\n\t                buttonContent: React.createElement(\n\t                  'div',\n\t                  null,\n\t                  'Move',\n\t                  React.createElement('span', {\n\t                    className: 'glyphicon glyphicon-chevron-right',\n\t                    style: { marginLeft: '5px' }\n\t                  })\n\t                )\n\t              },\n\t              React.createElement(_containerMoveForm2.default, {\n\t                containerBarcodesNonPrimary: containerBarcodesNonPrimary\n\t              })\n\t            )\n\t          )\n\t        );\n\t      } else {\n\t        var parentContainerBarcode = React.createElement(\n\t          'div',\n\t          { className: 'item' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'field' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'value' },\n\t              'None'\n\t            ),\n\t            'Parent Container'\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'action' },\n\t            React.createElement(_Modal2.default, {\n\t              title: 'Assign Location',\n\t              buttonContent: React.createElement(\n\t                'div',\n\t                null,\n\t                'Move',\n\t                React.createElement('span', {\n\t                  className: 'glyphicon glyphicon-chevron-right',\n\t                  style: { marginLeft: '5px' }\n\t                })\n\t              )\n\t            })\n\t          )\n\t        );\n\t      }\n\t\n\t      /**\n\t       * Specimen Form\n\t       */\n\t      var addAliquotButton = void 0;\n\t\n\t      if (loris.userHasPermission('biobank_write')) {\n\t        /**\n\t         * Map Options for Form Select Elements\n\t         */\n\t        var specimenTypes = {};\n\t        //produces options conditionally based on the parentId of the specimen\n\t        for (var _id in this.state.Data.specimenTypes) {\n\t          // if parentTypeId is equal to typeId\n\t          if (this.state.Data.specimenTypes[_id].parentTypeId == this.state.Data.specimen.typeId || _id == this.state.Data.specimen.typeId) {\n\t            specimenTypes[_id] = this.state.Data.specimenTypes[_id]['type'];\n\t          }\n\t        }\n\t\n\t        var specimenUnits = this.mapFormOptions(this.state.Data.specimenUnits, 'unit');\n\t        var containerTypesPrimary = this.mapFormOptions(this.state.Data.containerTypesPrimary, 'label');\n\t        var _containerBarcodesNonPrimary = this.mapFormOptions(this.state.Data.containersNonPrimary, 'barcode');\n\t\n\t        var addAliquotButtonContent = React.createElement(\n\t          'div',\n\t          { className: 'specimen-button' },\n\t          React.createElement('span', {\n\t            className: 'glyphicon glyphicon-plus',\n\t            style: { marginRight: '5px' }\n\t          }),\n\t          'Aliquot'\n\t        );\n\t\n\t        addAliquotButton = React.createElement(\n\t          _Modal2.default,\n\t          {\n\t            title: 'Create Specimen Aliquots',\n\t            buttonClass: 'btn btn-success',\n\t            buttonStyle: { display: 'flex', alignItems: 'center' },\n\t            buttonContent: addAliquotButtonContent\n\t          },\n\t          React.createElement(_specimenForm2.default, {\n\t            action: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=submitSpecimen',\n\t            child: 'true',\n\t            specimenId: this.state.Data.specimen.id,\n\t            barcode: this.state.Data.container.barcode,\n\t            candidateId: this.state.Data.specimen.candidateId,\n\t            sessionId: this.state.Data.specimen.sessionId,\n\t            pscid: this.state.Data.candidateInfo[this.state.Data.specimen.candidateId].PSCID,\n\t            visit: this.state.Data.sessionInfo[this.state.Data.specimen.sessionId].Visit_label,\n\t            unitId: this.state.Data.specimen.unitId,\n\t            specimenTypes: specimenTypes,\n\t            specimenTypeUnits: this.state.Data.specimenTypeUnits,\n\t            specimenUnits: specimenUnits,\n\t            containerTypesPrimary: containerTypesPrimary,\n\t            containerBarcodesNonPrimary: _containerBarcodesNonPrimary,\n\t            specimenTypeAttributes: this.state.Data.specimenTypeAttributes,\n\t            attributeDatatypes: this.state.Data.attributeDatatypes\n\t          })\n\t        );\n\t      }\n\t\n\t      /** \n\t       * Collection Form\n\t       */\n\t      var addPreparationButton = void 0;\n\t      if (!this.state.Data.specimen.preparation) {\n\t        addPreparationButton = React.createElement(_Modal2.default, {\n\t          title: 'Assign Location',\n\t          buttonClass: 'btn btn-success',\n\t          buttonStyle: { display: 'flex', alignItems: 'center' },\n\t          buttonContent: React.createElement(\n\t            'div',\n\t            null,\n\t            React.createElement('span', {\n\t              className: 'glyphicon glyphicon-plus',\n\t              style: { marginLeft: '5px' }\n\t            }),\n\t            'Add Preparation'\n\t          )\n\t        });\n\t      }\n\t\n\t      var collectionPanel = void 0;\n\t      var collectionPanelForm = void 0;\n\t      var cancelEditCollectionButton = void 0;\n\t      if (this.state.editCollection) {\n\t\n\t        //Map Options for Form Select Elements\n\t        var _specimenTypes = {};\n\t        //produces options conditionally based on the parentId of the specimen\n\t        for (var id in this.state.Data.specimenTypes) {\n\t          // if specimen type has a parent type\n\t          if (this.state.Data.specimenTypes[this.state.Data.specimen.typeId].parentTypeId) {\n\t            if (this.state.Data.specimenTypes[id].parentTypeId == this.state.Data.specimenTypes[this.state.Data.specimen.typeId].parentTypeId || id == this.state.Data.specimen.typeId) {\n\t              _specimenTypes[id] = this.state.Data.specimenTypes[id]['type'];\n\t            }\n\t            // else if specimen type has no parent type\n\t          } else {\n\t            if (!this.state.Data.specimenTypes[id].parentTypeId) {\n\t              _specimenTypes[id] = this.state.Data.specimenTypes[id]['type'];\n\t            }\n\t          }\n\t        }\n\t\n\t        var _containerTypesPrimary = this.mapFormOptions(this.state.Data.containerTypesPrimary, 'label');\n\t\n\t        collectionPanelForm = React.createElement(_collectionForm2.default, {\n\t          specimenId: this.state.Data.specimen.id,\n\t          specimenType: this.state.Data.specimen.typeId,\n\t          containerId: this.state.Data.container.id,\n\t          containerType: this.state.Data.container.typeId,\n\t          collection: this.state.Data.specimen.collection,\n\t          specimenTypes: _specimenTypes,\n\t          specimenTypeAttributes: this.state.Data.specimenTypeAttributes,\n\t          attributeDatatypes: this.state.Data.attributeDatatypes,\n\t          containerTypesPrimary: _containerTypesPrimary,\n\t          specimenTypeUnits: this.state.Data.specimenTypeUnits,\n\t          edit: true,\n\t          action: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=updateSpecimenCollection',\n\t          toggleEdit: this.toggleEditCollection,\n\t          updateCollection: this.updateCollection\n\t        });\n\t\n\t        cancelEditCollectionButton = React.createElement(\n\t          'a',\n\t          { className: 'pull-right', style: { cursor: 'pointer' }, onClick: this.toggleEditCollection },\n\t          'Cancel'\n\t        );\n\t      } else {\n\t\n\t        //loops through data object to produce static elements\n\t        if (this.state.Data.specimen.collection.data) {\n\t          var dataObject = this.state.Data.specimen.collection.data;\n\t          var specimenTypeAttributes = Object.keys(dataObject).map(function (key) {\n\t            return React.createElement(\n\t              'div',\n\t              null,\n\t              _this2.state.Data.specimenTypeAttributes[_this2.state.Data.specimen.typeId][key].name,\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                dataObject[key]\n\t              )\n\t            );\n\t          });\n\t        }\n\t\n\t        collectionPanelForm = React.createElement(\n\t          'div',\n\t          {\n\t            className: 'panel'\n\t          },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            'Container Type',\n\t            React.createElement(\n\t              'div',\n\t              { className: 'value' },\n\t              this.state.Data.containerTypesPrimary[this.state.Data.container.typeId].label\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            'Quantity',\n\t            React.createElement(\n\t              'div',\n\t              { className: 'value' },\n\t              this.state.Data.specimen.collection.quantity + ' ' + this.state.Data.specimenUnits[this.state.Data.specimen.collection.unitId].unit\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            'Location',\n\t            React.createElement(\n\t              'div',\n\t              { className: 'value' },\n\t              this.state.Data.sites[this.state.Data.specimen.collection.locationId]\n\t            ),\n\t            specimenTypeAttributes\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            'Date',\n\t            React.createElement(\n\t              'div',\n\t              { className: 'value' },\n\t              this.state.Data.specimen.collection.date\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            'Time',\n\t            React.createElement(\n\t              'div',\n\t              { className: 'value' },\n\t              this.state.Data.specimen.collection.time\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            'Comments',\n\t            React.createElement(\n\t              'div',\n\t              { className: 'value' },\n\t              this.state.Data.specimen.collection.comments\n\t            )\n\t          )\n\t        );\n\t\n\t        collectionPanel = React.createElement(\n\t          _Panel2.default,\n\t          {\n\t            id: 'collection-panel',\n\t            title: 'Collection',\n\t            edit: this.state.editCollection ? null : this.toggleEditCollection\n\t          },\n\t          collectionPanelForm,\n\t          cancelEditCollectionButton\n\t        );\n\t      }\n\t\n\t      /*\n\t       * Preparation Form\n\t       */\n\t      var preparationPanel = void 0;\n\t      var preparationPanelForm = void 0;\n\t      var cancelAddPreparationButton = void 0;\n\t      var cancelEditPreparationButton = void 0;\n\t      if (this.state.addPreparation || this.state.editPreparation) {\n\t\n\t        //Map Options for Form Select Elements Here\n\t        var _specimenProtocolAttributes = this.state.Data.specimenProtocolAttributes[this.state.Data.specimen.typeId];\n\t\n\t        //This remaps specimen Protocols based on the specimen Type\n\t        //this may need to be refactored or put into a function later\n\t        var specimenProtocols = {};\n\t        for (var id in _specimenProtocolAttributes) {\n\t          specimenProtocols[id] = this.state.Data.specimenProtocols[id];\n\t        }\n\t\n\t        specimenProtocols = this.mapFormOptions(specimenProtocols, 'protocol');\n\t\n\t        preparationPanelForm = React.createElement(_preparationForm2.default, {\n\t          specimenId: this.state.Data.specimen.id,\n\t          preparation: this.state.Data.specimen.preparation ? this.state.Data.specimen.preparation : null,\n\t          specimenProtocols: specimenProtocols,\n\t          specimenProtocolAttributes: _specimenProtocolAttributes,\n\t          attributeDatatypes: this.state.Data.attributeDatatypes,\n\t          add: this.state.addPreparation,\n\t          edit: this.state.editPreparation,\n\t          insertAction: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=insertSpecimenPreparation',\n\t          updateAction: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=updateSpecimenPreparation',\n\t          updatePreparation: this.updatePreparation\n\t        });\n\t\n\t        //Cancel Add Button\n\t        if (this.state.addPreparation) {\n\t          cancelAddPreparationButton = React.createElement(\n\t            'a',\n\t            { className: 'pull-right', style: { cursor: 'pointer' }, onClick: this.toggleAddPreparation },\n\t            'Cancel'\n\t          );\n\t        }\n\t\n\t        //Cancel Edit Button\n\t        if (this.state.editPreparation) {\n\t          cancelEditPreparationButton = React.createElement(\n\t            'a',\n\t            { className: 'pull-right', style: { cursor: 'pointer' }, onClick: this.toggleEditPreparation },\n\t            'Cancel'\n\t          );\n\t        }\n\t      } else if (this.state.Data.specimen.preparation) {\n\t        var dataObject = this.state.Data.specimen.preparation.data;\n\t\n\t        if (dataObject) {\n\t          var specimenProtocolAttributes = Object.keys(dataObject).map(function (key) {\n\t            return React.createElement(\n\t              'div',\n\t              { className: 'item' },\n\t              _this2.state.Data.specimenProtocolAttributes[_this2.state.Data.specimen.typeId][_this2.state.Data.specimen.preparation.protocolId][key].name,\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                dataObject[key]\n\t              )\n\t            );\n\t          });\n\t        }\n\t\n\t        preparationPanelForm = React.createElement(\n\t          'div',\n\t          { className: 'panel' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            'Protocol',\n\t            React.createElement(\n\t              'div',\n\t              { className: 'value' },\n\t              this.state.Data.specimenProtocols[this.state.Data.specimen.preparation.protocolId].protocol\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            'Location',\n\t            React.createElement(\n\t              'div',\n\t              { className: 'value' },\n\t              this.state.Data.sites[this.state.Data.specimen.preparation.locationId]\n\t            )\n\t          ),\n\t          specimenProtocolAttributes,\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            'Date',\n\t            React.createElement(\n\t              'div',\n\t              { className: 'value' },\n\t              this.state.Data.specimen.preparation.date\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            'Time',\n\t            React.createElement(\n\t              'div',\n\t              { className: 'value' },\n\t              this.state.Data.specimen.preparation.time\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            'Comments',\n\t            React.createElement(\n\t              'div',\n\t              { className: 'value' },\n\t              this.state.Data.specimen.preparation.comments\n\t            )\n\t          )\n\t        );\n\t\n\t        preparationPanel = React.createElement(\n\t          _Panel2.default,\n\t          {\n\t            id: 'preparation-panel',\n\t            title: 'Preparation',\n\t            initCollapsed: this.state.Data.specimen.preparation ? false : true,\n\t            add: this.state.Data.specimen.preparation ? null : this.state.addPreparation ? null : this.toggleAddPreparation,\n\t            edit: this.state.Data.specimen.preparation ? this.state.editPreparation ? null : this.toggleEditPreparation : null\n\t          },\n\t          preparationPanelForm,\n\t          cancelAddPreparationButton,\n\t          cancelEditPreparationButton\n\t        );\n\t      }\n\t\n\t      var analysisPanel = void 0;\n\t      if (this.state.Data.specimen.analysis) {\n\t        analysisPanel = React.createElement(_Panel2.default, {\n\t          id: 'analysis-panel',\n\t          title: 'Analysis',\n\t          initCollapsed: true\n\t        });\n\t      }\n\t\n\t      var globals = React.createElement(\n\t        'div',\n\t        { className: 'globals' },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'list' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'field' },\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                this.state.Data.specimenTypes[this.state.Data.specimen.typeId].type\n\t              ),\n\t              'Type'\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'field' },\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                this.state.Data.specimen.quantity,\n\t                ' ' + this.state.Data.specimenUnits[this.state.Data.specimen.unitId].unit\n\t              ),\n\t              'Quantity'\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'field' },\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                this.state.Data.containerStati[this.state.Data.container.statusId].status\n\t              ),\n\t              'Status'\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'field' },\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                this.state.Data.sites[this.state.Data.container.locationId]\n\t              ),\n\t              'Location'\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'action' },\n\t              React.createElement(_Modal2.default, {\n\t                title: 'Ship',\n\t                buttonContent: React.createElement(\n\t                  'div',\n\t                  null,\n\t                  'Ship',\n\t                  React.createElement('span', {\n\t                    className: 'glyphicon glyphicon-chevron-right',\n\t                    style: { marginLeft: '5px' }\n\t                  })\n\t                )\n\t              })\n\t            )\n\t          ),\n\t          parentSpecimenBarcode,\n\t          parentContainerBarcode,\n\t          React.createElement(\n\t            'a',\n\t            { href: loris.BaseURL + '/' + this.state.Data.specimen.candidateId, className: 'item' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'field' },\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                this.state.Data.candidateInfo[this.state.Data.specimen.candidateId].PSCID\n\t              ),\n\t              'PSCID'\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'a',\n\t            { href: loris.BaseURL + '/instrument_list/?candID=' + this.state.Data.specimen.candidateId + '&sessionID=' + this.state.Data.specimen.sessionId, className: 'item' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'field' },\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                this.state.Data.sessionInfo[this.state.Data.specimen.sessionId].Visit_label\n\t              ),\n\t              'Visit Label'\n\t            )\n\t          )\n\t        )\n\t      );\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { id: 'specimen-page' },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'specimen-header' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'specimen-title' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'barcode' },\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                React.createElement(\n\t                  'strong',\n\t                  null,\n\t                  this.state.Data.container.barcode\n\t                )\n\t              ),\n\t              'Barcode'\n\t            ),\n\t            addAliquotButton\n\t          ),\n\t          React.createElement(_lifeCycle2.default, {\n\t            collection: this.state.Data.specimen.collection,\n\t            preparation: this.state.Data.specimen.preparation,\n\t            analysis: this.state.Data.specimen.analysis,\n\t            sites: this.state.Data.sites\n\t          }),\n\t          addPreparationButton\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'summary' },\n\t          globals,\n\t          React.createElement(\n\t            'div',\n\t            { className: 'processing' },\n\t            collectionPanel,\n\t            preparationPanel,\n\t            analysisPanel\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }, {\n\t    key: 'updateCollection',\n\t    value: function updateCollection(collection) {\n\t      this.toggleEditCollection();\n\t\n\t      var Data = this.state.Data;\n\t\n\t      Data.specimen.typeId = collection.specimenType;\n\t      Data.specimen.collection.quantity = collection.quantity;\n\t      Data.specimen.collection.unitId = collection.unitId;\n\t      Data.specimen.collection.date = collection.date;\n\t      Data.specimen.collection.time = collection.time;\n\t      Data.specimen.collection.data = collection.data;\n\t      Data.specimen.collection.comments = collection.comments;\n\t\n\t      this.setState({\n\t        Data: Data\n\t      });\n\t    }\n\t  }, {\n\t    key: 'updatePreparation',\n\t    value: function updatePreparation(preparation) {\n\t      if (this.state.editPreparation) {\n\t        this.toggleEditPreparation();\n\t      }\n\t\n\t      if (this.state.addPreparation) {\n\t        this.toggleAddPreparation();\n\t      }\n\t\n\t      var Data = this.state.Data;\n\t      Data.specimen.preparation = preparation;\n\t\n\t      this.setState({\n\t        Data: Data\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimen;\n\t}(React.Component);\n\t\n\tBiobankSpecimen.propTypes = {\n\t  specimenPageDataURL: React.PropTypes.string.isRequired\n\t};\n\t\n\tvar RBiobankSpecimen = React.createFactory(BiobankSpecimen);\n\t\n\twindow.BiobankSpecimen = BiobankSpecimen;\n\twindow.RBiobankSpecimen = RBiobankSpecimen;\n\t\n\texports.default = BiobankSpecimen;\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenPreparationForm = function (_React$Component) {\n\t  _inherits(SpecimenPreparationForm, _React$Component);\n\t\n\t  function SpecimenPreparationForm(props) {\n\t    _classCallCheck(this, SpecimenPreparationForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenPreparationForm.__proto__ || Object.getPrototypeOf(SpecimenPreparationForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: { data: {} },\n\t      currentProtocol: _this.props.edit ? _this.props.preparation.protocolId : null,\n\t      formErrors: {}\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setSpecimenProtocolFieldFormData = _this.setSpecimenProtocolFieldFormData.bind(_this);\n\t    _this.getSpecimenProtocolFields = _this.getSpecimenProtocolFields.bind(_this);\n\t    _this.handleSave = _this.handleSave.bind(_this);\n\t    _this.savePreparation = _this.savePreparation.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenPreparationForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var _this2 = this;\n\t\n\t      var formData = this.state.formData;\n\t\n\t      formData['specimenId'] = this.props.specimenId;\n\t\n\t      // This for autoloading data and will be used later\n\t      if (this.props.edit) {\n\t        formData['protocolId'] = this.props.preparation.protocolId;\n\t        formData['date'] = this.props.preparation.date;\n\t        formData['time'] = this.props.preparation.time;\n\t        formData['comments'] = this.props.preparation.comments;\n\t\n\t        var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.state.currentProtocol];\n\t        if (specimenProtocolFieldsObject) {\n\t          var specimenProtocolFields = Object.keys(specimenProtocolFieldsObject).map(function (attribute) {\n\t            formData.data[attribute] = _this2.props.preparation.data[attribute];\n\t          });\n\t        }\n\t      }\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      var submitButton;\n\t      if (this.props.add) {\n\t        submitButton = React.createElement(ButtonElement, { label: 'Submit' });\n\t      }\n\t\n\t      var updateButton;\n\t      if (this.props.edit) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      }\n\t\n\t      var specimenProtocolFields = void 0;\n\t      if (this.state.currentProtocol) {\n\t        var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.state.currentProtocol];\n\t\n\t        if (specimenProtocolFieldsObject) {\n\t          specimenProtocolFields = this.getSpecimenProtocolFields(specimenProtocolFieldsObject);\n\t        }\n\t      }\n\t\n\t      //This will be for default fields, if there are any eventually\n\t      if (this.state.currentSpecimenProtocol) {\n\t        preparationFields = React.createElement('div', null);\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenPreparation',\n\t          onSubmit: this.handleSave,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'protocolId',\n\t            label: 'Protocol',\n\t            options: this.props.specimenProtocols,\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.protocolId\n\t          }),\n\t          specimenProtocolFields,\n\t          React.createElement(DateElement, {\n\t            name: 'date',\n\t            label: 'Date',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.date\n\t          }),\n\t          React.createElement(TimeElement, {\n\t            name: 'time',\n\t            label: 'Time',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.time\n\t          }),\n\t          React.createElement(TextareaElement, {\n\t            name: 'comments',\n\t            label: 'Comments',\n\t            onUserInput: this.setFormData,\n\t            value: this.state.formData.comments\n\t          }),\n\t          submitButton,\n\t          updateButton\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t\n\t      var formData = this.state.formData;\n\t\n\t      if (formElement === \"protocolId\" && value !== \"\") {\n\t        //This is to eliminate the values for the specimen protocol fields\n\t        //This could potentially be improved later to retain the values\n\t        //for the fields that are common accross protocols\n\t        formData.data = {};\n\t        this.setState({\n\t          currentProtocol: value\n\t        });\n\t      }\n\t\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setSpecimenProtocolFieldFormData',\n\t    value: function setSpecimenProtocolFieldFormData(formElement, value) {\n\t      var formData = this.state.formData;\n\t      formData.data[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t\n\t    // This generates all the form fields for a given specimen protocol\n\t\n\t  }, {\n\t    key: 'getSpecimenProtocolFields',\n\t    value: function getSpecimenProtocolFields(fieldsObject) {\n\t      var _this3 = this;\n\t\n\t      var specimenProtocolFields = Object.keys(fieldsObject).map(function (attribute) {\n\t        var datatype = _this3.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\t\n\t        if (datatype === \"text\" || datatype === \"number\") {\n\t          if (fieldsObject[attribute]['refTableId'] == null) {\n\t            return React.createElement(TextboxElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              onUserInput: _this3.setSpecimenProtocolFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this3.state.formData.data[attribute],\n\t              hasError: _this3.state.formErrors[attribute],\n\t              errorMessage: \"This is a \" + datatype + \" field.\"\n\t            });\n\t          }\n\t\n\t          if (fieldsObject[attribute]['refTableId'] !== null) {\n\t            return React.createElement(SelectElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              options: '',\n\t              onUserInput: _this3.setSpecimenProtocolFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this3.state.formData.data[attribute]\n\t            });\n\t          }\n\t        }\n\t\n\t        if (datatype === \"datetime\") {\n\t          return React.createElement(DateElement, {\n\t            name: attribute,\n\t            label: fieldsObject[attribute]['name'],\n\t            onUserInput: _this3.setSpecimenProtocolFieldFormData,\n\t            ref: attribute,\n\t            required: fieldsObject[attribute]['required'],\n\t            value: _this3.state.formData.data[attribute]\n\t          });\n\t        }\n\t\n\t        if (datatype === \"boolean\") {}\n\t      });\n\t\n\t      return specimenProtocolFields;\n\t    }\n\t  }, {\n\t    key: 'handleSave',\n\t    value: function handleSave(e) {\n\t      //more things will go here later\n\t      if (this.props.add) {\n\t        this.savePreparation(this.props.insertAction);\n\t      }\n\t      if (this.props.edit) {\n\t        this.savePreparation(this.props.updateAction);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'savePreparation',\n\t    value: function savePreparation(action) {\n\t      var formData = this.state.formData;\n\t      formData['data'] = JSON.stringify(formData['data']);\n\t\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          //Update Parent Specimen Page Here\n\t          formData.data = JSON.parse(formData.data);\n\t          this.props.updatePreparation(formData);\n\t          //swal(\"Specimen Update Successful!\", \"\", \"success\");\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return SpecimenPreparationForm;\n\t}(React.Component);\n\t\n\tSpecimenPreparationForm.propTypes = {\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired,\n\t  units: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = SpecimenPreparationForm;\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar ContainerMoveForm = function (_React$Component) {\n\t  _inherits(ContainerMoveForm, _React$Component);\n\t\n\t  function ContainerMoveForm(props) {\n\t    _classCallCheck(this, ContainerMoveForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ContainerMoveForm.__proto__ || Object.getPrototypeOf(ContainerMoveForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      formErrors: {},\n\t      errorMessage: null\n\t    };\n\t\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    _this.validateForm = _this.validateForm.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.containerSubmit = _this.containerSubmit.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ContainerMoveForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t\n\t      //if this is a child specimen form then certain formData is set when component mounts\n\t      if (this.props.child) {\n\t        var formData = this.state.formData;\n\t        formData['parentSpecimen'] = this.props.specimenId;\n\t        formData['visitLabel'] = this.props.sessionId;\n\t\n\t        this.setState({\n\t          formData: formData\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          onSubmit: this.handleSubmit\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement(SelectElement, {\n\t              name: 'container',\n\t              label: 'Container',\n\t              options: this.props.containerBarcodesNonPrimary,\n\t              onUserInput: this.setFormData,\n\t              required: true,\n\t              value: this.state.formData.container\n\t            })\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-xs-3 col-xs-offset-9' },\n\t          React.createElement(ButtonElement, { label: 'Submit' })\n\t        )\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t    /**\n\t     * Returns a valid name for the file to be specimened\n\t     *\n\t     * @param {string} visitLabel - Visit label selected from the dropdown\n\t     * @param {string} instrument - Instrument selected from the dropdown\n\t     * @return {string} - Generated valid filename for the current selection\n\t     */\n\t\n\t  }, {\n\t    key: 'validateForm',\n\t    value: function validateForm(formElement, value) {\n\t      var _this2 = this;\n\t\n\t      var formErrors = this.state.formErrors;\n\t\n\t      //validate that quantity is a number and less than capacity\n\t      if (formElement === \"quantity\" && value !== \"\") {\n\t        if (isNaN(value) || value > this.props.capacities[this.state.currentContainerType]) {\n\t          formErrors.quantity = true;\n\t        } else {\n\t          formErrors.quantity = false;\n\t        }\n\t      }\n\t\n\t      //validate datatypes and regex of generated type attributes\n\t      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t      var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t\n\t        var datatype = _this2.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"number\") {\n\t          if (formElement === attribute) {\n\t            if (isNaN(value) && value !== \"\") {\n\t              formErrors[attribute] = true;\n\t            } else {\n\t              formErrors[attribute] = false;\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      this.setState({\n\t        formErrors: formErrors\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Handle form submission\n\t     * @param {object} e - Form submission event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      var formData = this.state.formData;\n\t      var formRefs = this.refs;\n\t      //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\t\n\t      // Validate the form\n\t      if (!this.isValidForm(formRefs, formData)) {\n\t        return;\n\t      }\n\t\n\t      //    // Validate specimened file name\n\t      //    let instrument = formData.instrument ? formData.instrument : null;\n\t      //    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n\t      //    if (!this.isValidFileName(requiredFileName, fileName)) {\n\t      //      swal(\n\t      //        \"Invalid Specimen name!\",\n\t      //        \"File name should begin with: \" + requiredFileName,\n\t      //        \"error\"\n\t      //      );\n\t      //      return;\n\t      //    }\n\t\n\t      // Check for duplicate file names\n\t      //    let isDuplicate = biobankFiles.indexOf(fileName);\n\t      //    if (isDuplicate >= 0) {\n\t      //      swal({\n\t      //        title: \"Are you sure?\",\n\t      //        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n\t      //        type: \"warning\",\n\t      //        showCancelButton: true,\n\t      //        confirmButtonText: 'Yes, I am sure!',\n\t      //        cancelButtonText: \"No, cancel it!\"\n\t      //      }, function(isConfirm) {\n\t      //        if (isConfirm) {\n\t      //          this.specimenFile();\n\t      //        } else {\n\t      //          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n\t      //        }\n\t      //      }.bind(this));\n\t      //    } else {\n\t\n\t      this.containerSubmit();\n\t      //    }\n\t    }\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'containerSubmit',\n\t    value: function containerSubmit() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          // Trigger an update event to update all observers (i.e DataTable)\n\t          // THIS CURRENTLY DOES NOT WORK\n\t          var event = new CustomEvent('update-datatable');\n\t          window.dispatchEvent(event);\n\t\n\t          this.props.closeModal();\n\t\n\t          //refreshes table \n\t          //may need refresh specimen data as well? probably..\n\t          this.props.refreshTable();\n\t          swal(\"Container Submission Successful!\", \"\", \"success\");\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Checks if the inputted file name is valid\n\t     *\n\t     * @param {string} requiredFileName - Required file name\n\t     * @param {string} fileName - Provided file name\n\t     * @return {boolean} - true if fileName starts with requiredFileName, false\n\t     *   otherwise\n\t     */\n\t    //  isValidFileName(requiredFileName, fileName) {\n\t    //    if (fileName === null || requiredFileName === null) {\n\t    //      return false;\n\t    //    }\n\t    //\n\t    //    return (fileName.indexOf(requiredFileName) === 0);\n\t    //  }\n\t\n\t    /**\n\t     * Validate the form\n\t     *\n\t     * @param {object} formRefs - Object containing references to React form elements\n\t     * @param {object} formData - Object containing form data inputed by user\n\t     * @return {boolean} - true if all required fields are filled, false otherwise\n\t     */\n\t\n\t  }, {\n\t    key: 'isValidForm',\n\t    value: function isValidForm(formRefs, formData) {\n\t      var isValidForm = true;\n\t\n\t      var requiredFields = {\n\t        visitLabel: null\n\t      };\n\t\n\t      Object.keys(requiredFields).map(function (field) {\n\t        if (formData[field]) {\n\t          requiredFields[field] = formData[field];\n\t        } else if (formRefs[field]) {\n\t          formRefs[field].props.hasError = true;\n\t          isValidForm = false;\n\t        }\n\t      });\n\t      this.forceUpdate();\n\t\n\t      return isValidForm;\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      //let visitLabel = this.state.formData.visitLabel;\n\t\n\t      //LOOK AT THIS LATER - THE SWITCH TO PROPS MESSED THIS ALL UP \n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return ContainerMoveForm;\n\t}(React.Component);\n\t\n\tContainerMoveForm.propTypes = {\n\t  DataURL: React.PropTypes.string,\n\t  action: React.PropTypes.string,\n\t  barcode: React.PropTypes.string,\n\t  refreshTable: React.PropTypes.func\n\t};\n\t\n\texports.default = ContainerMoveForm;\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// modules/biobank/js/specimenIndex.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4408ccbeb91cf7c794fc","/* global ReactDOM */\n\nimport BiobankSpecimen from './specimen';\nconst args = QueryString.get(document.currentScript.src);\n\n$(function() {\n  const biobankSpecimen = (\n    <div className=\"page-specimen-form\">\n      <div className=\"row\">\n        <div className=\"col-md-9 col-lg-12\">\n          <BiobankSpecimen\n            specimenPageDataURL={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=getSpecimenData&barcode=${args.barcode}`}\n          />\n        </div>\n      </div>\n    </div>\n  );\n\n  ReactDOM.render(biobankSpecimen, document.getElementById(\"lorisworkspace\"));\n});\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenIndex.js","/**\n * This file contains React component for Panel\n *\n * @author Alex I.\n * @version 1.0.0\n *\n */\n\n/**\n * Panel component\n * Wraps children in a collapsible bootstrap panel\n */\nclass Panel extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsed: this.props.initCollapsed\n    };\n\n    // Initialize panel class based on collapsed status\n    this.panelClass = (\n      this.props.initCollapsed ?\n        \"panel-collapse collapse\" :\n        \"panel-collapse collapse in\"\n    );\n\n    this.toggleCollapsed = this.toggleCollapsed.bind(this);\n  }\n\n  toggleCollapsed() {\n    this.setState({collapsed: !this.state.collapsed});\n  }\n\n  render() {\n    // Change arrow direction based on collapse status\n    let glyphClass = (\n      this.state.collapsed ?\n        \"glyphicon pull-right glyphicon-chevron-down\" :\n        \"glyphicon pull-right glyphicon-chevron-up\"\n    );\n\n    let pencilGlyph;\n    if (this.props.edit) {\n      pencilGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-pencil\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.edit}\n        /> \n      );\n    } \n\n    let plusGlyph;\n    if (this.props.add) {\n      plusGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-plus\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.add}\n        />\n      );\n    }\n\n    let removeGlyph;\n    if (this.props.cancel) {\n      removeGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-remove\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.cancel}\n        />\n      );\n    }\n\n    // Add panel header, if title is set\n    const panelHeading = this.props.title ? (\n      <div\n        className=\"panel-heading\"\n      >\n        <span \n          className={glyphClass}\n          onClick={this.toggleCollapsed}\n          data-toggle=\"collapse\"\n          data-target={'#' + this.props.id}\n          style={{cursor: 'pointer'}}\n        />\n        {pencilGlyph}\n        {plusGlyph}\n        {removeGlyph}\n        {this.props.title}\n      </div>\n    ) : '';\n\n    return (\n      <div className=\"panel panel-primary\">\n        {panelHeading}\n        <div id={this.props.id} className={this.panelClass} role=\"tabpanel\">\n          <div className=\"panel-body\" style={{height: this.props.height}}>\n            {this.props.children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPanel.propTypes = {\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  edit: React.PropTypes.func,\n  add: React.PropTypes.func\n};\nPanel.defaultProps = {\n  initCollapsed: false,\n  id: 'default-panel',\n  height: '100%'\n};\n\nexport default Panel;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Panel.js","import BiobankBarcodeForm from './barcodeForm.js';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankSpecimenForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      barcodeFormList: {},\n      errorMessage: null,\n      formErrors: {},\n      countBarcodeForms: [1] \n    };\n\n    //this.getValidFileName = this.getValidFileName.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    //this.isValidFileName = this.isValidFileName.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.specimenSubmit = this.specimenSubmit.bind(this);\n    this.addBarcodeForm = this.addBarcodeForm.bind(this);\n    this.setBarcodeFormData = this.setBarcodeFormData.bind(this);\n  }\n\n  componentDidMount() {\n\n    //if this is a child specimen form then certain formData is set when component mounts\n    if (this.props.child) {\n      var formData = this.state.formData;\n      formData['parentSpecimen'] = this.props.specimenId;\n      formData['pscid'] = this.props.candidateId;\n      formData['visitLabel'] = this.props.sessionId;\n      formData['unitId'] = this.props.unitId;\n\n      this.setState({\n        formData: formData\n      });\n    }\n  }\n\n  render() {\n\n    //Styling for remove Barcode button\n    const glyphStyle = {\n     color: '#D3D3D3',\n     margin: 'auto',\n    }; \n    const buttonStyle = {\n      appearance: 'none',\n      outline: 'none',\n      boxShadow: 'none',\n      borderColor: 'transparent',\n      backgroundColor: 'transparent',\n       \n    };\n\n    //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n    var barcodeForms = [];\n    for (let i = 0; i < this.state.countBarcodeForms.length; i++) {\n      barcodeForms.push(\n        <BiobankBarcodeForm\n          setParentFormData={this.setBarcodeFormData}\n          id={this.state.countBarcodeForms[i]}\n          specimenTypes={this.props.specimenTypes}\n          containerTypesPrimary={this.props.containerTypesPrimary}\n          containerBarcodesNonPrimary={this.props.containerBarcodesNonPrimary}\n          specimenTypeAttributes={this.props.specimenTypeAttributes}\n          attributeDatatypes={this.props.attributeDatatypes}\n          capacities={this.props.capacities}\n          specimenTypeUnits={this.props.specimenTypeUnits}\n          units={this.props.units}\n          button={i+1 === this.state.countBarcodeForms.length ? (\n            <button \n              type=\"button\"\n              className=\"btn btn-success btn-sm\"\n              onClick={this.addBarcodeForm}\n            >   \n              <span className=\"glyphicon glyphicon-plus\"/>\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"btn btn-primary-outline btn-sm\"\n              style={buttonStyle}\n              onClick={() => this.removeBarcodeForm(i)}\n            >\n            <span className=\"glyphicon glyphicon-remove\" style={glyphStyle}/>\n            </button>\n          )}\n        />\n      );\n    }\n\n\n    let globalFields;\n    let remainingQuantityFields;\n    if (this.props.child) {\n      globalFields = (   \n        <div>\n          <StaticElement\n            label=\"Parent Specimen\"\n            text={this.props.barcode}\n          />\n          <StaticElement\n            label=\"PSCID\"\n            text={this.props.pscid}\n          />\n          <StaticElement\n            label=\"Visit Label\"\n            text={this.props.visit}\n          />\n        </div>\n      );\n\n      //It may be wise to make unit static and forced, or atleast prepopulated --\n      remainingQuantityFields = (\n        <div>\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Remaining Quantity\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={this.props.specimenUnits}\n            onUserInput={this.setFormData}\n            emptyOption={false}\n            required={true}\n            value={this.state.formData.unitId}\n          />\n        </div>\n      );\n\n    } else {\n      globalFields = (\n          <div>\n            <SelectElement\n              name=\"pscid\"\n              label=\"PSCID\"\n              options={this.props.pSCIDs}\n              onUserInput={this.setFormData}\n              ref=\"pscid\"\n              required={true}\n              value={this.state.formData.pscid}\n            />\n            <SelectElement\n              name=\"visitLabel\"\n              label=\"Visit Label\"\n              options={this.state.visits}\n              onUserInput={this.setFormData}\n              ref=\"visitLabel\"\n              required={true}\n              value={this.state.formData.visitLabel}\n              disabled={this.state.formData.pscid ? false : true}\n            />\n          </div>\n      );\n    }\n\n    //ALLOW THEM TO CANCEL THE FORM AND DELETE BARCODE FORMS\n    return (\n      <FormElement\n        name=\"specimenForm\"\n        id='specimenForm'\n        onSubmit={this.handleSubmit}\n        ref=\"form\"\n      >\n        <br/>\n        <div className='row'>\n          <div className=\"col-xs-11\">\n            {globalFields}\n          </div>\n        </div>\n        {barcodeForms}\n        <div className='row'>\n          <div className=\"col-xs-11\">\n            {remainingQuantityFields}\n          </div>\n        </div>\n        <div className=\"col-xs-3 col-xs-offset-9\">\n          <ButtonElement label=\"Submit\"/>\n        </div>\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n  /**\n   * Returns a valid name for the file to be specimened\n   *\n   * @param {string} pscid - PSCID selected from the dropdown\n   * @param {string} visitLabel - Visit label selected from the dropdown\n   * @param {string} instrument - Instrument selected from the dropdown\n   * @return {string} - Generated valid filename for the current selection\n   */\n//  getValidFileName(pscid, visitLabel, instrument) {\n//    var fileName = pscid + \"_\" + visitLabel;\n//    if (instrument) fileName += \"_\" + instrument;\n//\n//    return fileName;\n//  }\n\n\n  validateForm(formElement, value) {\n    let formErrors = this.state.formErrors;\n\n    //validate barcode regex\n    if (formElement === \"barcode\" && value !== \"\") {\n      if (!(/^hello/.test(this.state.formData.barcode))) {\n        formErrors.barcode = true;\n      } else {\n        formErrors.barcode = false;\n      }\n    }\n\n    //validate that quantity is a number and less than capacity\n    if (formElement === \"quantity\" && value !== \"\") {\n      if (isNaN(value) || (value > this.props.capacities[this.state.currentContainerType])) {\n        formErrors.quantity = true;\n      } else {\n        formErrors.quantity = false;\n      }\n    }\n\n    //validate datatypes and regex of generated type attributes\n    var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n    var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n\n      let datatype = this.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"number\") {\n        if (formElement === attribute) {\n          if (isNaN(value) && value !== \"\") {\n            formErrors[attribute] = true;\n          } else {\n            formErrors[attribute] = false;\n          }\n        }\n      }\n    })\n\n    this.setState({\n      formErrors: formErrors\n    });\n\n  }\n\n\n  /**\n   * Handle form submission\n   * @param {object} e - Form submission event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    let formRefs = this.refs;\n    //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\n    // Validate the form\n    if (!this.isValidForm(formRefs, formData)) {\n      return;\n    }\n\n\n//    // Validate specimened file name\n//    let instrument = formData.instrument ? formData.instrument : null;\n//    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n//    let requiredFileName = this.getValidFileName(\n//      formData.pscid, formData.visitLabel, instrument\n//    );\n//    if (!this.isValidFileName(requiredFileName, fileName)) {\n//      swal(\n//        \"Invalid Specimen name!\",\n//        \"File name should begin with: \" + requiredFileName,\n//        \"error\"\n//      );\n//      return;\n//    }\n\n    // Check for duplicate file names\n//    let isDuplicate = biobankFiles.indexOf(fileName);\n//    if (isDuplicate >= 0) {\n//      swal({\n//        title: \"Are you sure?\",\n//        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n//        type: \"warning\",\n//        showCancelButton: true,\n//        confirmButtonText: 'Yes, I am sure!',\n//        cancelButtonText: \"No, cancel it!\"\n//      }, function(isConfirm) {\n//        if (isConfirm) {\n//          this.specimenFile();\n//        } else {\n//          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n//        }\n//      }.bind(this));\n//    } else {\n\n    this.specimenSubmit();\n//    }\n  }\n\n  /*\n   * Uploads the file to the server\n   */\n  specimenSubmit() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        // FOR SOME REASON THIS IS NO LONGER WORKING\n        // Trigger an update event to update all observers (i.e DataTable)\n        // THIS CURRENTLY DOES NOT WORK - LOOK INTO IT\n        let event = new CustomEvent('update-datatable');\n        window.dispatchEvent(event);\n\n        //refreshes table if not a child\n        if (!this.props.child) {\n          this.props.refreshTable();\n        }\n        swal(\"Specimen Submission Successful!\", \"\", \"success\");\n        this.props.closeModal();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Checks if the inputted file name is valid\n   *\n   * @param {string} requiredFileName - Required file name\n   * @param {string} fileName - Provided file name\n   * @return {boolean} - true if fileName starts with requiredFileName, false\n   *   otherwise\n   */\n//  isValidFileName(requiredFileName, fileName) {\n//    if (fileName === null || requiredFileName === null) {\n//      return false;\n//    }\n//\n//    return (fileName.indexOf(requiredFileName) === 0);\n//  }\n\n  /**\n   * Validate the form\n   *\n   * @param {object} formRefs - Object containing references to React form elements\n   * @param {object} formData - Object containing form data inputed by user\n   * @return {boolean} - true if all required fields are filled, false otherwise\n   */\n  isValidForm(formRefs, formData) {\n    var isValidForm = true;\n\n    var requiredFields = {\n      pscid: null,\n      visitLabel: null,\n    };\n\n    Object.keys(requiredFields).map(function(field) {\n      if (formData[field]) {\n        requiredFields[field] = formData[field];\n      } else if (formRefs[field]) {\n        formRefs[field].props.hasError = true;\n        isValidForm = false;\n      }\n    });\n    this.forceUpdate();\n\n    return isValidForm;\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    // Only display visits and sites available for the current pscid\n    //let visitLabel = this.state.formData.visitLabel;\n    //let pscid = this.state.formData.pscid;\n  \n    //LOOK AT THIS LATER - THE SWITCH TO PROPS MESSED THIS ALL UP \n    if (formElement === \"pscid\" && value !== \"\") {\n      this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n      //this.state.Data.sites = this.state.Data.sessionData[this.state.Data.PSCIDs[value]].sites;\n    }\n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  setBarcodeFormData(barcodeFormData, barcodeId) {\n    var formData = this.state.formData;\n    var barcodeFormList = this.state.barcodeFormList;\n    barcodeFormList[barcodeId] = barcodeFormData;\n    formData['barcodeFormList'] = barcodeFormList;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  addBarcodeForm() {\n    let countBarcodeForms = this.state.countBarcodeForms;\n    countBarcodeForms.push(countBarcodeForms[countBarcodeForms.length -1] + 1); \n    this.setState({\n      countBarcodeForms: countBarcodeForms\n    });\n  }\n\n  removeBarcodeForm(index) {\n    let countBarcodeForms = this.state.countBarcodeForms;\n    countBarcodeForms.splice(index, 1);\n    this.setState({\n      countBarcodeForms: countBarcodeForms\n    });\n  }\n\n}\n\nBiobankSpecimenForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired,\n  barcode: React.PropTypes.string,\n  refreshTable: React.PropTypes.func\n};\n\nexport default BiobankSpecimenForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenForm.js","import SpecimenCollectionForm from './collectionForm'\n\n/**\n * Biobank Barcode Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass BiobankBarcodeForm extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      formData: {},\n      formErrors: {},\n    };\n   \n    this.setFormData = this.setFormData.bind(this);\n    this.setSpecimenFormData = this.setSpecimenFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n  }\n\n  render() {\n\n    return (\n      <FormElement\n        name=\"biobankBarcode\"\n      >\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <div \n              data-toggle=\"collapse\" \n              data-target={\"#\" + this.props.id}\n            >   \n              <TextboxElement\n                name={\"barcode\"}\n                label={\"Barcode \" + this.props.id}\n                onUserInput={this.setFormData}\n                ref={\"barcode\"}\n                required={true}\n                value={this.state.formData[\"barcode\"]}\n                hasError={this.state.formErrors[\"barcode\"]}\n                errorMessage=\"Incorrect Barcode format for this Specimen and Container Type\"\n              />\n            </div>\n          </div>\n          <div className=\"col-xs-1\">\n            {this.props.button}\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xs-2\"/>\n          <div className=\"col-xs-9\">\n            <div id={this.props.id} className=\"collapse\">\n              <SpecimenCollectionForm\n                setParentFormData={this.setSpecimenFormData}\n                specimenTypes={this.props.specimenTypes}\n                specimenTypeAttributes={this.props.specimenTypeAttributes}\n                attributeDatatypes={this.props.attributeDatatypes}\n                containerTypesPrimary={this.props.containerTypesPrimary}\n                containerBarcodesNonPrimary={this.props.containerBarcodesNonPrimary}\n                specimenTypeUnits={this.props.specimenTypeUnits}\n                stati={this.props.stati}\n              />\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState(\n      {\n      formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setSpecimenFormData(specimenFormData) {\n    var formData = this.state.formData;\n    \n    for (var attribute in specimenFormData) {\n      formData[attribute] = specimenFormData[attribute]\n    }\n \n    this.setState(\n      {\n      formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    this.props.setParentFormData(this.state.formData, this.props.id);\n  }\n}\n\nBiobankBarcodeForm.propTypes = {\n  \n  id: React.PropTypes.string,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n}\n\nexport default BiobankBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/barcodeForm.js","\n/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenCollectionForm extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      formData: {data:{}},\n      currentSpecimenType: this.props.edit ? this.props.specimenType : null,\n      currentContainerType: this.props.edit ? this.props.containerType : null,\n      formErrors: {},\n    };\n\n    this.setFormData = this.setFormData.bind(this);\n    this.setSpecimenTypeFieldFormData = this.setSpecimenTypeFieldFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n    this.getSpecimenTypeFields = this.getSpecimenTypeFields.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.updateSpecimen = this.updateSpecimen.bind(this);\n  }\n\n  componentDidMount() {\n    let formData = this.state.formData;\n    if (this.props.edit) {\n      formData['specimenId']    = this.props.specimenId;\n      formData['containerId']   = this.props.containerId;\n      formData['specimenType']  = this.props.specimenType;\n      formData['containerType'] = this.props.containerType;\n      formData['quantity']      = this.props.collection.quantity;\n      formData['unitId']        = this.props.collection.unitId;\n      formData['date']          = this.props.collection.date;\n      formData['time']          = this.props.collection.time;\n      formData['comments']      = this.props.collection.comments;\n\n      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n      if (specimenTypeFieldsObject) {\n        var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n          formData.data[attribute] = this.props.collection.data[attribute];\n        });\n      }\n    }\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  render() {\n\n    var parentContainerField;\n    if (!this.props.edit) {\n      parentContainerField = (\n        <SelectElement\n          name=\"parentContainer\"\n          label=\"Parent Container Barcode\"\n          options={this.props.containerBarcodesNonPrimary}\n          onUserInput={this.setFormData}\n          ref=\"parentContainer\"\n          required={false}\n          value={this.state.formData.parentContainer}\n        />\n      );\n    }\n\n    var updateButton;\n    if (this.props.edit) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    }\n\n    //This block of code should potentially be moved to setFormData();\n    //Consider Refactoring...\n    var specimenTypeUnits = {};\n    if (this.state.currentSpecimenType) {\n     \n      //This modifies the selections for unit drop down based on the chosend specimen type \n      for (var id in this.props.specimenTypeUnits[this.state.currentSpecimenType]) {\n        specimenTypeUnits[id] = this.props.specimenTypeUnits[this.state.currentSpecimenType][id].unit;\n      }\n\n      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n      if (specimenTypeFieldsObject) {\n        var specimenTypeFields = this.getSpecimenTypeFields(specimenTypeFieldsObject);\n      }\n    }\n\n    var specimenFields;\n    if (this.state.currentSpecimenType) {\n      specimenFields = (\n        <div>\n          <SelectElement\n            name=\"containerType\"\n            label=\"Container Type\"\n            options={this.props.containerTypesPrimary}\n            onUserInput={this.setFormData}\n            ref=\"containerType\"\n            required={true}\n            value={this.state.formData.containerType}\n          />\n          {parentContainerField}\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Quantity\"\n            onUserInput={this.setFormData}\n            ref=\"quantity\"\n            required={true}\n            value={this.state.formData.quantity}\n            hasError={this.state.formErrors.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={specimenTypeUnits}\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.unitId}\n          />\n          {specimenTypeFields}\n          <DateElement\n            name=\"date\"\n            label=\"Date\"\n            minYear=\"2000\"\n            maxYear=\"2018\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.date}\n          />\n          <TimeElement\n            name=\"time\"\n            label=\"Time\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.time}\n          />\n          <TextareaElement\n            name=\"comments\"\n            label=\"Comments\"\n            onUserInput={this.setFormData}\n            ref=\"comments\"\n            value={this.state.formData.comments}\n          />\n          {updateButton}\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"biobankSpecimen\"\n        onSubmit={this.handleUpdate}\n        ref=\"form\"\n      >\n        <div>\n          <SelectElement\n            name=\"specimenType\"\n            label=\"Specimen Type\"\n            options={this.props.specimenTypes}\n            onUserInput={this.setFormData}\n            ref=\"specimenType\"\n            required={true}\n            value={this.state.formData.specimenType}\n          />\n        {specimenFields}\n        </div>\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n\n    let formData = this.state.formData;\n    formData[formElement] = value;\n\n    if (formElement === \"specimenType\" && value !== \"\") {\n      //This throws a warning if the specimen type is changed because of the cascading effects this \n      //would cause.\n      if (this.props.edit) {\n        swal({\n          title: \"Warning\",\n          text: \"Changing the specimen type will result in the loss of any preparation or anaylsis \"+\n            \"data for this specimen. You will also need to manually change the specimen type of any \"+\n            \"aliquots derived from this specimen. Proceed with caution.\",\n          type: \"warning\",\n          showCancelButton: true,\n          confirmButtonText: 'Cancel Change',\n          cancelButtonText: 'Proceed',\n        }, \n        function(isConfirm) {\n          if (isConfirm) {\n            this.props.toggleEdit();\n          } else {\n          }\n        }.bind(this));\n      }\n\n      //This is to eliminate the values for the specimen type fields\n      //This could potentially be improved later to retain the values\n      //for the fields that are common across specimen types\n      formData.data = {}; \n      this.setState({\n        currentSpecimenType: value\n      });\n    }\n\n    if (formElement === \"containerType\" && value !== \"\") {\n      this.setState({\n        currentContainerType: value\n      });\n    }\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setSpecimenTypeFieldFormData(formElement, value) {\n    let formData = this.state.formData;\n    formData.data[formElement] = value;\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  \n  }\n\n  setParentFormData() {\n    if (!this.props.edit) {\n      var formData = this.state.formData;\n      this.props.setParentFormData(formData);\n    }\n  }\n\n  // This generates all the form fields for a given specimen type\n  getSpecimenTypeFields(fieldsObject) {\n    var specimenTypeFields = Object.keys(fieldsObject).map((attribute) => {\n      let datatype = this.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"text\" || datatype === \"number\") {\n        if (fieldsObject[attribute]['refTableId'] == null) {\n          return (\n            <TextboxElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              onUserInput={this.setSpecimenTypeFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribute]['required']}\n              value={this.state.formData.data[attribute]}\n              hasError={this.state.formErrors[attribute]}\n              errorMessage={\"This is a \" + datatype + \" field.\"}\n            />\n          );\n        }\n\n        // OPTIONS FOR SELECT ELEMENT WILL MOST LIKELY BE PASSED VIA AJAX CALL\n        // BUT IT CAN ALSO BE PRELOADED --\n        // ASK RIDA HOW THIS SHOULD BE DONE\n        if (fieldsObject[attribute]['refTableId'] !== null) {\n          return (\n            <SelectElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              options=\"\"\n              onUserInput={this.setSpecimenTypeFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribte]['required']}\n              value={this.state.formData.data[attribute]}\n            />\n          );\n        }\n      }\n\n      if (datatype === \"datetime\") {\n        return (\n          <DateElement\n            name={attribute}\n            label={fieldsObject[attribute]['name']}\n            onUserInput={this.setSpecimenTypeFieldFormData}\n            ref={attribute}\n            required={fieldsObject[attribute]['required']}\n            value={this.state.formData.data[attribute]}\n          />\n        );\n      }\n\n      if (datatype === \"boolean\") {\n      \n      }\n    })\n\n    return specimenTypeFields;\n  }\n\n  handleUpdate(e) {\n    //more things will go here later\n    this.updateSpecimen();\n  }\n\n  updateSpecimen() {\n    let formData = this.state.formData;\n    formData['data'] = JSON.stringify(formData['data']);\n\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        //Update Parent Specimen Page Here\n        formData.data = JSON.parse(formData.data);\n        this.props.updateCollection(formData);\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n}\n\nSpecimenCollectionForm.propTypes = {\n  setParentFormData: React.PropTypes.func,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n}\n\nexport default SpecimenCollectionForm;\n\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/collectionForm.js","/**\n * This file contains React components for Modal component.\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\n/**\n * Modal Component.\n * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n *\n * ================================================\n * Usage:\n *\n * 1. Define an array of tabs with IDs and labels\n *\n * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n *\n * 2. Pass tabList as <Tab> property and <TabPane> as child\n *  ```\n * <Tabs tabs={tabList} defaultTab=\"tab1\">\n *   <TabPane TabId={tabList[0].id}>\n *     // Tab content goes here\n *   </TabPane>\n * </Tabs>\n * ```\n * =================================================\n *\n */\nclass Modal extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      show: false\n    };\n\n  this.openModal = this.openModal.bind(this);\n  this.closeModal = this.closeModal.bind(this);\n  }\n\n  openModal() {\n    this.setState({\n      show: true\n    });\n  }\n \n  closeModal() {\n    this.setState({\n      show: false\n    });\n  }\n\n  render() {\n    // Black Background with Alpha Channel\n    const backdropStyle = {\n      position: 'fixed',\n      zIndex: 9998,\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundColor: 'rgba(0,0,0,0.3)',\n      padding: 50\n    };\n\n    // White Modal Window\n    const modalStyle = {\n      position: 'relative',\n      maxWidth: 1000,\n      maxHeight: '80%',\n      margin: '5% auto',\n      backgroundColor: '#fff',\n      borderRadius: 10,\n      overflowY: 'auto',\n      zIndex: 9999\n    };\n\n    const titleStyle = {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      background: '#093782',\n      height: '70px',\n      borderTopRightRadius: '10',\n      color: '#FFFFFF',\n      fontSize: 24,\n      padding: 20,\n    }\n\n    const bodyStyle = {\n      padding: 15\n    }\n  \n    const footerStyle = {\n      padding: 15\n    }\n\n    var button = (\n      <button\n        type='button'\n        className={this.props.buttonClass}\n        onClick={this.openModal}\n        style={this.props.buttonStyle}\n      >\n        {this.props.buttonContent}\n      </button>\n    );\n\n    var modal;\n    if (this.state.show) {\n      modal = (\n        <div style={backdropStyle} onClick={this.closeModal}>\n          <div\n            style={modalStyle}\n            onClick={e => {\n              e.stopPropagation();\n            }}\n          >\n            <div\n              style={titleStyle}\n            >\n              {this.props.title}\n            </div>\n            <div\n              style={bodyStyle}\n            >\n              {this.props.children}\n            </div>\n            <div style={footerStyle} onClick={this.closeModal}>\n              <a>Cancel</a>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {button}\n        {modal}\n      </div>\n    );\n  }\n}\n\nModal.propTypes = {\n  title: React.PropTypes.string,\n  buttonClass: React.PropTypes.string,\n  buttonStyle: React.PropTypes.object,\n  buttonContent: React.PropTypes.object\n};\nModal.defaultProps = {\n  buttonClass: 'btn btn-primary'\n};\n\nexport default Modal;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Modal.js","/**\n * This file contains React component for Loader\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n */\n\n/**\n * Loader component\n */\nclass Loader extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n\n    return (\n      <div className='loader-container'>\n        <div className=\"loader\"/>\n      </div>\n\n\n    );\n  }\n}\n\nexport default Loader;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Loader.js","/**\n * LifeCycle\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass LifeCycle extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n    };\n   \n  }\n\n  componentDidMount() {\n    $('[data-toggle=\"tooltip\"]').tooltip();\n  }\n\n  render() {\n\n    let collectionNode;\n    let collectionTooltip;\n    if (this.props.collection) {\n      collectionTooltip = (\n        <div>\n          <h>Collection</h>\n          <p>Date:</p> \n        </div>\n      );\n\n      collectionNode = (\n        <div \n          className='lifecycle-node' \n          data-html='true'\n          data-toggle='tooltip' \n          data-placement='auto'\n          title={'<h5>' + this.props.sites[this.props.collection.locationId] + '</h5>' +\n                 '<h5>' + this.props.collection.date + '</h5>'\n                }\n        >\n          <div className='letter'>\n            C\n          </div>\n        </div>\n      );\n    }\n\n    let preparationNode;\n    if (this.props.preparation) {\n      preparationNode = (\n        <div \n          className='lifecycle-node' \n          data-html='true'\n          data-toggle='tooltip' \n          data-placement='auto'\n          title={'<h5>' + this.props.sites[this.props.preparation.locationId] + '</h5>' +\n                 '<h5>' + this.props.preparation.date + '</h5>'\n                }\n        >\n          <div className='letter'>\n            P\n          </div>\n        </div>\n      );\n    }\n\n    let analysisNode;\n    if (this.props.analysis) {\n      analysisNode = (\n        <div className='lifecycle-node-container'>\n           <div className='lifecycle-node'/>\n           <div className='lifecycle-text'>Analysis</div>\n        </div>\n      );\n    }\n\n    let line;\n    line = (\n        <div className='lifecycle-line'/>\n    );\n\n    return (\n      <div className='lifecycle'>\n        <div className='lifecycle-graphic'>\n          {collectionNode}\n          {line}\n          {preparationNode}\n          {analysisNode} \n        </div>\n      </div>\n    );\n  }\n\n}\n\nLifeCycle.propTypes = {\n}\n\nexport default LifeCycle;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/lifeCycle.js","/* exported RBiobankSpecimen */\n\nimport SpecimenCollectionForm from './collectionForm';\nimport SpecimenPreparationForm from './preparationForm';\nimport ContainerMoveForm from './containerMoveForm';\nimport Modal from 'Modal';\nimport Panel from '../../../jsx/Panel';\nimport Loader from 'Loader';\nimport BiobankSpecimenForm from './specimenForm.js';\nimport LifeCycle from './lifeCycle.js';\n\n/**\n * Biobank Specimen\n *\n * Fetches data corresponding to a given Specimen from Loris backend and\n * displays a page allowing viewing of meta information of the specimen\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankSpecimen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      Data: {},\n      isLoaded: false,\n      loadedData: 0,\n      editCollection: false,\n      addPreparation: false,\n      editPreparation: false\n    };\n\n    this.fetchSpecimenData = this.fetchSpecimenData.bind(this);\n    this.toggleEditCollection = this.toggleEditCollection.bind(this);\n    this.toggleAddPreparation = this.toggleAddPreparation.bind(this);\n    this.toggleEditPreparation = this.toggleEditPreparation.bind(this);\n    this.mapFormOptions = this.mapFormOptions.bind(this);\n    this.updateCollection = this.updateCollection.bind(this);\n    this.updatePreparation = this.updatePreparation.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchSpecimenData();\n  }\n\n  fetchSpecimenData() {\n    var self = this;\n    $.ajax(this.props.specimenPageDataURL, {\n      dataType: 'json',\n      success: function(data) {\n        self.setState({\n          Data: data,\n          isLoaded: true,\n        });\n      },\n      error: function(error, errorCode, errorMsg) {\n        console.error(error, errorCode, errorMsg);\n        self.setState({\n          error: 'An error occurred when loading the form!'\n        });\n      }\n    });\n  }\n\n  toggleEditCollection() {\n    let editCollection = this.state.editCollection;\n    this.setState({\n      editCollection: !editCollection\n    });\n  }\n\n  toggleAddPreparation() {\n    let addPreparation = this.state.addPreparation;\n    this.setState({\n      addPreparation: !addPreparation\n    });\n  }\n\n  toggleEditPreparation() {\n    let editPreparation = this.state.editPreparation;\n    this.setState({\n     editPreparation: !editPreparation\n    });\n  }\n\n  //map options for forms\n  mapFormOptions(rawObject, targetAttribute) {\n    var data = {};\n    for (var id in rawObject) {\n      data[id] = rawObject[id][targetAttribute];\n    }\n\n    return data;\n  }\n\n  render() {\n    // Data loading error\n    if (this.state.error !== undefined) {\n      return (\n        <div className=\"alert alert-danger text-center\">\n          <strong>\n            {this.state.error}\n          </strong>\n        </div>\n      );\n    }\n\n    // Waiting for data to load\n    if (!this.state.isLoaded) {\n      return (\n        <Loader/>\n      );\n    }\n\n\t//checks if parent specimen exists and returns static element with href\n\tif (this.state.Data.parentSpecimenBarcode) {\n\t  var specimenURL = loris.BaseURL+\"/biobank/specimen/?barcode=\";\n\t  var parentSpecimenBarcode = (\n        <div className='item'>\n          <a href={specimenURL+this.state.Data.parentSpecimenBarcode} className='field'>\n            <div className='value'>\n              {this.state.Data.parentSpecimenBarcode}\n            </div>\n            Parent Specimen\n          </a>\n        </div>\n\t  );\n\t} else {\n      var parentSpecimenBarcode = (\n        <div className='item'>\n          <div className='field'>\n            <div className='value'>\n              None\n            </div>\n            Parent Specimen\n          </div>\n        </div>\n      );\n    }\t\n\n\t//checks if parent container exists and returns static element with href\n\tif (this.state.Data.parentContainerBarcode) {\n\t  var containerURL = loris.BaseURL+\"/biobank/container/?barcode=\";\n      let containerBarcodesNonPrimary = this.mapFormOptions(this.state.Data.containersNonPrimary, 'barcode');\n\t  var parentContainerBarcode = (\n        <div className='item'>\n          <a href={containerURL+this.state.Data.parentContainerBarcode} className='field'>\n            <div className='value'>\n              {this.state.Data.parentContainerBarcode}\n            </div>\n            Parent Container\n          </a>\n          <div className='action'>\n            <Modal\n              title='Assign Location'\n              buttonContent={\n                <div>\n                  Move\n                  <span\n                    className='glyphicon glyphicon-chevron-right'\n                    style={{marginLeft: '5px'}}\n                  />  \n                </div>\n              }\n            >\n              <ContainerMoveForm\n                containerBarcodesNonPrimary={containerBarcodesNonPrimary}\n              />\n            </Modal>\n          </div>\n        </div>\n\t  );\n\t} else {\n      var parentContainerBarcode = (\n        <div className='item'>\n          <div className='field'>\n            <div className='value'>\n              None\n            </div>\n            Parent Container\n          </div>\n          <div className='action'>\n            <Modal\n              title='Assign Location'\n              buttonContent={\n                <div>\n                  Move\n                  <span\n                    className='glyphicon glyphicon-chevron-right'\n                    style={{marginLeft: '5px'}}\n                  />  \n                </div>\n              }\n            />\n          </div>\n        </div>\n      );\n    }\t\n\n    /**\n     * Specimen Form\n     */\n    let addAliquotButton;\n\n    if (loris.userHasPermission('biobank_write')) {\n      /**\n       * Map Options for Form Select Elements\n       */      \n      let specimenTypes = {};\n      //produces options conditionally based on the parentId of the specimen\n      for (let id in this.state.Data.specimenTypes) {\n        // if parentTypeId is equal to typeId\n        if ((this.state.Data.specimenTypes[id].parentTypeId == this.state.Data.specimen.typeId) || \n                                                    (id == this.state.Data.specimen.typeId)) {\n          specimenTypes[id] = this.state.Data.specimenTypes[id]['type'];\n        }\n      }\n\n      let specimenUnits = this.mapFormOptions(this.state.Data.specimenUnits, 'unit');\n      let containerTypesPrimary = this.mapFormOptions(this.state.Data.containerTypesPrimary, 'label');\n      let containerBarcodesNonPrimary = this.mapFormOptions(this.state.Data.containersNonPrimary, 'barcode');\n\n      let addAliquotButtonContent = (\n        <div className='specimen-button'>\n          <span\n            className='glyphicon glyphicon-plus'\n            style={{marginRight: '5px'}}\n          />  \n          Aliquot\n        </div>\n      );\n\n      addAliquotButton = (\n        <Modal\n          title='Create Specimen Aliquots'\n          buttonClass='btn btn-success'\n          buttonStyle={{display:'flex', alignItems:'center'}}\n          buttonContent={addAliquotButtonContent}\n        >\n          <BiobankSpecimenForm\n            action={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=submitSpecimen`}\n            child='true'\n            specimenId={this.state.Data.specimen.id}\n            barcode={this.state.Data.container.barcode}\n            candidateId={this.state.Data.specimen.candidateId}\n            sessionId={this.state.Data.specimen.sessionId} \n            pscid={this.state.Data.candidateInfo[this.state.Data.specimen.candidateId].PSCID}\n            visit={this.state.Data.sessionInfo[this.state.Data.specimen.sessionId].Visit_label}\n            unitId={this.state.Data.specimen.unitId}\n            specimenTypes={specimenTypes}\n            specimenTypeUnits={this.state.Data.specimenTypeUnits}\n            specimenUnits = {specimenUnits}\n            containerTypesPrimary={containerTypesPrimary}\n            containerBarcodesNonPrimary={containerBarcodesNonPrimary}\n            specimenTypeAttributes={this.state.Data.specimenTypeAttributes}\n            attributeDatatypes={this.state.Data.attributeDatatypes}\n          />\n        </Modal>\n      );\n\n    }\n   \n    /** \n     * Collection Form\n     */\n    let addPreparationButton;\n    if (!this.state.Data.specimen.preparation) {\n      addPreparationButton = (\n        <Modal\n          title='Assign Location'\n          buttonClass='btn btn-success'\n          buttonStyle={{display:'flex', alignItems:'center'}}\n          buttonContent={\n            <div>\n              <span\n                className='glyphicon glyphicon-plus'\n                style={{marginLeft: '5px'}}\n              />  \n              Add Preparation\n            </div>\n          }\n        />\n      );\n    }\n\n    let collectionPanel;\n    let collectionPanelForm;\n    let cancelEditCollectionButton;\n    if (this.state.editCollection) {\n\n      //Map Options for Form Select Elements\n      let specimenTypes = {};\n      //produces options conditionally based on the parentId of the specimen\n      for (var id in this.state.Data.specimenTypes) {\n        // if specimen type has a parent type\n        if (this.state.Data.specimenTypes[this.state.Data.specimen.typeId].parentTypeId) {\n          if (this.state.Data.specimenTypes[id].parentTypeId == this.state.Data.specimenTypes[this.state.Data.specimen.typeId].parentTypeId\n             || id == this.state.Data.specimen.typeId) {\n            specimenTypes[id] = this.state.Data.specimenTypes[id]['type'];\n          }\n        // else if specimen type has no parent type\n        } else {\n          if (!this.state.Data.specimenTypes[id].parentTypeId) {\n            specimenTypes[id] = this.state.Data.specimenTypes[id]['type'];\n          }\n        }\n      }\n\n      let containerTypesPrimary = this.mapFormOptions(this.state.Data.containerTypesPrimary, 'label');\n\n      collectionPanelForm = (\n        <SpecimenCollectionForm\n          specimenId={this.state.Data.specimen.id}\n          specimenType={this.state.Data.specimen.typeId}\n          containerId={this.state.Data.container.id}\n          containerType={this.state.Data.container.typeId}\n          collection={this.state.Data.specimen.collection}\n          specimenTypes={specimenTypes}\n          specimenTypeAttributes={this.state.Data.specimenTypeAttributes}\n          attributeDatatypes={this.state.Data.attributeDatatypes}\n          containerTypesPrimary={containerTypesPrimary}\n          specimenTypeUnits={this.state.Data.specimenTypeUnits}\n          edit={true}\n          action={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=updateSpecimenCollection`}\n          toggleEdit={this.toggleEditCollection}\n          updateCollection={this.updateCollection}\n        />\n      );\n\n      cancelEditCollectionButton = (\n        <a className=\"pull-right\" style={{cursor:'pointer'}} onClick={this.toggleEditCollection}>Cancel</a>\n      );\n    } else {\n\n      //loops through data object to produce static elements\n      if (this.state.Data.specimen.collection.data) {\n        var dataObject = this.state.Data.specimen.collection.data;\n        var specimenTypeAttributes = Object.keys(dataObject).map((key) => {\n          return (\n            <div>\n              {this.state.Data.specimenTypeAttributes[this.state.Data.specimen.typeId][key].name}\n              <div className='value'>\n                {dataObject[key]}\n              </div>\n            </div>\n          );\n        })\n      }\n\n      collectionPanelForm = (\n        <div\n          className='panel'\n        >\n          <div className='item'>\n            Container Type\n            <div className='value'>\n              {this.state.Data.containerTypesPrimary[this.state.Data.container.typeId].label}\n            </div>\n          </div>\n          <div className='item'>\n            Quantity\n            <div className='value'>\n              {this.state.Data.specimen.collection.quantity+' '+this.state.Data.specimenUnits[this.state.Data.specimen.collection.unitId].unit}\n            </div>\n          </div>\n          <div className='item'>\n            Location\n            <div className='value'>\n              {this.state.Data.sites[this.state.Data.specimen.collection.locationId]}\n            </div>\n\t      {specimenTypeAttributes}\n          </div>\n          <div className='item'>\n            Date\n            <div className='value'>\n              {this.state.Data.specimen.collection.date}\n            </div>\n          </div>\n          <div className='item'>\n            Time\n            <div className='value'>\n              {this.state.Data.specimen.collection.time}\n            </div>\n          </div>\n          <div className='item'>\n            Comments\n            <div className='value'>\n              {this.state.Data.specimen.collection.comments}\n            </div>\n          </div>\n        </div>\n      );\n\n      collectionPanel = (\n\t    <Panel\n\t      id=\"collection-panel\"\n\t      title=\"Collection\"\n          edit={this.state.editCollection ? null : this.toggleEditCollection}\n\t    >\n          {collectionPanelForm}\n          {cancelEditCollectionButton}\n\t    </Panel>\n      );\n    }\n\n    /*\n     * Preparation Form\n     */\n    let preparationPanel;\n    let preparationPanelForm;\n    let cancelAddPreparationButton;\n    let cancelEditPreparationButton;\n    if (this.state.addPreparation || this.state.editPreparation) {\n\n      //Map Options for Form Select Elements Here\n      let specimenProtocolAttributes = this.state.Data.specimenProtocolAttributes[this.state.Data.specimen.typeId];\n\n      //This remaps specimen Protocols based on the specimen Type\n      //this may need to be refactored or put into a function later\n      let specimenProtocols = {};\n      for (var id in specimenProtocolAttributes) {\n        specimenProtocols[id] = this.state.Data.specimenProtocols[id];\n      }\n\n      specimenProtocols = this.mapFormOptions(specimenProtocols, 'protocol');\n \n      preparationPanelForm = (\n        <SpecimenPreparationForm\n          specimenId={this.state.Data.specimen.id}\n          preparation={this.state.Data.specimen.preparation ? this.state.Data.specimen.preparation : null}\n          specimenProtocols={specimenProtocols}\n          specimenProtocolAttributes={specimenProtocolAttributes}\n          attributeDatatypes={this.state.Data.attributeDatatypes}\n          add={this.state.addPreparation}\n          edit={this.state.editPreparation}\n          insertAction={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=insertSpecimenPreparation`}\n          updateAction={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=updateSpecimenPreparation`}\n          updatePreparation={this.updatePreparation}\n        />\n      );\n\n      //Cancel Add Button\n      if (this.state.addPreparation) {\n        cancelAddPreparationButton = (\n          <a className=\"pull-right\" style={{cursor:'pointer'}} onClick={this.toggleAddPreparation}>Cancel</a>\n        );\n      }\n\n      //Cancel Edit Button\n      if (this.state.editPreparation) {\n        cancelEditPreparationButton = (\n          <a className=\"pull-right\" style={{cursor:'pointer'}} onClick={this.toggleEditPreparation}>Cancel</a>\n        );\n      }\n\n    } else if (this.state.Data.specimen.preparation) {\n      var dataObject = this.state.Data.specimen.preparation.data;\n      \n      if (dataObject) {\n        var specimenProtocolAttributes = Object.keys(dataObject).map((key) => {\n          return (\n            <div className='item'>\n              {this.state.Data.specimenProtocolAttributes[this.state.Data.specimen.typeId][this.state.Data.specimen.preparation.protocolId][key].name}\n              <div className='value'>\n                {dataObject[key]}\n              </div>\n            </div>\n          );\n        })\n      }\n\n      preparationPanelForm = (\n        <div className='panel'>\n          <div className='item'>\n            Protocol\n            <div className='value'>\n              {this.state.Data.specimenProtocols[this.state.Data.specimen.preparation.protocolId].protocol}\n            </div>\n          </div>\n          <div className='item'>\n            Location\n            <div className='value'>\n              {this.state.Data.sites[this.state.Data.specimen.preparation.locationId]}\n            </div>\n          </div>\n          {specimenProtocolAttributes}\n          <div className='item'>\n            Date\n            <div className='value'>\n              {this.state.Data.specimen.preparation.date}\n            </div>\n          </div>\n          <div className='item'>\n            Time\n            <div className='value'>\n              {this.state.Data.specimen.preparation.time}\n            </div>\n          </div>\n          <div className='item'>\n            Comments\n            <div className='value'>\n              {this.state.Data.specimen.preparation.comments}\n            </div>\n          </div>\n        </div>\n      );\n\n      preparationPanel = (\n\t    <Panel\n\t      id=\"preparation-panel\"\n\t      title=\"Preparation\"\n          initCollapsed={this.state.Data.specimen.preparation ? false : true}\n          add={this.state.Data.specimen.preparation ? \n                null : (this.state.addPreparation ? null : this.toggleAddPreparation)}\n          edit={this.state.Data.specimen.preparation ? \n                (this.state.editPreparation ? null : this.toggleEditPreparation) : null}\n\t    >\n        {preparationPanelForm}\n        {cancelAddPreparationButton}\n        {cancelEditPreparationButton}\n\t    </Panel>\n      );\n    }\n\n    let analysisPanel;\n    if (this.state.Data.specimen.analysis) {\n      analysisPanel = (\n\t    <Panel\n\t      id=\"analysis-panel\"\n\t      title=\"Analysis\"\n          initCollapsed={true}\n\t    >\n\t    </Panel>\n      );\n    }\n\n    let globals = (\n      <div className='globals'>\n        <div className='list'>\n          <div className='item'>\n            <div className='field'>\n              <div className='value'>\n                {this.state.Data.specimenTypes[this.state.Data.specimen.typeId].type}\n              </div>\n              Type\n            </div>\n          </div>\n          <div className=\"item\">\n            <div className='field'>\n              <div className='value'>\n                {this.state.Data.specimen.quantity}\n                {' '+this.state.Data.specimenUnits[this.state.Data.specimen.unitId].unit}\n              </div>\n              Quantity\n            </div>\n          </div>\n          <div className=\"item\">\n            <div className='field'>\n              <div className='value'>\n                {this.state.Data.containerStati[this.state.Data.container.statusId].status}\n              </div>\n              Status\n            </div>\n          </div>\n          <div className=\"item\">\n            <div className='field'>\n              <div className='value'>\n                {this.state.Data.sites[this.state.Data.container.locationId]}\n              </div>\n              Location\n            </div>\n            <div className='action'>\n              <Modal\n                title='Ship'\n                buttonContent={\n                  <div>\n                    Ship\n                    <span\n                      className='glyphicon glyphicon-chevron-right'\n                      style={{marginLeft: '5px'}}\n                    />  \n                  </div>\n                }\n              />\n            </div>\n          </div>\n          {parentSpecimenBarcode}\n          {parentContainerBarcode}\n          <a href={loris.BaseURL+'/'+this.state.Data.specimen.candidateId} className=\"item\">\n            <div className='field'>\n              <div className='value'>\n                {this.state.Data.candidateInfo[this.state.Data.specimen.candidateId].PSCID}\n              </div>\n              PSCID\n            </div>\n          </a>\n          <a href={loris.BaseURL+'/instrument_list/?candID='+this.state.Data.specimen.candidateId+'&sessionID='+this.state.Data.specimen.sessionId} className=\"item\">\n            <div className='field'>\n              <div className='value'>\n                {this.state.Data.sessionInfo[this.state.Data.specimen.sessionId].Visit_label}\n              </div>\n              Visit Label\n            </div>\n          </a>\n        </div>\n      </div>\n    );\n\n    return (\n      <div id='specimen-page'>\n        <div className=\"specimen-header\">\n          <div className='specimen-title'>\n            <div className='barcode'>\n              <div className='value'>\n                <strong>{this.state.Data.container.barcode}</strong>\n              </div>\n              Barcode\n            </div>\n            {addAliquotButton}\n          </div>\n          <LifeCycle\n            collection={this.state.Data.specimen.collection}\n            preparation={this.state.Data.specimen.preparation}\n            analysis={this.state.Data.specimen.analysis}\n            sites={this.state.Data.sites}\n          />\n          {addPreparationButton}\n        </div>\n        <div className='summary'>\n          {globals}\n          <div className=\"processing\">\n            {collectionPanel}\n            {preparationPanel}\n            {analysisPanel}\n          </div>\n        </div>\n      </div>\n    ); \n  }\n\n\n  updateCollection(collection) {\n    this.toggleEditCollection();\n \n    let Data = this.state.Data;\n\n    Data.specimen.typeId = collection.specimenType;\n    Data.specimen.collection.quantity = collection.quantity;\n    Data.specimen.collection.unitId = collection.unitId;\n    Data.specimen.collection.date = collection.date;\n    Data.specimen.collection.time = collection.time;\n    Data.specimen.collection.data = collection.data;\n    Data.specimen.collection.comments = collection.comments;\n\n    this.setState({\n      Data: Data\n    });\n  } \n\n  updatePreparation(preparation) {\n    if (this.state.editPreparation) {\n      this.toggleEditPreparation();\n    } \n\n    if (this.state.addPreparation) {\n      this.toggleAddPreparation();\n    }\n\n    let Data = this.state.Data;\n    Data.specimen.preparation = preparation;\n\n    this.setState({\n      Data: Data\n    });\n  } \n\n}\n\nBiobankSpecimen.propTypes = {\n  specimenPageDataURL: React.PropTypes.string.isRequired,\n};\n\nvar RBiobankSpecimen = React.createFactory(BiobankSpecimen);\n\nwindow.BiobankSpecimen = BiobankSpecimen;\nwindow.RBiobankSpecimen = RBiobankSpecimen;\n\nexport default BiobankSpecimen;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimen.js","\n/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenPreparationForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {data:{}},\n      currentProtocol: this.props.edit ? this.props.preparation.protocolId : null,\n      formErrors: {},\n    };\n\n    this.setFormData = this.setFormData.bind(this);\n    this.setSpecimenProtocolFieldFormData = this.setSpecimenProtocolFieldFormData.bind(this);\n    this.getSpecimenProtocolFields = this.getSpecimenProtocolFields.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.savePreparation = this.savePreparation.bind(this);\n  }\n\n  componentDidMount() {\n    let formData = this.state.formData;\n\n    formData['specimenId'] = this.props.specimenId;\n\n    // This for autoloading data and will be used later\n    if (this.props.edit) {\n      formData['protocolId'] = this.props.preparation.protocolId;\n      formData['date']       = this.props.preparation.date;\n      formData['time']       = this.props.preparation.time;\n      formData['comments']   = this.props.preparation.comments;\n\n      var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.state.currentProtocol];\n      if (specimenProtocolFieldsObject) {\n        var specimenProtocolFields = Object.keys(specimenProtocolFieldsObject).map((attribute) => {\n          formData.data[attribute] = this.props.preparation.data[attribute];\n        });\n      }\n    }\n    this.setState({\n      formData: formData\n    });\n  }\n\n  render() {\n\n    var submitButton;\n    if (this.props.add) {\n      submitButton = (\n        <ButtonElement label=\"Submit\"/>\n      );\n    }\n\n    var updateButton;\n    if (this.props.edit) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    }\n\n  let specimenProtocolFields;\n  if (this.state.currentProtocol) {\n    var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.state.currentProtocol];\n\n    if (specimenProtocolFieldsObject) {\n      specimenProtocolFields = this.getSpecimenProtocolFields(specimenProtocolFieldsObject);\n    }\n  }\n\n    //This will be for default fields, if there are any eventually\n    if (this.state.currentSpecimenProtocol) {\n      preparationFields = (\n        <div>\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"specimenPreparation\"\n        onSubmit={this.handleSave}\n        ref=\"form\"\n      >\n        <div>\n          <SelectElement\n            name=\"protocolId\"\n            label=\"Protocol\"\n            options={this.props.specimenProtocols}\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.protocolId}\n          />\n        {specimenProtocolFields}\n          <DateElement\n            name=\"date\"\n            label=\"Date\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.date}\n          />\n          <TimeElement\n            name=\"time\"\n            label=\"Time\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.time}\n          />\n          <TextareaElement\n            name=\"comments\"\n            label=\"Comments\"\n            onUserInput={this.setFormData}\n            value={this.state.formData.comments}\n          />\n        {submitButton} \n        {updateButton}\n        </div>\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n\n    let formData = this.state.formData;\n\n    if (formElement === \"protocolId\" && value !== \"\") {\n      //This is to eliminate the values for the specimen protocol fields\n      //This could potentially be improved later to retain the values\n      //for the fields that are common accross protocols\n      formData.data = {};\n      this.setState({\n        currentProtocol: value\n      });\n    }\n\n    formData[formElement] = value;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  setSpecimenProtocolFieldFormData(formElement, value) {\n    let formData = this.state.formData;\n    formData.data[formElement] = value;\n  \n    this.setState({\n        formData: formData\n    });\n  }\n\n  // This generates all the form fields for a given specimen protocol\n  getSpecimenProtocolFields(fieldsObject) {\n    var specimenProtocolFields = Object.keys(fieldsObject).map((attribute) => {\n      let datatype = this.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\n      if (datatype === \"text\" || datatype === \"number\") {\n        if (fieldsObject[attribute]['refTableId'] == null) {\n          return (\n            <TextboxElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              onUserInput={this.setSpecimenProtocolFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribute]['required']}\n              value={this.state.formData.data[attribute]}\n              hasError={this.state.formErrors[attribute]}\n              errorMessage={\"This is a \" + datatype + \" field.\"}\n            />\n          );\n        }\n\n        if (fieldsObject[attribute]['refTableId'] !== null) {\n          return (\n            <SelectElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              options=\"\"\n              onUserInput={this.setSpecimenProtocolFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribute]['required']}\n              value={this.state.formData.data[attribute]}\n            />\n          );\n        }\n      }\n\n      if (datatype === \"datetime\") {\n        return (\n          <DateElement\n            name={attribute}\n            label={fieldsObject[attribute]['name']}\n            onUserInput={this.setSpecimenProtocolFieldFormData}\n            ref={attribute}\n            required={fieldsObject[attribute]['required']}\n            value={this.state.formData.data[attribute]}\n          />\n        );\n      }\n\n      if (datatype === \"boolean\") {\n      \n      }\n    })\n\n    return specimenProtocolFields;\n  }\n\n  handleSave(e) {\n    //more things will go here later\n    if (this.props.add) {\n      this.savePreparation(this.props.insertAction)\n    }\n    if (this.props.edit) {\n      this.savePreparation(this.props.updateAction);\n    }\n  }\n\n  savePreparation(action) {\n    let formData = this.state.formData;\n    formData['data'] = JSON.stringify(formData['data']);\n\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        //Update Parent Specimen Page Here\n        formData.data = JSON.parse(formData.data);\n        this.props.updatePreparation(formData);\n        //swal(\"Specimen Update Successful!\", \"\", \"success\");\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n}\n\nSpecimenPreparationForm.propTypes = {\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n  units: React.PropTypes.object.isRequired,\n}\n\nexport default SpecimenPreparationForm;\n\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/preparationForm.js","/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass ContainerMoveForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      formErrors: {},\n      errorMessage: null\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.containerSubmit = this.containerSubmit.bind(this);\n  }\n\n  componentDidMount() {\n\n    //if this is a child specimen form then certain formData is set when component mounts\n    if (this.props.child) {\n      var formData = this.state.formData;\n      formData['parentSpecimen'] = this.props.specimenId;\n      formData['visitLabel'] = this.props.sessionId;\n\n      this.setState({\n        formData: formData\n      });\n    }\n  }\n\n  render() {\n    return (\n      <FormElement\n        onSubmit={this.handleSubmit}\n      >\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <SelectElement\n              name=\"container\"\n              label=\"Container\"\n              options={this.props.containerBarcodesNonPrimary}\n              onUserInput={this.setFormData}\n              required={true}\n              value={this.state.formData.container}\n            />\n          </div>\n        </div>\n          <div className=\"col-xs-3 col-xs-offset-9\">\n            <ButtonElement label=\"Submit\"/>\n          </div>\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n  /**\n   * Returns a valid name for the file to be specimened\n   *\n   * @param {string} visitLabel - Visit label selected from the dropdown\n   * @param {string} instrument - Instrument selected from the dropdown\n   * @return {string} - Generated valid filename for the current selection\n   */\n\n\n  validateForm(formElement, value) {\n    let formErrors = this.state.formErrors;\n\n    //validate that quantity is a number and less than capacity\n    if (formElement === \"quantity\" && value !== \"\") {\n      if (isNaN(value) || (value > this.props.capacities[this.state.currentContainerType])) {\n        formErrors.quantity = true;\n      } else {\n        formErrors.quantity = false;\n      }\n    }\n\n    //validate datatypes and regex of generated type attributes\n    var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n    var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n\n      let datatype = this.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"number\") {\n        if (formElement === attribute) {\n          if (isNaN(value) && value !== \"\") {\n            formErrors[attribute] = true;\n          } else {\n            formErrors[attribute] = false;\n          }\n        }\n      }\n    })\n\n    this.setState({\n      formErrors: formErrors\n    });\n\n  }\n\n\n  /**\n   * Handle form submission\n   * @param {object} e - Form submission event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    let formData = this.state.formData;\n    let formRefs = this.refs;\n    //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\n    // Validate the form\n    if (!this.isValidForm(formRefs, formData)) {\n      return;\n    }\n\n\n//    // Validate specimened file name\n//    let instrument = formData.instrument ? formData.instrument : null;\n//    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n//    if (!this.isValidFileName(requiredFileName, fileName)) {\n//      swal(\n//        \"Invalid Specimen name!\",\n//        \"File name should begin with: \" + requiredFileName,\n//        \"error\"\n//      );\n//      return;\n//    }\n\n    // Check for duplicate file names\n//    let isDuplicate = biobankFiles.indexOf(fileName);\n//    if (isDuplicate >= 0) {\n//      swal({\n//        title: \"Are you sure?\",\n//        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n//        type: \"warning\",\n//        showCancelButton: true,\n//        confirmButtonText: 'Yes, I am sure!',\n//        cancelButtonText: \"No, cancel it!\"\n//      }, function(isConfirm) {\n//        if (isConfirm) {\n//          this.specimenFile();\n//        } else {\n//          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n//        }\n//      }.bind(this));\n//    } else {\n\n    this.containerSubmit();\n//    }\n  }\n\n  /*\n   * Uploads the file to the server\n   */\n  containerSubmit() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        // Trigger an update event to update all observers (i.e DataTable)\n        // THIS CURRENTLY DOES NOT WORK\n        let event = new CustomEvent('update-datatable');\n        window.dispatchEvent(event);\n\n        this.props.closeModal();\n \n        //refreshes table \n        //may need refresh specimen data as well? probably..\n        this.props.refreshTable();\n        swal(\"Container Submission Successful!\", \"\", \"success\");\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Checks if the inputted file name is valid\n   *\n   * @param {string} requiredFileName - Required file name\n   * @param {string} fileName - Provided file name\n   * @return {boolean} - true if fileName starts with requiredFileName, false\n   *   otherwise\n   */\n//  isValidFileName(requiredFileName, fileName) {\n//    if (fileName === null || requiredFileName === null) {\n//      return false;\n//    }\n//\n//    return (fileName.indexOf(requiredFileName) === 0);\n//  }\n\n  /**\n   * Validate the form\n   *\n   * @param {object} formRefs - Object containing references to React form elements\n   * @param {object} formData - Object containing form data inputed by user\n   * @return {boolean} - true if all required fields are filled, false otherwise\n   */\n  isValidForm(formRefs, formData) {\n    var isValidForm = true;\n\n    var requiredFields = {\n      visitLabel: null,\n    };\n\n    Object.keys(requiredFields).map(function(field) {\n      if (formData[field]) {\n        requiredFields[field] = formData[field];\n      } else if (formRefs[field]) {\n        formRefs[field].props.hasError = true;\n        isValidForm = false;\n      }\n    });\n    this.forceUpdate();\n\n    return isValidForm;\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    //let visitLabel = this.state.formData.visitLabel;\n  \n    //LOOK AT THIS LATER - THE SWITCH TO PROPS MESSED THIS ALL UP \n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState({\n      formData: formData\n    });\n  }\n}\n\nContainerMoveForm.propTypes = {\n  DataURL: React.PropTypes.string,\n  action: React.PropTypes.string,\n  barcode: React.PropTypes.string,\n  refreshTable: React.PropTypes.func\n};\n\nexport default ContainerMoveForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerMoveForm.js"],"sourceRoot":""}