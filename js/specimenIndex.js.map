{"version":3,"sources":["webpack:///modules/biobank/js/specimenIndex.js","webpack:///webpack/bootstrap 5338f1054fa4955eacea?3a9f********","webpack:///./modules/biobank/jsx/specimenIndex.js","webpack:///./jsx/Panel.js?b4c8","webpack:///./modules/biobank/jsx/specimenForm.js?35c0","webpack:///./modules/biobank/jsx/barcodeForm.js?02a4","webpack:///./modules/biobank/jsx/collectionForm.js?e0f7","webpack:///./modules/biobank/jsx/containerParentForm.js?0f0c*","webpack:///./jsx/FormModal.js?4a02*","webpack:///./jsx/Modal.js?d3d7*","webpack:///./jsx/Loader.js?06c1*","webpack:///./modules/biobank/jsx/lifeCycle.js?5ad9","webpack:///./modules/biobank/jsx/specimen.js","webpack:///./modules/biobank/jsx/preparationForm.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_specimen","_specimen2","args","QueryString","get","document","currentScript","src","$","biobankSpecimen","React","createElement","className","specimenPageDataURL","loris","BaseURL","barcode","ReactDOM","render","getElementById","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","Panel","_React$Component","this","_this","getPrototypeOf","state","collapsed","initCollapsed","panelClass","toggleCollapsed","bind","setState","glyphClass","pencilGlyph","edit","style","marginRight","cursor","onClick","plusGlyph","add","removeGlyph","cancel","panelHeading","title","data-toggle","data-target","role","height","children","Component","propTypes","PropTypes","string","func","defaultProps","_barcodeForm","_barcodeForm2","BiobankSpecimenForm","formData","barcodeFormList","errorMessage","formErrors","countBarcodeForms","handleSubmit","validateForm","setFormData","specimenSubmit","addBarcodeForm","setBarcodeFormData","child","specimenId","candidateId","sessionId","unitId","_this2","barcodeForms","_loop","push","setParentFormData","specimenTypes","containerTypesPrimary","containersNonPrimary","specimenTypeAttributes","attributeDatatypes","capacities","containerDimensions","containerCoordinates","specimenTypeUnits","units","removeBarcodeForm","duplicateBarcodeForm","globalFields","remainingQuantityFields","StaticElement","label","text","pscid","visit","TextboxElement","name","onUserInput","required","quantity","SelectElement","options","specimenUnits","emptyOption","pSCIDs","ref","visits","visitLabel","disabled","FormElement","onSubmit","ButtonElement","formElement","_this3","test","isNaN","currentContainerType","specimenTypeFieldsObject","currentSpecimenType","keys","map","attribute","datatype","e","preventDefault","formRefs","refs","isValidForm","JSON","stringify","formObj","FormData","append","ajax","type","url","action","data","cache","contentType","processData","xhr","window","XMLHttpRequest","success","event","CustomEvent","dispatchEvent","refreshParent","swal","onSuccess","error","err","console","msg","responseJSON","message","requiredFields","field","hasError","forceUpdate","throwWarning","sessionData","barcodeFormData","barcodeId","index","splice","DataURL","isRequired","refreshTable","_collectionForm","_collectionForm2","BiobankBarcodeForm","setCollectionFormData","addBarcodeFormButton","duplicateBarcodeFormButton","removeBarcodeFormButton","removeButton","glyphStyle","color","maring","buttonStyle","appearance","outline","boxShadow","borderColor","backgroundColor","stati","collectionFormData","object","_defineProperty","_containerParentForm","_containerParentForm2","SpecimenCollectionForm","specimenType","containerType","setSpecimenTypeFieldFormData","setContainerParentFormData","getSpecimenTypeFields","handleUpdate","updateSpecimen","containerId","collection","date","time","comments","rawObject","targetAttribute","containerParentForm","updateButton","unit","specimenTypeFields","specimenFields","DateElement","minYear","maxYear","TimeElement","TextareaElement","showCancelButton","confirmButtonText","cancelButtonText","isConfirm","toggleEdit","containerParentFormData","fieldsObject","attribte","_$$ajax","parse","ContainerParentForm","mapFormOptions","container","parentContainerId","parentContainerField","coordinateField","containerBarcodesNonPrimary","dimensionId","dimensions","coordinatesTotal","dimension","coordinates","coordinate","_extends","assign","arguments","source","hasOwnProperty","_Modal","_Modal2","FormModal","show","openModal","closeModal","confirmClose","setWarning","Children","cloneElement","renderChildren","buttonClass","buttonContent","Modal","modal","backdropStyle","position","zIndex","top","bottom","left","right","padding","modalStyle","maxWidth","maxHeight","margin","borderRadius","overflowY","titleStyle","display","flexDirection","alignItems","background","borderTopRightRadius","fontSize","marginLeft","bodyStyle","button","stopPropagation","boolean","Loader","LifeCycle","tooltip","collectionNode","collectionTooltip","data-html","data-placement","sites","locationId","preparationNode","preparation","analysisNode","analysis","line","_preparationForm","_preparationForm2","_FormModal","_FormModal2","_Panel","_Loader","_Loader2","_specimenForm","_specimenForm2","_lifeCycle","_lifeCycle2","BiobankSpecimen","Data","isLoaded","loadedData","editCollection","editPreparation","fetchSpecimenData","toggleEditCollection","toggleEditPreparation","updateCollection","updatePreparation","dataType","errorCode","errorMsg","undefined","parentSpecimenBarcodeValue","parentSpecimenBarcode","specimenURL","href","parentContainerBarcodeValue","parentContainerBarcode","containerURL","addAliquotButton","userHasPermission","parentTypeId","specimen","typeId","addAliquotButtonContent","candidateInfo","PSCID","sessionInfo","Visit_label","collectionPanel","collectionPanelForm","cancelEditCollectionButton","dataObject","preparationPanel","preparationForm","specimenProtocolAttributes","cancelEditPreparationButton","specimenProtocols","insertAction","updateAction","protocolId","protocol","analysisPanel","globals","containerStati","statusId","status","RBiobankSpecimen","createFactory","SpecimenPreparationForm","currentProtocol","setSpecimenProtocolFieldFormData","getSpecimenProtocolFields","handleSave","savePreparation","specimenProtocolFieldsObject","submitButton","locationField","specimenProtocolFields","currentSpecimenProtocol","preparationFields"],"mappings":"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","file":"./modules/biobank/js/specimenIndex.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _specimen = __webpack_require__(18);\n\t\n\tvar _specimen2 = _interopRequireDefault(_specimen);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar args = QueryString.get(document.currentScript.src); /* global ReactDOM */\n\t\n\t$(function () {\n\t  var biobankSpecimen = React.createElement(\n\t    \"div\",\n\t    { className: \"page-specimen-form\" },\n\t    React.createElement(\n\t      \"div\",\n\t      { className: \"row\" },\n\t      React.createElement(\n\t        \"div\",\n\t        { className: \"col-md-9 col-lg-12\" },\n\t        React.createElement(_specimen2.default, {\n\t          specimenPageDataURL: loris.BaseURL + \"/biobank/ajax/SpecimenInfo.php?action=getSpecimenData&barcode=\" + args.barcode\n\t        })\n\t      )\n\t    )\n\t  );\n\t\n\t  ReactDOM.render(biobankSpecimen, document.getElementById(\"lorisworkspace\"));\n\t});\n\n/***/ },\n/* 1 */,\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Panel\n\t *\n\t * @author Alex I.\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Panel component\n\t * Wraps children in a collapsible bootstrap panel\n\t */\n\tvar Panel = function (_React$Component) {\n\t  _inherits(Panel, _React$Component);\n\t\n\t  function Panel(props) {\n\t    _classCallCheck(this, Panel);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).call(this, props));\n\t\n\t    _this.state = {\n\t      collapsed: _this.props.initCollapsed\n\t    };\n\t\n\t    // Initialize panel class based on collapsed status\n\t    _this.panelClass = _this.props.initCollapsed ? \"panel-collapse collapse\" : \"panel-collapse collapse in\";\n\t\n\t    _this.toggleCollapsed = _this.toggleCollapsed.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Panel, [{\n\t    key: \"toggleCollapsed\",\n\t    value: function toggleCollapsed() {\n\t      this.setState({ collapsed: !this.state.collapsed });\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      // Change arrow direction based on collapse status\n\t      var glyphClass = this.state.collapsed ? \"glyphicon pull-right glyphicon-chevron-down\" : \"glyphicon pull-right glyphicon-chevron-up\";\n\t\n\t      var pencilGlyph = void 0;\n\t      if (this.props.edit) {\n\t        pencilGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-pencil\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.edit\n\t        });\n\t      }\n\t\n\t      var plusGlyph = void 0;\n\t      if (this.props.add) {\n\t        plusGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-plus\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.add\n\t        });\n\t      }\n\t\n\t      var removeGlyph = void 0;\n\t      if (this.props.cancel) {\n\t        removeGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-remove\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.cancel\n\t        });\n\t      }\n\t\n\t      // Add panel header, if title is set\n\t      var panelHeading = this.props.title ? React.createElement(\n\t        \"div\",\n\t        {\n\t          className: \"panel-heading\"\n\t        },\n\t        React.createElement(\"span\", {\n\t          className: glyphClass,\n\t          onClick: this.toggleCollapsed,\n\t          \"data-toggle\": \"collapse\",\n\t          \"data-target\": '#' + this.props.id,\n\t          style: { cursor: 'pointer' }\n\t        }),\n\t        pencilGlyph,\n\t        plusGlyph,\n\t        removeGlyph,\n\t        this.props.title\n\t      ) : '';\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"panel panel-primary\" },\n\t        panelHeading,\n\t        React.createElement(\n\t          \"div\",\n\t          { id: this.props.id, className: this.panelClass, role: \"tabpanel\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"panel-body\", style: { height: this.props.height } },\n\t            this.props.children\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Panel;\n\t}(React.Component);\n\t\n\tPanel.propTypes = {\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  edit: React.PropTypes.func,\n\t  add: React.PropTypes.func\n\t};\n\tPanel.defaultProps = {\n\t  initCollapsed: false,\n\t  id: 'default-panel',\n\t  height: '100%'\n\t};\n\t\n\texports.default = Panel;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _barcodeForm = __webpack_require__(4);\n\t\n\tvar _barcodeForm2 = _interopRequireDefault(_barcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankSpecimenForm = function (_React$Component) {\n\t  _inherits(BiobankSpecimenForm, _React$Component);\n\t\n\t  function BiobankSpecimenForm(props) {\n\t    _classCallCheck(this, BiobankSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimenForm.__proto__ || Object.getPrototypeOf(BiobankSpecimenForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      barcodeFormList: {},\n\t      errorMessage: null,\n\t      formErrors: {},\n\t      countBarcodeForms: [1]\n\t    };\n\t\n\t    //this.getValidFileName = this.getValidFileName.bind(this);\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    //this.isValidFileName = this.isValidFileName.bind(this);\n\t    _this.validateForm = _this.validateForm.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.specimenSubmit = _this.specimenSubmit.bind(_this);\n\t    _this.addBarcodeForm = _this.addBarcodeForm.bind(_this);\n\t    _this.setBarcodeFormData = _this.setBarcodeFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimenForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t\n\t      //if this is a child specimen form then certain formData is set when component mounts\n\t      if (this.props.child) {\n\t        var formData = this.state.formData;\n\t        formData['parentSpecimen'] = this.props.specimenId;\n\t        formData['pscid'] = this.props.candidateId;\n\t        formData['visitLabel'] = this.props.sessionId;\n\t        formData['unitId'] = this.props.unitId;\n\t\n\t        this.setState({\n\t          formData: formData\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n\t      var barcodeForms = [];\n\t\n\t      var _loop = function _loop(i) {\n\t        barcodeForms.push(React.createElement(_barcodeForm2.default, {\n\t          setParentFormData: _this2.setBarcodeFormData,\n\t          id: _this2.state.countBarcodeForms[i],\n\t          specimenTypes: _this2.props.specimenTypes,\n\t          containerTypesPrimary: _this2.props.containerTypesPrimary,\n\t          containersNonPrimary: _this2.props.containersNonPrimary,\n\t          specimenTypeAttributes: _this2.props.specimenTypeAttributes,\n\t          attributeDatatypes: _this2.props.attributeDatatypes,\n\t          capacities: _this2.props.capacities,\n\t          containerDimensions: _this2.props.containerDimensions,\n\t          containerCoordinates: _this2.props.containerCoordinates,\n\t          specimenTypeUnits: _this2.props.specimenTypeUnits,\n\t          units: _this2.props.units,\n\t          removeBarcodeForm: i + 1 !== 1 ? function () {\n\t            return _this2.removeBarcodeForm(i);\n\t          } : null,\n\t          addBarcodeForm: i + 1 === _this2.state.countBarcodeForms.length ? _this2.addBarcodeForm : null,\n\t          duplicateBarcodeForm: i + 1 === _this2.state.countBarcodeForms.length ? _this2.duplicateBarcodeForm : null\n\t        }));\n\t      };\n\t\n\t      for (var i = 0; i < this.state.countBarcodeForms.length; i++) {\n\t        _loop(i);\n\t      }\n\t\n\t      var globalFields = void 0;\n\t      var remainingQuantityFields = void 0;\n\t      if (this.props.child) {\n\t        globalFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(StaticElement, {\n\t            label: 'Parent Specimen',\n\t            text: this.props.barcode\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'PSCID',\n\t            text: this.props.pscid\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Visit Label',\n\t            text: this.props.visit\n\t          })\n\t        );\n\t\n\t        //It may be wise to make unit static and forced, or atleast prepopulated --\n\t        remainingQuantityFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Remaining Quantity',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: this.props.specimenUnits,\n\t            onUserInput: this.setFormData,\n\t            emptyOption: false,\n\t            required: true,\n\t            value: this.state.formData.unitId\n\t          })\n\t        );\n\t      } else {\n\t        globalFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'pscid',\n\t            label: 'PSCID',\n\t            options: this.props.pSCIDs,\n\t            onUserInput: this.setFormData,\n\t            ref: 'pscid',\n\t            required: true,\n\t            value: this.state.formData.pscid\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'visitLabel',\n\t            label: 'Visit Label',\n\t            options: this.state.visits,\n\t            onUserInput: this.setFormData,\n\t            ref: 'visitLabel',\n\t            required: true,\n\t            value: this.state.formData.visitLabel,\n\t            disabled: this.state.formData.pscid ? false : true\n\t          })\n\t        );\n\t      }\n\t\n\t      //ALLOW THEM TO CANCEL THE FORM AND DELETE BARCODE FORMS\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenForm',\n\t          id: 'specimenForm',\n\t          onSubmit: this.handleSubmit,\n\t          ref: 'form'\n\t        },\n\t        React.createElement('br', null),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            globalFields\n\t          )\n\t        ),\n\t        barcodeForms,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            remainingQuantityFields\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-xs-3 col-xs-offset-9' },\n\t          React.createElement(ButtonElement, { label: 'Submit' })\n\t        )\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t    /**\n\t     * Returns a valid name for the file to be specimened\n\t     *\n\t     * @param {string} pscid - PSCID selected from the dropdown\n\t     * @param {string} visitLabel - Visit label selected from the dropdown\n\t     * @param {string} instrument - Instrument selected from the dropdown\n\t     * @return {string} - Generated valid filename for the current selection\n\t     */\n\t    //  getValidFileName(pscid, visitLabel, instrument) {\n\t    //    var fileName = pscid + \"_\" + visitLabel;\n\t    //    if (instrument) fileName += \"_\" + instrument;\n\t    //\n\t    //    return fileName;\n\t    //  }\n\t\n\t\n\t  }, {\n\t    key: 'validateForm',\n\t    value: function validateForm(formElement, value) {\n\t      var _this3 = this;\n\t\n\t      var formErrors = this.state.formErrors;\n\t\n\t      //validate barcode regex\n\t      if (formElement === \"barcode\" && value !== \"\") {\n\t        if (!/^hello/.test(this.state.formData.barcode)) {\n\t          formErrors.barcode = true;\n\t        } else {\n\t          formErrors.barcode = false;\n\t        }\n\t      }\n\t\n\t      //validate that quantity is a number and less than capacity\n\t      if (formElement === \"quantity\" && value !== \"\") {\n\t        if (isNaN(value) || value > this.props.capacities[this.state.currentContainerType]) {\n\t          formErrors.quantity = true;\n\t        } else {\n\t          formErrors.quantity = false;\n\t        }\n\t      }\n\t\n\t      //validate datatypes and regex of generated type attributes\n\t      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t      var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t\n\t        var datatype = _this3.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"number\") {\n\t          if (formElement === attribute) {\n\t            if (isNaN(value) && value !== \"\") {\n\t              formErrors[attribute] = true;\n\t            } else {\n\t              formErrors[attribute] = false;\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      this.setState({\n\t        formErrors: formErrors\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Handle form submission\n\t     * @param {object} e - Form submission event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      var formRefs = this.refs;\n\t      //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\t\n\t      // Validate the form\n\t      if (!this.isValidForm(formRefs, formData)) {\n\t        return;\n\t      }\n\t\n\t      //    // Validate specimened file name\n\t      //    let instrument = formData.instrument ? formData.instrument : null;\n\t      //    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n\t      //    let requiredFileName = this.getValidFileName(\n\t      //      formData.pscid, formData.visitLabel, instrument\n\t      //    );\n\t      //    if (!this.isValidFileName(requiredFileName, fileName)) {\n\t      //      swal(\n\t      //        \"Invalid Specimen name!\",\n\t      //        \"File name should begin with: \" + requiredFileName,\n\t      //        \"error\"\n\t      //      );\n\t      //      return;\n\t      //    }\n\t\n\t      // Check for duplicate file names\n\t      //    let isDuplicate = biobankFiles.indexOf(fileName);\n\t      //    if (isDuplicate >= 0) {\n\t      //      swal({\n\t      //        title: \"Are you sure?\",\n\t      //        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n\t      //        type: \"warning\",\n\t      //        showCancelButton: true,\n\t      //        confirmButtonText: 'Yes, I am sure!',\n\t      //        cancelButtonText: \"No, cancel it!\"\n\t      //      }, function(isConfirm) {\n\t      //        if (isConfirm) {\n\t      //          this.specimenFile();\n\t      //        } else {\n\t      //          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n\t      //        }\n\t      //      }.bind(this));\n\t      //    } else {\n\t\n\t      this.specimenSubmit();\n\t      //    }\n\t    }\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'specimenSubmit',\n\t    value: function specimenSubmit() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          // Trigger an update event to update all observers (i.e DataTable)\n\t          // THIS CURRENTLY DOES NOT WORK - LOOK INTO IT\n\t          var event = new CustomEvent('update-datatable');\n\t          window.dispatchEvent(event);\n\t\n\t          this.props.refreshParent();\n\t          swal(\"Specimen Submission Successful!\", \"\", \"success\");\n\t          this.props.onSuccess();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Checks if the inputted file name is valid\n\t     *\n\t     * @param {string} requiredFileName - Required file name\n\t     * @param {string} fileName - Provided file name\n\t     * @return {boolean} - true if fileName starts with requiredFileName, false\n\t     *   otherwise\n\t     */\n\t    //  isValidFileName(requiredFileName, fileName) {\n\t    //    if (fileName === null || requiredFileName === null) {\n\t    //      return false;\n\t    //    }\n\t    //\n\t    //    return (fileName.indexOf(requiredFileName) === 0);\n\t    //  }\n\t\n\t    /**\n\t     * Validate the form\n\t     *\n\t     * @param {object} formRefs - Object containing references to React form elements\n\t     * @param {object} formData - Object containing form data inputed by user\n\t     * @return {boolean} - true if all required fields are filled, false otherwise\n\t     */\n\t\n\t  }, {\n\t    key: 'isValidForm',\n\t    value: function isValidForm(formRefs, formData) {\n\t      var isValidForm = true;\n\t\n\t      var requiredFields = {\n\t        pscid: null,\n\t        visitLabel: null\n\t      };\n\t\n\t      Object.keys(requiredFields).map(function (field) {\n\t        if (formData[field]) {\n\t          requiredFields[field] = formData[field];\n\t        } else if (formRefs[field]) {\n\t          formRefs[field].props.hasError = true;\n\t          isValidForm = false;\n\t        }\n\t      });\n\t      this.forceUpdate();\n\t\n\t      return isValidForm;\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      // This lets the modal window know that there is formData\n\t      // and will cause a warning to be thrown of the modal window\n\t      // is exited/\n\t      this.props.throwWarning();\n\t\n\t      if (formElement === \"pscid\" && value !== \"\") {\n\t        this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n\t      }\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setBarcodeFormData',\n\t    value: function setBarcodeFormData(barcodeFormData, barcodeId) {\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      barcodeFormList[barcodeId] = barcodeFormData;\n\t      formData['barcodeFormList'] = barcodeFormList;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'addBarcodeForm',\n\t    value: function addBarcodeForm() {\n\t      var countBarcodeForms = this.state.countBarcodeForms;\n\t      countBarcodeForms.push(countBarcodeForms[countBarcodeForms.length - 1] + 1);\n\t      this.setState({\n\t        countBarcodeForms: countBarcodeForms\n\t      });\n\t    }\n\t  }, {\n\t    key: 'duplicateBarcodeForm',\n\t    value: function duplicateBarcodeForm() {}\n\t  }, {\n\t    key: 'removeBarcodeForm',\n\t    value: function removeBarcodeForm(index) {\n\t      var countBarcodeForms = this.state.countBarcodeForms;\n\t      countBarcodeForms.splice(index, 1);\n\t      this.setState({\n\t        countBarcodeForms: countBarcodeForms\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimenForm;\n\t}(React.Component);\n\t\n\tBiobankSpecimenForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired,\n\t  barcode: React.PropTypes.string,\n\t  refreshTable: React.PropTypes.func\n\t};\n\t\n\texports.default = BiobankSpecimenForm;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _collectionForm = __webpack_require__(5);\n\t\n\tvar _collectionForm2 = _interopRequireDefault(_collectionForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Barcode Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar BiobankBarcodeForm = function (_React$Component) {\n\t  _inherits(BiobankBarcodeForm, _React$Component);\n\t\n\t  function BiobankBarcodeForm(props) {\n\t    _classCallCheck(this, BiobankBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankBarcodeForm.__proto__ || Object.getPrototypeOf(BiobankBarcodeForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      formErrors: {}\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setCollectionFormData = _this.setCollectionFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankBarcodeForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      if (this.props.duplicateBarcodeForm) {}\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      var addBarcodeFormButton = void 0;\n\t      var duplicateBarcodeFormButton = void 0;\n\t      if (this.props.addBarcodeForm) {\n\t        addBarcodeFormButton = React.createElement(\n\t          'button',\n\t          {\n\t            type: 'button',\n\t            className: 'btn btn-success btn-sm',\n\t            onClick: this.props.addBarcodeForm\n\t          },\n\t          React.createElement('span', { className: 'glyphicon glyphicon-plus', style: { marginRight: 5 } }),\n\t          'New'\n\t        );\n\t      }\n\t\n\t      if (this.props.duplicateBarcodeForm) {\n\t        duplicateBarcodeFormButton = React.createElement(\n\t          'button',\n\t          {\n\t            type: 'button',\n\t            className: 'btn btn-success btn-sm',\n\t            onClick: this.props.duplicateBarcodeForm\n\t          },\n\t          React.createElement('span', { className: 'glyphicon glyphicon-plus', style: { marginRight: 5 } }),\n\t          'Duplicate'\n\t        );\n\t      }\n\t\n\t      var removeBarcodeFormButton = void 0;\n\t      if (this.props.removeButton) {\n\t        var glyphStyle = {\n\t          color: '#DDDDDD',\n\t          maring: 'auto'\n\t        };\n\t\n\t        var buttonStyle = {\n\t          appearance: 'non',\n\t          outline: 'non',\n\t          boxShadow: 'none',\n\t          borderColor: 'transparent',\n\t          backgroundColor: 'transparent'\n\t        };\n\t\n\t        removeBarcodeFormButton = React.createElement(\n\t          'button',\n\t          {\n\t            type: 'button',\n\t            className: 'btn btn-primary-outline btn-sm',\n\t            style: buttonStyle,\n\t            onClick: this.props.removeBarcodeForm\n\t          },\n\t          React.createElement('span', { className: 'glyphicon glyphicon-remove', style: glyphStyle })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankBarcode'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                'data-toggle': 'collapse',\n\t                'data-target': \"#\" + this.props.id\n\t              },\n\t              React.createElement(TextboxElement, {\n\t                name: \"barcode\",\n\t                label: \"Barcode \" + this.props.id,\n\t                onUserInput: this.setFormData,\n\t                ref: \"barcode\",\n\t                required: true,\n\t                value: this.state.formData[\"barcode\"],\n\t                hasError: this.state.formErrors[\"barcode\"],\n\t                errorMessage: 'Incorrect Barcode format for this Specimen and Container Type'\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-1' },\n\t            removeBarcodeFormButton\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement('div', { className: 'col-xs-2' }),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-9' },\n\t            React.createElement(\n\t              'div',\n\t              { id: this.props.id, className: 'collapse' },\n\t              React.createElement(_collectionForm2.default, {\n\t                setParentFormData: this.setCollectionFormData,\n\t                specimenTypes: this.props.specimenTypes,\n\t                specimenTypeAttributes: this.props.specimenTypeAttributes,\n\t                attributeDatatypes: this.props.attributeDatatypes,\n\t                containerTypesPrimary: this.props.containerTypesPrimary,\n\t                containersNonPrimary: this.props.containersNonPrimary,\n\t                containerDimensions: this.props.containerDimensions,\n\t                containerCoordinates: this.props.containerCoordinates,\n\t                specimenTypeUnits: this.props.specimenTypeUnits,\n\t                stati: this.props.stati\n\t              })\n\t            )\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement('div', { className: 'col-xs-3' }),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-1' },\n\t              addBarcodeFormButton\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-1' },\n\t              duplicateBarcodeFormButton\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setCollectionFormData',\n\t    value: function setCollectionFormData(collectionFormData) {\n\t      var formData = this.state.formData;\n\t\n\t      for (var field in collectionFormData) {\n\t        formData[field] = collectionFormData[field];\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      this.props.setParentFormData(this.state.formData, this.props.id);\n\t    }\n\t  }]);\n\t\n\t  return BiobankBarcodeForm;\n\t}(React.Component);\n\t\n\tBiobankBarcodeForm.propTypes = {\n\t\n\t  id: React.PropTypes.string,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = BiobankBarcodeForm;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _containerParentForm = __webpack_require__(6);\n\t\n\tvar _containerParentForm2 = _interopRequireDefault(_containerParentForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenCollectionForm = function (_React$Component) {\n\t  _inherits(SpecimenCollectionForm, _React$Component);\n\t\n\t  function SpecimenCollectionForm(props) {\n\t    _classCallCheck(this, SpecimenCollectionForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenCollectionForm.__proto__ || Object.getPrototypeOf(SpecimenCollectionForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: { data: {} },\n\t      currentSpecimenType: _this.props.edit ? _this.props.specimenType : null,\n\t      currentContainerType: _this.props.edit ? _this.props.containerType : null,\n\t      formErrors: {}\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setSpecimenTypeFieldFormData = _this.setSpecimenTypeFieldFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    _this.setContainerParentFormData = _this.setContainerParentFormData.bind(_this);\n\t    _this.getSpecimenTypeFields = _this.getSpecimenTypeFields.bind(_this);\n\t    _this.handleUpdate = _this.handleUpdate.bind(_this);\n\t    _this.updateSpecimen = _this.updateSpecimen.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenCollectionForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var _this2 = this;\n\t\n\t      var formData = this.state.formData;\n\t      if (this.props.edit) {\n\t        formData['specimenId'] = this.props.specimenId;\n\t        formData['containerId'] = this.props.containerId;\n\t        formData['specimenType'] = this.props.specimenType;\n\t        formData['containerType'] = this.props.containerType;\n\t        formData['quantity'] = this.props.collection.quantity;\n\t        formData['unitId'] = this.props.collection.unitId;\n\t        formData['date'] = this.props.collection.date;\n\t        formData['time'] = this.props.collection.time;\n\t        formData['comments'] = this.props.collection.comments;\n\t\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t        if (specimenTypeFieldsObject) {\n\t          var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t            formData.data[attribute] = _this2.props.collection.data[attribute];\n\t          });\n\t        }\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(rawObject, targetAttribute) {\n\t      var data = {};\n\t      for (var id in rawObject) {\n\t        data[id] = rawObject[id][targetAttribute];\n\t      }\n\t\n\t      return data;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      // This entire parentContainerField and parentContainerCoordinateField section should go into its own\n\t      // re-usable component\n\t      var containerParentForm;\n\t      if (!this.props.edit) {\n\t        containerParentForm = React.createElement(_containerParentForm2.default, {\n\t          setParentFormData: this.setContainerParentFormData,\n\t          containersNonPrimary: this.props.containersNonPrimary,\n\t          containerDimensions: this.props.containerDimensions,\n\t          containerCoordinates: this.props.containerCoordinates\n\t        });\n\t      }\n\t\n\t      var updateButton;\n\t      if (this.props.edit) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      }\n\t\n\t      //This block of code should potentially be moved to setFormData();\n\t      //Consider Refactoring...\n\t      var specimenTypeUnits = {};\n\t      if (this.state.currentSpecimenType) {\n\t\n\t        //This modifies the selections for unit drop down based on the chosend specimen type \n\t        for (var id in this.props.specimenTypeUnits[this.state.currentSpecimenType]) {\n\t          specimenTypeUnits[id] = this.props.specimenTypeUnits[this.state.currentSpecimenType][id].unit;\n\t        }\n\t\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t        if (specimenTypeFieldsObject) {\n\t          var specimenTypeFields = this.getSpecimenTypeFields(specimenTypeFieldsObject);\n\t        }\n\t      }\n\t\n\t      var specimenFields;\n\t      if (this.state.currentSpecimenType) {\n\t        specimenFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'containerType',\n\t            label: 'Container Type',\n\t            options: this.props.containerTypesPrimary,\n\t            onUserInput: this.setFormData,\n\t            ref: 'containerType',\n\t            required: true,\n\t            value: this.state.formData.containerType\n\t          }),\n\t          containerParentForm,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Quantity',\n\t            onUserInput: this.setFormData,\n\t            ref: 'quantity',\n\t            required: true,\n\t            value: this.state.formData.quantity,\n\t            hasError: this.state.formErrors.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: specimenTypeUnits,\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.unitId\n\t          }),\n\t          specimenTypeFields,\n\t          React.createElement(DateElement, {\n\t            name: 'date',\n\t            label: 'Date',\n\t            minYear: '2000',\n\t            maxYear: '2018',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.date\n\t          }),\n\t          React.createElement(TimeElement, {\n\t            name: 'time',\n\t            label: 'Time',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.time\n\t          }),\n\t          React.createElement(TextareaElement, {\n\t            name: 'comments',\n\t            label: 'Comments',\n\t            onUserInput: this.setFormData,\n\t            ref: 'comments',\n\t            value: this.state.formData.comments\n\t          })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankSpecimen',\n\t          onSubmit: this.handleUpdate,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(SelectElement, {\n\t          name: 'specimenType',\n\t          label: 'Specimen Type',\n\t          options: this.props.specimenTypes,\n\t          onUserInput: this.setFormData,\n\t          ref: 'specimenType',\n\t          required: true,\n\t          value: this.state.formData.specimenType\n\t        }),\n\t        specimenFields,\n\t        updateButton\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      if (formElement === \"specimenType\" && value !== \"\") {\n\t        //This throws a warning if the specimen type is changed because of the cascading effects this \n\t        //would cause.\n\t        if (this.props.edit) {\n\t          swal({\n\t            title: \"Warning\",\n\t            text: \"Changing the specimen type will result in the loss of any preparation or anaylsis \" + \"data for this specimen. You will also need to manually change the specimen type of any \" + \"aliquots derived from this specimen. Proceed with caution.\",\n\t            type: \"warning\",\n\t            showCancelButton: true,\n\t            confirmButtonText: 'Cancel Change',\n\t            cancelButtonText: 'Proceed'\n\t          }, function (isConfirm) {\n\t            if (isConfirm) {\n\t              this.props.toggleEdit();\n\t            } else {}\n\t          }.bind(this));\n\t        }\n\t\n\t        //This is to eliminate the values for the specimen type fields\n\t        //This could potentially be improved later to retain the values\n\t        //for the fields that are common across specimen types\n\t        formData.data = {};\n\t        this.setState({\n\t          currentSpecimenType: value\n\t        });\n\t      }\n\t\n\t      if (formElement === \"containerType\" && value !== \"\") {\n\t        this.setState({\n\t          currentContainerType: value\n\t        });\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setSpecimenTypeFieldFormData',\n\t    value: function setSpecimenTypeFieldFormData(formElement, value) {\n\t      var formData = this.state.formData;\n\t      formData.data[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setContainerParentFormData',\n\t    value: function setContainerParentFormData(containerParentFormData) {\n\t      var formData = this.state.formData;\n\t\n\t      for (var field in containerParentFormData) {\n\t        formData[field] = containerParentFormData[field];\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      if (!this.props.edit) {\n\t        var formData = this.state.formData;\n\t        this.props.setParentFormData(formData);\n\t      }\n\t    }\n\t\n\t    // This generates all the form fields for a given specimen type\n\t\n\t  }, {\n\t    key: 'getSpecimenTypeFields',\n\t    value: function getSpecimenTypeFields(fieldsObject) {\n\t      var _this3 = this;\n\t\n\t      var specimenTypeFields = Object.keys(fieldsObject).map(function (attribute) {\n\t        var datatype = _this3.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"text\" || datatype === \"number\") {\n\t          if (fieldsObject[attribute]['refTableId'] == null) {\n\t            return React.createElement(TextboxElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this3.state.formData.data[attribute],\n\t              hasError: _this3.state.formErrors[attribute],\n\t              errorMessage: \"This is a \" + datatype + \" field.\"\n\t            });\n\t          }\n\t\n\t          // OPTIONS FOR SELECT ELEMENT WILL MOST LIKELY BE PASSED VIA AJAX CALL\n\t          // BUT IT CAN ALSO BE PRELOADED --\n\t          // ASK RIDA HOW THIS SHOULD BE DONE\n\t          if (fieldsObject[attribute]['refTableId'] !== null) {\n\t            return React.createElement(SelectElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              options: '',\n\t              onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribte]['required'],\n\t              value: _this3.state.formData.data[attribute]\n\t            });\n\t          }\n\t        }\n\t\n\t        if (datatype === \"datetime\") {\n\t          return React.createElement(DateElement, {\n\t            name: attribute,\n\t            label: fieldsObject[attribute]['name'],\n\t            onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t            ref: attribute,\n\t            required: fieldsObject[attribute]['required'],\n\t            value: _this3.state.formData.data[attribute]\n\t          });\n\t        }\n\t\n\t        if (datatype === \"boolean\") {}\n\t      });\n\t\n\t      return specimenTypeFields;\n\t    }\n\t  }, {\n\t    key: 'handleUpdate',\n\t    value: function handleUpdate(e) {\n\t      //more things will go here later\n\t      this.updateSpecimen();\n\t    }\n\t  }, {\n\t    key: 'updateSpecimen',\n\t    value: function updateSpecimen() {\n\t      var _$$ajax;\n\t\n\t      var formData = this.state.formData;\n\t      formData['data'] = JSON.stringify(formData['data']);\n\t\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax((_$$ajax = {\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false\n\t      }, _defineProperty(_$$ajax, 'processData', false), _defineProperty(_$$ajax, 'xhr', function () {\n\t        var xhr = new window.XMLHttpRequest();\n\t        return xhr;\n\t      }.bind(this)), _defineProperty(_$$ajax, 'success', function () {\n\t        //Update Parent Specimen Page Here\n\t        formData.data = JSON.parse(formData.data);\n\t        this.props.refreshParent();\n\t      }.bind(this)), _defineProperty(_$$ajax, 'error', function (err) {\n\t        console.error(err);\n\t        var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t        this.setState({\n\t          errorMessage: msg\n\t        });\n\t        swal(msg, \"\", \"error\");\n\t      }.bind(this)), _$$ajax));\n\t    }\n\t  }]);\n\t\n\t  return SpecimenCollectionForm;\n\t}(React.Component);\n\t\n\tSpecimenCollectionForm.propTypes = {\n\t  setParentFormData: React.PropTypes.func,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = SpecimenCollectionForm;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar ContainerParentForm = function (_React$Component) {\n\t  _inherits(ContainerParentForm, _React$Component);\n\t\n\t  function ContainerParentForm(props) {\n\t    _classCallCheck(this, ContainerParentForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ContainerParentForm.__proto__ || Object.getPrototypeOf(ContainerParentForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      formErrors: {},\n\t      errorMessage: null\n\t    };\n\t\n\t    _this.mapFormOptions = _this.mapFormOptions.bind(_this);\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ContainerParentForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      // This is where we will pass a parentContainerId if it already exists\n\t      // These are simply to provide 'Defaults' to the page. I am not sure that in\n\t      // if they are entirely necessary.\n\t      if (this.props.container) {\n\t        var formData = this.state.formData;\n\t        formData['container'] = JSON.stringify(this.props.container);\n\t        formData['parentContainerId'] = this.props.container.parentContainerId;\n\t\n\t        this.setState({\n\t          formData: formData\n\t        });\n\t      }\n\t    }\n\t\n\t    //map options for forms\n\t\n\t  }, {\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(rawObject, targetAttribute) {\n\t      var data = {};\n\t      for (var id in rawObject) {\n\t        data[id] = rawObject[id][targetAttribute];\n\t      }\n\t\n\t      return data;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      var parentContainerField;\n\t      var coordinateField;\n\t      var containerBarcodesNonPrimary = this.mapFormOptions(this.props.containersNonPrimary, 'barcode');\n\t\n\t      parentContainerField = React.createElement(SelectElement, {\n\t        name: 'parentContainerId',\n\t        label: 'Parent Container Barcode',\n\t        options: containerBarcodesNonPrimary,\n\t        onUserInput: this.setFormData,\n\t        ref: 'parentContainerId',\n\t        required: false,\n\t        value: this.state.formData.parentContainerId\n\t      });\n\t\n\t      // THIS IS VERY POORLY DONE AND NEEDS REFACTORING\n\t      if (this.state.formData.parentContainerId) {\n\t\n\t        var dimensionId = this.props.containersNonPrimary[this.state.formData.parentContainerId].dimensionId;\n\t\n\t        if (dimensionId) {\n\t          var dimensions = this.props.containerDimensions[dimensionId];\n\t\n\t          // Total coordinates is determined by the product of the dimensions\n\t          var coordinatesTotal = 1;\n\t          for (var dimension in dimensions) {\n\t            coordinatesTotal = coordinatesTotal * dimensions[dimension];\n\t          }\n\t\n\t          // Mapping of options for the SelectElement\n\t          var coordinates = {};\n\t          for (var i = 1; i <= coordinatesTotal; i++) {\n\t\n\t            // If the coordinate is already taken, skip it.\n\t            // this doubling of if statements seems unnecessary\n\t            if (this.props.containerCoordinates[this.state.formData.parentContainerId]) {\n\t              if (this.props.containerCoordinates[this.state.formData.parentContainerId][i]) {\n\t                continue;\n\t              }\n\t            }\n\t\n\t            coordinates[i] = i;\n\t          }\n\t\n\t          coordinateField = React.createElement(SelectElement, {\n\t            name: 'coordinate',\n\t            label: 'Coordinate',\n\t            options: coordinates,\n\t            onUserInput: this.setFormData,\n\t            ref: 'coordinate',\n\t            required: false,\n\t            value: this.state.formData.coordinate\n\t          });\n\t        }\n\t      }\n\t\n\t      var updateButton;\n\t      if (this.props.container) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          onSubmit: this.handleSubmit\n\t        },\n\t        parentContainerField,\n\t        coordinateField,\n\t        updateButton\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t    // Validation functions will go here later...\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t\n\t          this.props.refreshParent();\n\t          swal(\"Parent Container Update Successful!\", \"\", \"success\");\n\t          this.props.onSuccess();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      //let visitLabel = this.state.formData.visitLabel;\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      if (formElement === 'parentContainerId') {\n\t        formData['coordinate'] = \"\";\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      if (!this.props.container) {\n\t        var formData = this.state.formData;\n\t        this.props.setParentFormData(formData);\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return ContainerParentForm;\n\t}(React.Component);\n\t\n\tContainerParentForm.propTypes = {\n\t  DataURL: React.PropTypes.string,\n\t  action: React.PropTypes.string,\n\t  barcode: React.PropTypes.string,\n\t  refreshTable: React.PropTypes.func,\n\t  onSuccess: React.PropTypes.func\n\t};\n\t\n\texports.default = ContainerParentForm;\n\n/***/ },\n/* 7 */,\n/* 8 */,\n/* 9 */,\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Modal = __webpack_require__(11);\n\t\n\tvar _Modal2 = _interopRequireDefault(_Modal);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file contains React components for Modal component.\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Henri Rabalais\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.1.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/**\n\t * Modal Component.\n\t * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * =================================================\n\t *\n\t */\n\t\n\tvar FormModal = function (_React$Component) {\n\t  _inherits(FormModal, _React$Component);\n\t\n\t  function FormModal(props) {\n\t    _classCallCheck(this, FormModal);\n\t\n\t    var _this = _possibleConstructorReturn(this, (FormModal.__proto__ || Object.getPrototypeOf(FormModal)).call(this, props));\n\t\n\t    _this.state = { show: false, throwWarning: false };\n\t\n\t    _this.openModal = _this.openModal.bind(_this);\n\t    _this.closeModal = _this.closeModal.bind(_this);\n\t    _this.confirmClose = _this.confirmClose.bind(_this);\n\t    _this.setWarning = _this.setWarning.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(FormModal, [{\n\t    key: \"renderChildren\",\n\t    value: function renderChildren() {\n\t      var _this2 = this;\n\t\n\t      return React.Children.map(this.props.children, function (child) {\n\t        return React.cloneElement(child, { onSuccess: _this2.closeModal, throwWarning: _this2.setWarning });\n\t      });\n\t    }\n\t  }, {\n\t    key: \"openModal\",\n\t    value: function openModal() {\n\t      this.setState({\n\t        show: true\n\t      });\n\t    }\n\t  }, {\n\t    key: \"setWarning\",\n\t    value: function setWarning() {\n\t      this.setState({\n\t        throwWarning: true\n\t      });\n\t    }\n\t  }, {\n\t    key: \"confirmClose\",\n\t    value: function confirmClose() {\n\t      if (this.state.throwWarning) {\n\t        swal({\n\t          title: \"Are You Sure?\",\n\t          text: \"Leaving the form will result in the loss of any information entered.\",\n\t          type: \"warning\",\n\t          showCancelButton: true,\n\t          confirmButtonText: 'Proceed',\n\t          cancelButtonText: 'Cancel'\n\t        }, function () {\n\t          this.closeModal();\n\t        }.bind(this));\n\t      } else {\n\t        this.closeModal();\n\t      }\n\t    }\n\t  }, {\n\t    key: \"closeModal\",\n\t    value: function closeModal() {\n\t      this.setState({\n\t        show: false,\n\t        throwWarning: false\n\t      });\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      return React.createElement(\n\t        _Modal2.default,\n\t        _extends({\n\t          closeModal: this.confirmClose,\n\t          openModal: this.openModal,\n\t          show: this.state.show\n\t        }, this.props),\n\t        this.renderChildren()\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return FormModal;\n\t}(React.Component);\n\t\n\tFormModal.propTypes = {\n\t  title: React.PropTypes.string,\n\t  buttonClass: React.PropTypes.string,\n\t  buttonStyle: React.PropTypes.object,\n\t  buttonContent: React.PropTypes.object\n\t};\n\tFormModal.defaultProps = {\n\t  buttonClass: 'btn btn-primary'\n\t};\n\t\n\texports.default = FormModal;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Modal component.\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Modal Component.\n\t * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * =================================================\n\t *\n\t */\n\tvar Modal = function (_React$Component) {\n\t  _inherits(Modal, _React$Component);\n\t\n\t  function Modal(props) {\n\t    _classCallCheck(this, Modal);\n\t\n\t    return _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));\n\t  }\n\t\n\t  _createClass(Modal, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      // Black Background with Alpha Channel\n\t      var backdropStyle = {\n\t        position: 'fixed',\n\t        zIndex: 9998,\n\t        top: 0,\n\t        bottom: 0,\n\t        left: 0,\n\t        right: 0,\n\t        backgroundColor: 'rgba(0,0,0,0.3)',\n\t        padding: 50\n\t      };\n\t\n\t      // White Modal Window\n\t      var modalStyle = {\n\t        position: 'relative',\n\t        maxWidth: 1000,\n\t        maxHeight: '100%',\n\t        margin: '0 auto',\n\t        backgroundColor: '#fff',\n\t        borderRadius: 10,\n\t        overflowY: 'auto',\n\t        zIndex: 9999\n\t      };\n\t\n\t      var titleStyle = {\n\t        display: 'flex',\n\t        flexDirection: 'row',\n\t        alignItems: 'center',\n\t        background: '#093782',\n\t        height: '70px',\n\t        borderTopRightRadius: '10',\n\t        color: '#FFFFFF',\n\t        fontSize: 24,\n\t        padding: 20\n\t      };\n\t\n\t      var glyphStyle = {\n\t        marginLeft: 'auto',\n\t        cursor: 'pointer'\n\t      };\n\t\n\t      var bodyStyle = {\n\t        padding: 15\n\t      };\n\t\n\t      var button = React.createElement(\n\t        'button',\n\t        {\n\t          type: 'button',\n\t          className: this.props.buttonClass,\n\t          onClick: this.props.openModal,\n\t          style: this.props.buttonStyle\n\t        },\n\t        this.props.buttonContent\n\t      );\n\t\n\t      var modal;\n\t      if (this.props.show) {\n\t        modal = React.createElement(\n\t          'div',\n\t          { style: backdropStyle, onClick: this.props.closeModal },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              style: modalStyle,\n\t              onClick: function onClick(e) {\n\t                e.stopPropagation();\n\t              }\n\t            },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                style: titleStyle\n\t              },\n\t              this.props.title,\n\t              React.createElement('span', {\n\t                className: 'glyphicon glyphicon-remove',\n\t                style: glyphStyle,\n\t                onClick: this.props.closeModal\n\t              })\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                style: bodyStyle\n\t              },\n\t              this.props.children\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        button,\n\t        modal\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Modal;\n\t}(React.Component);\n\t\n\tModal.propTypes = {\n\t  title: React.PropTypes.string,\n\t  buttonClass: React.PropTypes.string,\n\t  buttonStyle: React.PropTypes.object,\n\t  buttonContent: React.PropTypes.object,\n\t  show: React.PropTypes.boolean,\n\t  closeModal: React.PropTypes.func,\n\t  openModal: React.PropTypes.func\n\t};\n\tModal.defaultProps = {\n\t  buttonClass: 'btn btn-primary'\n\t};\n\t\n\texports.default = Modal;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Loader\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Loader component\n\t */\n\tvar Loader = function (_React$Component) {\n\t  _inherits(Loader, _React$Component);\n\t\n\t  function Loader(props) {\n\t    _classCallCheck(this, Loader);\n\t\n\t    return _possibleConstructorReturn(this, (Loader.__proto__ || Object.getPrototypeOf(Loader)).call(this, props));\n\t  }\n\t\n\t  _createClass(Loader, [{\n\t    key: \"render\",\n\t    value: function render() {\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"loader-container\" },\n\t        React.createElement(\"div\", { className: \"loader\" })\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Loader;\n\t}(React.Component);\n\t\n\texports.default = Loader;\n\n/***/ },\n/* 13 */,\n/* 14 */,\n/* 15 */,\n/* 16 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * LifeCycle\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar LifeCycle = function (_React$Component) {\n\t  _inherits(LifeCycle, _React$Component);\n\t\n\t  function LifeCycle(props) {\n\t    _classCallCheck(this, LifeCycle);\n\t\n\t    var _this = _possibleConstructorReturn(this, (LifeCycle.__proto__ || Object.getPrototypeOf(LifeCycle)).call(this, props));\n\t\n\t    _this.state = {};\n\t\n\t    return _this;\n\t  }\n\t\n\t  _createClass(LifeCycle, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      $('[data-toggle=\"tooltip\"]').tooltip();\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      var collectionNode = void 0;\n\t      var collectionTooltip = void 0;\n\t      if (this.props.collection) {\n\t        collectionTooltip = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(\n\t            'h',\n\t            null,\n\t            'Collection'\n\t          ),\n\t          React.createElement(\n\t            'p',\n\t            null,\n\t            'Date:'\n\t          )\n\t        );\n\t\n\t        collectionNode = React.createElement(\n\t          'div',\n\t          {\n\t            className: 'lifecycle-node',\n\t            id: 'lifecycle-collection-node',\n\t            'data-html': 'true',\n\t            'data-toggle': 'tooltip',\n\t            'data-placement': 'auto',\n\t            title: '<h5>' + this.props.sites[this.props.collection.locationId] + '</h5>' + '<h5>' + this.props.collection.date + '</h5>'\n\t          },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'letter' },\n\t            'C'\n\t          )\n\t        );\n\t      }\n\t\n\t      var preparationNode = void 0;\n\t      if (this.props.preparation) {\n\t        preparationNode = React.createElement(\n\t          'div',\n\t          {\n\t            className: 'lifecycle-node',\n\t            'data-html': 'true',\n\t            'data-toggle': 'tooltip',\n\t            'data-placement': 'auto',\n\t            title: '<h5>' + this.props.sites[this.props.preparation.locationId] + '</h5>' + '<h5>' + this.props.preparation.date + '</h5>'\n\t          },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'letter' },\n\t            'P'\n\t          )\n\t        );\n\t      }\n\t\n\t      var analysisNode = void 0;\n\t      if (this.props.analysis) {\n\t        analysisNode = React.createElement(\n\t          'div',\n\t          { className: 'lifecycle-node-container' },\n\t          React.createElement('div', { className: 'lifecycle-node' }),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'lifecycle-text' },\n\t            'Analysis'\n\t          )\n\t        );\n\t      }\n\t\n\t      var line = void 0;\n\t      line = React.createElement('div', { className: 'lifecycle-line' });\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { className: 'lifecycle' },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'lifecycle-graphic' },\n\t          collectionNode,\n\t          preparationNode ? line : null,\n\t          preparationNode,\n\t          analysisNode\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return LifeCycle;\n\t}(React.Component);\n\t\n\tLifeCycle.propTypes = {};\n\t\n\texports.default = LifeCycle;\n\n/***/ },\n/* 17 */,\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _collectionForm = __webpack_require__(5);\n\t\n\tvar _collectionForm2 = _interopRequireDefault(_collectionForm);\n\t\n\tvar _preparationForm = __webpack_require__(19);\n\t\n\tvar _preparationForm2 = _interopRequireDefault(_preparationForm);\n\t\n\tvar _containerParentForm = __webpack_require__(6);\n\t\n\tvar _containerParentForm2 = _interopRequireDefault(_containerParentForm);\n\t\n\tvar _FormModal = __webpack_require__(10);\n\t\n\tvar _FormModal2 = _interopRequireDefault(_FormModal);\n\t\n\tvar _Panel = __webpack_require__(2);\n\t\n\tvar _Panel2 = _interopRequireDefault(_Panel);\n\t\n\tvar _Loader = __webpack_require__(12);\n\t\n\tvar _Loader2 = _interopRequireDefault(_Loader);\n\t\n\tvar _specimenForm = __webpack_require__(3);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tvar _lifeCycle = __webpack_require__(16);\n\t\n\tvar _lifeCycle2 = _interopRequireDefault(_lifeCycle);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* exported RBiobankSpecimen */\n\t\n\t/**\n\t * Biobank Specimen\n\t *\n\t * Fetches data corresponding to a given Specimen from Loris backend and\n\t * displays a page allowing viewing of meta information of the specimen\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankSpecimen = function (_React$Component) {\n\t  _inherits(BiobankSpecimen, _React$Component);\n\t\n\t  function BiobankSpecimen(props) {\n\t    _classCallCheck(this, BiobankSpecimen);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimen.__proto__ || Object.getPrototypeOf(BiobankSpecimen)).call(this, props));\n\t\n\t    _this.state = {\n\t      Data: {},\n\t      isLoaded: false,\n\t      loadedData: 0,\n\t      editCollection: false,\n\t      editPreparation: false\n\t    };\n\t\n\t    _this.fetchSpecimenData = _this.fetchSpecimenData.bind(_this);\n\t    _this.toggleEditCollection = _this.toggleEditCollection.bind(_this);\n\t    _this.toggleEditPreparation = _this.toggleEditPreparation.bind(_this);\n\t    _this.mapFormOptions = _this.mapFormOptions.bind(_this);\n\t    _this.updateCollection = _this.updateCollection.bind(_this);\n\t    _this.updatePreparation = _this.updatePreparation.bind(_this);\n\t    //this.redirectURL = this.redirectURL.bind(this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimen, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      this.fetchSpecimenData();\n\t    }\n\t  }, {\n\t    key: 'fetchSpecimenData',\n\t    value: function fetchSpecimenData() {\n\t      var self = this;\n\t      $.ajax(this.props.specimenPageDataURL, {\n\t        dataType: 'json',\n\t        success: function success(data) {\n\t          self.setState({\n\t            Data: data,\n\t            isLoaded: true\n\t          });\n\t        },\n\t        error: function error(_error, errorCode, errorMsg) {\n\t          console.error(_error, errorCode, errorMsg);\n\t          self.setState({\n\t            error: 'An error occurred when loading the form!'\n\t          });\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'toggleEditCollection',\n\t    value: function toggleEditCollection() {\n\t      var editCollection = this.state.editCollection;\n\t      this.setState({\n\t        editCollection: !editCollection\n\t      });\n\t    }\n\t  }, {\n\t    key: 'toggleEditPreparation',\n\t    value: function toggleEditPreparation() {\n\t      var editPreparation = this.state.editPreparation;\n\t      this.setState({\n\t        editPreparation: !editPreparation\n\t      });\n\t    }\n\t  }, {\n\t    key: 'updateCollection',\n\t    value: function updateCollection() {\n\t      this.fetchSpecimenData();\n\t      this.toggleEditCollection();\n\t    }\n\t  }, {\n\t    key: 'updatePreparation',\n\t    value: function updatePreparation() {\n\t      this.fetchSpecimenData();\n\t      this.toggleEditPreparation();\n\t    }\n\t\n\t    //map options for forms\n\t\n\t  }, {\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(rawObject, targetAttribute) {\n\t      var data = {};\n\t      for (var id in rawObject) {\n\t        data[id] = rawObject[id][targetAttribute];\n\t      }\n\t\n\t      return data;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      // Data loading error\n\t      if (this.state.error !== undefined) {\n\t        return React.createElement(\n\t          'div',\n\t          { className: 'alert alert-danger text-center' },\n\t          React.createElement(\n\t            'strong',\n\t            null,\n\t            this.state.error\n\t          )\n\t        );\n\t      }\n\t\n\t      // Waiting for data to load\n\t      if (!this.state.isLoaded) {\n\t        return React.createElement(_Loader2.default, null);\n\t      }\n\t\n\t      // Checks if parent specimen exists \n\t      // If exist: returns Barcode value with href\n\t      // If !exist: returns value 'None'\n\t      var parentSpecimenBarcodeValue = void 0;\n\t      if (this.state.Data.parentSpecimenBarcode) {\n\t        var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\";\n\t        parentSpecimenBarcodeValue = React.createElement(\n\t          'a',\n\t          { href: specimenURL + this.state.Data.parentSpecimenBarcode },\n\t          this.state.Data.parentSpecimenBarcode\n\t        );\n\t      }\n\t\n\t      var parentSpecimenBarcode = React.createElement(\n\t        'div',\n\t        { className: 'item' },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'field' },\n\t          'Parent Specimen',\n\t          React.createElement(\n\t            'div',\n\t            { className: 'value' },\n\t            parentSpecimenBarcodeValue ? parentSpecimenBarcodeValue : 'None'\n\t          )\n\t        )\n\t      );\n\t\n\t      // Checks if parent container exists and returns static element with href\n\t      var parentContainerBarcodeValue = void 0;\n\t      if (this.state.Data.parentContainerBarcode) {\n\t        var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\";\n\t        parentContainerBarcodeValue = React.createElement(\n\t          'a',\n\t          { href: containerURL + this.state.Data.parentContainerBarcode },\n\t          this.state.Data.parentContainerBarcode\n\t        );\n\t      }\n\t\n\t      var parentContainerBarcode = React.createElement(\n\t        'div',\n\t        { className: 'item' },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'field' },\n\t          'Parent Container',\n\t          React.createElement(\n\t            'div',\n\t            { className: 'value' },\n\t            parentContainerBarcodeValue ? parentContainerBarcodeValue : 'None'\n\t          ),\n\t          parentContainerBarcodeValue && this.state.Data.container.coordinate ? 'Coordinate ' + this.state.Data.container.coordinate : null\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            _FormModal2.default,\n\t            {\n\t              title: 'Update Parent Container',\n\t              buttonContent: React.createElement(\n\t                'div',\n\t                null,\n\t                'Move',\n\t                React.createElement('span', {\n\t                  className: 'glyphicon glyphicon-chevron-right',\n\t                  style: { marginLeft: '5px' }\n\t                })\n\t              )\n\t            },\n\t            React.createElement(_containerParentForm2.default, {\n\t              containersNonPrimary: this.state.Data.containersNonPrimary,\n\t              containerDimensions: this.state.Data.containerDimensions,\n\t              containerCoordinates: this.state.Data.containerCoordinates,\n\t              container: this.state.Data.container,\n\t              action: loris.BaseURL + '/biobank/ajax/ContainerInfo.php?action=updateContainerParent',\n\t              refreshParent: this.fetchSpecimenData\n\t            })\n\t          )\n\t        )\n\t      );\n\t\n\t      /**\n\t       * Specimen Form\n\t       */\n\t      var addAliquotButton = void 0;\n\t\n\t      if (loris.userHasPermission('biobank_write')) {\n\t        /**\n\t         * Map Options for Form Select Elements\n\t         */\n\t        var specimenTypes = {};\n\t        //produces options conditionally based on the parentId of the specimen\n\t        for (var _id in this.state.Data.specimenTypes) {\n\t          // if parentTypeId is equal to typeId\n\t          if (this.state.Data.specimenTypes[_id].parentTypeId == this.state.Data.specimen.typeId || _id == this.state.Data.specimen.typeId) {\n\t            specimenTypes[_id] = this.state.Data.specimenTypes[_id]['type'];\n\t          }\n\t        }\n\t\n\t        var specimenUnits = this.mapFormOptions(this.state.Data.specimenUnits, 'unit');\n\t        var containerTypesPrimary = this.mapFormOptions(this.state.Data.containerTypesPrimary, 'label');\n\t\n\t        var addAliquotButtonContent = React.createElement(\n\t          'div',\n\t          { className: 'specimen-button' },\n\t          React.createElement('span', {\n\t            className: 'glyphicon glyphicon-plus',\n\t            style: { marginRight: '5px' }\n\t          }),\n\t          'Aliquots'\n\t        );\n\t\n\t        addAliquotButton = React.createElement(\n\t          _FormModal2.default,\n\t          {\n\t            title: 'Create Specimen Aliquots',\n\t            buttonClass: 'btn btn-success',\n\t            buttonStyle: { display: 'flex', alignItems: 'center' },\n\t            buttonContent: addAliquotButtonContent\n\t          },\n\t          React.createElement(_specimenForm2.default, {\n\t            action: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=submitSpecimen',\n\t            child: 'true',\n\t            specimenId: this.state.Data.specimen.id,\n\t            barcode: this.state.Data.container.barcode,\n\t            candidateId: this.state.Data.specimen.candidateId,\n\t            sessionId: this.state.Data.specimen.sessionId,\n\t            pscid: this.state.Data.candidateInfo[this.state.Data.specimen.candidateId].PSCID,\n\t            visit: this.state.Data.sessionInfo[this.state.Data.specimen.sessionId].Visit_label,\n\t            unitId: this.state.Data.specimen.unitId,\n\t            specimenTypes: specimenTypes,\n\t            specimenTypeUnits: this.state.Data.specimenTypeUnits,\n\t            specimenUnits: specimenUnits,\n\t            containerTypesPrimary: containerTypesPrimary,\n\t            containersNonPrimary: this.state.Data.containersNonPrimary,\n\t            containerDimensions: this.state.Data.containerDimensions,\n\t            containerCoordinates: this.state.Data.containerCoordinates,\n\t            specimenTypeAttributes: this.state.Data.specimenTypeAttributes,\n\t            attributeDatatypes: this.state.Data.attributeDatatypes,\n\t            refreshParent: this.fetchSpecimenData\n\t          })\n\t        );\n\t      }\n\t\n\t      /** \n\t       * Collection Form\n\t       */\n\t\n\t      // Declare Variables\n\t      var collectionPanel = void 0;\n\t      var collectionPanelForm = void 0;\n\t      var cancelEditCollectionButton = void 0;\n\t\n\t      if (this.state.editCollection) {\n\t\n\t        //Map Options for Form Select Elements\n\t        var _specimenTypes = {};\n\t        //produces options conditionally based on the parentId of the specimen\n\t        for (var id in this.state.Data.specimenTypes) {\n\t          // if specimen type has a parent type\n\t          if (this.state.Data.specimenTypes[this.state.Data.specimen.typeId].parentTypeId) {\n\t            if (this.state.Data.specimenTypes[id].parentTypeId == this.state.Data.specimenTypes[this.state.Data.specimen.typeId].parentTypeId || id == this.state.Data.specimen.typeId) {\n\t              _specimenTypes[id] = this.state.Data.specimenTypes[id]['type'];\n\t            }\n\t            // else if specimen type has no parent type\n\t          } else {\n\t            if (!this.state.Data.specimenTypes[id].parentTypeId) {\n\t              _specimenTypes[id] = this.state.Data.specimenTypes[id]['type'];\n\t            }\n\t          }\n\t        }\n\t\n\t        var _containerTypesPrimary = this.mapFormOptions(this.state.Data.containerTypesPrimary, 'label');\n\t\n\t        collectionPanelForm = React.createElement(_collectionForm2.default, {\n\t          specimenId: this.state.Data.specimen.id,\n\t          specimenType: this.state.Data.specimen.typeId,\n\t          containerId: this.state.Data.container.id,\n\t          containerType: this.state.Data.container.typeId,\n\t          collection: this.state.Data.specimen.collection,\n\t          specimenTypes: _specimenTypes,\n\t          specimenTypeAttributes: this.state.Data.specimenTypeAttributes,\n\t          attributeDatatypes: this.state.Data.attributeDatatypes,\n\t          containerTypesPrimary: _containerTypesPrimary,\n\t          specimenTypeUnits: this.state.Data.specimenTypeUnits,\n\t          edit: true,\n\t          action: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=updateSpecimenCollection',\n\t          toggleEdit: this.toggleEditCollection,\n\t          refreshParent: this.updateCollection\n\t        });\n\t\n\t        cancelEditCollectionButton = React.createElement(\n\t          'a',\n\t          { className: 'pull-right', style: { cursor: 'pointer' }, onClick: this.toggleEditCollection },\n\t          'Cancel'\n\t        );\n\t      } else {\n\t\n\t        //loops through data object to produce static elements\n\t        if (this.state.Data.specimen.collection.data) {\n\t          var dataObject = this.state.Data.specimen.collection.data;\n\t          var specimenTypeAttributes = Object.keys(dataObject).map(function (key) {\n\t            return React.createElement(StaticElement, {\n\t              label: _this2.state.Data.specimenTypeAttributes[_this2.state.Data.specimen.typeId][key].name,\n\t              text: dataObject[key]\n\t            });\n\t          });\n\t        }\n\t\n\t        collectionPanelForm = React.createElement(\n\t          FormElement,\n\t          null,\n\t          React.createElement(StaticElement, {\n\t            label: 'Container Type',\n\t            text: this.state.Data.containerTypesPrimary[this.state.Data.container.typeId].label\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Quantity',\n\t            text: this.state.Data.specimen.collection.quantity + ' ' + this.state.Data.specimenUnits[this.state.Data.specimen.collection.unitId].unit\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Location',\n\t            text: this.state.Data.sites[this.state.Data.specimen.collection.locationId]\n\t          }),\n\t          specimenTypeAttributes,\n\t          React.createElement(StaticElement, {\n\t            label: 'Date',\n\t            text: this.state.Data.specimen.collection.date\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Time',\n\t            text: this.state.Data.specimen.collection.time\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Comments',\n\t            text: this.state.Data.specimen.collection.comments\n\t          })\n\t        );\n\t      }\n\t\n\t      collectionPanel = React.createElement(\n\t        'div',\n\t        { className: 'panel panel-default' },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'panel-heading' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'lifecycle-node', id: 'panel-collection-node' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'letter' },\n\t              'C'\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'title' },\n\t            'Collection'\n\t          ),\n\t          React.createElement('span', {\n\t            className: this.state.editCollection ? null : 'glyphicon glyphicon-pencil',\n\t            onClick: this.state.editCollection ? null : this.toggleEditCollection\n\t          })\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'panel-body' },\n\t          collectionPanelForm,\n\t          cancelEditCollectionButton\n\t        )\n\t      );\n\t\n\t      /*\n\t       * Preparation Form\n\t       */\n\t\n\t      // Preparation Panel variable declaration\n\t      var preparationPanel = void 0;\n\t      var preparationForm = void 0;\n\t      var specimenProtocolAttributes = void 0;\n\t      var cancelEditPreparationButton = void 0;\n\t\n\t      // If the form is an edit state\n\t      if (this.state.editPreparation) {\n\t        //Map Options for Form Select Elements Here\n\t        specimenProtocolAttributes = this.state.Data.specimenProtocolAttributes[this.state.Data.specimen.typeId];\n\t\n\t        //This remaps specimen Protocols based on the specimen Type\n\t        //this may need to be refactored or put into a function later\n\t        var specimenProtocols = {};\n\t        for (var id in specimenProtocolAttributes) {\n\t          specimenProtocols[id] = this.state.Data.specimenProtocols[id];\n\t        }\n\t\n\t        specimenProtocols = this.mapFormOptions(specimenProtocols, 'protocol');\n\t\n\t        preparationForm = React.createElement(_preparationForm2.default, {\n\t          specimenId: this.state.Data.specimen.id,\n\t          preparation: this.state.Data.specimen.preparation ? this.state.Data.specimen.preparation : null,\n\t          specimenProtocols: specimenProtocols,\n\t          sites: this.state.Data.sites,\n\t          specimenProtocolAttributes: specimenProtocolAttributes,\n\t          attributeDatatypes: this.state.Data.attributeDatatypes,\n\t          insertAction: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=insertSpecimenPreparation',\n\t          updateAction: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=updateSpecimenPreparation',\n\t          refreshParent: this.updatePreparation\n\t        });\n\t\n\t        cancelEditPreparationButton = React.createElement(\n\t          'a',\n\t          { className: 'pull-right', style: { cursor: 'pointer' }, onClick: this.toggleEditPreparation },\n\t          'Cancel'\n\t        );\n\t      }\n\t\n\t      // If Preparation Does Exist and the form is not in an edit state\n\t      if (this.state.Data.specimen.preparation && !this.state.editPreparation) {\n\t        var dataObject = this.state.Data.specimen.preparation.data;\n\t\n\t        if (dataObject) {\n\t          specimenProtocolAttributes = Object.keys(dataObject).map(function (key) {\n\t            return React.createElement(StaticElement, {\n\t              label: _this2.state.Data.specimenProtocolAttributes[_this2.state.Data.specimen.typeId][_this2.state.Data.specimen.preparation.protocolId][key].name,\n\t              text: dataObject[key]\n\t            });\n\t          });\n\t        }\n\t\n\t        preparationForm = React.createElement(\n\t          FormElement,\n\t          null,\n\t          React.createElement(StaticElement, {\n\t            label: 'Protocol',\n\t            text: this.state.Data.specimenProtocols[this.state.Data.specimen.preparation.protocolId].protocol\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Location',\n\t            text: this.state.Data.sites[this.state.Data.specimen.preparation.locationId]\n\t          }),\n\t          specimenProtocolAttributes,\n\t          React.createElement(StaticElement, {\n\t            label: 'Date',\n\t            text: this.state.Data.specimen.preparation.date\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Time',\n\t            text: this.state.Data.specimen.preparation.time\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Comments',\n\t            text: this.state.Data.specimen.preparation.comments\n\t          })\n\t        );\n\t      }\n\t\n\t      // If preparation does not exist and if the form is not in an edit state\n\t      // and a preparation protocol exists for this specimen type\n\t      if (this.state.Data.specimenProtocolAttributes[this.state.Data.specimen.typeId] && !this.state.Data.specimen.preparation && !this.state.editPreparation) {\n\t        preparationPanel = React.createElement(\n\t          'div',\n\t          {\n\t            className: 'panel inactive'\n\t          },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'add-process',\n\t              onClick: this.toggleEditPreparation\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-plus' })\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            null,\n\t            'ADD PREPARATION'\n\t          )\n\t        );\n\t      } else if (this.state.Data.specimen.preparation || this.state.editPreparation) {\n\t        preparationPanel = React.createElement(\n\t          'div',\n\t          { className: 'panel panel-default' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'panel-heading' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'lifecycle-node' },\n\t              React.createElement(\n\t                'div',\n\t                { className: 'letter' },\n\t                'P'\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'title' },\n\t              'Preparation'\n\t            ),\n\t            React.createElement('span', {\n\t              className: this.state.editPreparation ? null : 'glyphicon glyphicon-pencil',\n\t              onClick: this.state.editPreparation ? null : this.toggleEditPreparation\n\t            })\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'panel-body' },\n\t            preparationForm,\n\t            cancelEditPreparationButton\n\t          )\n\t        );\n\t      }\n\t\n\t      /**\n\t       * Analysis Form\n\t       */\n\t      var analysisPanel = void 0;\n\t      analysisPanel = React.createElement(\n\t        'div',\n\t        {\n\t          className: 'panel inactive'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          {\n\t            className: 'add-process'\n\t          },\n\t          React.createElement('span', { className: 'glyphicon glyphicon-plus' })\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          null,\n\t          'ADD ANALYSIS'\n\t        )\n\t      );\n\t\n\t      // This should eventually go into its own component \n\t      var globals = React.createElement(\n\t        'div',\n\t        { className: 'globals' },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'list' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'field' },\n\t              'Type',\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                this.state.Data.specimenTypes[this.state.Data.specimen.typeId].type\n\t              )\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'field' },\n\t              'Quantity',\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                this.state.Data.specimen.quantity,\n\t                ' ' + this.state.Data.specimenUnits[this.state.Data.specimen.unitId].unit\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'action' },\n\t              React.createElement(_FormModal2.default, {\n\t                title: 'Update',\n\t                buttonContent: React.createElement(\n\t                  'div',\n\t                  null,\n\t                  'Update',\n\t                  React.createElement('span', {\n\t                    className: 'glyphicon glyphicon-chevron-right',\n\t                    style: { marginLeft: '5px' }\n\t                  })\n\t                )\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'field' },\n\t              'Status',\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                this.state.Data.containerStati[this.state.Data.container.statusId].status\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'action' },\n\t              React.createElement(_FormModal2.default, {\n\t                title: 'Update',\n\t                buttonContent: React.createElement(\n\t                  'div',\n\t                  null,\n\t                  'Update',\n\t                  React.createElement('span', {\n\t                    className: 'glyphicon glyphicon-chevron-right',\n\t                    style: { marginLeft: '5px' }\n\t                  })\n\t                )\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'field' },\n\t              'Location',\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                this.state.Data.sites[this.state.Data.container.locationId]\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'action' },\n\t              React.createElement(_FormModal2.default, {\n\t                title: 'Ship',\n\t                buttonContent: React.createElement(\n\t                  'div',\n\t                  null,\n\t                  'Ship',\n\t                  React.createElement('span', {\n\t                    className: 'glyphicon glyphicon-chevron-right',\n\t                    style: { marginLeft: '5px' }\n\t                  })\n\t                )\n\t              })\n\t            )\n\t          ),\n\t          parentSpecimenBarcode,\n\t          parentContainerBarcode,\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'field' },\n\t              'PSCID',\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                React.createElement(\n\t                  'a',\n\t                  { href: loris.BaseURL + '/' + this.state.Data.specimen.candidateId },\n\t                  this.state.Data.candidateInfo[this.state.Data.specimen.candidateId].PSCID\n\t                )\n\t              )\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'field' },\n\t              'Visit Label',\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                React.createElement(\n\t                  'a',\n\t                  { href: loris.BaseURL + '/instrument_list/?candID=' + this.state.Data.specimen.candidateId + '&sessionID=' + this.state.Data.specimen.sessionId },\n\t                  this.state.Data.sessionInfo[this.state.Data.specimen.sessionId].Visit_label\n\t                )\n\t              )\n\t            )\n\t          )\n\t        )\n\t      );\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { id: 'specimen-page' },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'specimen-header' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'specimen-title' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'barcode' },\n\t              'Barcode',\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                React.createElement(\n\t                  'strong',\n\t                  null,\n\t                  this.state.Data.container.barcode\n\t                )\n\t              )\n\t            ),\n\t            addAliquotButton\n\t          ),\n\t          React.createElement(_lifeCycle2.default, {\n\t            collection: this.state.Data.specimen.collection,\n\t            preparation: this.state.Data.specimen.preparation,\n\t            analysis: this.state.Data.specimen.analysis,\n\t            sites: this.state.Data.sites\n\t          })\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'summary' },\n\t          globals,\n\t          React.createElement(\n\t            'div',\n\t            { className: 'processing' },\n\t            collectionPanel,\n\t            preparationPanel,\n\t            analysisPanel\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimen;\n\t}(React.Component);\n\t\n\tBiobankSpecimen.propTypes = {\n\t  specimenPageDataURL: React.PropTypes.string.isRequired\n\t};\n\t\n\tvar RBiobankSpecimen = React.createFactory(BiobankSpecimen);\n\t\n\twindow.BiobankSpecimen = BiobankSpecimen;\n\twindow.RBiobankSpecimen = RBiobankSpecimen;\n\t\n\texports.default = BiobankSpecimen;\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenPreparationForm = function (_React$Component) {\n\t  _inherits(SpecimenPreparationForm, _React$Component);\n\t\n\t  function SpecimenPreparationForm(props) {\n\t    _classCallCheck(this, SpecimenPreparationForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenPreparationForm.__proto__ || Object.getPrototypeOf(SpecimenPreparationForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: { data: {} },\n\t      currentProtocol: _this.props.preparation ? _this.props.preparation.protocolId : null,\n\t      formErrors: {}\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setSpecimenProtocolFieldFormData = _this.setSpecimenProtocolFieldFormData.bind(_this);\n\t    _this.getSpecimenProtocolFields = _this.getSpecimenProtocolFields.bind(_this);\n\t    _this.handleSave = _this.handleSave.bind(_this);\n\t    _this.savePreparation = _this.savePreparation.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenPreparationForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var _this2 = this;\n\t\n\t      var formData = this.state.formData;\n\t\n\t      formData['specimenId'] = this.props.specimenId;\n\t\n\t      // This for autoloading data and will be used later\n\t      if (this.props.preparation) {\n\t        formData['protocolId'] = this.props.preparation.protocolId;\n\t        formData['locationId'] = this.props.preparation.locationId;\n\t        formData['date'] = this.props.preparation.date;\n\t        formData['time'] = this.props.preparation.time;\n\t        formData['comments'] = this.props.preparation.comments;\n\t\n\t        var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.state.currentProtocol];\n\t        if (specimenProtocolFieldsObject) {\n\t          var specimenProtocolFields = Object.keys(specimenProtocolFieldsObject).map(function (attribute) {\n\t            formData.data[attribute] = _this2.props.preparation.data[attribute];\n\t          });\n\t        }\n\t      }\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      var submitButton;\n\t      if (!this.props.preparation) {\n\t        submitButton = React.createElement(ButtonElement, { label: 'Submit' });\n\t      }\n\t\n\t      var updateButton;\n\t      var locationField;\n\t      if (this.props.preparation) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t\n\t        locationField = React.createElement(SelectElement, {\n\t          name: 'locationId',\n\t          label: 'Location',\n\t          options: this.props.sites,\n\t          onUserInput: this.setFormData,\n\t          required: true,\n\t          value: this.state.formData.locationId\n\t        });\n\t      }\n\t\n\t      var specimenProtocolFields = void 0;\n\t      if (this.state.currentProtocol) {\n\t        var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.state.currentProtocol];\n\t\n\t        if (specimenProtocolFieldsObject) {\n\t          specimenProtocolFields = this.getSpecimenProtocolFields(specimenProtocolFieldsObject);\n\t        }\n\t      }\n\t\n\t      //This will be for default fields, if there are any eventually\n\t      if (this.state.currentSpecimenProtocol) {\n\t        preparationFields = React.createElement('div', null);\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenPreparation',\n\t          onSubmit: this.handleSave,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(SelectElement, {\n\t          name: 'protocolId',\n\t          label: 'Protocol',\n\t          options: this.props.specimenProtocols,\n\t          onUserInput: this.setFormData,\n\t          required: true,\n\t          value: this.state.formData.protocolId\n\t        }),\n\t        locationField,\n\t        specimenProtocolFields,\n\t        React.createElement(DateElement, {\n\t          name: 'date',\n\t          label: 'Date',\n\t          onUserInput: this.setFormData,\n\t          required: true,\n\t          value: this.state.formData.date\n\t        }),\n\t        React.createElement(TimeElement, {\n\t          name: 'time',\n\t          label: 'Time',\n\t          onUserInput: this.setFormData,\n\t          required: true,\n\t          value: this.state.formData.time\n\t        }),\n\t        React.createElement(TextareaElement, {\n\t          name: 'comments',\n\t          label: 'Comments',\n\t          onUserInput: this.setFormData,\n\t          value: this.state.formData.comments\n\t        }),\n\t        submitButton,\n\t        updateButton\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t\n\t      var formData = this.state.formData;\n\t\n\t      if (formElement === \"protocolId\" && value !== \"\") {\n\t        //This is to eliminate the values for the specimen protocol fields\n\t        //This could potentially be improved later to retain the values\n\t        //for the fields that are common accross protocols\n\t        formData.data = {};\n\t        this.setState({\n\t          currentProtocol: value\n\t        });\n\t      }\n\t\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setSpecimenProtocolFieldFormData',\n\t    value: function setSpecimenProtocolFieldFormData(formElement, value) {\n\t      var formData = this.state.formData;\n\t      formData.data[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t\n\t    // This generates all the form fields for a given specimen protocol\n\t\n\t  }, {\n\t    key: 'getSpecimenProtocolFields',\n\t    value: function getSpecimenProtocolFields(fieldsObject) {\n\t      var _this3 = this;\n\t\n\t      var specimenProtocolFields = Object.keys(fieldsObject).map(function (attribute) {\n\t        var datatype = _this3.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\t\n\t        if (datatype === \"text\" || datatype === \"number\") {\n\t          if (fieldsObject[attribute]['refTableId'] == null) {\n\t            return React.createElement(TextboxElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              onUserInput: _this3.setSpecimenProtocolFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this3.state.formData.data[attribute],\n\t              hasError: _this3.state.formErrors[attribute],\n\t              errorMessage: \"This is a \" + datatype + \" field.\"\n\t            });\n\t          }\n\t\n\t          if (fieldsObject[attribute]['refTableId'] !== null) {\n\t            return React.createElement(SelectElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              options: '',\n\t              onUserInput: _this3.setSpecimenProtocolFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this3.state.formData.data[attribute]\n\t            });\n\t          }\n\t        }\n\t\n\t        if (datatype === \"datetime\") {\n\t          return React.createElement(DateElement, {\n\t            name: attribute,\n\t            label: fieldsObject[attribute]['name'],\n\t            onUserInput: _this3.setSpecimenProtocolFieldFormData,\n\t            ref: attribute,\n\t            required: fieldsObject[attribute]['required'],\n\t            value: _this3.state.formData.data[attribute]\n\t          });\n\t        }\n\t\n\t        if (datatype === \"boolean\") {}\n\t      });\n\t\n\t      return specimenProtocolFields;\n\t    }\n\t  }, {\n\t    key: 'handleSave',\n\t    value: function handleSave(e) {\n\t      //more things will go here later\n\t      if (!this.props.preparation) {\n\t        this.savePreparation(this.props.insertAction);\n\t      }\n\t      if (this.props.preparation) {\n\t        this.savePreparation(this.props.updateAction);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'savePreparation',\n\t    value: function savePreparation(action) {\n\t      var formData = this.state.formData;\n\t      formData['data'] = JSON.stringify(formData['data']);\n\t\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          //Update Parent Specimen Page Here\n\t          formData.data = JSON.parse(formData.data);\n\t          this.props.refreshParent();\n\t          //swal(\"Specimen Preparation Update Successful!\", \"\", \"success\");\n\t          this.props.onSuccess();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return SpecimenPreparationForm;\n\t}(React.Component);\n\t\n\tSpecimenPreparationForm.propTypes = {\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired,\n\t  units: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = SpecimenPreparationForm;\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// modules/biobank/js/specimenIndex.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5338f1054fa4955eacea","/* global ReactDOM */\n\nimport BiobankSpecimen from './specimen';\nconst args = QueryString.get(document.currentScript.src);\n\n$(function() {\n  const biobankSpecimen = (\n    <div className=\"page-specimen-form\">\n      <div className=\"row\">\n        <div className=\"col-md-9 col-lg-12\">\n          <BiobankSpecimen\n            specimenPageDataURL={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=getSpecimenData&barcode=${args.barcode}`}\n          />\n        </div>\n      </div>\n    </div>\n  );\n\n  ReactDOM.render(biobankSpecimen, document.getElementById(\"lorisworkspace\"));\n});\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenIndex.js","/**\n * This file contains React component for Panel\n *\n * @author Alex I.\n * @version 1.0.0\n *\n */\n\n/**\n * Panel component\n * Wraps children in a collapsible bootstrap panel\n */\nclass Panel extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsed: this.props.initCollapsed\n    };\n\n    // Initialize panel class based on collapsed status\n    this.panelClass = (\n      this.props.initCollapsed ?\n        \"panel-collapse collapse\" :\n        \"panel-collapse collapse in\"\n    );\n\n    this.toggleCollapsed = this.toggleCollapsed.bind(this);\n  }\n\n  toggleCollapsed() {\n    this.setState({collapsed: !this.state.collapsed});\n  }\n\n  render() {\n    // Change arrow direction based on collapse status\n    let glyphClass = (\n      this.state.collapsed ?\n        \"glyphicon pull-right glyphicon-chevron-down\" :\n        \"glyphicon pull-right glyphicon-chevron-up\"\n    );\n\n    let pencilGlyph;\n    if (this.props.edit) {\n      pencilGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-pencil\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.edit}\n        /> \n      );\n    } \n\n    let plusGlyph;\n    if (this.props.add) {\n      plusGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-plus\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.add}\n        />\n      );\n    }\n\n    let removeGlyph;\n    if (this.props.cancel) {\n      removeGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-remove\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.cancel}\n        />\n      );\n    }\n\n    // Add panel header, if title is set\n    const panelHeading = this.props.title ? (\n      <div\n        className=\"panel-heading\"\n      >\n        <span \n          className={glyphClass}\n          onClick={this.toggleCollapsed}\n          data-toggle=\"collapse\"\n          data-target={'#' + this.props.id}\n          style={{cursor: 'pointer'}}\n        />\n        {pencilGlyph}\n        {plusGlyph}\n        {removeGlyph}\n        {this.props.title}\n      </div>\n    ) : '';\n\n    return (\n      <div className=\"panel panel-primary\">\n        {panelHeading}\n        <div id={this.props.id} className={this.panelClass} role=\"tabpanel\">\n          <div className=\"panel-body\" style={{height: this.props.height}}>\n            {this.props.children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPanel.propTypes = {\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  edit: React.PropTypes.func,\n  add: React.PropTypes.func\n};\nPanel.defaultProps = {\n  initCollapsed: false,\n  id: 'default-panel',\n  height: '100%'\n};\n\nexport default Panel;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Panel.js","import BiobankBarcodeForm from './barcodeForm.js';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankSpecimenForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      barcodeFormList: {},\n      errorMessage: null,\n      formErrors: {},\n      countBarcodeForms: [1] \n    };\n\n    //this.getValidFileName = this.getValidFileName.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    //this.isValidFileName = this.isValidFileName.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.specimenSubmit = this.specimenSubmit.bind(this);\n    this.addBarcodeForm = this.addBarcodeForm.bind(this);\n    this.setBarcodeFormData = this.setBarcodeFormData.bind(this);\n  }\n\n  componentDidMount() {\n\n    //if this is a child specimen form then certain formData is set when component mounts\n    if (this.props.child) {\n      var formData = this.state.formData;\n      formData['parentSpecimen'] = this.props.specimenId;\n      formData['pscid'] = this.props.candidateId;\n      formData['visitLabel'] = this.props.sessionId;\n      formData['unitId'] = this.props.unitId;\n\n      this.setState({\n        formData: formData\n      });\n    }\n  }\n\n  render() {\n\n    //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n    var barcodeForms = [];\n    for (let i = 0; i < this.state.countBarcodeForms.length; i++) {\n      barcodeForms.push(\n        <BiobankBarcodeForm\n          setParentFormData={this.setBarcodeFormData}\n          id={this.state.countBarcodeForms[i]}\n          specimenTypes={this.props.specimenTypes}\n          containerTypesPrimary={this.props.containerTypesPrimary}\n          containersNonPrimary={this.props.containersNonPrimary}\n          specimenTypeAttributes={this.props.specimenTypeAttributes}\n          attributeDatatypes={this.props.attributeDatatypes}\n          capacities={this.props.capacities}\n          containerDimensions={this.props.containerDimensions}\n          containerCoordinates={this.props.containerCoordinates}\n          specimenTypeUnits={this.props.specimenTypeUnits}\n          units={this.props.units}\n          removeBarcodeForm={i+1 !== 1 ? () => this.removeBarcodeForm(i) : null}\n          addBarcodeForm={i+1 === this.state.countBarcodeForms.length ? this.addBarcodeForm : null}\n          duplicateBarcodeForm={i+1 === this.state.countBarcodeForms.length ? this.duplicateBarcodeForm : null}\n        />\n      );\n    }\n\n    let globalFields;\n    let remainingQuantityFields;\n    if (this.props.child) {\n      globalFields = (   \n        <div>\n          <StaticElement\n            label=\"Parent Specimen\"\n            text={this.props.barcode}\n          />\n          <StaticElement\n            label=\"PSCID\"\n            text={this.props.pscid}\n          />\n          <StaticElement\n            label=\"Visit Label\"\n            text={this.props.visit}\n          />\n        </div>\n      );\n\n      //It may be wise to make unit static and forced, or atleast prepopulated --\n      remainingQuantityFields = (\n        <div>\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Remaining Quantity\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={this.props.specimenUnits}\n            onUserInput={this.setFormData}\n            emptyOption={false}\n            required={true}\n            value={this.state.formData.unitId}\n          />\n        </div>\n      );\n\n    } else {\n      globalFields = (\n          <div>\n            <SelectElement\n              name=\"pscid\"\n              label=\"PSCID\"\n              options={this.props.pSCIDs}\n              onUserInput={this.setFormData}\n              ref=\"pscid\"\n              required={true}\n              value={this.state.formData.pscid}\n            />\n            <SelectElement\n              name=\"visitLabel\"\n              label=\"Visit Label\"\n              options={this.state.visits}\n              onUserInput={this.setFormData}\n              ref=\"visitLabel\"\n              required={true}\n              value={this.state.formData.visitLabel}\n              disabled={this.state.formData.pscid ? false : true}\n            />\n          </div>\n      );\n    }\n\n    //ALLOW THEM TO CANCEL THE FORM AND DELETE BARCODE FORMS\n    return (\n      <FormElement\n        name=\"specimenForm\"\n        id='specimenForm'\n        onSubmit={this.handleSubmit}\n        ref=\"form\"\n      >\n        <br/>\n        <div className='row'>\n          <div className=\"col-xs-11\">\n            {globalFields}\n          </div>\n        </div>\n        {barcodeForms}\n        <div className='row'>\n          <div className=\"col-xs-11\">\n            {remainingQuantityFields}\n          </div>\n        </div>\n        <div className=\"col-xs-3 col-xs-offset-9\">\n          <ButtonElement label=\"Submit\"/>\n        </div>\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n  /**\n   * Returns a valid name for the file to be specimened\n   *\n   * @param {string} pscid - PSCID selected from the dropdown\n   * @param {string} visitLabel - Visit label selected from the dropdown\n   * @param {string} instrument - Instrument selected from the dropdown\n   * @return {string} - Generated valid filename for the current selection\n   */\n//  getValidFileName(pscid, visitLabel, instrument) {\n//    var fileName = pscid + \"_\" + visitLabel;\n//    if (instrument) fileName += \"_\" + instrument;\n//\n//    return fileName;\n//  }\n\n\n  validateForm(formElement, value) {\n    let formErrors = this.state.formErrors;\n\n    //validate barcode regex\n    if (formElement === \"barcode\" && value !== \"\") {\n      if (!(/^hello/.test(this.state.formData.barcode))) {\n        formErrors.barcode = true;\n      } else {\n        formErrors.barcode = false;\n      }\n    }\n\n    //validate that quantity is a number and less than capacity\n    if (formElement === \"quantity\" && value !== \"\") {\n      if (isNaN(value) || (value > this.props.capacities[this.state.currentContainerType])) {\n        formErrors.quantity = true;\n      } else {\n        formErrors.quantity = false;\n      }\n    }\n\n    //validate datatypes and regex of generated type attributes\n    var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n    var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n\n      let datatype = this.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"number\") {\n        if (formElement === attribute) {\n          if (isNaN(value) && value !== \"\") {\n            formErrors[attribute] = true;\n          } else {\n            formErrors[attribute] = false;\n          }\n        }\n      }\n    })\n\n    this.setState({\n      formErrors: formErrors\n    });\n\n  }\n\n\n  /**\n   * Handle form submission\n   * @param {object} e - Form submission event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    let formRefs = this.refs;\n    //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\n    // Validate the form\n    if (!this.isValidForm(formRefs, formData)) {\n      return;\n    }\n\n\n//    // Validate specimened file name\n//    let instrument = formData.instrument ? formData.instrument : null;\n//    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n//    let requiredFileName = this.getValidFileName(\n//      formData.pscid, formData.visitLabel, instrument\n//    );\n//    if (!this.isValidFileName(requiredFileName, fileName)) {\n//      swal(\n//        \"Invalid Specimen name!\",\n//        \"File name should begin with: \" + requiredFileName,\n//        \"error\"\n//      );\n//      return;\n//    }\n\n    // Check for duplicate file names\n//    let isDuplicate = biobankFiles.indexOf(fileName);\n//    if (isDuplicate >= 0) {\n//      swal({\n//        title: \"Are you sure?\",\n//        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n//        type: \"warning\",\n//        showCancelButton: true,\n//        confirmButtonText: 'Yes, I am sure!',\n//        cancelButtonText: \"No, cancel it!\"\n//      }, function(isConfirm) {\n//        if (isConfirm) {\n//          this.specimenFile();\n//        } else {\n//          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n//        }\n//      }.bind(this));\n//    } else {\n\n    this.specimenSubmit();\n//    }\n  }\n\n  /*\n   * Uploads the file to the server\n   */\n  specimenSubmit() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        // Trigger an update event to update all observers (i.e DataTable)\n        // THIS CURRENTLY DOES NOT WORK - LOOK INTO IT\n        let event = new CustomEvent('update-datatable');\n        window.dispatchEvent(event);\n\n        this.props.refreshParent();\n        swal(\"Specimen Submission Successful!\", \"\", \"success\");\n        this.props.onSuccess();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Checks if the inputted file name is valid\n   *\n   * @param {string} requiredFileName - Required file name\n   * @param {string} fileName - Provided file name\n   * @return {boolean} - true if fileName starts with requiredFileName, false\n   *   otherwise\n   */\n//  isValidFileName(requiredFileName, fileName) {\n//    if (fileName === null || requiredFileName === null) {\n//      return false;\n//    }\n//\n//    return (fileName.indexOf(requiredFileName) === 0);\n//  }\n\n  /**\n   * Validate the form\n   *\n   * @param {object} formRefs - Object containing references to React form elements\n   * @param {object} formData - Object containing form data inputed by user\n   * @return {boolean} - true if all required fields are filled, false otherwise\n   */\n  isValidForm(formRefs, formData) {\n    var isValidForm = true;\n\n    var requiredFields = {\n      pscid: null,\n      visitLabel: null,\n    };\n\n    Object.keys(requiredFields).map(function(field) {\n      if (formData[field]) {\n        requiredFields[field] = formData[field];\n      } else if (formRefs[field]) {\n        formRefs[field].props.hasError = true;\n        isValidForm = false;\n      }\n    });\n    this.forceUpdate();\n\n    return isValidForm;\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    // This lets the modal window know that there is formData\n    // and will cause a warning to be thrown of the modal window\n    // is exited/\n    this.props.throwWarning();\n  \n    if (formElement === \"pscid\" && value !== \"\") {\n      this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n    }\n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  setBarcodeFormData(barcodeFormData, barcodeId) {\n    var formData = this.state.formData;\n    var barcodeFormList = this.state.barcodeFormList;\n    barcodeFormList[barcodeId] = barcodeFormData;\n    formData['barcodeFormList'] = barcodeFormList;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  addBarcodeForm() {\n    let countBarcodeForms = this.state.countBarcodeForms;\n    countBarcodeForms.push(countBarcodeForms[countBarcodeForms.length -1] + 1); \n    this.setState({\n      countBarcodeForms: countBarcodeForms\n    });\n  }\n\n  duplicateBarcodeForm() {\n  \n  }\n\n  removeBarcodeForm(index) {\n    let countBarcodeForms = this.state.countBarcodeForms;\n    countBarcodeForms.splice(index, 1);\n    this.setState({\n      countBarcodeForms: countBarcodeForms\n    });\n  }\n}\n\nBiobankSpecimenForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired,\n  barcode: React.PropTypes.string,\n  refreshTable: React.PropTypes.func\n};\n\nexport default BiobankSpecimenForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenForm.js","import SpecimenCollectionForm from './collectionForm'\n\n/**\n * Biobank Barcode Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass BiobankBarcodeForm extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      formData: {},\n      formErrors: {},\n    };\n   \n    this.setFormData = this.setFormData.bind(this);\n    this.setCollectionFormData = this.setCollectionFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.duplicateBarcodeForm) {\n\n    }\n  }\n\n  render() {\n\n    let addBarcodeFormButton;\n    let duplicateBarcodeFormButton;\n    if (this.props.addBarcodeForm) {\n      addBarcodeFormButton = (\n        <button\n          type='button'\n          className='btn btn-success btn-sm'\n          onClick={this.props.addBarcodeForm}\n        >\n          <span className='glyphicon glyphicon-plus' style={{marginRight: 5}}/>\n          New\n        </button>\n      );\n    }\n\t\n    if (this.props.duplicateBarcodeForm) {\n      duplicateBarcodeFormButton = (\n        <button\n          type='button'\n          className='btn btn-success btn-sm'\n          onClick={this.props.duplicateBarcodeForm}\n        >\n          <span className='glyphicon glyphicon-plus'style={{marginRight: 5}}/>\n          Duplicate\n        </button>\n      );\n    }\n\n\n    let removeBarcodeFormButton;\n    if (this.props.removeButton) {\n      const glyphStyle = {\n        color: '#DDDDDD',\n        maring: 'auto'\n      }\n\n      const buttonStyle = {\n        appearance: 'non',\n        outline: 'non',\n        boxShadow: 'none',\n        borderColor: 'transparent',\n        backgroundColor: 'transparent'\n      }\n\n      removeBarcodeFormButton = (\n        <button\n          type='button'\n          className='btn btn-primary-outline btn-sm'\n          style={buttonStyle}\n          onClick={this.props.removeBarcodeForm}\n        >\n        <span className='glyphicon glyphicon-remove' style={glyphStyle}/>\n        </button>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"biobankBarcode\"\n      >\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <div \n              data-toggle=\"collapse\" \n              data-target={\"#\" + this.props.id}\n            >   \n              <TextboxElement\n                name={\"barcode\"}\n                label={\"Barcode \" + this.props.id}\n                onUserInput={this.setFormData}\n                ref={\"barcode\"}\n                required={true}\n                value={this.state.formData[\"barcode\"]}\n                hasError={this.state.formErrors[\"barcode\"]}\n                errorMessage=\"Incorrect Barcode format for this Specimen and Container Type\"\n              />\n            </div>\n          </div>\n          <div className=\"col-xs-1\">\n            {removeBarcodeFormButton}\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xs-2\"/>\n          <div className=\"col-xs-9\">\n            <div id={this.props.id} className=\"collapse\">\n              <SpecimenCollectionForm\n                setParentFormData={this.setCollectionFormData}\n                specimenTypes={this.props.specimenTypes}\n                specimenTypeAttributes={this.props.specimenTypeAttributes}\n                attributeDatatypes={this.props.attributeDatatypes}\n                containerTypesPrimary={this.props.containerTypesPrimary}\n                containersNonPrimary={this.props.containersNonPrimary}\n                containerDimensions={this.props.containerDimensions}\n                containerCoordinates={this.props.containerCoordinates}\n                specimenTypeUnits={this.props.specimenTypeUnits}\n                stati={this.props.stati}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <div className=\"col-xs-3\"/>\n            <div className=\"col-xs-1\">\n              {addBarcodeFormButton}\n            </div>\n            <div className=\"col-xs-1\">\n              {duplicateBarcodeFormButton}\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState(\n      {\n      formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setCollectionFormData(collectionFormData) {\n    var formData = this.state.formData;\n    \n    for (let field in collectionFormData) {\n      formData[field] = collectionFormData[field]\n    }\n \n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    this.props.setParentFormData(this.state.formData, this.props.id);\n  }\n}\n\nBiobankBarcodeForm.propTypes = {\n  \n  id: React.PropTypes.string,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n}\n\nexport default BiobankBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/barcodeForm.js","import ContainerParentForm from './containerParentForm'\n\n\n/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenCollectionForm extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      formData: {data:{}},\n      currentSpecimenType: this.props.edit ? this.props.specimenType : null,\n      currentContainerType: this.props.edit ? this.props.containerType : null,\n      formErrors: {},\n    };\n\n    this.setFormData = this.setFormData.bind(this);\n    this.setSpecimenTypeFieldFormData = this.setSpecimenTypeFieldFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n    this.setContainerParentFormData = this.setContainerParentFormData.bind(this);\n    this.getSpecimenTypeFields = this.getSpecimenTypeFields.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.updateSpecimen = this.updateSpecimen.bind(this);\n  }\n\n  componentDidMount() {\n    let formData = this.state.formData;\n    if (this.props.edit) {\n      formData['specimenId']    = this.props.specimenId;\n      formData['containerId']   = this.props.containerId;\n      formData['specimenType']  = this.props.specimenType;\n      formData['containerType'] = this.props.containerType;\n      formData['quantity']      = this.props.collection.quantity;\n      formData['unitId']        = this.props.collection.unitId;\n      formData['date']          = this.props.collection.date;\n      formData['time']          = this.props.collection.time;\n      formData['comments']      = this.props.collection.comments;\n\n      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n      if (specimenTypeFieldsObject) {\n        var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n          formData.data[attribute] = this.props.collection.data[attribute];\n        });\n      }\n    }\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  mapFormOptions(rawObject, targetAttribute) {\n    let data = {};\n    for (let id in rawObject) {\n      data[id] = rawObject[id][targetAttribute];\n    }\n\n    return data;\n  }\n\n  render() {\n\n    // This entire parentContainerField and parentContainerCoordinateField section should go into its own\n    // re-usable component\n    var containerParentForm;\n    if (!this.props.edit) {\n      containerParentForm = (\n        <ContainerParentForm\n          setParentFormData={this.setContainerParentFormData}\n          containersNonPrimary={this.props.containersNonPrimary}\n          containerDimensions={this.props.containerDimensions}\n          containerCoordinates={this.props.containerCoordinates}\n        />\n      );\n    }\n\n    var updateButton;\n    if (this.props.edit) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    }\n\n    //This block of code should potentially be moved to setFormData();\n    //Consider Refactoring...\n    var specimenTypeUnits = {};\n    if (this.state.currentSpecimenType) {\n     \n      //This modifies the selections for unit drop down based on the chosend specimen type \n      for (var id in this.props.specimenTypeUnits[this.state.currentSpecimenType]) {\n        specimenTypeUnits[id] = this.props.specimenTypeUnits[this.state.currentSpecimenType][id].unit;\n      }\n\n      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n      if (specimenTypeFieldsObject) {\n        var specimenTypeFields = this.getSpecimenTypeFields(specimenTypeFieldsObject);\n      }\n    }\n\n    var specimenFields;\n    if (this.state.currentSpecimenType) {\n      specimenFields = (\n        <div>\n          <SelectElement\n            name=\"containerType\"\n            label=\"Container Type\"\n            options={this.props.containerTypesPrimary}\n            onUserInput={this.setFormData}\n            ref=\"containerType\"\n            required={true}\n            value={this.state.formData.containerType}\n          />\n          {containerParentForm}\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Quantity\"\n            onUserInput={this.setFormData}\n            ref=\"quantity\"\n            required={true}\n            value={this.state.formData.quantity}\n            hasError={this.state.formErrors.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={specimenTypeUnits}\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.unitId}\n          />\n          {specimenTypeFields}\n          <DateElement\n            name=\"date\"\n            label=\"Date\"\n            minYear=\"2000\"\n            maxYear=\"2018\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.date}\n          />\n          <TimeElement\n            name=\"time\"\n            label=\"Time\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.time}\n          />\n          <TextareaElement\n            name=\"comments\"\n            label=\"Comments\"\n            onUserInput={this.setFormData}\n            ref=\"comments\"\n            value={this.state.formData.comments}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"biobankSpecimen\"\n        onSubmit={this.handleUpdate}\n        ref=\"form\"\n      >\n        <SelectElement\n          name=\"specimenType\"\n          label=\"Specimen Type\"\n          options={this.props.specimenTypes}\n          onUserInput={this.setFormData}\n          ref=\"specimenType\"\n          required={true}\n          value={this.state.formData.specimenType}\n        />\n        {specimenFields}\n        {updateButton}\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n\n    let formData = this.state.formData;\n    formData[formElement] = value;\n\n    if (formElement === \"specimenType\" && value !== \"\") {\n      //This throws a warning if the specimen type is changed because of the cascading effects this \n      //would cause.\n      if (this.props.edit) {\n        swal({\n          title: \"Warning\",\n          text: \"Changing the specimen type will result in the loss of any preparation or anaylsis \"+\n            \"data for this specimen. You will also need to manually change the specimen type of any \"+\n            \"aliquots derived from this specimen. Proceed with caution.\",\n          type: \"warning\",\n          showCancelButton: true,\n          confirmButtonText: 'Cancel Change',\n          cancelButtonText: 'Proceed',\n        }, \n        function(isConfirm) {\n          if (isConfirm) {\n            this.props.toggleEdit();\n          } else {\n          }\n        }.bind(this));\n      }\n\n      //This is to eliminate the values for the specimen type fields\n      //This could potentially be improved later to retain the values\n      //for the fields that are common across specimen types\n      formData.data = {}; \n      this.setState({\n        currentSpecimenType: value\n      });\n    }\n\n    if (formElement === \"containerType\" && value !== \"\") {\n      this.setState({\n        currentContainerType: value\n      });\n    }\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setSpecimenTypeFieldFormData(formElement, value) {\n    let formData = this.state.formData;\n    formData.data[formElement] = value;\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  \n  }\n\n  setContainerParentFormData(containerParentFormData) {\n    var formData = this.state.formData;\n\n    for (let field in containerParentFormData) {\n      formData[field] = containerParentFormData[field];\n    }\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    if (!this.props.edit) {\n      var formData = this.state.formData;\n      this.props.setParentFormData(formData);\n    }\n  }\n\n\n  // This generates all the form fields for a given specimen type\n  getSpecimenTypeFields(fieldsObject) {\n    var specimenTypeFields = Object.keys(fieldsObject).map((attribute) => {\n      let datatype = this.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"text\" || datatype === \"number\") {\n        if (fieldsObject[attribute]['refTableId'] == null) {\n          return (\n            <TextboxElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              onUserInput={this.setSpecimenTypeFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribute]['required']}\n              value={this.state.formData.data[attribute]}\n              hasError={this.state.formErrors[attribute]}\n              errorMessage={\"This is a \" + datatype + \" field.\"}\n            />\n          );\n        }\n\n        // OPTIONS FOR SELECT ELEMENT WILL MOST LIKELY BE PASSED VIA AJAX CALL\n        // BUT IT CAN ALSO BE PRELOADED --\n        // ASK RIDA HOW THIS SHOULD BE DONE\n        if (fieldsObject[attribute]['refTableId'] !== null) {\n          return (\n            <SelectElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              options=\"\"\n              onUserInput={this.setSpecimenTypeFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribte]['required']}\n              value={this.state.formData.data[attribute]}\n            />\n          );\n        }\n      }\n\n      if (datatype === \"datetime\") {\n        return (\n          <DateElement\n            name={attribute}\n            label={fieldsObject[attribute]['name']}\n            onUserInput={this.setSpecimenTypeFieldFormData}\n            ref={attribute}\n            required={fieldsObject[attribute]['required']}\n            value={this.state.formData.data[attribute]}\n          />\n        );\n      }\n\n      if (datatype === \"boolean\") {\n      \n      }\n    })\n\n    return specimenTypeFields;\n  }\n\n  handleUpdate(e) {\n    //more things will go here later\n    this.updateSpecimen();\n  }\n\n  updateSpecimen() {\n    let formData = this.state.formData;\n    formData['data'] = JSON.stringify(formData['data']);\n\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        //Update Parent Specimen Page Here\n        formData.data = JSON.parse(formData.data);\n        this.props.refreshParent();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n}\n\nSpecimenCollectionForm.propTypes = {\n  setParentFormData: React.PropTypes.func,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n}\n\nexport default SpecimenCollectionForm;\n\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/collectionForm.js","/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass ContainerParentForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      formErrors: {},\n      errorMessage: null\n    };\n\n    this.mapFormOptions = this.mapFormOptions.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n  }\n\n  componentDidMount() {\n    // This is where we will pass a parentContainerId if it already exists\n    // These are simply to provide 'Defaults' to the page. I am not sure that in\n    // if they are entirely necessary.\n    if (this.props.container) {\n    let formData = this.state.formData;\n    formData['container'] = JSON.stringify(this.props.container);\n    formData['parentContainerId'] = this.props.container.parentContainerId;\n\n    this.setState({\n      formData: formData\n    });\n    }\n  }\n\n  //map options for forms\n  mapFormOptions(rawObject, targetAttribute) {\n    var data = {}; \n    for (var id in rawObject) {\n      data[id] = rawObject[id][targetAttribute];\n    }   \n\n    return data;\n  }\n\n  render() {\n\n    var parentContainerField;\n    var coordinateField;\n    let containerBarcodesNonPrimary = this.mapFormOptions(this.props.containersNonPrimary, 'barcode');\n\n    parentContainerField = ( \n      <SelectElement\n        name=\"parentContainerId\"\n        label=\"Parent Container Barcode\"\n        options={containerBarcodesNonPrimary}\n        onUserInput={this.setFormData}\n        ref=\"parentContainerId\"\n        required={false}\n        value={this.state.formData.parentContainerId}\n      />  \n    );  \n\n    // THIS IS VERY POORLY DONE AND NEEDS REFACTORING\n    if (this.state.formData.parentContainerId) {\n\n      let dimensionId = this.props.containersNonPrimary[this.state.formData.parentContainerId].dimensionId;\n      \n      if (dimensionId) {\n        let dimensions = this.props.containerDimensions[dimensionId];\n\n        // Total coordinates is determined by the product of the dimensions\n        let coordinatesTotal = 1;\n        for (let dimension in dimensions) {\n          coordinatesTotal = coordinatesTotal * dimensions[dimension];\n        }   \n\n        // Mapping of options for the SelectElement\n        let coordinates = {}; \n        for (let i = 1; i <= coordinatesTotal; i++) {\n\n          // If the coordinate is already taken, skip it.\n          // this doubling of if statements seems unnecessary\n          if (this.props.containerCoordinates[this.state.formData.parentContainerId]) {\n            if (this.props.containerCoordinates[this.state.formData.parentContainerId][i]) {\n              continue; \n            }\n          }\n\n          coordinates[i] = i;\n        }   \n\n        coordinateField = ( \n          <SelectElement\n            name=\"coordinate\"\n            label=\"Coordinate\"\n            options={coordinates}\n            onUserInput={this.setFormData}\n            ref=\"coordinate\"\n            required={false}\n            value={this.state.formData.coordinate}\n          />  \n        );  \n      }\n    }   \n\n    var updateButton;\n    if (this.props.container) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    }\n\n    return (\n      <FormElement\n        onSubmit={this.handleSubmit}\n      >\n        {parentContainerField}\n        {coordinateField}\n        {updateButton}\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n  // Validation functions will go here later...\n\n  /*\n   * Uploads the file to the server\n   */\n  handleSubmit() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n      \n        this.props.refreshParent();\n        swal(\"Parent Container Update Successful!\", \"\", \"success\");\n        this.props.onSuccess();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    //let visitLabel = this.state.formData.visitLabel;\n  \n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    if (formElement === 'parentContainerId') {\n      formData['coordinate'] = \"\";\n    }\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    if (!this.props.container) {\n      var formData = this.state.formData;\n      this.props.setParentFormData(formData);\n    }\n  } \n}\n\nContainerParentForm.propTypes = {\n  DataURL: React.PropTypes.string,\n  action: React.PropTypes.string,\n  barcode: React.PropTypes.string,\n  refreshTable: React.PropTypes.func,\n  onSuccess: React.PropTypes.func\n};\n\nexport default ContainerParentForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerParentForm.js","/**\n * This file contains React components for Modal component.\n *\n * @author Henri Rabalais\n * @version 1.1.0\n *\n */\n\nimport Modal from './Modal';\n\n/**\n * Modal Component.\n * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n *\n * ================================================\n * Usage:\n *\n * =================================================\n *\n */\n\nclass FormModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { show: false, throwWarning: false }\n\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.confirmClose = this.confirmClose.bind(this);\n    this.setWarning = this.setWarning.bind(this);\n  }\n\n  renderChildren() {\n    return React.Children.map(this.props.children, child => {\n      return React.cloneElement(child, { onSuccess: this.closeModal, throwWarning: this.setWarning});\n    });\n  }\n\n  openModal() {\n    this.setState({\n      show: true\n    });\n  } \n\n  setWarning() {\n    this.setState({\n      throwWarning: true\n    });\n  }\n\n  confirmClose() {\n    if (this.state.throwWarning) {\n      swal({\n        title: \"Are You Sure?\",\n        text: \"Leaving the form will result in the loss of any information entered.\",\n        type: \"warning\",\n        showCancelButton: true,\n        confirmButtonText: 'Proceed',\n        cancelButtonText: 'Cancel',\n      },\n      function() {\n        this.closeModal();\n      }.bind(this));\n    } else {\n      this.closeModal();\n    }\n  }\n\n  closeModal() {\n    this.setState({\n      show: false,\n      throwWarning: false\n    });\n  }\n\n  render() {\n    return (\n      <Modal \n        closeModal={this.confirmClose} \n        openModal={this.openModal} \n        show={this.state.show}\n        {...this.props} \n      >\n        {this.renderChildren()}\n      </Modal>\n    );\n  }\n}\n\nFormModal.propTypes = {\n  title: React.PropTypes.string,\n  buttonClass: React.PropTypes.string,\n  buttonStyle: React.PropTypes.object,\n  buttonContent: React.PropTypes.object,\n};\nFormModal.defaultProps = {\n  buttonClass: 'btn btn-primary'\n};\n\nexport default FormModal;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/FormModal.js","/**\n * This file contains React components for Modal component.\n *\n * @author Henri Rabalais\n * @version 1.1.0\n *\n */\n\n/**\n * Modal Component.\n * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n *\n * ================================================\n * Usage:\n *\n * =================================================\n *\n */\nclass Modal extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n  }\n\n  render() {\n    // Black Background with Alpha Channel\n    const backdropStyle = {\n      position: 'fixed',\n      zIndex: 9998,\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundColor: 'rgba(0,0,0,0.3)',\n      padding: 50\n    };\n\n    // White Modal Window\n    const modalStyle = {\n      position: 'relative',\n      maxWidth: 1000,\n      maxHeight: '100%',\n      margin: '0 auto',\n      backgroundColor: '#fff',\n      borderRadius: 10,\n      overflowY: 'auto',\n      zIndex: 9999\n    };\n\n    const titleStyle = {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      background: '#093782',\n      height: '70px',\n      borderTopRightRadius: '10',\n      color: '#FFFFFF',\n      fontSize: 24,\n      padding: 20,\n    }\n\n    const glyphStyle = {\n      marginLeft: 'auto',\n      cursor: 'pointer'\n    }\n\n    const bodyStyle = {\n      padding: 15\n    }\n  \n    var button = (\n      <button\n        type='button'\n        className={this.props.buttonClass}\n        onClick={this.props.openModal}\n        style={this.props.buttonStyle}\n      >\n        {this.props.buttonContent}\n      </button>\n    );\n\n    var modal;\n    if (this.props.show) {\n      modal = (\n        <div style={backdropStyle} onClick={this.props.closeModal}>\n          <div\n            style={modalStyle}\n            onClick={e => {\n              e.stopPropagation();\n            }}\n          >\n            <div\n              style={titleStyle}\n            >\n              {this.props.title}\n              <span \n                className='glyphicon glyphicon-remove'\n                style={glyphStyle}\n                onClick={this.props.closeModal}\n              />\n            </div>\n            <div\n              style={bodyStyle}\n            >\n              {this.props.children}\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {button}\n        {modal}\n      </div>\n    );\n  }\n}\n\nModal.propTypes = {\n  title: React.PropTypes.string,\n  buttonClass: React.PropTypes.string,\n  buttonStyle: React.PropTypes.object,\n  buttonContent: React.PropTypes.object,\n  show: React.PropTypes.boolean,\n  closeModal: React.PropTypes.func,\n  openModal: React.PropTypes.func\n};\nModal.defaultProps = {\n  buttonClass: 'btn btn-primary'\n};\n\nexport default Modal;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Modal.js","/**\n * This file contains React component for Loader\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n */\n\n/**\n * Loader component\n */\nclass Loader extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n\n    return (\n      <div className='loader-container'>\n        <div className=\"loader\"/>\n      </div>\n\n\n    );\n  }\n}\n\nexport default Loader;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Loader.js","/**\n * LifeCycle\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass LifeCycle extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n    };\n   \n  }\n\n  componentDidMount() {\n    $('[data-toggle=\"tooltip\"]').tooltip();\n  }\n\n  render() {\n\n    let collectionNode;\n    let collectionTooltip;\n    if (this.props.collection) {\n      collectionTooltip = (\n        <div>\n          <h>Collection</h>\n          <p>Date:</p> \n        </div>\n      );\n\n      collectionNode = (\n        <div \n          className='lifecycle-node' \n          id='lifecycle-collection-node'\n          data-html='true'\n          data-toggle='tooltip' \n          data-placement='auto'\n          title={'<h5>' + this.props.sites[this.props.collection.locationId] + '</h5>' +\n                 '<h5>' + this.props.collection.date + '</h5>'\n                }\n        >\n          <div className='letter'>\n            C\n          </div>\n        </div>\n      );\n    }\n\n    let preparationNode;\n    if (this.props.preparation) {\n      preparationNode = (\n        <div \n          className='lifecycle-node' \n          data-html='true'\n          data-toggle='tooltip' \n          data-placement='auto'\n          title={'<h5>' + this.props.sites[this.props.preparation.locationId] + '</h5>' +\n                 '<h5>' + this.props.preparation.date + '</h5>'\n                }\n        >\n          <div className='letter'>\n            P\n          </div>\n        </div>\n      );\n    }\n\n    let analysisNode;\n    if (this.props.analysis) {\n      analysisNode = (\n        <div className='lifecycle-node-container'>\n           <div className='lifecycle-node'/>\n           <div className='lifecycle-text'>Analysis</div>\n        </div>\n      );\n    }\n\n    let line;\n    line = (\n        <div className='lifecycle-line'/>\n    );\n\n    return (\n      <div className='lifecycle'>\n        <div className='lifecycle-graphic'>\n          {collectionNode}\n          {preparationNode ? line : null}\n          {preparationNode}\n          {analysisNode} \n        </div>\n      </div>\n    );\n  }\n\n}\n\nLifeCycle.propTypes = {\n}\n\nexport default LifeCycle;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/lifeCycle.js","/* exported RBiobankSpecimen */\n\nimport SpecimenCollectionForm from './collectionForm';\nimport SpecimenPreparationForm from './preparationForm';\nimport ContainerParentForm from './containerParentForm';\nimport FormModal from 'FormModal';\nimport Panel from '../../../jsx/Panel';\nimport Loader from 'Loader';\nimport BiobankSpecimenForm from './specimenForm.js';\nimport LifeCycle from './lifeCycle.js';\n\n/**\n * Biobank Specimen\n *\n * Fetches data corresponding to a given Specimen from Loris backend and\n * displays a page allowing viewing of meta information of the specimen\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankSpecimen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      Data: {},\n      isLoaded: false,\n      loadedData: 0,\n      editCollection: false,\n      editPreparation: false\n    };\n\n    this.fetchSpecimenData = this.fetchSpecimenData.bind(this);\n    this.toggleEditCollection = this.toggleEditCollection.bind(this);\n    this.toggleEditPreparation = this.toggleEditPreparation.bind(this);\n    this.mapFormOptions = this.mapFormOptions.bind(this);\n    this.updateCollection = this.updateCollection.bind(this);\n    this.updatePreparation = this.updatePreparation.bind(this);\n    //this.redirectURL = this.redirectURL.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchSpecimenData();\n  }\n\n  fetchSpecimenData() {\n    var self = this;\n    $.ajax(this.props.specimenPageDataURL, {\n      dataType: 'json',\n      success: function(data) {\n        self.setState({\n          Data: data,\n          isLoaded: true,\n        });\n      },\n      error: function(error, errorCode, errorMsg) {\n        console.error(error, errorCode, errorMsg);\n        self.setState({\n          error: 'An error occurred when loading the form!'\n        });\n      }\n    });\n  }\n\n  toggleEditCollection() {\n    let editCollection = this.state.editCollection;\n    this.setState({\n      editCollection: !editCollection\n    });\n  }\n\n  toggleEditPreparation() {\n    let editPreparation = this.state.editPreparation;\n    this.setState({\n     editPreparation: !editPreparation\n    });\n  }\n\n  updateCollection() {\n    this.fetchSpecimenData();\n    this.toggleEditCollection();\n  } \n\n\n  updatePreparation() {\n    this.fetchSpecimenData();\n    this.toggleEditPreparation();\n  } \n\n  //map options for forms\n  mapFormOptions(rawObject, targetAttribute) {\n    var data = {};\n    for (var id in rawObject) {\n      data[id] = rawObject[id][targetAttribute];\n    }\n\n    return data;\n  }\n\n  render() {\n    // Data loading error\n    if (this.state.error !== undefined) {\n      return (\n        <div className=\"alert alert-danger text-center\">\n          <strong>\n            {this.state.error}\n          </strong>\n        </div>\n      );\n    }\n\n    // Waiting for data to load\n    if (!this.state.isLoaded) {\n      return (\n        <Loader/>\n      );\n    }\n\n\t// Checks if parent specimen exists \n    // If exist: returns Barcode value with href\n    // If !exist: returns value 'None'\n    let parentSpecimenBarcodeValue\n\tif (this.state.Data.parentSpecimenBarcode) {\n\t  var specimenURL = loris.BaseURL+\"/biobank/specimen/?barcode=\";\n\t  parentSpecimenBarcodeValue = (\n        <a href={specimenURL+this.state.Data.parentSpecimenBarcode}>\n          {this.state.Data.parentSpecimenBarcode}\n        </a>\n\t  );\n    }\n\n    var parentSpecimenBarcode = (\n      <div className='item'>\n        <div className='field'>\n        Parent Specimen\n          <div className='value'>\n            {parentSpecimenBarcodeValue ? parentSpecimenBarcodeValue : 'None'}\n          </div>\n        </div>\n      </div>\n    );\n\n    // Checks if parent container exists and returns static element with href\n    let parentContainerBarcodeValue\n    if (this.state.Data.parentContainerBarcode) {\n      var containerURL = loris.BaseURL+\"/biobank/container/?barcode=\";\n      parentContainerBarcodeValue = ( \n          <a href={containerURL+this.state.Data.parentContainerBarcode}>   \n            {this.state.Data.parentContainerBarcode}\n          </a> \n      );  \n    }\n\n    var parentContainerBarcode = ( \n      <div className=\"item\">\n        <div className='field'>\n          Parent Container\n          <div className='value'>\n            {parentContainerBarcodeValue ? parentContainerBarcodeValue : 'None'}\n          </div>\n          {(parentContainerBarcodeValue && this.state.Data.container.coordinate) ? 'Coordinate '+this.state.Data.container.coordinate : null}\n        </div>\n        <div className='action'>\n          <FormModal\n            title='Update Parent Container'\n            buttonContent={\n              <div>\n                Move\n                <span\n                  className='glyphicon glyphicon-chevron-right'\n                  style={{marginLeft: '5px'}}\n                />  \n              </div>\n            }   \n          >   \n            <ContainerParentForm\n              containersNonPrimary={this.state.Data.containersNonPrimary}\n              containerDimensions={this.state.Data.containerDimensions}\n              containerCoordinates={this.state.Data.containerCoordinates}\n              container={this.state.Data.container}\n              action={`${loris.BaseURL}/biobank/ajax/ContainerInfo.php?action=updateContainerParent`}\n              refreshParent={this.fetchSpecimenData}\n            />\n          </FormModal>\n        </div>\n      </div>\n    );\n\n    /**\n     * Specimen Form\n     */\n    let addAliquotButton;\n\n    if (loris.userHasPermission('biobank_write')) {\n      /**\n       * Map Options for Form Select Elements\n       */      \n      let specimenTypes = {};\n      //produces options conditionally based on the parentId of the specimen\n      for (let id in this.state.Data.specimenTypes) {\n        // if parentTypeId is equal to typeId\n        if ((this.state.Data.specimenTypes[id].parentTypeId == this.state.Data.specimen.typeId) || \n                                                    (id == this.state.Data.specimen.typeId)) {\n          specimenTypes[id] = this.state.Data.specimenTypes[id]['type'];\n        }\n      }\n\n      let specimenUnits = this.mapFormOptions(this.state.Data.specimenUnits, 'unit');\n      let containerTypesPrimary = this.mapFormOptions(this.state.Data.containerTypesPrimary, 'label');\n\n      let addAliquotButtonContent = (\n        <div className='specimen-button'>\n          <span\n            className='glyphicon glyphicon-plus'\n            style={{marginRight: '5px'}}\n          />  \n          Aliquots\n        </div>\n      );\n\n      addAliquotButton = (\n        <FormModal\n          title='Create Specimen Aliquots'\n          buttonClass='btn btn-success'\n          buttonStyle={{display:'flex', alignItems:'center'}}\n          buttonContent={addAliquotButtonContent}\n        >\n          <BiobankSpecimenForm\n            action={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=submitSpecimen`}\n            child='true'\n            specimenId={this.state.Data.specimen.id}\n            barcode={this.state.Data.container.barcode}\n            candidateId={this.state.Data.specimen.candidateId}\n            sessionId={this.state.Data.specimen.sessionId} \n            pscid={this.state.Data.candidateInfo[this.state.Data.specimen.candidateId].PSCID}\n            visit={this.state.Data.sessionInfo[this.state.Data.specimen.sessionId].Visit_label}\n            unitId={this.state.Data.specimen.unitId}\n            specimenTypes={specimenTypes}\n            specimenTypeUnits={this.state.Data.specimenTypeUnits}\n            specimenUnits = {specimenUnits}\n            containerTypesPrimary={containerTypesPrimary}\n            containersNonPrimary={this.state.Data.containersNonPrimary}\n            containerDimensions={this.state.Data.containerDimensions}\n            containerCoordinates={this.state.Data.containerCoordinates}\n            specimenTypeAttributes={this.state.Data.specimenTypeAttributes}\n            attributeDatatypes={this.state.Data.attributeDatatypes}\n            refreshParent={this.fetchSpecimenData}\n          />\n        </FormModal>\n      );\n    }\n   \n\n    /** \n     * Collection Form\n     */\n\n    // Declare Variables\n    let collectionPanel;\n    let collectionPanelForm;\n    let cancelEditCollectionButton;\n\n    if (this.state.editCollection) {\n\n      //Map Options for Form Select Elements\n      let specimenTypes = {};\n      //produces options conditionally based on the parentId of the specimen\n      for (var id in this.state.Data.specimenTypes) {\n        // if specimen type has a parent type\n        if (this.state.Data.specimenTypes[this.state.Data.specimen.typeId].parentTypeId) {\n          if (this.state.Data.specimenTypes[id].parentTypeId == this.state.Data.specimenTypes[this.state.Data.specimen.typeId].parentTypeId\n             || id == this.state.Data.specimen.typeId) {\n            specimenTypes[id] = this.state.Data.specimenTypes[id]['type'];\n          }\n        // else if specimen type has no parent type\n        } else {\n          if (!this.state.Data.specimenTypes[id].parentTypeId) {\n            specimenTypes[id] = this.state.Data.specimenTypes[id]['type'];\n          }\n        }\n      }\n\n      let containerTypesPrimary = this.mapFormOptions(this.state.Data.containerTypesPrimary, 'label');\n\n      collectionPanelForm = (\n        <SpecimenCollectionForm\n          specimenId={this.state.Data.specimen.id}\n          specimenType={this.state.Data.specimen.typeId}\n          containerId={this.state.Data.container.id}\n          containerType={this.state.Data.container.typeId}\n          collection={this.state.Data.specimen.collection}\n          specimenTypes={specimenTypes}\n          specimenTypeAttributes={this.state.Data.specimenTypeAttributes}\n          attributeDatatypes={this.state.Data.attributeDatatypes}\n          containerTypesPrimary={containerTypesPrimary}\n          specimenTypeUnits={this.state.Data.specimenTypeUnits}\n          edit={true}\n          action={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=updateSpecimenCollection`}\n          toggleEdit={this.toggleEditCollection}\n          refreshParent={this.updateCollection}\n        />\n      );\n\n      cancelEditCollectionButton = (\n        <a className=\"pull-right\" style={{cursor:'pointer'}} onClick={this.toggleEditCollection}>Cancel</a>\n      );\n\n    } else {\n\n      //loops through data object to produce static elements\n      if (this.state.Data.specimen.collection.data) {\n        var dataObject = this.state.Data.specimen.collection.data;\n        var specimenTypeAttributes = Object.keys(dataObject).map((key) => {\n          return (\n            <StaticElement\n              label={this.state.Data.specimenTypeAttributes[this.state.Data.specimen.typeId][key].name}\n              text={dataObject[key]}\n            />\n          );\n        })\n      }\n\n      collectionPanelForm = (\n          <FormElement>\n            <StaticElement\n              label='Container Type'\n              text={this.state.Data.containerTypesPrimary[this.state.Data.container.typeId].label}\n            />\n            <StaticElement\n              label='Quantity'\n              text={this.state.Data.specimen.collection.quantity+' '+this.state.Data.specimenUnits[this.state.Data.specimen.collection.unitId].unit}\n            />\n            <StaticElement\n              label='Location'\n              text={this.state.Data.sites[this.state.Data.specimen.collection.locationId]}\n            />\n\t        {specimenTypeAttributes}\n            <StaticElement\n              label='Date'\n              text={this.state.Data.specimen.collection.date}\n            />\n            <StaticElement\n              label='Time'\n              text={this.state.Data.specimen.collection.time}\n            />\n            <StaticElement\n              label='Comments'\n              text={this.state.Data.specimen.collection.comments}\n            />\n          </FormElement>\n      );\n    }\n\n    collectionPanel = (\n\t  <div className='panel panel-default'>\n        <div className='panel-heading'>\n          <div className='lifecycle-node' id='panel-collection-node'>\n            <div className='letter'>C</div>\n          </div>\n          <div className='title'>\n            Collection\n          </div>\n          <span \n            className={this.state.editCollection ? null : 'glyphicon glyphicon-pencil'}\n            onClick={this.state.editCollection ? null : this.toggleEditCollection}\n          />\n        </div>\n        <div className='panel-body'>\n          {collectionPanelForm}\n          {cancelEditCollectionButton}\n        </div>\n\t  </div>\n    );\n\n    /*\n     * Preparation Form\n     */\n    \n    // Preparation Panel variable declaration\n    let preparationPanel;\n    let preparationForm;\n    let specimenProtocolAttributes;\n    let cancelEditPreparationButton;\n\n    // If the form is an edit state\n    if (this.state.editPreparation) {\n      //Map Options for Form Select Elements Here\n      specimenProtocolAttributes = this.state.Data.specimenProtocolAttributes[this.state.Data.specimen.typeId];\n\n      //This remaps specimen Protocols based on the specimen Type\n      //this may need to be refactored or put into a function later\n      let specimenProtocols = {};\n      for (var id in specimenProtocolAttributes) {\n        specimenProtocols[id] = this.state.Data.specimenProtocols[id];\n      }\n\n      specimenProtocols = this.mapFormOptions(specimenProtocols, 'protocol');\n \n      preparationForm = (\n        <SpecimenPreparationForm\n          specimenId={this.state.Data.specimen.id}\n          preparation={this.state.Data.specimen.preparation ? this.state.Data.specimen.preparation : null}\n          specimenProtocols={specimenProtocols}\n          sites={this.state.Data.sites}\n          specimenProtocolAttributes={specimenProtocolAttributes}\n          attributeDatatypes={this.state.Data.attributeDatatypes}\n          insertAction={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=insertSpecimenPreparation`}\n          updateAction={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=updateSpecimenPreparation`}\n          refreshParent={this.updatePreparation}\n        />\n      );\n\n      cancelEditPreparationButton = (\n        <a className=\"pull-right\" style={{cursor:'pointer'}} onClick={this.toggleEditPreparation}>Cancel</a>\n      );\n    }\n\n    // If Preparation Does Exist and the form is not in an edit state\n    if (this.state.Data.specimen.preparation && !this.state.editPreparation) {\n      var dataObject = this.state.Data.specimen.preparation.data;\n      \n      if (dataObject) {\n        specimenProtocolAttributes = Object.keys(dataObject).map((key) => {\n          return (\n            <StaticElement\n              label={this.state.Data.specimenProtocolAttributes[this.state.Data.specimen.typeId][this.state.Data.specimen.preparation.protocolId][key].name}\n              text={dataObject[key]}\n            />\n          );\n        })\n      }\n\n      preparationForm = (\n        <FormElement>\n          <StaticElement\n            label='Protocol'\n            text={this.state.Data.specimenProtocols[this.state.Data.specimen.preparation.protocolId].protocol}\n          />\n          <StaticElement\n            label='Location'\n            text={this.state.Data.sites[this.state.Data.specimen.preparation.locationId]}\n          />\n          {specimenProtocolAttributes}\n          <StaticElement\n            label='Date'\n            text={this.state.Data.specimen.preparation.date}\n          />\n          <StaticElement\n            label='Time'\n            text={this.state.Data.specimen.preparation.time}\n          />\n          <StaticElement\n            label='Comments'\n            text={this.state.Data.specimen.preparation.comments}\n          />\n        </FormElement>\n      );\n    }\n\n    // If preparation does not exist and if the form is not in an edit state\n    // and a preparation protocol exists for this specimen type\n    if (this.state.Data.specimenProtocolAttributes[this.state.Data.specimen.typeId] && \n        !this.state.Data.specimen.preparation && !this.state.editPreparation) {\n      preparationPanel = (\n        <div\n          className='panel inactive'\n        >\n          <div\n            className='add-process'\n            onClick={this.toggleEditPreparation}\n          >\n            <span className='glyphicon glyphicon-plus'/>\n          </div>\n          <div>\n          ADD PREPARATION\n          </div>\n        </div>\n      );\n\n    } else if (this.state.Data.specimen.preparation || this.state.editPreparation) {\n      preparationPanel = (\n        <div className='panel panel-default'>\n          <div className='panel-heading'>\n            <div className='lifecycle-node'>\n              <div className='letter'>P</div>\n            </div>\n            <div className='title'>\n              Preparation\n            </div>\n            <span \n              className={this.state.editPreparation ? null : 'glyphicon glyphicon-pencil'}\n              onClick={this.state.editPreparation ? null : this.toggleEditPreparation}\n            />\n          </div>\n          <div className='panel-body'>\n            {preparationForm}\n            {cancelEditPreparationButton}\n          </div>\n        </div>\n      );\n    }\n\n\n    /**\n     * Analysis Form\n     */\n    let analysisPanel;\n    analysisPanel = (\n\t  <div\n        className='panel inactive'\n\t  >\n        <div\n          className='add-process'\n        >\n          <span className='glyphicon glyphicon-plus'/>\n        </div>\n        <div>\n        ADD ANALYSIS\n        </div>\n      </div>\n    );\n\n    // This should eventually go into its own component \n    let globals = (\n      <div className='globals'>\n        <div className='list'>\n          <div className='item'>\n            <div className='field'>\n              Type\n              <div className='value'>\n                {this.state.Data.specimenTypes[this.state.Data.specimen.typeId].type}\n              </div>\n            </div>\n          </div>\n          <div className=\"item\">\n            <div className='field'>\n              Quantity\n              <div className='value'>\n                {this.state.Data.specimen.quantity}\n                {' '+this.state.Data.specimenUnits[this.state.Data.specimen.unitId].unit}\n              </div>\n            </div>\n            <div className='action'>\n              <FormModal\n                title='Update'\n                buttonContent={\n                  <div>\n                    Update\n                    <span\n                      className='glyphicon glyphicon-chevron-right'\n                      style={{marginLeft: '5px'}}\n                    />  \n                  </div>\n                }\n              />\n            </div>\n          </div>\n          <div className=\"item\">\n            <div className='field'>\n              Status\n              <div className='value'>\n                {this.state.Data.containerStati[this.state.Data.container.statusId].status}\n              </div>\n            </div>\n            <div className='action'>\n              <FormModal\n                title='Update'\n                buttonContent={\n                  <div>\n                    Update\n                    <span\n                      className='glyphicon glyphicon-chevron-right'\n                      style={{marginLeft: '5px'}}\n                    />  \n                  </div>\n                }\n              />\n            </div>\n          </div>\n          <div className=\"item\">\n            <div className='field'>\n              Location\n              <div className='value'>\n                {this.state.Data.sites[this.state.Data.container.locationId]}\n              </div>\n            </div>\n            <div className='action'>\n              <FormModal\n                title='Ship'\n                buttonContent={\n                  <div>\n                    Ship\n                    <span\n                      className='glyphicon glyphicon-chevron-right'\n                      style={{marginLeft: '5px'}}\n                    />  \n                  </div>\n                }\n              />\n            </div>\n          </div>\n          {parentSpecimenBarcode}\n          {parentContainerBarcode}\n          <div className=\"item\">\n            <div className='field'>\n              PSCID\n              <div className='value'>\n                <a href={loris.BaseURL+'/'+this.state.Data.specimen.candidateId}>\n                  {this.state.Data.candidateInfo[this.state.Data.specimen.candidateId].PSCID}\n                </a>\n              </div>\n            </div>\n          </div>\n          <div className=\"item\">\n            <div className='field'>\n              Visit Label\n              <div className='value'>\n                <a href={loris.BaseURL+'/instrument_list/?candID='+this.state.Data.specimen.candidateId+'&sessionID='+this.state.Data.specimen.sessionId}>\n                  {this.state.Data.sessionInfo[this.state.Data.specimen.sessionId].Visit_label}\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n\n    return (\n      <div id='specimen-page'>\n        <div className=\"specimen-header\">\n          <div className='specimen-title'>\n            <div className='barcode'>\n              Barcode\n              <div className='value'>\n                <strong>{this.state.Data.container.barcode}</strong>\n              </div>\n            </div>\n            {addAliquotButton}\n          </div>\n          <LifeCycle\n            collection={this.state.Data.specimen.collection}\n            preparation={this.state.Data.specimen.preparation}\n            analysis={this.state.Data.specimen.analysis}\n            sites={this.state.Data.sites}\n          />\n        </div>\n        <div className='summary'>\n          {globals}\n          <div className=\"processing\">\n            {collectionPanel}\n            {preparationPanel}\n            {analysisPanel}\n          </div>\n        </div>\n      </div>\n    ); \n  }\n}\n\nBiobankSpecimen.propTypes = {\n  specimenPageDataURL: React.PropTypes.string.isRequired,\n};\n\nvar RBiobankSpecimen = React.createFactory(BiobankSpecimen);\n\nwindow.BiobankSpecimen = BiobankSpecimen;\nwindow.RBiobankSpecimen = RBiobankSpecimen;\n\nexport default BiobankSpecimen;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimen.js","\n/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenPreparationForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {data:{}},\n      currentProtocol: this.props.preparation ? this.props.preparation.protocolId : null,\n      formErrors: {},\n    };\n\n    this.setFormData = this.setFormData.bind(this);\n    this.setSpecimenProtocolFieldFormData = this.setSpecimenProtocolFieldFormData.bind(this);\n    this.getSpecimenProtocolFields = this.getSpecimenProtocolFields.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.savePreparation = this.savePreparation.bind(this);\n  }\n\n  componentDidMount() {\n    let formData = this.state.formData;\n\n    formData['specimenId'] = this.props.specimenId;\n\n    // This for autoloading data and will be used later\n    if (this.props.preparation) {\n      formData['protocolId'] = this.props.preparation.protocolId;\n      formData['locationId'] = this.props.preparation.locationId;\n      formData['date']       = this.props.preparation.date;\n      formData['time']       = this.props.preparation.time;\n      formData['comments']   = this.props.preparation.comments;\n\n      var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.state.currentProtocol];\n      if (specimenProtocolFieldsObject) {\n        var specimenProtocolFields = Object.keys(specimenProtocolFieldsObject).map((attribute) => {\n          formData.data[attribute] = this.props.preparation.data[attribute];\n        });\n      }\n    }\n    this.setState({\n      formData: formData\n    });\n  }\n\n  render() {\n\n    var submitButton;\n    if (!this.props.preparation) {\n      submitButton = (\n        <ButtonElement label=\"Submit\"/>\n      );\n    }\n\n    var updateButton;\n    var locationField;\n    if (this.props.preparation) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n\n      locationField = (\n        <SelectElement\n          name=\"locationId\"\n          label=\"Location\"\n          options={this.props.sites}\n          onUserInput={this.setFormData}\n          required={true}\n          value={this.state.formData.locationId}\n        />\n      );\n    }\n\n  let specimenProtocolFields;\n  if (this.state.currentProtocol) {\n    var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.state.currentProtocol];\n\n    if (specimenProtocolFieldsObject) {\n      specimenProtocolFields = this.getSpecimenProtocolFields(specimenProtocolFieldsObject);\n    }\n  }\n\n    //This will be for default fields, if there are any eventually\n    if (this.state.currentSpecimenProtocol) {\n      preparationFields = (\n        <div>\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"specimenPreparation\"\n        onSubmit={this.handleSave}\n        ref=\"form\"\n      >\n        <SelectElement\n          name=\"protocolId\"\n          label=\"Protocol\"\n          options={this.props.specimenProtocols}\n          onUserInput={this.setFormData}\n          required={true}\n          value={this.state.formData.protocolId}\n        />\n        {locationField}\n        {specimenProtocolFields}\n        <DateElement\n          name=\"date\"\n          label=\"Date\"\n          onUserInput={this.setFormData}\n          required={true}\n          value={this.state.formData.date}\n        />\n        <TimeElement\n          name=\"time\"\n          label=\"Time\"\n          onUserInput={this.setFormData}\n          required={true}\n          value={this.state.formData.time}\n        />\n        <TextareaElement\n          name=\"comments\"\n          label=\"Comments\"\n          onUserInput={this.setFormData}\n          value={this.state.formData.comments}\n        />\n        {submitButton} \n        {updateButton}\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n\n    let formData = this.state.formData;\n\n    if (formElement === \"protocolId\" && value !== \"\") {\n      //This is to eliminate the values for the specimen protocol fields\n      //This could potentially be improved later to retain the values\n      //for the fields that are common accross protocols\n      formData.data = {};\n      this.setState({\n        currentProtocol: value\n      });\n    }\n\n    formData[formElement] = value;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  setSpecimenProtocolFieldFormData(formElement, value) {\n    let formData = this.state.formData;\n    formData.data[formElement] = value;\n  \n    this.setState({\n        formData: formData\n    });\n  }\n\n  // This generates all the form fields for a given specimen protocol\n  getSpecimenProtocolFields(fieldsObject) {\n    var specimenProtocolFields = Object.keys(fieldsObject).map((attribute) => {\n      let datatype = this.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\n      if (datatype === \"text\" || datatype === \"number\") {\n        if (fieldsObject[attribute]['refTableId'] == null) {\n          return (\n            <TextboxElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              onUserInput={this.setSpecimenProtocolFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribute]['required']}\n              value={this.state.formData.data[attribute]}\n              hasError={this.state.formErrors[attribute]}\n              errorMessage={\"This is a \" + datatype + \" field.\"}\n            />\n          );\n        }\n\n        if (fieldsObject[attribute]['refTableId'] !== null) {\n          return (\n            <SelectElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              options=\"\"\n              onUserInput={this.setSpecimenProtocolFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribute]['required']}\n              value={this.state.formData.data[attribute]}\n            />\n          );\n        }\n      }\n\n      if (datatype === \"datetime\") {\n        return (\n          <DateElement\n            name={attribute}\n            label={fieldsObject[attribute]['name']}\n            onUserInput={this.setSpecimenProtocolFieldFormData}\n            ref={attribute}\n            required={fieldsObject[attribute]['required']}\n            value={this.state.formData.data[attribute]}\n          />\n        );\n      }\n\n      if (datatype === \"boolean\") {\n      \n      }\n    })\n\n    return specimenProtocolFields;\n  }\n\n  handleSave(e) {\n    //more things will go here later\n    if (!this.props.preparation) {\n      this.savePreparation(this.props.insertAction)\n    }\n    if (this.props.preparation) {\n      this.savePreparation(this.props.updateAction);\n    }\n  }\n\n  savePreparation(action) {\n    let formData = this.state.formData;\n    formData['data'] = JSON.stringify(formData['data']);\n\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        //Update Parent Specimen Page Here\n        formData.data = JSON.parse(formData.data);\n        this.props.refreshParent();\n        //swal(\"Specimen Preparation Update Successful!\", \"\", \"success\");\n        this.props.onSuccess();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n}\n\nSpecimenPreparationForm.propTypes = {\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n  units: React.PropTypes.object.isRequired,\n}\n\nexport default SpecimenPreparationForm;\n\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/preparationForm.js"],"sourceRoot":""}