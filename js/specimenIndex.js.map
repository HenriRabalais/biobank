{"version":3,"sources":["webpack:///modules/biobank/js/specimenIndex.js","webpack:///webpack/bootstrap f393595e9a1f59c611ef?502e*********","webpack:///./modules/biobank/jsx/specimenIndex.js","webpack:///./modules/biobank/jsx/specimenForm.js?35c0","webpack:///./modules/biobank/jsx/barcodeForm.js?02a4","webpack:///./modules/biobank/jsx/collectionForm.js?e0f7","webpack:///./modules/biobank/jsx/containerParentForm.js?0f0c*","webpack:///./modules/biobank/jsx/containerDisplay.js?4e23*","webpack:///./modules/biobank/jsx/preparationForm.js?0045","webpack:///./jsx/FormModal.js?4a02*","webpack:///./jsx/Modal.js?d3d7*","webpack:///./jsx/Loader.js?06c1*","webpack:///./modules/biobank/jsx/temperatureField.js?6aab","webpack:///./modules/biobank/jsx/lifeCycle.js?5ad9","webpack:///./modules/biobank/jsx/containerCheckout.js?acdc","webpack:///./modules/biobank/jsx/specimen.js","webpack:///./modules/biobank/jsx/quantityField.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_specimen","_specimen2","args","QueryString","get","document","currentScript","src","$","biobankSpecimen","React","createElement","className","specimenPageDataURL","loris","BaseURL","barcode","optionsURL","saveContainer","saveSpecimen","ReactDOM","render","getElementById","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","_barcodeForm","_barcodeForm2","BiobankSpecimenForm","_React$Component","this","_this","getPrototypeOf","state","formData","errorMessage","formErrors","barcodeFormList","1","countBarcodeForms","handleSubmit","bind","validateForm","setFormData","setParentFormData","specimenSubmit","addBarcodeForm","setBarcodeFormData","parentSpecimenIds","candidateId","sessionId","unitId","setState","_this2","barcodeListArray","keys","barcodeForms","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","push","barcodeKey","removeBarcodeForm","copyBarcodeForm","onChange","specimenTypes","containerTypesPrimary","containersNonPrimary","specimenTypeAttributes","attributeDatatypes","attributeOptions","capacities","containerDimensions","containerCoordinates","specimenTypeUnits","units","_iterator","Symbol","iterator","next","done","err","return","globalFields","remainingQuantityFields","StaticElement","label","text","parentSpecimenBarcodes","pscid","visit","TextboxElement","name","onUserInput","required","quantity","SelectElement","options","specimenUnits","emptyOption","SearchableDropdown","pSCIDs","ref","placeHolder","visits","visitLabel","disabled","FormElement","onSubmit","ButtonElement","columnSize","formElement","_this3","test","isNaN","currentContainerType","specimenTypeFieldsObject","currentSpecimenType","map","attribute","datatype","e","preventDefault","formRefs","refs","isValidForm","JSON","stringify","formObj","FormData","append","ajax","type","url","action","data","cache","contentType","processData","xhr","window","XMLHttpRequest","success","refreshParent","swal","onSuccess","error","console","msg","responseJSON","message","requiredFields","field","hasError","forceUpdate","Function","sessionData","barcodeFormData","count","multiplier","nextKey","parse","Component","propTypes","DataURL","PropTypes","string","isRequired","refreshTable","func","_collectionForm","_collectionForm2","SpecimenBarcodeForm","collapsed","copyMultiplier","setChildFormData","toggleCollapse","setCopyMultiplier","copy","addBarcodeFormButton","addBarcodeFormText","copyBarcodeFormButton","copyBarcodeFormText","onClick","min","max","style","width","display","removeBarcodeFormButton","glyphStyle","color","marginLeft","cursor","fontSize","paddingLeft","marginTop","position","right","data-toggle","data-target","stati","collectionFormData","object","_defineProperty","_containerParentForm","_containerParentForm2","SpecimenCollectionForm","edit","specimenType","containerType","setSpecimenTypeFieldFormData","setContainerParentFormData","getSpecimenTypeFields","handleUpdate","updateSpecimen","specimenId","containerId","collection","date","time","comments","rawObject","targetAttribute","containerParentForm","updateButton","unit","specimenTypeFields","specimenFields","DateElement","minYear","maxYear","TimeElement","TextareaElement","title","showCancelButton","confirmButtonText","cancelButtonText","isConfirm","toggleEdit","containerParentFormData","fieldsObject","_$$ajax","_containerDisplay","_containerDisplay2","ContainerParentForm","mapFormOptions","containerDisplay","containerBarcodesNonPrimary","parentContainerField","setContainerData","container","parentContainerId","dimensionId","dimensions","coordinatesTotal","dimension","coordinates","containerTypes","containerStati","select","selectedCoordinate","coordinate","ContainerDisplay","redirectURL","drag","drop","tooltip","types","children","typeId","primary","location","href","dataTransfer","setData","getData","newCoordinate","parseInt","updateParent","column","row","y","x","nodeWidth","nodeStyle","nodeClass","tooltipTitle","dataHtml","dataToggle","dataPlacement","draggable","onDragStart","onDragOver","allowDrop","onDrop","statusId","status","coordinateDisplay","data-html","data-placement","data-original-title","rowHeight","rowStyle","height","SpecimenPreparationForm","currentProtocol","preparation","protocolId","setSpecimenProtocolFieldFormData","getSpecimenProtocolFields","handleSave","savePreparation","locationId","specimenProtocolFieldsObject","specimenProtocolAttributes","submitButton","locationField","sites","specimenProtocolFields","currentSpecimenProtocol","preparationFields","specimenProtocols","insertAction","updateAction","log","_extends","assign","arguments","source","hasOwnProperty","_Modal","_Modal2","FormModal","show","throwWarning","openModal","closeModal","confirmClose","setWarning","Children","child","cloneElement","renderChildren","buttonClass","buttonStyle","buttonContent","defaultProps","Modal","modal","backdropStyle","zIndex","top","bottom","left","backgroundColor","padding","modalStyle","maxWidth","maxHeight","margin","borderRadius","overflowY","titleStyle","flexDirection","alignItems","background","borderTopRightRadius","bodyStyle","button","stopPropagation","boolean","Loader","TemperatureField","apply","labelClass","inputClass","temperature","toggle","LifeCycle","css","border","box-shadow","collectionNode","collectionTooltip","onMouseEnter","mouseOver","onMouseLeave","mouseLeave","preparationNode","mouseOverPreparation","mouseLeavePreparation","analysisNode","analysis","line","ContainerCheckout","checkoutContainer","checkoutButton","_preparationForm","_preparationForm2","_FormModal","_FormModal2","_Loader","_Loader2","_specimenForm","_specimenForm2","_lifeCycle","_lifeCycle2","_containerCheckout","_containerCheckout2","_temperatureField","_temperatureField2","_quantityField","_quantityField2","BiobankSpecimen","isLoaded","loadedData","editTemperature","editQuantity","editCollection","editPreparation","fetchSpecimenData","fetchOptions","setSpecimenData","updateCollection","updatePreparation","dataType","specimen","errorCode","errorMsg","containerObj","specimenObj","stateKey","stateValue","parentSpecimenBarcodeValue","parentSpecimenBarcode","specimenURL","parentContainerBarcodeValue","parentContainer","containerURL","parentContainerBarcode","addAliquotForm","userHasPermission","parentTypeId","addAliquotButtonContent","candidate","PSCID","session","Visit_label","collectionPanel","collectionPanelForm","cancelEditCollectionButton","dataObject","preparationPanel","preparationForm","cancelEditPreparationButton","protocol","analysisPanel","temperatureField","toggleEditTemperature","quantityField","globals","RBiobankSpecimen","createFactory","QuantityField"],"mappings":"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","file":"./modules/biobank/js/specimenIndex.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _specimen = __webpack_require__(23);\n\t\n\tvar _specimen2 = _interopRequireDefault(_specimen);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar args = QueryString.get(document.currentScript.src); /* global ReactDOM */\n\t\n\t$(function () {\n\t  var biobankSpecimen = React.createElement(\n\t    \"div\",\n\t    { className: \"page-specimen-form\" },\n\t    React.createElement(\n\t      \"div\",\n\t      { className: \"row\" },\n\t      React.createElement(\n\t        \"div\",\n\t        { className: \"col-md-9 col-lg-12\" },\n\t        React.createElement(_specimen2.default, {\n\t          specimenPageDataURL: loris.BaseURL + \"/biobank/ajax/requestData.php?action=getSpecimenData&barcode=\" + args.barcode,\n\t          optionsURL: loris.BaseURL + \"/biobank/ajax/requestData.php?action=getFormOptions\",\n\t          saveContainer: loris.BaseURL + \"/biobank/ajax/submitData.php?action=saveContainer\",\n\t          saveSpecimen: loris.BaseURL + \"/biobank/ajax/submitData.php?action=saveSpecimen\"\n\t        })\n\t      )\n\t    )\n\t  );\n\t\n\t  ReactDOM.render(biobankSpecimen, document.getElementById(\"lorisworkspace\"));\n\t});\n\n/***/ },\n/* 1 */,\n/* 2 */,\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _barcodeForm = __webpack_require__(4);\n\t\n\tvar _barcodeForm2 = _interopRequireDefault(_barcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankSpecimenForm = function (_React$Component) {\n\t  _inherits(BiobankSpecimenForm, _React$Component);\n\t\n\t  function BiobankSpecimenForm(props) {\n\t    _classCallCheck(this, BiobankSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimenForm.__proto__ || Object.getPrototypeOf(BiobankSpecimenForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      errorMessage: null,\n\t      formErrors: {},\n\t      barcodeFormList: { 1: {} },\n\t      countBarcodeForms: 1\n\t    };\n\t\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    _this.validateForm = _this.validateForm.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    _this.specimenSubmit = _this.specimenSubmit.bind(_this);\n\t    _this.addBarcodeForm = _this.addBarcodeForm.bind(_this);\n\t    _this.setBarcodeFormData = _this.setBarcodeFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimenForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t\n\t      // Sets formData to formData passed from parent component\n\t      // or else it is set to an empty object\n\t      // TODO: this should be moved to the constructor.\n\t      var formData = this.props.formData || this.state.formData;\n\t\n\t      //if this is a child specimen form then certain formData is set when component mount\n\t      //TODO: there is a better way of doing this.\n\t      //This solution assumes too much about the props being passed\n\t      if (this.props.parentSpecimenIds) {\n\t        formData['parentSpecimenIds'] = this.props.parentSpecimenIds;\n\t        formData['pscid'] = this.props.candidateId;\n\t        formData['visitLabel'] = this.props.sessionId;\n\t        formData['unitId'] = this.props.unitId;\n\t      }\n\t\n\t      this.setState({ formData: formData });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n\t      var barcodeListArray = Object.keys(this.state.barcodeFormList);\n\t      var barcodeForms = [];\n\t      var i = 1;\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        var _loop = function _loop() {\n\t          var key = _step.value;\n\t\n\t          barcodeForms.push(React.createElement(_barcodeForm2.default, {\n\t            key: key,\n\t            barcodeKey: key,\n\t            id: i,\n\t            formData: _this2.state.barcodeFormList[key] ? _this2.state.barcodeFormList[key] : null,\n\t            removeBarcodeForm: barcodeListArray.length !== 1 ? function () {\n\t              return _this2.removeBarcodeForm(key);\n\t            } : null,\n\t            addBarcodeForm: i == barcodeListArray.length ? _this2.addBarcodeForm : null,\n\t            copyBarcodeForm: i == barcodeListArray.length && _this2.state.barcodeFormList[key] ? _this2.copyBarcodeForm.bind(_this2, key) : null,\n\t            setParentFormData: _this2.setBarcodeFormData,\n\t            onChange: _this2.props.onChange,\n\t            specimenTypes: _this2.props.specimenTypes,\n\t            containerTypesPrimary: _this2.props.containerTypesPrimary,\n\t            containersNonPrimary: _this2.props.containersNonPrimary,\n\t            specimenTypeAttributes: _this2.props.specimenTypeAttributes,\n\t            attributeDatatypes: _this2.props.attributeDatatypes,\n\t            attributeOptions: _this2.props.attributeOptions,\n\t            capacities: _this2.props.capacities,\n\t            containerDimensions: _this2.props.containerDimensions,\n\t            containerCoordinates: _this2.props.containerCoordinates,\n\t            specimenTypeUnits: _this2.props.specimenTypeUnits,\n\t            units: _this2.props.units\n\t          }));\n\t\n\t          i++;\n\t        };\n\t\n\t        for (var _iterator = barcodeListArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          _loop();\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t\n\t      var globalFields = void 0;\n\t      var remainingQuantityFields = void 0;\n\t      if (this.props.parentSpecimenIds) {\n\t        globalFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(StaticElement, {\n\t            label: 'Parent Specimen',\n\t            text: this.props.parentSpecimenBarcodes\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'PSCID',\n\t            text: this.props.pscid\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Visit Label',\n\t            text: this.props.visit\n\t          })\n\t        );\n\t\n\t        //TODO: It may be wise to make unit static and forced, or atleast prepopulated --\n\t        remainingQuantityFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Remaining Quantity',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: this.props.specimenUnits,\n\t            onUserInput: this.setFormData,\n\t            emptyOption: false,\n\t            required: true,\n\t            value: this.state.formData.unitId\n\t          })\n\t        );\n\t      } else {\n\t        globalFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SearchableDropdown, {\n\t            name: 'pscid',\n\t            label: 'PSCID',\n\t            options: this.props.pSCIDs,\n\t            onUserInput: this.setFormData,\n\t            ref: 'pscid',\n\t            required: true,\n\t            value: this.state.formData.pscid,\n\t            placeHolder: 'Search for a PSCID'\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'visitLabel',\n\t            label: 'Visit Label',\n\t            options: this.state.visits,\n\t            onUserInput: this.setFormData,\n\t            ref: 'visitLabel',\n\t            required: true,\n\t            value: this.state.formData.visitLabel,\n\t            disabled: this.state.formData.pscid ? false : true\n\t          })\n\t        );\n\t      }\n\t\n\t      //TODO: {barcodeForms} should eventually be moved to be after {remainingQuantityFields}\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenForm',\n\t          id: 'specimenForm',\n\t          onSubmit: this.handleSubmit,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-9 col-xs-offset-1' },\n\t            globalFields,\n\t            remainingQuantityFields\n\t          )\n\t        ),\n\t        barcodeForms,\n\t        React.createElement(ButtonElement, {\n\t          label: 'Submit',\n\t          columnSize: 'col-sm-2 col-sm-offset-10'\n\t        })\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t    /**\n\t     * Returns a valid name for the file to be specimened\n\t     *\n\t     * @param {string} pscid - PSCID selected from the dropdown\n\t     * @param {string} visitLabel - Visit label selected from the dropdown\n\t     * @param {string} instrument - Instrument selected from the dropdown\n\t     * @return {string} - Generated valid filename for the current selection\n\t     */\n\t    //  getValidFileName(pscid, visitLabel, instrument) {\n\t    //    var fileName = pscid + \"_\" + visitLabel;\n\t    //    if (instrument) fileName += \"_\" + instrument;\n\t    //\n\t    //    return fileName;\n\t    //  }\n\t\n\t\n\t  }, {\n\t    key: 'validateForm',\n\t    value: function validateForm(formElement, value) {\n\t      var _this3 = this;\n\t\n\t      var formErrors = this.state.formErrors;\n\t\n\t      //validate barcode regex\n\t      if (formElement === \"barcode\" && value !== \"\") {\n\t        if (!/^hello/.test(this.state.formData.barcode)) {\n\t          formErrors.barcode = true;\n\t        } else {\n\t          formErrors.barcode = false;\n\t        }\n\t      }\n\t\n\t      //validate that quantity is a number and less than capacity\n\t      if (formElement === \"quantity\" && value !== \"\") {\n\t        if (isNaN(value) || value > this.props.capacities[this.state.currentContainerType]) {\n\t          formErrors.quantity = true;\n\t        } else {\n\t          formErrors.quantity = false;\n\t        }\n\t      }\n\t\n\t      //validate datatypes and regex of generated type attributes\n\t      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t      var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t\n\t        var datatype = _this3.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"number\") {\n\t          if (formElement === attribute) {\n\t            if (isNaN(value) && value !== \"\") {\n\t              formErrors[attribute] = true;\n\t            } else {\n\t              formErrors[attribute] = false;\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      this.setState({\n\t        formErrors: formErrors\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Handle form submission\n\t     * @param {object} e - Form submission event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      var formRefs = this.refs;\n\t      //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\t\n\t      // Validate the form\n\t      if (!this.isValidForm(formRefs, formData)) {\n\t        return;\n\t      }\n\t\n\t      this.specimenSubmit();\n\t    }\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'specimenSubmit',\n\t    value: function specimenSubmit() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n\t      var formObj = new FormData();\n\t      for (var _key in formData) {\n\t        if (formData[_key] !== \"\") {\n\t          formObj.append(_key, formData[_key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t\n\t          this.props.refreshParent();\n\t          swal(\"Specimen Submission Successful!\", \"\", \"success\");\n\t          this.props.onSuccess();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Validate the form\n\t     *\n\t     * @param {object} formRefs - Object containing references to React form elements\n\t     * @param {object} formData - Object containing form data inputed by user\n\t     * @return {boolean} - true if all required fields are filled, false otherwise\n\t     */\n\t    //TODO: check media for the basis for validation\n\t\n\t  }, {\n\t    key: 'isValidForm',\n\t    value: function isValidForm(formRefs, formData) {\n\t      var isValidForm = true;\n\t\n\t      var requiredFields = {\n\t        pscid: null,\n\t        visitLabel: null\n\t      };\n\t\n\t      Object.keys(requiredFields).map(function (field) {\n\t        if (formData[field]) {\n\t          requiredFields[field] = formData[field];\n\t        } else if (formRefs[field]) {\n\t          formRefs[field].props.hasError = true;\n\t          isValidForm = false;\n\t        }\n\t      });\n\t      this.forceUpdate();\n\t\n\t      return isValidForm;\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      // This lets the modal window know that there is formData\n\t      // and will cause a warning to be thrown of the modal window\n\t      // is exited\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t\n\t      if (formElement === \"pscid\" && value !== \"\" && value !== undefined) {\n\t        this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n\t      }\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({ formData: formData }, this.setParentFormData());\n\t    }\n\t  }, {\n\t    key: 'setBarcodeFormData',\n\t    value: function setBarcodeFormData(barcodeFormData, barcodeKey) {\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      barcodeFormList[barcodeKey] = barcodeFormData;\n\t      formData['barcodeFormList'] = barcodeFormList;\n\t\n\t      this.setState({ formData: formData }, this.setParentFormData());\n\t    }\n\t  }, {\n\t    key: 'addBarcodeForm',\n\t    value: function addBarcodeForm() {\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      var count = this.state.countBarcodeForms;\n\t\n\t      barcodeFormList[count + 1] = {};\n\t\n\t      this.setState({\n\t        barcodeFormList: barcodeFormList,\n\t        countBarcodeForms: count + 1\n\t      });\n\t    }\n\t  }, {\n\t    key: 'copyBarcodeForm',\n\t    value: function copyBarcodeForm(key, multiplier) {\n\t      var count = this.state.countBarcodeForms;\n\t      var nextKey = count + 1;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t\n\t      for (var i = 1; i <= multiplier; i++) {\n\t        barcodeFormList[nextKey] = JSON.parse(JSON.stringify(barcodeFormList[key]));\n\t        delete barcodeFormList[nextKey].barcode;\n\t        nextKey++;\n\t      }\n\t\n\t      this.setState({\n\t        barcodeFormList: barcodeFormList,\n\t        countBarcodeForms: nextKey\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removeBarcodeForm',\n\t    value: function removeBarcodeForm(key) {\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      delete barcodeFormList[key];\n\t\n\t      this.setState({\n\t        barcodeFormList: barcodeFormList\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      if (this.props.setParentFormData) {\n\t        var formData = this.state.formData;\n\t        this.props.setParentFormData(formData);\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimenForm;\n\t}(React.Component);\n\t\n\tBiobankSpecimenForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired,\n\t  barcode: React.PropTypes.string,\n\t  refreshTable: React.PropTypes.func\n\t};\n\t\n\texports.default = BiobankSpecimenForm;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _collectionForm = __webpack_require__(5);\n\t\n\tvar _collectionForm2 = _interopRequireDefault(_collectionForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Barcode Form\n\t *\n\t * Acts a subform for BiobankSpecimenForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenBarcodeForm = function (_React$Component) {\n\t  _inherits(SpecimenBarcodeForm, _React$Component);\n\t\n\t  function SpecimenBarcodeForm(props) {\n\t    _classCallCheck(this, SpecimenBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenBarcodeForm.__proto__ || Object.getPrototypeOf(SpecimenBarcodeForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      formErrors: {},\n\t      collapsed: true,\n\t      copyMultiplier: 1\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setChildFormData = _this.setChildFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    _this.toggleCollapse = _this.toggleCollapse.bind(_this);\n\t    _this.setCopyMultiplier = _this.setCopyMultiplier.bind(_this);\n\t    _this.copy = _this.copy.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenBarcodeForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      if (this.props.formData) {\n\t        var formData = this.props.formData;\n\t\n\t        this.setState({\n\t          formData: formData\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'toggleCollapse',\n\t    value: function toggleCollapse() {\n\t      this.setState({ collapsed: !this.state.collapsed });\n\t    }\n\t  }, {\n\t    key: 'setCopyMultiplier',\n\t    value: function setCopyMultiplier(e) {\n\t      var copyMultiplier = e.target.value;\n\t\n\t      this.setState({\n\t        copyMultiplier: copyMultiplier\n\t      });\n\t    }\n\t  }, {\n\t    key: 'copy',\n\t    value: function copy() {\n\t      this.props.copyBarcodeForm(this.state.copyMultiplier);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var addBarcodeFormButton = void 0;\n\t      var addBarcodeFormText = void 0;\n\t      var copyBarcodeFormButton = void 0;\n\t      var copyBarcodeFormText = void 0;\n\t      if (this.props.addBarcodeForm) {\n\t        addBarcodeFormButton = React.createElement(\n\t          'span',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: this.props.addBarcodeForm\n\t            },\n\t            '+'\n\t          )\n\t        );\n\t\n\t        addBarcodeFormText = React.createElement(\n\t          'span',\n\t          { className: 'action-title' },\n\t          'New Entry'\n\t        );\n\t      }\n\t\n\t      if (this.props.copyBarcodeForm) {\n\t        copyBarcodeFormButton = React.createElement(\n\t          'span',\n\t          { className: 'action' },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action-button add',\n\t              onClick: this.copy\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-duplicate' })\n\t          )\n\t        );\n\t        copyBarcodeFormText = React.createElement(\n\t          'span',\n\t          { className: 'action-title' },\n\t          React.createElement('input', {\n\t            className: 'form-control input-sm',\n\t            type: 'number',\n\t            min: '1',\n\t            max: '50',\n\t            style: { width: 50, display: 'inline' },\n\t            onChange: this.setCopyMultiplier,\n\t            value: this.state.copyMultiplier\n\t          }),\n\t          'Copies'\n\t        );\n\t      }\n\t\n\t      var removeBarcodeFormButton = void 0;\n\t      if (this.props.removeBarcodeForm) {\n\t        var glyphStyle = {\n\t          color: '#DDDDDD',\n\t          marginLeft: 10,\n\t          cursor: 'pointer',\n\t          fontSize: 15\n\t        };\n\t\n\t        removeBarcodeFormButton = React.createElement('span', {\n\t          className: 'glyphicon glyphicon-remove',\n\t          onClick: this.props.removeBarcodeForm,\n\t          style: glyphStyle\n\t        });\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankBarcode'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-9 col-xs-offset-1' },\n\t            React.createElement(\n\t              'div',\n\t              null,\n\t              React.createElement(TextboxElement, {\n\t                name: 'barcode',\n\t                label: 'Barcode ' + this.props.id,\n\t                onUserInput: this.setFormData,\n\t                ref: 'barcode',\n\t                required: true,\n\t                value: this.state.formData.barcode\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-1', style: { paddingLeft: 0, marginTop: 10 } },\n\t            React.createElement('span', {\n\t              className: this.state.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up',\n\t              style: { cursor: 'pointer', fontSize: 15, position: 'relative', right: 40 },\n\t              'data-toggle': 'collapse',\n\t              'data-target': '#item-' + this.props.id,\n\t              onClick: this.toggleCollapse\n\t            }),\n\t            removeBarcodeFormButton\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement('div', { className: 'col-xs-2' }),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-8' },\n\t            React.createElement(\n\t              'div',\n\t              { id: 'item-' + this.props.id, className: 'collapse' },\n\t              React.createElement(_collectionForm2.default, {\n\t                formData: this.props.formData,\n\t                setParentFormData: this.setChildFormData,\n\t                onChange: this.props.onChange,\n\t                specimenTypes: this.props.specimenTypes,\n\t                specimenTypeAttributes: this.props.specimenTypeAttributes,\n\t                attributeDatatypes: this.props.attributeDatatypes,\n\t                attributeOptions: this.props.attributeOptions,\n\t                containerTypesPrimary: this.props.containerTypesPrimary,\n\t                containersNonPrimary: this.props.containersNonPrimary,\n\t                containerDimensions: this.props.containerDimensions,\n\t                containerCoordinates: this.props.containerCoordinates,\n\t                specimenTypeUnits: this.props.specimenTypeUnits,\n\t                stati: this.props.stati\n\t              })\n\t            )\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            React.createElement('div', { className: 'col-xs-4' }),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-3 action' },\n\t              addBarcodeFormButton,\n\t              addBarcodeFormText\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'col-xs-3 action' },\n\t              copyBarcodeFormButton,\n\t              copyBarcodeFormText\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setChildFormData',\n\t    value: function setChildFormData(collectionFormData) {\n\t      var formData = this.state.formData;\n\t\n\t      for (var field in collectionFormData) {\n\t        formData[field] = collectionFormData[field];\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      this.props.setParentFormData(this.state.formData, this.props.barcodeKey);\n\t    }\n\t  }]);\n\t\n\t  return SpecimenBarcodeForm;\n\t}(React.Component);\n\t\n\tSpecimenBarcodeForm.propTypes = {\n\t  id: React.PropTypes.string,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = SpecimenBarcodeForm;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _containerParentForm = __webpack_require__(6);\n\t\n\tvar _containerParentForm2 = _interopRequireDefault(_containerParentForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenCollectionForm = function (_React$Component) {\n\t  _inherits(SpecimenCollectionForm, _React$Component);\n\t\n\t  function SpecimenCollectionForm(props) {\n\t    _classCallCheck(this, SpecimenCollectionForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenCollectionForm.__proto__ || Object.getPrototypeOf(SpecimenCollectionForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: { data: {} },\n\t      currentSpecimenType: _this.props.edit ? _this.props.specimenType : null,\n\t      currentContainerType: _this.props.edit ? _this.props.containerType : null\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setSpecimenTypeFieldFormData = _this.setSpecimenTypeFieldFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    _this.setContainerParentFormData = _this.setContainerParentFormData.bind(_this);\n\t    _this.getSpecimenTypeFields = _this.getSpecimenTypeFields.bind(_this);\n\t    _this.handleUpdate = _this.handleUpdate.bind(_this);\n\t    _this.updateSpecimen = _this.updateSpecimen.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenCollectionForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var _this2 = this;\n\t\n\t      var formData = this.state.formData;\n\t\n\t      if (this.props.formData) {\n\t        formData = this.props.formData;\n\t        var currentSpecimenType = this.state.currentSpecimenType;\n\t\n\t        this.setState({\n\t          currentSpecimenType: formData.specimenType\n\t        });\n\t      }\n\t\n\t      if (this.props.edit) {\n\t        formData['specimenId'] = this.props.specimenId;\n\t        formData['containerId'] = this.props.containerId;\n\t        formData['specimenType'] = this.props.specimenType;\n\t        formData['containerType'] = this.props.containerType;\n\t        formData['quantity'] = this.props.collection.quantity;\n\t        formData['unitId'] = this.props.collection.unitId;\n\t        formData['date'] = this.props.collection.date;\n\t        formData['time'] = this.props.collection.time;\n\t        formData['comments'] = this.props.collection.comments;\n\t\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t        if (specimenTypeFieldsObject) {\n\t          var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t            formData.data[attribute] = _this2.props.collection.data[attribute];\n\t          });\n\t        }\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(rawObject, targetAttribute) {\n\t      var data = {};\n\t      for (var id in rawObject) {\n\t        data[id] = rawObject[id][targetAttribute];\n\t      }\n\t\n\t      return data;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var containerParentForm;\n\t      if (!this.props.edit) {\n\t        containerParentForm = React.createElement(_containerParentForm2.default, {\n\t          setParentFormData: this.setContainerParentFormData,\n\t          containersNonPrimary: this.props.containersNonPrimary,\n\t          containerDimensions: this.props.containerDimensions,\n\t          containerCoordinates: this.props.containerCoordinates\n\t        });\n\t      }\n\t\n\t      var updateButton;\n\t      if (this.props.edit) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      }\n\t\n\t      //This block of code should potentially be moved to setFormData();\n\t      //Consider Refactoring...\n\t      var specimenTypeUnits = {};\n\t      if (this.state.currentSpecimenType) {\n\t\n\t        //This modifies the selections for unit drop down based on the chosend specimen type \n\t        for (var id in this.props.specimenTypeUnits[this.state.currentSpecimenType]) {\n\t          specimenTypeUnits[id] = this.props.specimenTypeUnits[this.state.currentSpecimenType][id].unit;\n\t        }\n\t\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t        if (specimenTypeFieldsObject) {\n\t          var specimenTypeFields = this.getSpecimenTypeFields(specimenTypeFieldsObject);\n\t        }\n\t      }\n\t\n\t      var specimenFields;\n\t      if (this.state.currentSpecimenType) {\n\t        specimenFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'containerType',\n\t            label: 'Container Type',\n\t            options: this.props.containerTypesPrimary,\n\t            onUserInput: this.setFormData,\n\t            ref: 'containerType',\n\t            required: true,\n\t            value: this.state.formData.containerType\n\t          }),\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Quantity',\n\t            onUserInput: this.setFormData,\n\t            ref: 'quantity',\n\t            required: true,\n\t            value: this.state.formData.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: specimenTypeUnits,\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.unitId\n\t          }),\n\t          specimenTypeFields,\n\t          React.createElement(DateElement, {\n\t            name: 'date',\n\t            label: 'Date',\n\t            minYear: '2000',\n\t            maxYear: '2018',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.date\n\t          }),\n\t          React.createElement(TimeElement, {\n\t            name: 'time',\n\t            label: 'Time',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.time\n\t          }),\n\t          React.createElement(TextareaElement, {\n\t            name: 'comments',\n\t            label: 'Comments',\n\t            onUserInput: this.setFormData,\n\t            ref: 'comments',\n\t            value: this.state.formData.comments\n\t          }),\n\t          containerParentForm\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankSpecimen',\n\t          onSubmit: this.handleUpdate,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(SelectElement, {\n\t          name: 'specimenType',\n\t          label: 'Specimen Type',\n\t          options: this.props.specimenTypes,\n\t          onUserInput: this.setFormData,\n\t          ref: 'specimenType',\n\t          required: true,\n\t          value: this.state.formData.specimenType\n\t        }),\n\t        specimenFields,\n\t        updateButton\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t\n\t      this.props.onChange instanceof Function && this.props.onChange();\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      if (formElement === \"specimenType\" && value !== \"\") {\n\t        //This throws a warning if the specimen type is changed because of the cascading effects this \n\t        //would cause.\n\t        if (this.props.edit) {\n\t          swal({\n\t            title: \"Warning\",\n\t            text: \"Changing the specimen type will result in the loss of any preparation or anaylsis \" + \"data for this specimen. You will also need to manually change the specimen type of any \" + \"aliquots derived from this specimen. Proceed with caution.\",\n\t            type: \"warning\",\n\t            showCancelButton: true,\n\t            confirmButtonText: 'Cancel Change',\n\t            cancelButtonText: 'Proceed'\n\t          }, function (isConfirm) {\n\t            if (isConfirm) {\n\t              this.props.toggleEdit();\n\t            } else {}\n\t          }.bind(this));\n\t        }\n\t\n\t        //This is to eliminate the values for the specimen type fields\n\t        //TODO: This could potentially be improved later to retain the values\n\t        //for the fields that are common across specimen types\n\t        formData.data = {};\n\t        this.setState({\n\t          currentSpecimenType: value\n\t        });\n\t      }\n\t\n\t      if (formElement === \"containerType\" && value !== \"\") {\n\t        this.setState({\n\t          currentContainerType: value\n\t        });\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setSpecimenTypeFieldFormData',\n\t    value: function setSpecimenTypeFieldFormData(formElement, value) {\n\t      var formData = this.state.formData;\n\t      formData.data[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setContainerParentFormData',\n\t    value: function setContainerParentFormData(containerParentFormData) {\n\t      var formData = this.state.formData;\n\t\n\t      for (var field in containerParentFormData) {\n\t        formData[field] = containerParentFormData[field];\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      // TODO: This should potentially be changed to if (this.props.setParentFormData)\n\t      if (!this.props.edit) {\n\t        var formData = this.state.formData;\n\t        this.props.setParentFormData(formData);\n\t      }\n\t    }\n\t\n\t    // TODO: decouple this code from the preaprationForm by making it a React Component\n\t    // This generates all the form fields for a given specimen type\n\t\n\t  }, {\n\t    key: 'getSpecimenTypeFields',\n\t    value: function getSpecimenTypeFields(fieldsObject) {\n\t      var _this3 = this;\n\t\n\t      var specimenTypeFields = Object.keys(fieldsObject).map(function (attribute) {\n\t        var datatype = _this3.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"text\" || datatype === \"number\") {\n\t\n\t          if (fieldsObject[attribute]['refTableId'] == null) {\n\t            return React.createElement(TextboxElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this3.state.formData.data[attribute]\n\t            });\n\t          }\n\t\n\t          if (fieldsObject[attribute]['refTableId'] !== null) {\n\t            return React.createElement(SelectElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              options: _this3.props.attributeOptions[fieldsObject[attribute]['refTableId']],\n\t              onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this3.state.formData.data[attribute]\n\t            });\n\t          }\n\t        }\n\t\n\t        if (datatype === \"datetime\") {\n\t          return React.createElement(DateElement, {\n\t            name: attribute,\n\t            label: fieldsObject[attribute]['name'],\n\t            onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t            ref: attribute,\n\t            required: fieldsObject[attribute]['required'],\n\t            value: _this3.state.formData.data[attribute]\n\t          });\n\t        }\n\t\n\t        if (datatype === \"boolean\") {\n\t          // There is currently no CheckboxElement or RadioElement in loris/jsx/Form.js and therefore\n\t          // this is not possible.     \n\t        }\n\t      });\n\t\n\t      return specimenTypeFields;\n\t    }\n\t  }, {\n\t    key: 'handleUpdate',\n\t    value: function handleUpdate(e) {\n\t      // TODO: Validate Form Here\n\t\n\t      this.updateSpecimen();\n\t    }\n\t  }, {\n\t    key: 'updateSpecimen',\n\t    value: function updateSpecimen() {\n\t      var _$$ajax;\n\t\n\t      var formData = this.state.formData;\n\t      formData['data'] = JSON.stringify(formData['data']);\n\t\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax((_$$ajax = {\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false\n\t      }, _defineProperty(_$$ajax, 'processData', false), _defineProperty(_$$ajax, 'xhr', function () {\n\t        var xhr = new window.XMLHttpRequest();\n\t        return xhr;\n\t      }.bind(this)), _defineProperty(_$$ajax, 'success', function () {\n\t        //Update Parent Specimen Page Here\n\t        formData.data = JSON.parse(formData.data);\n\t        this.props.refreshParent();\n\t      }.bind(this)), _defineProperty(_$$ajax, 'error', function (err) {\n\t        console.error(err);\n\t        var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t        this.setState({\n\t          errorMessage: msg\n\t        });\n\t        swal(msg, \"\", \"error\");\n\t      }.bind(this)), _$$ajax));\n\t    }\n\t  }]);\n\t\n\t  return SpecimenCollectionForm;\n\t}(React.Component);\n\t\n\tSpecimenCollectionForm.propTypes = {\n\t  setParentFormData: React.PropTypes.func,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = SpecimenCollectionForm;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _containerDisplay = __webpack_require__(7);\n\t\n\tvar _containerDisplay2 = _interopRequireDefault(_containerDisplay);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Biobank Container Parent Form\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Fetches data from Loris backend and displays a form allowing\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * to specimen a biobank file attached to a specific instrument\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Henri Rabalais\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.0.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\tn\t\n\tvar ContainerParentForm = function (_React$Component) {\n\t  _inherits(ContainerParentForm, _React$Component);\n\t\n\t  function ContainerParentForm() {\n\t    _classCallCheck(this, ContainerParentForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ContainerParentForm.__proto__ || Object.getPrototypeOf(ContainerParentForm)).call(this));\n\t\n\t    _this.mapFormOptions = _this.mapFormOptions.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  //map options for forms\n\t\n\t\n\t  _createClass(ContainerParentForm, [{\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(rawObject, targetAttribute) {\n\t      var data = {};\n\t      for (var id in rawObject) {\n\t        data[id] = rawObject[id][targetAttribute];\n\t      }\n\t\n\t      return data;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var containerDisplay = void 0;\n\t      var containerBarcodesNonPrimary = this.mapFormOptions(this.props.containersNonPrimary, 'barcode');\n\t\n\t      var parentContainerField = React.createElement(SelectElement, {\n\t        name: 'parentContainerId',\n\t        label: 'Parent Container Barcode',\n\t        options: containerBarcodesNonPrimary,\n\t        onUserInput: this.props.setContainerData,\n\t        required: true,\n\t        value: this.props.container.parentContainerId\n\t      });\n\t\n\t      // TODO: THIS IS VERY POORLY DONE AND NEEDS REFACTORING\n\t      if (this.props.container.parentContainerId) {\n\t        var dimensionId = this.props.containersNonPrimary[this.props.container.parentContainerId].dimensionId;\n\t\n\t        if (dimensionId) {\n\t          // This will eventually become unecessary\n\t          var dimensions = this.props.containerDimensions[dimensionId];\n\t\n\t          // Total coordinates is determined by the product of the dimensions\n\t          var coordinatesTotal = 1;\n\t          for (var dimension in dimensions) {\n\t            coordinatesTotal = coordinatesTotal * dimensions[dimension];\n\t          }\n\t\n\t          // Mapping of options for the SelectElement\n\t          var coordinates = {};\n\t          for (var i = 1; i <= coordinatesTotal; i++) {\n\t            // If the coordinate is already taken, skip it.\n\t            // this doubling of if statements seems unnecessary\n\t            if (this.props.containerCoordinates[this.props.container.parentContainerId]) {\n\t              if (this.props.containerCoordinates[this.props.container.parentContainerId][i]) {\n\t                continue;\n\t              }\n\t            }\n\t\n\t            coordinates[i] = i;\n\t          }\n\t\n\t          containerDisplay = React.createElement(_containerDisplay2.default, {\n\t            dimensions: this.props.containerDimensions[this.props.containersNonPrimary[this.props.container.parentContainerId].dimensionId],\n\t            coordinates: this.props.containerCoordinates[this.props.container.parentContainerId],\n\t            containerTypes: this.props.containerTypes,\n\t            containerStati: this.props.containerStati,\n\t            select: true,\n\t            selectedCoordinate: this.props.container.coordinate,\n\t            setContainerData: this.props.setContainerData\n\t          });\n\t        }\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          onSubmit: this.props.saveContainer\n\t        },\n\t        parentContainerField,\n\t        containerDisplay,\n\t        React.createElement('br', null),\n\t        React.createElement(ButtonElement, { label: 'Update' })\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return ContainerParentForm;\n\t}(React.Component);\n\t\n\tContainerParentForm.propTypes = {};\n\t\n\texports.default = ContainerParentForm;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * ContainerDisplay\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar ContainerDisplay = function (_React$Component) {\n\t  _inherits(ContainerDisplay, _React$Component);\n\t\n\t  function ContainerDisplay() {\n\t    _classCallCheck(this, ContainerDisplay);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ContainerDisplay.__proto__ || Object.getPrototypeOf(ContainerDisplay)).call(this));\n\t\n\t    _this.redirectURL = _this.redirectURL.bind(_this);\n\t    _this.drag = _this.drag.bind(_this);\n\t    _this.drop = _this.drop.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ContainerDisplay, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      $('[data-toggle=\"tooltip\"]').tooltip();\n\t    }\n\t  }, {\n\t    key: 'componenDidUpdate',\n\t    value: function componenDidUpdate() {\n\t      $('[data-toggle=\"tooltip\"]').tooltip();\n\t    }\n\t  }, {\n\t    key: 'redirectURL',\n\t    value: function redirectURL(e) {\n\t      var coordinate = e.target.id;\n\t      if (this.props.coordinates[coordinate]) {\n\t        var type = this.props.types[this.props.children[this.props.coordinates[coordinate]].typeId].primary ? 'specimen' : 'container';\n\t        var url = loris.BaseURL + '/biobank/' + type + '/?barcode=' + this.props.children[this.props.coordinates[coordinate]].barcode;\n\t\n\t        window.location.href = url;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'allowDrop',\n\t    value: function allowDrop(e) {\n\t      e.preventDefault();\n\t    }\n\t  }, {\n\t    key: 'drag',\n\t    value: function drag(e) {\n\t      var container = JSON.stringify(this.props.children[this.props.coordinates[e.target.id]]);\n\t      e.dataTransfer.setData(\"text/plain\", container);\n\t    }\n\t  }, {\n\t    key: 'drop',\n\t    value: function drop(e) {\n\t      e.preventDefault();\n\t\n\t      var container = e.dataTransfer.getData(\"text/plain\");\n\t      var newCoordinate = parseInt(e.target.id);\n\t\n\t      this.props.updateParent(container, newCoordinate);\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      // This is eventually need to be reworked and cleaned up\n\t      var column = [];\n\t      var row = [];\n\t      var display = void 0;\n\t      var coordinate = 1;\n\t      if (this.props.dimensions) {\n\t        for (var y = 0; y < this.props.dimensions.y; y++) {\n\t          column = [];\n\t          for (var x = 1; x <= this.props.dimensions.x; x++) {\n\t\n\t            var nodeWidth = 500 / this.props.dimensions.x - 500 / this.props.dimensions.x * 0.08;\n\t            var nodeStyle = { width: nodeWidth };\n\t            var nodeClass = 'node';\n\t            var tooltipTitle = null;\n\t            var dataHtml = 'false';\n\t            var dataToggle = null;\n\t            var dataPlacement = null;\n\t            var draggable = 'false';\n\t            var onDragStart = null;\n\t            var onDragOver = this.allowDrop;\n\t            var onDrop = this.drop;\n\t            var onClick = null;\n\t\n\t            if (!this.props.select) {\n\t              // This double if statement doesn't sound great\n\t              if (this.props.coordinates) {\n\t                if (this.props.coordinates[coordinate]) {\n\t                  nodeClass = 'node occupied';\n\t                  dataHtml = 'true';\n\t                  dataToggle = 'tooltip';\n\t                  dataPlacement = 'top';\n\t                  tooltipTitle = '<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + '<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + '<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n\t                  draggable = 'true';\n\t                  onDragStart = this.drag;\n\t                  onDragOver = null;\n\t                  onDrop = null;\n\t                  onClick = this.redirectURL;\n\t                }\n\t              }\n\t            }\n\t\n\t            if (this.props.select) {\n\t              if (coordinate == this.props.selectedCoordinate) {\n\t                nodeClass = 'node occupied';\n\t              } else if (!this.props.coordinates) {\n\t                nodeClass = 'node available';\n\t                onClick = function onClick(e) {\n\t                  return _this2.props.setContainerData('coordinate', e.target.id);\n\t                };\n\t              } else if (this.props.coordinates) {\n\t                if (!this.props.coordinates[coordinate]) {\n\t                  nodeClass = 'node available';\n\t                  onClick = function onClick(e) {\n\t                    return _this2.props.setContainerData('coordinate', e.target.id);\n\t                  };\n\t                } else if (this.props.coordinates[coordinate]) {\n\t                  // TODO: --- This is currently not working ---\n\t                  //  dataHtml = 'true';\n\t                  //  dataToggle = 'tooltip';\n\t                  //  dataPlacement = 'top';\n\t                  //  tooltipTitle = \n\t                  //'<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + \n\t                  //'<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + \n\t                  //'<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n\t                }\n\t              }\n\t            }\n\t\n\t            var coordinateDisplay = void 0;\n\t            if (true) {\n\t              coordinateDisplay = x + this.props.dimensions.x * y;\n\t            } else if (false) {\n\t              coordinateDisplay = String.fromCharCode(65 + y) + '' + x;\n\t            }\n\t\n\t            column.push(React.createElement(\n\t              'div',\n\t              {\n\t                id: coordinate,\n\t                className: nodeClass,\n\t                'data-html': dataHtml,\n\t                'data-toggle': dataToggle,\n\t                'data-placement': dataPlacement,\n\t                'data-original-title': tooltipTitle,\n\t                style: nodeStyle,\n\t                onClick: onClick,\n\t                draggable: draggable,\n\t                onDragStart: onDragStart,\n\t                onDragOver: onDragOver,\n\t                onDrop: onDrop\n\t              },\n\t              coordinateDisplay\n\t            ));\n\t\n\t            coordinate++;\n\t          }\n\t\n\t          var rowHeight = 500 / this.props.dimensions.y - 500 / this.props.dimensions.y * 0.08;\n\t          var rowMargin = 500 / this.props.dimensions.y * 0.04;\n\t          var rowStyle = {\n\t            height: rowHeight\n\t          };\n\t\n\t          row.push(React.createElement(\n\t            'div',\n\t            {\n\t              className: 'row',\n\t              style: rowStyle\n\t            },\n\t            column\n\t          ));\n\t        }\n\t\n\t        display = row;\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { className: 'display' },\n\t        display\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return ContainerDisplay;\n\t}(React.Component);\n\t\n\tContainerDisplay.propTypes = {};\n\t\n\texports.default = ContainerDisplay;\n\n/***/ },\n/* 8 */,\n/* 9 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenPreparationForm = function (_React$Component) {\n\t  _inherits(SpecimenPreparationForm, _React$Component);\n\t\n\t  function SpecimenPreparationForm(props) {\n\t    _classCallCheck(this, SpecimenPreparationForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenPreparationForm.__proto__ || Object.getPrototypeOf(SpecimenPreparationForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: { data: {} },\n\t      currentProtocol: _this.props.preparation ? _this.props.preparation.protocolId : null,\n\t      formErrors: {}\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    _this.setSpecimenProtocolFieldFormData = _this.setSpecimenProtocolFieldFormData.bind(_this);\n\t    _this.getSpecimenProtocolFields = _this.getSpecimenProtocolFields.bind(_this);\n\t    _this.handleSave = _this.handleSave.bind(_this);\n\t    _this.savePreparation = _this.savePreparation.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenPreparationForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var _this2 = this;\n\t\n\t      var formData = this.state.formData;\n\t\n\t      // if (this.props.specimenId) ??\n\t      formData['specimenId'] = this.props.specimenId;\n\t\n\t      //TODO: this is a shitty fix to the problem, do better.\n\t      // Actually, this may be less shitty than I thought\n\t      if (this.props.formData) {\n\t        formData = this.props.formData;\n\t\n\t        var currentProtocol = void 0;\n\t        currentProtocol = this.props.formData.protocolId || null;\n\t        this.setState({ currentProtocol: currentProtocol });\n\t      }\n\t\n\t      // This for autoloading data and will be used later\n\t      if (this.props.preparation) {\n\t        formData['protocolId'] = this.props.preparation.protocolId;\n\t        formData['locationId'] = this.props.preparation.locationId;\n\t        formData['date'] = this.props.preparation.date;\n\t        formData['time'] = this.props.preparation.time;\n\t        formData['comments'] = this.props.preparation.comments;\n\t\n\t        var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.state.currentProtocol];\n\t        if (specimenProtocolFieldsObject) {\n\t          var specimenProtocolFields = Object.keys(specimenProtocolFieldsObject).map(function (attribute) {\n\t            formData.data[attribute] = _this2.props.preparation.data[attribute];\n\t          });\n\t        }\n\t      }\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      var submitButton;\n\t      //TODO: fix this second check (!this.props.specimenId) -- it's not great\n\t      // All it does is signal that we are in the pool specimen form. There must be\n\t      // a better way!!\n\t      if (this.props.preparation || !this.props.specimenId) {\n\t        submitButton = null;\n\t      } else if (!this.props.preparation) {\n\t        submitButton = React.createElement(ButtonElement, { label: 'Submit' });\n\t      }\n\t\n\t      var updateButton;\n\t      var locationField;\n\t      if (this.props.preparation) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t\n\t        locationField = React.createElement(SelectElement, {\n\t          name: 'locationId',\n\t          label: 'Location',\n\t          options: this.props.sites,\n\t          onUserInput: this.setFormData,\n\t          required: true,\n\t          value: this.state.formData.locationId\n\t        });\n\t      }\n\t\n\t      var specimenProtocolFields = void 0;\n\t      if (this.state.currentProtocol) {\n\t        var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.state.currentProtocol];\n\t\n\t        if (specimenProtocolFieldsObject) {\n\t          specimenProtocolFields = this.getSpecimenProtocolFields(specimenProtocolFieldsObject);\n\t        }\n\t      }\n\t\n\t      //This will be for default fields, if there are any eventually\n\t      if (this.state.currentSpecimenProtocol) {\n\t        preparationFields = React.createElement('div', null);\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenPreparation',\n\t          onSubmit: this.handleSave,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(SelectElement, {\n\t          name: 'protocolId',\n\t          label: 'Protocol',\n\t          options: this.props.specimenProtocols,\n\t          onUserInput: this.setFormData,\n\t          required: true,\n\t          value: this.state.formData.protocolId\n\t        }),\n\t        locationField,\n\t        specimenProtocolFields,\n\t        React.createElement(DateElement, {\n\t          name: 'date',\n\t          label: 'Date',\n\t          onUserInput: this.setFormData,\n\t          required: true,\n\t          value: this.state.formData.date\n\t        }),\n\t        React.createElement(TimeElement, {\n\t          name: 'time',\n\t          label: 'Time',\n\t          onUserInput: this.setFormData,\n\t          required: true,\n\t          value: this.state.formData.time\n\t        }),\n\t        React.createElement(TextareaElement, {\n\t          name: 'comments',\n\t          label: 'Comments',\n\t          onUserInput: this.setFormData,\n\t          value: this.state.formData.comments\n\t        }),\n\t        submitButton,\n\t        updateButton\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t\n\t      var formData = this.state.formData;\n\t\n\t      if (formElement === \"protocolId\" && value !== \"\") {\n\t        //This is to eliminate the values for the specimen protocol fields\n\t        //TODO: This could potentially be improved later to retain the values\n\t        //for the fields that are common accross protocols\n\t        formData.data = {};\n\t        this.setState({\n\t          currentProtocol: value\n\t        });\n\t      }\n\t\n\t      formData[formElement] = value;\n\t\n\t      this.setState({ formData: formData }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setSpecimenProtocolFieldFormData',\n\t    value: function setSpecimenProtocolFieldFormData(formElement, value) {\n\t      var formData = this.state.formData;\n\t      formData.data[formElement] = value;\n\t\n\t      this.setState({ formData: formData }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      if (this.props.setParentFormData) {\n\t        var formData = this.state.formData;\n\t        this.props.setParentFormData(formData);\n\t      }\n\t    }\n\t\n\t    // TODO: decouple this code from the collectionForm by make it a React Component\n\t    // This generates all the form fields for a given specimen protocol\n\t\n\t  }, {\n\t    key: 'getSpecimenProtocolFields',\n\t    value: function getSpecimenProtocolFields(fieldsObject) {\n\t      var _this3 = this;\n\t\n\t      var specimenProtocolFields = Object.keys(fieldsObject).map(function (attribute) {\n\t        var datatype = _this3.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\t\n\t        if (datatype === \"text\" || datatype === \"number\") {\n\t          if (fieldsObject[attribute]['refTableId'] == null) {\n\t            return React.createElement(TextboxElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              onUserInput: _this3.setSpecimenProtocolFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this3.state.formData.data[attribute],\n\t              errorMessage: _this3.state.formErrors[attribute] ? 'This is a ' + datatype + ' field.' : null\n\t            });\n\t          }\n\t\n\t          if (fieldsObject[attribute]['refTableId'] !== null) {\n\t            return React.createElement(SelectElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              options: _this3.props.attributeOptions[fieldsObject[attribute]['refTableId']],\n\t              onUserInput: _this3.setSpecimenProtocolFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this3.state.formData.data[attribute]\n\t            });\n\t          }\n\t        }\n\t\n\t        if (datatype === \"datetime\") {\n\t          return React.createElement(DateElement, {\n\t            name: attribute,\n\t            label: fieldsObject[attribute]['name'],\n\t            onUserInput: _this3.setSpecimenProtocolFieldFormData,\n\t            ref: attribute,\n\t            required: fieldsObject[attribute]['required'],\n\t            value: _this3.state.formData.data[attribute]\n\t          });\n\t        }\n\t\n\t        if (datatype === \"boolean\") {}\n\t      });\n\t\n\t      return specimenProtocolFields;\n\t    }\n\t  }, {\n\t    key: 'handleSave',\n\t    value: function handleSave(e) {\n\t      //more things will go here later\n\t      if (!this.props.preparation) {\n\t        this.savePreparation(this.props.insertAction);\n\t      }\n\t      if (this.props.preparation) {\n\t        this.savePreparation(this.props.updateAction);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'savePreparation',\n\t    value: function savePreparation(action) {\n\t      var formData = this.state.formData;\n\t      formData['data'] = JSON.stringify(formData['data']);\n\t\n\t      console.log(formData);\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          //Update Parent Specimen Page Here\n\t          //formData.data = JSON.parse(formData.data);\n\t          this.props.refreshParent();\n\t          //swal(\"Specimen Preparation Update Successful!\", \"\", \"success\");\n\t          //this.props.onSuccess();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return SpecimenPreparationForm;\n\t}(React.Component);\n\t\n\tSpecimenPreparationForm.propTypes = {\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired,\n\t  units: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = SpecimenPreparationForm;\n\n/***/ },\n/* 10 */,\n/* 11 */,\n/* 12 */,\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _Modal = __webpack_require__(14);\n\t\n\tvar _Modal2 = _interopRequireDefault(_Modal);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This file contains React components for Modal component.\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Henri Rabalais\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 1.1.0\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/**\n\t * Modal Component.\n\t * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * =================================================\n\t *\n\t */\n\t\n\tvar FormModal = function (_React$Component) {\n\t  _inherits(FormModal, _React$Component);\n\t\n\t  function FormModal(props) {\n\t    _classCallCheck(this, FormModal);\n\t\n\t    var _this = _possibleConstructorReturn(this, (FormModal.__proto__ || Object.getPrototypeOf(FormModal)).call(this, props));\n\t\n\t    _this.state = { show: false, throwWarning: false };\n\t\n\t    _this.openModal = _this.openModal.bind(_this);\n\t    _this.closeModal = _this.closeModal.bind(_this);\n\t    _this.confirmClose = _this.confirmClose.bind(_this);\n\t    _this.setWarning = _this.setWarning.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(FormModal, [{\n\t    key: \"renderChildren\",\n\t    value: function renderChildren() {\n\t      var _this2 = this;\n\t\n\t      return React.Children.map(this.props.children, function (child) {\n\t        return React.cloneElement(child, { onSuccess: _this2.closeModal, onChange: _this2.setWarning });\n\t      });\n\t    }\n\t  }, {\n\t    key: \"openModal\",\n\t    value: function openModal() {\n\t      this.setState({\n\t        show: true\n\t      });\n\t    }\n\t  }, {\n\t    key: \"setWarning\",\n\t    value: function setWarning() {\n\t      this.setState({\n\t        throwWarning: true\n\t      });\n\t    }\n\t  }, {\n\t    key: \"confirmClose\",\n\t    value: function confirmClose() {\n\t      if (this.state.throwWarning) {\n\t        swal({\n\t          title: \"Are You Sure?\",\n\t          text: \"Leaving the form will result in the loss of any information entered.\",\n\t          type: \"warning\",\n\t          showCancelButton: true,\n\t          confirmButtonText: 'Proceed',\n\t          cancelButtonText: 'Cancel'\n\t        }, function () {\n\t          this.closeModal();\n\t        }.bind(this));\n\t      } else {\n\t        this.closeModal();\n\t      }\n\t    }\n\t  }, {\n\t    key: \"closeModal\",\n\t    value: function closeModal() {\n\t      this.setState({\n\t        show: false,\n\t        throwWarning: false\n\t      });\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      return React.createElement(\n\t        _Modal2.default,\n\t        _extends({\n\t          closeModal: this.confirmClose,\n\t          openModal: this.openModal,\n\t          show: this.state.show\n\t        }, this.props),\n\t        this.renderChildren()\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return FormModal;\n\t}(React.Component);\n\t\n\tFormModal.propTypes = {\n\t  title: React.PropTypes.string,\n\t  buttonClass: React.PropTypes.string,\n\t  buttonStyle: React.PropTypes.object,\n\t  buttonContent: React.PropTypes.object\n\t};\n\tFormModal.defaultProps = {\n\t  buttonClass: 'btn btn-primary'\n\t};\n\t\n\texports.default = FormModal;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Modal component.\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Modal Component.\n\t * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * =================================================\n\t *\n\t */\n\tvar Modal = function (_React$Component) {\n\t  _inherits(Modal, _React$Component);\n\t\n\t  function Modal(props) {\n\t    _classCallCheck(this, Modal);\n\t\n\t    return _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));\n\t  }\n\t\n\t  _createClass(Modal, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      // Black Background with Alpha Channel\n\t      var backdropStyle = {\n\t        position: 'fixed',\n\t        zIndex: 9998,\n\t        top: 0,\n\t        bottom: 0,\n\t        left: 0,\n\t        right: 0,\n\t        backgroundColor: 'rgba(0,0,0,0.3)',\n\t        padding: 50\n\t      };\n\t\n\t      // White Modal Window\n\t      var modalStyle = {\n\t        position: 'relative',\n\t        maxWidth: 1000,\n\t        maxHeight: '100%',\n\t        margin: '0 auto',\n\t        backgroundColor: '#fff',\n\t        borderRadius: 10,\n\t        overflowY: 'auto',\n\t        zIndex: 9999\n\t      };\n\t\n\t      var titleStyle = {\n\t        display: 'flex',\n\t        flexDirection: 'row',\n\t        alignItems: 'center',\n\t        background: '#093782',\n\t        height: '70px',\n\t        borderTopRightRadius: '10',\n\t        color: '#FFFFFF',\n\t        fontSize: 24,\n\t        padding: 20\n\t      };\n\t\n\t      var glyphStyle = {\n\t        marginLeft: 'auto',\n\t        cursor: 'pointer'\n\t      };\n\t\n\t      var bodyStyle = {\n\t        padding: 15\n\t      };\n\t\n\t      var button = React.createElement(\n\t        'div',\n\t        {\n\t          className: this.props.buttonClass,\n\t          onClick: this.props.openModal\n\t        },\n\t        this.props.buttonContent\n\t      );\n\t\n\t      var modal;\n\t      if (this.props.show) {\n\t        modal = React.createElement(\n\t          'div',\n\t          { style: backdropStyle, onClick: this.props.closeModal },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              style: modalStyle,\n\t              onClick: function onClick(e) {\n\t                e.stopPropagation();\n\t              }\n\t            },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                style: titleStyle\n\t              },\n\t              this.props.title,\n\t              React.createElement(\n\t                'span',\n\t                {\n\t                  style: glyphStyle,\n\t                  onClick: this.props.closeModal\n\t                },\n\t                '\\xD7'\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                style: bodyStyle\n\t              },\n\t              this.props.children\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { style: this.props.style },\n\t        button,\n\t        modal\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Modal;\n\t}(React.Component);\n\t\n\tModal.propTypes = {\n\t  title: React.PropTypes.string,\n\t  buttonClass: React.PropTypes.string,\n\t  buttonStyle: React.PropTypes.object,\n\t  buttonContent: React.PropTypes.object,\n\t  show: React.PropTypes.boolean,\n\t  closeModal: React.PropTypes.func,\n\t  openModal: React.PropTypes.func\n\t};\n\tModal.defaultProps = {\n\t  buttonClass: 'btn btn-primary'\n\t};\n\t\n\texports.default = Modal;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Loader\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Loader component\n\t */\n\tvar Loader = function (_React$Component) {\n\t  _inherits(Loader, _React$Component);\n\t\n\t  function Loader(props) {\n\t    _classCallCheck(this, Loader);\n\t\n\t    return _possibleConstructorReturn(this, (Loader.__proto__ || Object.getPrototypeOf(Loader)).call(this, props));\n\t  }\n\t\n\t  _createClass(Loader, [{\n\t    key: \"render\",\n\t    value: function render() {\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"loader-container\" },\n\t        React.createElement(\"div\", { className: \"loader\" })\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Loader;\n\t}(React.Component);\n\t\n\texports.default = Loader;\n\n/***/ },\n/* 16 */,\n/* 17 */,\n/* 18 */,\n/* 19 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Container Temperature Form\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\t\n\tvar TemperatureField = function (_React$Component) {\n\t  _inherits(TemperatureField, _React$Component);\n\t\n\t  function TemperatureField() {\n\t    _classCallCheck(this, TemperatureField);\n\t\n\t    return _possibleConstructorReturn(this, (TemperatureField.__proto__ || Object.getPrototypeOf(TemperatureField)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(TemperatureField, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      return React.createElement(\n\t        'div',\n\t        { className: this.props.className },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-xs-6' },\n\t          React.createElement(TextboxElement, {\n\t            name: 'temperature',\n\t            labelClass: 'col-xl-0',\n\t            inputClass: 'col-lg-12',\n\t            onUserInput: this.props.setContainerData,\n\t            value: this.props.container.temperature\n\t          })\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-xs-3' },\n\t          React.createElement(ButtonElement, {\n\t            label: 'Update',\n\t            onUserInput: this.props.saveContainer,\n\t            columnSize: 'col-lg-12'\n\t          })\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-xs-3' },\n\t          React.createElement(\n\t            'a',\n\t            { onClick: this.props.toggle },\n\t            'Cancel'\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return TemperatureField;\n\t}(React.Component);\n\t\n\tTemperatureField.propTypes = {\n\t  setContainerData: React.PropTypes.func,\n\t  container: React.PropTypes.object,\n\t  saveContainer: React.PropTypes.func,\n\t  className: React.PropTypes.string\n\t};\n\t\n\texports.default = TemperatureField;\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * LifeCycle\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar LifeCycle = function (_React$Component) {\n\t  _inherits(LifeCycle, _React$Component);\n\t\n\t  function LifeCycle(props) {\n\t    _classCallCheck(this, LifeCycle);\n\t\n\t    var _this = _possibleConstructorReturn(this, (LifeCycle.__proto__ || Object.getPrototypeOf(LifeCycle)).call(this, props));\n\t\n\t    _this.state = {};\n\t\n\t    return _this;\n\t  }\n\t\n\t  _createClass(LifeCycle, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {}\n\t  }, {\n\t    key: 'mouseOver',\n\t    value: function mouseOver(e) {\n\t      //this isn't a very 'react' way of doing things, so consider revision\n\t      $('.collection').css({ 'border': '2px solid #093782',\n\t        'box-shadow': '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)' });\n\t    }\n\t  }, {\n\t    key: 'mouseLeave',\n\t    value: function mouseLeave(e) {\n\t      //this isn't a very 'react' way of doing things, so consider revision\n\t      $('.collection').css({ 'border': '2px solid #A6D3F5', 'box-shadow': 'none' });\n\t    }\n\t  }, {\n\t    key: 'mouseOverPreparation',\n\t    value: function mouseOverPreparation(e) {\n\t      //this isn't a very 'react' way of doing things, so consider revision\n\t      $('.preparation').css({ 'border': '2px solid #093782', 'box-shadow': '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)' });\n\t    }\n\t  }, {\n\t    key: 'mouseLeavePreparation',\n\t    value: function mouseLeavePreparation(e) {\n\t      //this isn't a very 'react' way of doing things, so consider revision\n\t      $('.preparation').css({ 'border': '2px solid #A6D3F5', 'box-shadow': 'none' });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      var collectionNode = void 0;\n\t      var collectionTooltip = void 0;\n\t      if (this.props.collection || this.props.container) {\n\t        collectionTooltip = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(\n\t            'h',\n\t            null,\n\t            'Collection'\n\t          ),\n\t          React.createElement(\n\t            'p',\n\t            null,\n\t            'Date:'\n\t          )\n\t        );\n\t\n\t        collectionNode = React.createElement(\n\t          'div',\n\t          {\n\t            onMouseEnter: function onMouseEnter(e) {\n\t              return _this2.mouseOver(e);\n\t            },\n\t            onMouseLeave: function onMouseLeave(e) {\n\t              return _this2.mouseLeave(e);\n\t            },\n\t            className: 'lifecycle-node collection'\n\t          },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'letter' },\n\t            'C'\n\t          )\n\t        );\n\t      }\n\t\n\t      var preparationNode = void 0;\n\t      if (this.props.preparation) {\n\t        preparationNode = React.createElement(\n\t          'div',\n\t          {\n\t            onMouseEnter: this.mouseOverPreparation,\n\t            onMouseLeave: this.mouseLeavePreparation,\n\t            className: 'lifecycle-node preparation'\n\t          },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'letter' },\n\t            'P'\n\t          )\n\t        );\n\t      }\n\t\n\t      var analysisNode = void 0;\n\t      if (this.props.analysis) {\n\t        analysisNode = React.createElement(\n\t          'div',\n\t          { className: 'lifecycle-node-container' },\n\t          React.createElement('div', { className: 'lifecycle-node' }),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'lifecycle-text' },\n\t            'Analysis'\n\t          )\n\t        );\n\t      }\n\t\n\t      var line = void 0;\n\t      line = React.createElement('div', { className: 'lifecycle-line' });\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { className: 'lifecycle' },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'lifecycle-graphic' },\n\t          collectionNode,\n\t          preparationNode ? line : null,\n\t          preparationNode,\n\t          analysisNode\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return LifeCycle;\n\t}(React.Component);\n\t\n\tLifeCycle.propTypes = {};\n\t\n\texports.default = LifeCycle;\n\n/***/ },\n/* 21 */,\n/* 22 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Container Checkout\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\t\n\tvar ContainerCheckout = function (_React$Component) {\n\t  _inherits(ContainerCheckout, _React$Component);\n\t\n\t  function ContainerCheckout(props) {\n\t    _classCallCheck(this, ContainerCheckout);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ContainerCheckout.__proto__ || Object.getPrototypeOf(ContainerCheckout)).call(this, props));\n\t\n\t    _this.checkoutContainer = _this.checkoutContainer.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ContainerCheckout, [{\n\t    key: 'checkoutContainer',\n\t    value: function checkoutContainer() {\n\t      var formData = { 'containerId': this.props.containerId };\n\t      var formObj = new FormData();\n\t      //TODO: this seems to be necessary, however the check could be better.\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t      console.log(formObj);\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: loris.BaseURL + '/biobank/ajax/submitData.php?action=checkoutContainer',\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          this.props.refreshParent();\n\t          swal(\"Container is checked-out!\", \"\", \"success\");\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, '', \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var checkoutButton = null;\n\t      if (this.props.parentContainerId) {\n\t        checkoutButton = React.createElement(\n\t          'div',\n\t          {\n\t            className: 'action-button update',\n\t            'data-toggle': 'tooltip',\n\t            title: 'Checkout Container',\n\t            'data-placement': 'right',\n\t            onClick: this.checkoutContainer\n\t          },\n\t          React.createElement('span', { className: 'glyphicon glyphicon-share' })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        checkoutButton\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return ContainerCheckout;\n\t}(React.Component);\n\t\n\tContainerCheckout.propTypes = {};\n\t\n\texports.default = ContainerCheckout;\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _collectionForm = __webpack_require__(5);\n\t\n\tvar _collectionForm2 = _interopRequireDefault(_collectionForm);\n\t\n\tvar _preparationForm = __webpack_require__(9);\n\t\n\tvar _preparationForm2 = _interopRequireDefault(_preparationForm);\n\t\n\tvar _containerParentForm = __webpack_require__(6);\n\t\n\tvar _containerParentForm2 = _interopRequireDefault(_containerParentForm);\n\t\n\tvar _FormModal = __webpack_require__(13);\n\t\n\tvar _FormModal2 = _interopRequireDefault(_FormModal);\n\t\n\tvar _Loader = __webpack_require__(15);\n\t\n\tvar _Loader2 = _interopRequireDefault(_Loader);\n\t\n\tvar _specimenForm = __webpack_require__(3);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tvar _lifeCycle = __webpack_require__(20);\n\t\n\tvar _lifeCycle2 = _interopRequireDefault(_lifeCycle);\n\t\n\tvar _containerCheckout = __webpack_require__(22);\n\t\n\tvar _containerCheckout2 = _interopRequireDefault(_containerCheckout);\n\t\n\tvar _temperatureField = __webpack_require__(19);\n\t\n\tvar _temperatureField2 = _interopRequireDefault(_temperatureField);\n\t\n\tvar _quantityField = __webpack_require__(24);\n\t\n\tvar _quantityField2 = _interopRequireDefault(_quantityField);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* exported RBiobankSpecimen */\n\t\n\t/**\n\t * Biobank Specimen\n\t *\n\t * Fetches data corresponding to a given Specimen from Loris backend and\n\t * displays a page allowing viewing of meta information of the specimen\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t */\n\tvar BiobankSpecimen = function (_React$Component) {\n\t  _inherits(BiobankSpecimen, _React$Component);\n\t\n\t  function BiobankSpecimen(props) {\n\t    _classCallCheck(this, BiobankSpecimen);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimen.__proto__ || Object.getPrototypeOf(BiobankSpecimen)).call(this, props));\n\t\n\t    _this.state = {\n\t      data: {},\n\t      isLoaded: false,\n\t      loadedData: 0,\n\t      editTemperature: false,\n\t      editQuantity: false,\n\t      editCollection: false,\n\t      editPreparation: false\n\t    };\n\t\n\t    _this.fetchSpecimenData = _this.fetchSpecimenData.bind(_this);\n\t    _this.fetchOptions = _this.fetchOptions.bind(_this);\n\t    _this.toggle = _this.toggle.bind(_this);\n\t    _this.mapFormOptions = _this.mapFormOptions.bind(_this);\n\t    _this.setContainerData = _this.setContainerData.bind(_this);\n\t    _this.setSpecimenData = _this.setSpecimenData.bind(_this);\n\t    _this.updateCollection = _this.updateCollection.bind(_this);\n\t    _this.updatePreparation = _this.updatePreparation.bind(_this);\n\t    _this.saveContainer = _this.saveContainer.bind(_this);\n\t    _this.saveSpecimen = _this.saveSpecimen.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimen, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      this.fetchSpecimenData();\n\t      this.fetchOptions();\n\t\n\t      $('[data-toggle=\"tooltip\"]').tooltip();\n\t    }\n\t  }, {\n\t    key: 'fetchSpecimenData',\n\t    value: function fetchSpecimenData() {\n\t      var self = this;\n\t      $.ajax(this.props.specimenPageDataURL, {\n\t        dataType: 'json',\n\t        success: function success(data) {\n\t          var specimen = JSON.parse(JSON.stringify(data.specimen));\n\t          var container = JSON.parse(JSON.stringify(data.container));\n\t          self.setState({\n\t            data: data,\n\t            container: container,\n\t            specimen: specimen,\n\t            isLoaded: true\n\t          });\n\t        },\n\t        error: function error(_error, errorCode, errorMsg) {\n\t          console.error(_error, errorCode, errorMsg);\n\t          self.setState({\n\t            error: 'An error occurred when loading the form!'\n\t          });\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'fetchOptions',\n\t    value: function fetchOptions() {\n\t      var self = this;\n\t      $.ajax(this.props.optionsURL, {\n\t        dataType: 'json',\n\t        success: function success(data) {\n\t          self.setState({\n\t            options: data\n\t          });\n\t        },\n\t        error: function error(_error2, errorCode, errorMsg) {\n\t          console.error(_error2, errorCode, errorMsg);\n\t          self.setState({\n\t            error: 'An error occurred when loading the form!'\n\t          });\n\t        }\n\t      });\n\t    }\n\t\n\t    //TODO: saveContainer() and saveSpecimen() can be merged into 1 function FOR SURE\n\t\n\t  }, {\n\t    key: 'saveContainer',\n\t    value: function saveContainer() {\n\t      var container = this.state.container;\n\t      var containerObj = new FormData();\n\t      for (var key in container) {\n\t        if (container[key] !== \"\") {\n\t          containerObj.append(key, container[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.saveContainer,\n\t        data: containerObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          var data = this.state.data;\n\t          data.container = JSON.parse(JSON.stringify(this.state.container));\n\t          this.setState({ data: data, editTemperature: false });\n\t          swal(\"Save Successful!\", \"\", \"success\");\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, '', \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t  }, {\n\t    key: 'saveSpecimen',\n\t    value: function saveSpecimen() {\n\t      var specimen = this.state.specimen;\n\t      var specimenObj = new FormData();\n\t      for (var key in specimen) {\n\t        if (specimen[key] !== \"\") {\n\t          specimenObj.append(key, specimen[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.saveSpecimen,\n\t        data: specimenObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          var data = this.state.data;\n\t          data.specimen = JSON.parse(JSON.stringify(this.state.specimen));\n\t          this.setState({ data: data, editQuantity: false });\n\t          swal(\"Save Successful!\", \"\", \"success\");\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, '', \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t  }, {\n\t    key: 'toggle',\n\t    value: function toggle(stateKey) {\n\t      var stateValue = this.state[stateKey];\n\t      this.setState(_defineProperty({}, stateKey, !stateValue));\n\t    }\n\t  }, {\n\t    key: 'updateCollection',\n\t    value: function updateCollection() {\n\t      this.fetchSpecimenData();\n\t      this.toggle('editCollection');\n\t    }\n\t  }, {\n\t    key: 'updatePreparation',\n\t    value: function updatePreparation() {\n\t      this.fetchSpecimenData();\n\t      this.toggle('editPreparation');\n\t    }\n\t\n\t    // TODO: map options for forms - this is used frequently and may need\n\t    // to be moved to a more global place\n\t\n\t  }, {\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(rawObject, targetAttribute) {\n\t      var data = {};\n\t      for (var id in rawObject) {\n\t        data[id] = rawObject[id][targetAttribute];\n\t      }\n\t\n\t      return data;\n\t    }\n\t  }, {\n\t    key: 'setContainerData',\n\t    value: function setContainerData(name, value) {\n\t      var container = this.state.container;\n\t      container[name] = value;\n\t\n\t      this.setState({ container: container });\n\t    }\n\t  }, {\n\t    key: 'setSpecimenData',\n\t    value: function setSpecimenData(name, value) {\n\t      var specimen = this.state.specimen;\n\t      specimen[name] = value;\n\t\n\t      this.setState({ specimen: specimen });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      // Data loading error\n\t      if (this.state.error !== undefined) {\n\t        return React.createElement(\n\t          'div',\n\t          { className: 'alert alert-danger text-center' },\n\t          React.createElement(\n\t            'strong',\n\t            null,\n\t            this.state.error\n\t          )\n\t        );\n\t      }\n\t\n\t      // Waiting for data to load\n\t      if (!this.state.isLoaded) {\n\t        return React.createElement(_Loader2.default, null);\n\t      }\n\t\n\t      // Checks if parent specimen exists \n\t      // If exist: returns Barcode value with href\n\t      // If !exist: returns value 'None'\n\t      var parentSpecimenBarcodeValue = void 0;\n\t      var parentSpecimenBarcode = void 0;\n\t      if (this.state.data.parentSpecimenBarcode) {\n\t        var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\";\n\t        parentSpecimenBarcodeValue = React.createElement(\n\t          'a',\n\t          { href: specimenURL + this.state.data.parentSpecimenBarcode },\n\t          this.state.data.parentSpecimenBarcode\n\t        );\n\t\n\t        parentSpecimenBarcode = React.createElement(\n\t          'div',\n\t          { className: 'item' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'field' },\n\t            'Parent Specimen',\n\t            React.createElement(\n\t              'div',\n\t              { className: 'value' },\n\t              parentSpecimenBarcodeValue ? parentSpecimenBarcodeValue : 'None'\n\t            )\n\t          )\n\t        );\n\t      }\n\t\n\t      // Checks if parent container exists and returns static element with href\n\t      var parentContainerBarcodeValue = void 0;\n\t      if (this.state.data.parentContainer) {\n\t        var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\";\n\t        parentContainerBarcodeValue = React.createElement(\n\t          'a',\n\t          { href: containerURL + this.state.data.parentContainer.barcode },\n\t          this.state.data.parentContainer.barcode\n\t        );\n\t      }\n\t\n\t      var parentContainerBarcode = React.createElement(\n\t        'div',\n\t        { className: 'item' },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'field' },\n\t          'Parent Container',\n\t          React.createElement(\n\t            'div',\n\t            { className: 'value' },\n\t            parentContainerBarcodeValue ? parentContainerBarcodeValue : 'None'\n\t          ),\n\t          parentContainerBarcodeValue && this.state.data.container.coordinate ? 'Coordinate ' + this.state.data.container.coordinate : null\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          {\n\t            className: 'action',\n\t            'data-toggle': 'tooltip',\n\t            title: 'Move Specimen',\n\t            'data-placement': 'right'\n\t          },\n\t          React.createElement(\n\t            _FormModal2.default,\n\t            {\n\t              title: 'Update Parent Container',\n\t              buttonClass: 'action-button update',\n\t              buttonContent: React.createElement('span', {\n\t                className: 'glyphicon glyphicon-chevron-right'\n\t              })\n\t            },\n\t            React.createElement(_containerParentForm2.default, {\n\t              container: this.state.data.container,\n\t              containersNonPrimary: this.state.options.containersNonPrimary,\n\t              containerDimensions: this.state.options.containerDimensions,\n\t              containerCoordinates: this.state.options.containerCoordinates,\n\t              containerTypes: this.state.options.containerTypes,\n\t              containerStati: this.state.options.containerStati,\n\t              action: loris.BaseURL + '/biobank/ajax/submitData.php?action=updateContainerParent',\n\t              refreshParent: this.fetchSpecimenData\n\t            })\n\t          )\n\t        )\n\t      );\n\t\n\t      /**\n\t       * Specimen Form\n\t       */\n\t      var addAliquotForm = void 0;\n\t\n\t      if (loris.userHasPermission('biobank_write')) {\n\t        /**\n\t         * Map Options for Form Select Elements\n\t         */\n\t        var specimenTypes = {};\n\t        //produces options conditionally based on the parentId of the specimen\n\t        for (var _id in this.state.options.specimenTypes) {\n\t          // if parentTypeId is equal to typeId\n\t          if (this.state.options.specimenTypes[_id].parentTypeId == this.state.data.specimen.typeId || _id == this.state.data.specimen.typeId) {\n\t            specimenTypes[_id] = this.state.options.specimenTypes[_id]['type'];\n\t          }\n\t        }\n\t\n\t        var specimenUnits = this.mapFormOptions(this.state.options.specimenUnits, 'unit');\n\t        var containerTypesPrimary = this.mapFormOptions(this.state.options.containerTypesPrimary, 'label');\n\t\n\t        var addAliquotButtonContent = React.createElement(\n\t          'span',\n\t          null,\n\t          '+'\n\t        );\n\t\n\t        addAliquotForm = React.createElement(\n\t          'div',\n\t          { 'data-toggle': 'tooltip', title: 'Make Aliquots', 'data-placement': 'right' },\n\t          React.createElement(\n\t            _FormModal2.default,\n\t            {\n\t              title: 'Add Aliquots',\n\t              buttonClass: 'action-button add',\n\t              buttonContent: addAliquotButtonContent\n\t            },\n\t            React.createElement(_specimenForm2.default, {\n\t              action: loris.BaseURL + '/biobank/ajax/submitData.php?action=submitSpecimen',\n\t              parentSpecimenIds: this.state.data.specimen.id,\n\t              parentSpecimenBarcodes: this.state.data.container.barcode,\n\t              candidateId: this.state.data.specimen.candidateId,\n\t              sessionId: this.state.data.specimen.sessionId,\n\t              pscid: this.state.data.candidate.PSCID,\n\t              visit: this.state.data.session.Visit_label,\n\t              unitId: this.state.data.specimen.unitId,\n\t              specimenTypes: specimenTypes,\n\t              specimenTypeUnits: this.state.options.specimenTypeUnits,\n\t              specimenUnits: specimenUnits,\n\t              containerTypesPrimary: containerTypesPrimary,\n\t              containersNonPrimary: this.state.options.containersNonPrimary,\n\t              containerDimensions: this.state.options.containerDimensions,\n\t              containerCoordinates: this.state.options.containerCoordinates,\n\t              specimenTypeAttributes: this.state.options.specimenTypeAttributes,\n\t              attributeDatatypes: this.state.options.attributeDatatypes,\n\t              attributeOptions: this.state.options.attributeOptions,\n\t              refreshParent: this.fetchSpecimenData\n\t            })\n\t          )\n\t        );\n\t      }\n\t\n\t      /** \n\t       * Collection Form\n\t       */\n\t\n\t      // Declare Variables\n\t      var collectionPanel = void 0;\n\t      var collectionPanelForm = void 0;\n\t      var cancelEditCollectionButton = void 0;\n\t\n\t      if (this.state.editCollection) {\n\t\n\t        //Map Options for Form Select Elements\n\t        var _specimenTypes = {};\n\t        //produces options conditionally based on the parentId of the specimen\n\t        for (var id in this.state.options.specimenTypes) {\n\t          // if specimen type has a parent type\n\t          if (this.state.options.specimenTypes[this.state.data.specimen.typeId].parentTypeId) {\n\t            if (this.state.options.specimenTypes[id].parentTypeId == this.state.options.specimenTypes[this.state.data.specimen.typeId].parentTypeId || id == this.state.data.specimen.typeId) {\n\t              _specimenTypes[id] = this.state.options.specimenTypes[id]['type'];\n\t            }\n\t            // else if specimen type has no parent type\n\t          } else {\n\t            if (!this.state.options.specimenTypes[id].parentTypeId) {\n\t              _specimenTypes[id] = this.state.options.specimenTypes[id]['type'];\n\t            }\n\t          }\n\t        }\n\t\n\t        var _containerTypesPrimary = this.mapFormOptions(this.state.options.containerTypesPrimary, 'label');\n\t\n\t        collectionPanelForm = React.createElement(_collectionForm2.default, {\n\t          specimenId: this.state.data.specimen.id,\n\t          specimenType: this.state.data.specimen.typeId,\n\t          containerId: this.state.data.container.id,\n\t          containerType: this.state.data.container.typeId,\n\t          collection: this.state.data.specimen.collection,\n\t          specimenTypes: _specimenTypes,\n\t          specimenTypeAttributes: this.state.options.specimenTypeAttributes,\n\t          attributeDatatypes: this.state.options.attributeDatatypes,\n\t          attributeOptions: this.state.options.attributeOptions,\n\t          containerTypesPrimary: _containerTypesPrimary,\n\t          specimenTypeUnits: this.state.options.specimenTypeUnits,\n\t          edit: true,\n\t          action: loris.BaseURL + '/biobank/ajax/submitData.php?action=updateSpecimenCollection',\n\t          toggleEdit: function toggleEdit() {\n\t            return _this2.toggle('editCollection');\n\t          },\n\t          refreshParent: this.updateCollection\n\t        });\n\t\n\t        cancelEditCollectionButton = React.createElement(\n\t          'a',\n\t          {\n\t            className: 'pull-right',\n\t            style: { cursor: 'pointer' },\n\t            onClick: function onClick() {\n\t              return _this2.toggle('editCollection');\n\t            }\n\t          },\n\t          'Cancel'\n\t        );\n\t      } else {\n\t\n\t        //loops through data object to produce static elements\n\t        if (this.state.data.specimen.collection.data) {\n\t          var dataObject = this.state.data.specimen.collection.data;\n\t          var specimenTypeAttributes = Object.keys(dataObject).map(function (key) {\n\t            return React.createElement(StaticElement, {\n\t              label: _this2.state.options.specimenTypeAttributes[_this2.state.data.specimen.typeId][key].name,\n\t              text: dataObject[key]\n\t            });\n\t          });\n\t        }\n\t\n\t        collectionPanelForm = React.createElement(\n\t          FormElement,\n\t          null,\n\t          React.createElement(StaticElement, {\n\t            label: 'Quantity',\n\t            text: this.state.data.specimen.collection.quantity + ' ' + this.state.options.specimenUnits[this.state.data.specimen.collection.unitId].unit\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Location',\n\t            text: this.state.options.sites[this.state.data.specimen.collection.locationId]\n\t          }),\n\t          specimenTypeAttributes,\n\t          React.createElement(StaticElement, {\n\t            label: 'Date',\n\t            text: this.state.data.specimen.collection.date\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Time',\n\t            text: this.state.data.specimen.collection.time\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Comments',\n\t            text: this.state.data.specimen.collection.comments\n\t          })\n\t        );\n\t      }\n\t\n\t      collectionPanel = React.createElement(\n\t        'div',\n\t        { className: 'panel panel-default' },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'panel-heading' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'lifecycle-node collection' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'letter' },\n\t              'C'\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'title' },\n\t            'Collection'\n\t          ),\n\t          React.createElement('span', {\n\t            className: this.state.editCollection ? null : 'glyphicon glyphicon-pencil',\n\t            onClick: this.state.editCollection ? null : function () {\n\t              return _this2.toggle('editCollection');\n\t            }\n\t          })\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'panel-body' },\n\t          collectionPanelForm,\n\t          cancelEditCollectionButton\n\t        )\n\t      );\n\t\n\t      /*\n\t       * Preparation Form\n\t       */\n\t\n\t      // Preparation Panel variable declaration\n\t      var preparationPanel = void 0;\n\t      var preparationForm = void 0;\n\t      var specimenProtocolAttributes = void 0;\n\t      var cancelEditPreparationButton = void 0;\n\t\n\t      // If the form is an edit state\n\t      if (this.state.editPreparation) {\n\t        //Map Options for Form Select Elements Here\n\t        specimenProtocolAttributes = this.state.options.specimenProtocolAttributes[this.state.data.specimen.typeId];\n\t\n\t        //This remaps specimen Protocols based on the specimen Type\n\t        //this may need to be refactored or put into a function later\n\t        var specimenProtocols = {};\n\t        for (var _id2 in specimenProtocolAttributes) {\n\t          specimenProtocols[_id2] = this.state.options.specimenProtocols[_id2];\n\t        }\n\t\n\t        specimenProtocols = this.mapFormOptions(specimenProtocols, 'protocol');\n\t\n\t        preparationForm = React.createElement(_preparationForm2.default, {\n\t          specimenId: this.state.data.specimen.id,\n\t          preparation: this.state.data.specimen.preparation ? this.state.data.specimen.preparation : null,\n\t          specimenProtocols: specimenProtocols,\n\t          specimenProtocolAttributes: specimenProtocolAttributes,\n\t          attributeDatatypes: this.state.options.attributeDatatypes,\n\t          attributeOptions: this.state.options.attributeOptions,\n\t          sites: this.state.options.sites,\n\t          insertAction: loris.BaseURL + '/biobank/ajax/submitData.php?action=insertSpecimenPreparation',\n\t          updateAction: loris.BaseURL + '/biobank/ajax/submitData.php?action=updateSpecimenPreparation',\n\t          refreshParent: this.updatePreparation\n\t        });\n\t\n\t        cancelEditPreparationButton = React.createElement(\n\t          'a',\n\t          { className: 'pull-right', style: { cursor: 'pointer' }, onClick: function onClick() {\n\t              return _this2.toggle('editPreparation');\n\t            } },\n\t          'Cancel'\n\t        );\n\t      }\n\t\n\t      // If Preparation Does Exist and the form is not in an edit state\n\t      if (this.state.data.specimen.preparation && !this.state.editPreparation) {\n\t        var dataObject = this.state.data.specimen.preparation.data;\n\t\n\t        if (dataObject) {\n\t          specimenProtocolAttributes = Object.keys(dataObject).map(function (key) {\n\t            return React.createElement(StaticElement, {\n\t              label: _this2.state.options.specimenProtocolAttributes[_this2.state.data.specimen.typeId][_this2.state.data.specimen.preparation.protocolId][key].name,\n\t              text: dataObject[key]\n\t            });\n\t          });\n\t        }\n\t\n\t        preparationForm = React.createElement(\n\t          FormElement,\n\t          null,\n\t          React.createElement(StaticElement, {\n\t            label: 'Protocol',\n\t            text: this.state.options.specimenProtocols[this.state.data.specimen.preparation.protocolId].protocol\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Location',\n\t            text: this.state.options.sites[this.state.data.specimen.preparation.locationId]\n\t          }),\n\t          specimenProtocolAttributes,\n\t          React.createElement(StaticElement, {\n\t            label: 'Date',\n\t            text: this.state.data.specimen.preparation.date\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Time',\n\t            text: this.state.data.specimen.preparation.time\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Comments',\n\t            text: this.state.data.specimen.preparation.comments\n\t          })\n\t        );\n\t      }\n\t\n\t      // If preparation does not exist and if the form is not in an edit state\n\t      // and a preparation protocol exists for this specimen type\n\t      if (this.state.options.specimenProtocolAttributes[this.state.data.specimen.typeId] && !this.state.data.specimen.preparation && !this.state.editPreparation) {\n\t        preparationPanel = React.createElement(\n\t          'div',\n\t          {\n\t            className: 'panel inactive'\n\t          },\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'add-process',\n\t              onClick: function onClick() {\n\t                return _this2.toggle('editPreparation');\n\t              }\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-plus' })\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            null,\n\t            'ADD PREPARATION'\n\t          )\n\t        );\n\t      } else if (this.state.data.specimen.preparation || this.state.editPreparation) {\n\t        preparationPanel = React.createElement(\n\t          'div',\n\t          { className: 'panel panel-default' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'panel-heading' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'lifecycle-node preparation' },\n\t              React.createElement(\n\t                'div',\n\t                { className: 'letter' },\n\t                'P'\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'title' },\n\t              'Preparation'\n\t            ),\n\t            React.createElement('span', {\n\t              className: this.state.editPreparation ? null : 'glyphicon glyphicon-pencil',\n\t              onClick: this.state.editPreparation ? null : function () {\n\t                return _this2.toggle('editPreparation');\n\t              }\n\t            })\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'panel-body' },\n\t            preparationForm,\n\t            cancelEditPreparationButton\n\t          )\n\t        );\n\t      }\n\t\n\t      /**\n\t       * Analysis Form\n\t       */\n\t      var analysisPanel = void 0;\n\t      analysisPanel = React.createElement(\n\t        'div',\n\t        {\n\t          className: 'panel inactive'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          {\n\t            className: 'add-process'\n\t          },\n\t          React.createElement('span', { className: 'glyphicon glyphicon-plus' })\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          null,\n\t          'ADD ANALYSIS'\n\t        )\n\t      );\n\t\n\t      var temperatureField = void 0;\n\t      if (!this.state.editTemperature) {\n\t        temperatureField = React.createElement(\n\t          'div',\n\t          { className: 'item' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'field' },\n\t            'Temperature',\n\t            React.createElement(\n\t              'div',\n\t              { className: 'value' },\n\t              this.state.data.container.temperature + '°C'\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action',\n\t              'data-toggle': 'tooltip',\n\t              title: 'Update Temperature',\n\t              'data-placement': 'right'\n\t            },\n\t            React.createElement(\n\t              'span',\n\t              {\n\t                className: 'action-button update',\n\t                onClick: function onClick() {\n\t                  return _this2.toggle('editTemperature');\n\t                }\n\t              },\n\t              React.createElement('span', { className: 'glyphicon glyphicon-chevron-right' })\n\t            )\n\t          )\n\t        );\n\t      } else {\n\t        temperatureField = React.createElement(\n\t          'div',\n\t          { className: 'item' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'field' },\n\t            'Temperature',\n\t            React.createElement(_temperatureField2.default, {\n\t              className: 'centered-horizontal',\n\t              container: this.state.container,\n\t              toggleEditTemperature: function toggleEditTemperature() {\n\t                return _this2.toggle('editTemperature');\n\t              },\n\t              setContainerData: this.setContainerData,\n\t              saveContainer: this.saveContainer\n\t            })\n\t          )\n\t        );\n\t      }\n\t\n\t      var quantityField = void 0;\n\t      if (!this.state.editQuantity) {\n\t        quantityField = React.createElement(\n\t          'div',\n\t          { className: 'item' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'field' },\n\t            'Quantity',\n\t            React.createElement(\n\t              'div',\n\t              { className: 'value' },\n\t              this.state.data.specimen.quantity,\n\t              ' ' + this.state.options.specimenUnits[this.state.data.specimen.unitId].unit\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            {\n\t              className: 'action',\n\t              'data-toggle': 'tooltip',\n\t              title: 'Update Quantity',\n\t              'data-placement': 'right'\n\t            },\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                className: 'action-button update',\n\t                onClick: function onClick() {\n\t                  return _this2.toggle('editQuantity');\n\t                }\n\t              },\n\t              React.createElement('span', { className: 'glyphicon glyphicon-chevron-right' })\n\t            )\n\t          )\n\t        );\n\t      } else {\n\t        var _specimenUnits = this.state.options.specimenTypeUnits[this.state.data.specimen.typeId];\n\t        _specimenUnits = this.mapFormOptions(_specimenUnits, 'unit');\n\t        quantityField = React.createElement(\n\t          'div',\n\t          { className: 'item' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'field' },\n\t            'Quantity',\n\t            React.createElement(_quantityField2.default, {\n\t              className: 'centered-horizontal',\n\t              specimen: this.state.specimen,\n\t              units: _specimenUnits,\n\t              toggle: function toggle() {\n\t                return _this2.toggle('editQuantity');\n\t              },\n\t              setSpecimenData: this.setSpecimenData,\n\t              saveSpecimen: this.saveSpecimen\n\t            })\n\t          )\n\t        );\n\t      }\n\t\n\t      //TODO: This should eventually go into its own component \n\t      var globals = React.createElement(\n\t        'div',\n\t        { className: 'globals' },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'list' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'field' },\n\t              'Specimen Type',\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                this.state.options.specimenTypes[this.state.data.specimen.typeId].type\n\t              )\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'field' },\n\t              'Container Type',\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                this.state.options.containerTypes[this.state.data.container.typeId].label\n\t              )\n\t            )\n\t          ),\n\t          quantityField,\n\t          temperatureField,\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'field' },\n\t              'Status',\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                this.state.options.containerStati[this.state.data.container.statusId].status\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                className: 'action',\n\t                'data-toggle': 'tooltip',\n\t                title: 'Update Status',\n\t                'data-placement': 'right'\n\t              },\n\t              React.createElement(_FormModal2.default, {\n\t                title: 'Update',\n\t                buttonClass: 'action-button update',\n\t                buttonContent: React.createElement('span', { className: 'glyphicon glyphicon-chevron-right' })\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'field' },\n\t              'Location',\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                this.state.options.sites[this.state.data.container.locationId]\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              {\n\t                className: 'action',\n\t                'data-toggle': 'tooltip',\n\t                title: 'Ship Specimen',\n\t                'data-placement': 'right'\n\t              },\n\t              React.createElement(_FormModal2.default, {\n\t                title: 'Ship',\n\t                buttonClass: 'action-button update',\n\t                buttonContent: React.createElement('span', { className: 'glyphicon glyphicon-chevron-right' })\n\t              })\n\t            )\n\t          ),\n\t          parentSpecimenBarcode,\n\t          parentContainerBarcode,\n\t          React.createElement(\n\t            'div',\n\t            { className: 'item' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'field' },\n\t              'PSCID',\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                React.createElement(\n\t                  'a',\n\t                  { href: loris.BaseURL + '/' + this.state.data.specimen.candidateId },\n\t                  this.state.data.candidate.PSCID\n\t                )\n\t              )\n\t            ),\n\t            React.createElement(\n\t              'div',\n\t              { className: 'field' },\n\t              'Visit Label',\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                React.createElement(\n\t                  'a',\n\t                  { href: loris.BaseURL + '/instrument_list/?candID=' + this.state.data.specimen.candidateId + '&sessionID=' + this.state.data.specimen.sessionId },\n\t                  this.state.data.session.Visit_label\n\t                )\n\t              )\n\t            )\n\t          )\n\t        )\n\t      );\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { id: 'specimen-page' },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'specimen-header' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'specimen-title' },\n\t            React.createElement(\n\t              'div',\n\t              { className: 'barcode' },\n\t              'Barcode',\n\t              React.createElement(\n\t                'div',\n\t                { className: 'value' },\n\t                React.createElement(\n\t                  'strong',\n\t                  null,\n\t                  this.state.data.container.barcode\n\t                )\n\t              )\n\t            ),\n\t            addAliquotForm,\n\t            React.createElement(_containerCheckout2.default, {\n\t              containerId: this.state.data.container.id,\n\t              parentContainerId: this.state.data.container.parentContainerId,\n\t              refreshParent: this.fetchSpecimenData\n\t            })\n\t          ),\n\t          React.createElement(_lifeCycle2.default, {\n\t            collection: this.state.data.specimen.collection,\n\t            preparation: this.state.data.specimen.preparation,\n\t            analysis: this.state.data.specimen.analysis,\n\t            sites: this.state.options.sites\n\t          })\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'summary' },\n\t          globals,\n\t          React.createElement(\n\t            'div',\n\t            { className: 'processing' },\n\t            collectionPanel,\n\t            preparationPanel,\n\t            analysisPanel\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimen;\n\t}(React.Component);\n\t\n\tBiobankSpecimen.propTypes = {\n\t  specimenPageDataURL: React.PropTypes.string.isRequired\n\t};\n\t\n\tvar RBiobankSpecimen = React.createFactory(BiobankSpecimen);\n\t\n\twindow.BiobankSpecimen = BiobankSpecimen;\n\twindow.RBiobankSpecimen = RBiobankSpecimen;\n\t\n\texports.default = BiobankSpecimen;\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Quantity Field\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\t\n\tvar QuantityField = function (_React$Component) {\n\t  _inherits(QuantityField, _React$Component);\n\t\n\t  function QuantityField() {\n\t    _classCallCheck(this, QuantityField);\n\t\n\t    return _possibleConstructorReturn(this, (QuantityField.__proto__ || Object.getPrototypeOf(QuantityField)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(QuantityField, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      return React.createElement(\n\t        'div',\n\t        { className: this.props.className },\n\t        React.createElement(TextboxElement, {\n\t          name: 'quantity',\n\t          labelClass: 'col-xl-0',\n\t          inputClass: 'col-lg-12',\n\t          onUserInput: this.props.setSpecimenData,\n\t          value: this.props.specimen.quantity\n\t        }),\n\t        React.createElement(SelectElement, {\n\t          name: 'unit',\n\t          labelClass: 'col-xl-0',\n\t          inputClass: 'col-lg-12',\n\t          options: this.props.units,\n\t          onUserInput: this.props.setSpecimenData,\n\t          value: this.props.specimen.unitId\n\t        }),\n\t        React.createElement(ButtonElement, {\n\t          label: 'Update',\n\t          onUserInput: this.props.saveSpecimen,\n\t          columnSize: 'col-lg-12'\n\t        }),\n\t        React.createElement(\n\t          'a',\n\t          { onClick: this.props.toggle\n\t          },\n\t          'Cancel'\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return QuantityField;\n\t}(React.Component);\n\t\n\tQuantityField.propTypes = {\n\t  setSpecimenData: React.PropTypes.func,\n\t  specimen: React.PropTypes.object,\n\t  saveSpecimen: React.PropTypes.func,\n\t  className: React.PropTypes.string\n\t};\n\t\n\texports.default = QuantityField;\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// modules/biobank/js/specimenIndex.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f393595e9a1f59c611ef","/* global ReactDOM */\n\nimport BiobankSpecimen from './specimen';\nconst args = QueryString.get(document.currentScript.src);\n\n$(function() {\n  const biobankSpecimen = (\n    <div className=\"page-specimen-form\">\n      <div className=\"row\">\n        <div className=\"col-md-9 col-lg-12\">\n          <BiobankSpecimen\n            specimenPageDataURL={`${loris.BaseURL}/biobank/ajax/requestData.php?action=getSpecimenData&barcode=${args.barcode}`}\n            optionsURL={`${loris.BaseURL}/biobank/ajax/requestData.php?action=getFormOptions`}\n            saveContainer={`${loris.BaseURL}/biobank/ajax/submitData.php?action=saveContainer`}\n            saveSpecimen={`${loris.BaseURL}/biobank/ajax/submitData.php?action=saveSpecimen`}\n          />\n        </div>\n      </div>\n    </div>\n  );\n\n  ReactDOM.render(biobankSpecimen, document.getElementById(\"lorisworkspace\"));\n});\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenIndex.js","import SpecimenBarcodeForm from './barcodeForm.js';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankSpecimenForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      errorMessage: null,\n      formErrors: {},\n      barcodeFormList: {1: {}},\n      countBarcodeForms: 1\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n    this.specimenSubmit = this.specimenSubmit.bind(this);\n    this.addBarcodeForm = this.addBarcodeForm.bind(this);\n    this.setBarcodeFormData = this.setBarcodeFormData.bind(this);\n  }\n\n  componentDidMount() {\n\n    // Sets formData to formData passed from parent component\n    // or else it is set to an empty object\n    // TODO: this should be moved to the constructor.\n    let formData = this.props.formData || this.state.formData;\n\n    //if this is a child specimen form then certain formData is set when component mount\n    //TODO: there is a better way of doing this.\n    //This solution assumes too much about the props being passed\n    if (this.props.parentSpecimenIds) {\n      formData['parentSpecimenIds'] = this.props.parentSpecimenIds;\n      formData['pscid'] = this.props.candidateId;\n      formData['visitLabel'] = this.props.sessionId;\n      formData['unitId'] = this.props.unitId;\n    }\n\n    this.setState({formData});\n  }\n\n  render() {\n\n    //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n    var barcodeListArray = Object.keys(this.state.barcodeFormList);\n    var barcodeForms = [];\n    let i = 1;\n    for (let key of barcodeListArray) {\n      barcodeForms.push(\n        <SpecimenBarcodeForm\n          key={key}\n          barcodeKey={key}\n          id={i} \n          formData={this.state.barcodeFormList[key] ? \n            this.state.barcodeFormList[key] : null}\n          removeBarcodeForm={barcodeListArray.length !== 1 ?\n            () => this.removeBarcodeForm(key) : null}\n          addBarcodeForm={i == barcodeListArray.length ? this.addBarcodeForm : null}\n          copyBarcodeForm={i == barcodeListArray.length && this.state.barcodeFormList[key] ? \n            this.copyBarcodeForm.bind(this, key) : null}\n          setParentFormData={this.setBarcodeFormData}\n          onChange={this.props.onChange}\n          specimenTypes={this.props.specimenTypes}\n          containerTypesPrimary={this.props.containerTypesPrimary}\n          containersNonPrimary={this.props.containersNonPrimary}\n          specimenTypeAttributes={this.props.specimenTypeAttributes}\n          attributeDatatypes={this.props.attributeDatatypes}\n          attributeOptions={this.props.attributeOptions}\n          capacities={this.props.capacities}\n          containerDimensions={this.props.containerDimensions}\n          containerCoordinates={this.props.containerCoordinates}\n          specimenTypeUnits={this.props.specimenTypeUnits}\n          units={this.props.units}\n        />\n      )\n      \n      i++;\n    }\n\n    let globalFields;\n    let remainingQuantityFields;\n    if (this.props.parentSpecimenIds) {\n      globalFields = (\n        <div>\n          <StaticElement\n            label=\"Parent Specimen\"\n            text={this.props.parentSpecimenBarcodes}\n          />\n          <StaticElement\n            label=\"PSCID\"\n            text={this.props.pscid}\n          />\n          <StaticElement\n            label=\"Visit Label\"\n            text={this.props.visit}\n          />\n        </div>\n      );\n\n      //TODO: It may be wise to make unit static and forced, or atleast prepopulated --\n      remainingQuantityFields = (\n        <div>\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Remaining Quantity\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={this.props.specimenUnits}\n            onUserInput={this.setFormData}\n            emptyOption={false}\n            required={true}\n            value={this.state.formData.unitId}\n          />\n        </div>\n      );\n    } else {\n      globalFields = (\n          <div>\n            <SearchableDropdown\n              name=\"pscid\"\n              label=\"PSCID\"\n              options={this.props.pSCIDs}\n              onUserInput={this.setFormData}\n              ref=\"pscid\"\n              required={true}\n              value={this.state.formData.pscid}\n              placeHolder='Search for a PSCID'\n            />\n            <SelectElement\n              name=\"visitLabel\"\n              label=\"Visit Label\"\n              options={this.state.visits}\n              onUserInput={this.setFormData}\n              ref=\"visitLabel\"\n              required={true}\n              value={this.state.formData.visitLabel}\n              disabled={this.state.formData.pscid ? false : true}\n            />\n          </div>\n      );\n    }\n\n    //TODO: {barcodeForms} should eventually be moved to be after {remainingQuantityFields}\n    return (\n      <FormElement\n        name=\"specimenForm\"\n        id='specimenForm'\n        onSubmit={this.handleSubmit}\n        ref=\"form\"\n      >\n        <div className='row'>\n          <div className=\"col-xs-9 col-xs-offset-1\">\n            {globalFields}\n            {remainingQuantityFields}\n          </div>\n        </div>\n        {barcodeForms}\n        <ButtonElement\n          label='Submit'\n          columnSize='col-sm-2 col-sm-offset-10'\n        />\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n  /**\n   * Returns a valid name for the file to be specimened\n   *\n   * @param {string} pscid - PSCID selected from the dropdown\n   * @param {string} visitLabel - Visit label selected from the dropdown\n   * @param {string} instrument - Instrument selected from the dropdown\n   * @return {string} - Generated valid filename for the current selection\n   */\n//  getValidFileName(pscid, visitLabel, instrument) {\n//    var fileName = pscid + \"_\" + visitLabel;\n//    if (instrument) fileName += \"_\" + instrument;\n//\n//    return fileName;\n//  }\n\n\n  validateForm(formElement, value) {\n    let formErrors = this.state.formErrors;\n\n    //validate barcode regex\n    if (formElement === \"barcode\" && value !== \"\") {\n      if (!(/^hello/.test(this.state.formData.barcode))) {\n        formErrors.barcode = true;\n      } else {\n        formErrors.barcode = false;\n      }\n    }\n\n    //validate that quantity is a number and less than capacity\n    if (formElement === \"quantity\" && value !== \"\") {\n      if (isNaN(value) || (value > this.props.capacities[this.state.currentContainerType])) {\n        formErrors.quantity = true;\n      } else {\n        formErrors.quantity = false;\n      }\n    }\n\n    //validate datatypes and regex of generated type attributes\n    var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n    var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n\n      let datatype = this.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"number\") {\n        if (formElement === attribute) {\n          if (isNaN(value) && value !== \"\") {\n            formErrors[attribute] = true;\n          } else {\n            formErrors[attribute] = false;\n          }\n        }\n      }\n    })\n\n    this.setState({\n      formErrors: formErrors\n    });\n\n  }\n\n\n  /**\n   * Handle form submission\n   * @param {object} e - Form submission event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    let formRefs = this.refs;\n    //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\n    // Validate the form\n    if (!this.isValidForm(formRefs, formData)) {\n      return;\n    }\n\n    this.specimenSubmit();\n  }\n\n  /*\n   * Uploads the file to the server\n   */\n  specimenSubmit() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n\n        this.props.refreshParent();\n        swal(\"Specimen Submission Successful!\", \"\", \"success\");\n        this.props.onSuccess();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Validate the form\n   *\n   * @param {object} formRefs - Object containing references to React form elements\n   * @param {object} formData - Object containing form data inputed by user\n   * @return {boolean} - true if all required fields are filled, false otherwise\n   */\n  //TODO: check media for the basis for validation\n  isValidForm(formRefs, formData) {\n    var isValidForm = true;\n\n    var requiredFields = {\n      pscid: null,\n      visitLabel: null,\n    };\n\n    Object.keys(requiredFields).map(function(field) {\n      if (formData[field]) {\n        requiredFields[field] = formData[field];\n      } else if (formRefs[field]) {\n        formRefs[field].props.hasError = true;\n        isValidForm = false;\n      }\n    });\n    this.forceUpdate();\n\n    return isValidForm;\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    // This lets the modal window know that there is formData\n    // and will cause a warning to be thrown of the modal window\n    // is exited\n    this.props.onChange instanceof Function && this.props.onChange();\n  \n    if (formElement === \"pscid\" && value !== \"\" && value !== undefined) {\n      this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n    }\n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState(\n      {formData},\n      this.setParentFormData()\n    );\n  }\n\n  setBarcodeFormData(barcodeFormData, barcodeKey) {\n    var formData = this.state.formData;\n    var barcodeFormList = this.state.barcodeFormList;\n    barcodeFormList[barcodeKey] = barcodeFormData;\n    formData['barcodeFormList'] = barcodeFormList;\n\n    this.setState(\n      {formData},\n      this.setParentFormData()\n    );\n  }\n\n  addBarcodeForm() {\n    let barcodeFormList = this.state.barcodeFormList;\n    let count = this.state.countBarcodeForms;\n    \n    barcodeFormList[count+1] = {}; \n\n    this.setState({\n      barcodeFormList: barcodeFormList,\n      countBarcodeForms: count + 1\n    });\n  }\n\n  copyBarcodeForm(key, multiplier) {\n    let count = this.state.countBarcodeForms;\n    let nextKey = count+1;\n    let barcodeFormList = this.state.barcodeFormList;\n\n    for (let i=1; i<=multiplier; i++) {\n      barcodeFormList[nextKey] = JSON.parse(JSON.stringify(barcodeFormList[key])); \n      delete barcodeFormList[nextKey].barcode;\n      nextKey++;\n    }\n\n    this.setState({\n      barcodeFormList: barcodeFormList,\n      countBarcodeForms: nextKey\n    });\n  }\n\n  removeBarcodeForm(key) {\n    let barcodeFormList = this.state.barcodeFormList;\n    delete barcodeFormList[key];\n\n    this.setState({\n      barcodeFormList: barcodeFormList\n    });\n  }\n\n  setParentFormData() {\n    if (this.props.setParentFormData) {\n      let formData = this.state.formData;\n      this.props.setParentFormData(formData);\n    }\n  }\n}\n\nBiobankSpecimenForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired,\n  barcode: React.PropTypes.string,\n  refreshTable: React.PropTypes.func\n};\n\nexport default BiobankSpecimenForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenForm.js","import SpecimenCollectionForm from './collectionForm'\n\n/**\n * Biobank Barcode Form\n *\n * Acts a subform for BiobankSpecimenForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenBarcodeForm extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      formData: {},\n      formErrors: {},\n      collapsed: true,\n      copyMultiplier: 1,\n    };\n   \n    this.setFormData = this.setFormData.bind(this);\n    this.setChildFormData = this.setChildFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n    this.toggleCollapse = this.toggleCollapse.bind(this);\n    this.setCopyMultiplier = this.setCopyMultiplier.bind(this);\n    this.copy = this.copy.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.formData) {\n      let formData = this.props.formData;\n    \n      this.setState({\n        formData: formData\n      }); \n    }   \n  }\n\n  toggleCollapse() {\n    this.setState({collapsed: !this.state.collapsed});\n  }\n\n  setCopyMultiplier(e) {\n    let copyMultiplier = e.target.value;\n    \n    this.setState({\n      copyMultiplier: copyMultiplier\n    }); \n  }\n\n  copy() {\n    this.props.copyBarcodeForm(this.state.copyMultiplier);\n  }\n\n  render() {\n    let addBarcodeFormButton;\n    let addBarcodeFormText;\n    let copyBarcodeFormButton;\n    let copyBarcodeFormText;\n    if (this.props.addBarcodeForm) {\n      addBarcodeFormButton = (\n        <span className='action'>\n          <div\n            className='action-button add'\n            onClick={this.props.addBarcodeForm}\n          >\n          +\n          </div>\n        </span>\n      );\n\n      addBarcodeFormText = (\n        <span className='action-title'>\n          New Entry\n        </span>\n      );\n    }\n\t\n    if (this.props.copyBarcodeForm) {\n      copyBarcodeFormButton = (\n        <span className='action'>\n          <div\n            className='action-button add'\n            onClick={this.copy}\n          >\n            <span className='glyphicon glyphicon-duplicate'/>\n          </div>\n        </span>\n      );\n      copyBarcodeFormText = (\n        <span className='action-title'>\n          <input \n            className='form-control input-sm'\n            type='number'\n            min='1'\n            max='50'\n            style={{width: 50, display: 'inline'}}\n            onChange={this.setCopyMultiplier}\n            value={this.state.copyMultiplier}\n          />\n          Copies\n        </span>\n      );\n    }\n\n    let removeBarcodeFormButton;\n    if (this.props.removeBarcodeForm) {\n      const glyphStyle = {\n        color: '#DDDDDD',\n        marginLeft: 10,\n        cursor: 'pointer',\n        fontSize: 15\n      }\n\n      removeBarcodeFormButton = (\n        <span \n          className='glyphicon glyphicon-remove' \n          onClick={this.props.removeBarcodeForm}\n          style={glyphStyle}\n        />\n      );\n    }\n\n    return (\n      <FormElement\n        name='biobankBarcode'\n      >\n        <div className='row'>\n          <div className='col-xs-9 col-xs-offset-1'>\n            <div>   \n              <TextboxElement\n                name='barcode'\n                label={'Barcode ' + this.props.id}\n                onUserInput={this.setFormData}\n                ref='barcode'\n                required={true}\n                value={this.state.formData.barcode}\n              />\n            </div>\n          </div>\n          <div className='col-xs-1' style={{paddingLeft:0, marginTop:10}}>\n            <span \n              className= {this.state.collapsed ? 'glyphicon glyphicon-chevron-down' : 'glyphicon glyphicon-chevron-up'}\n              style={{cursor: 'pointer', fontSize:15, position:'relative', right:40}}\n              data-toggle='collapse' \n              data-target={'#item-' + this.props.id}\n              onClick={this.toggleCollapse}\n            />\n            {removeBarcodeFormButton}\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xs-2'/>\n          <div className='col-xs-8'>\n            <div id={'item-' + this.props.id} className='collapse'>\n              <SpecimenCollectionForm\n                formData={this.props.formData}\n                setParentFormData={this.setChildFormData}\n                onChange={this.props.onChange}\n                specimenTypes={this.props.specimenTypes}\n                specimenTypeAttributes={this.props.specimenTypeAttributes}\n                attributeDatatypes={this.props.attributeDatatypes}\n                attributeOptions={this.props.attributeOptions}\n                containerTypesPrimary={this.props.containerTypesPrimary}\n                containersNonPrimary={this.props.containersNonPrimary}\n                containerDimensions={this.props.containerDimensions}\n                containerCoordinates={this.props.containerCoordinates}\n                specimenTypeUnits={this.props.specimenTypeUnits}\n                stati={this.props.stati}\n              />\n            </div>\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xs-11'>\n            <div className='col-xs-4'/>\n            <div className='col-xs-3 action'>\n              {addBarcodeFormButton}\n              {addBarcodeFormText}\n            </div>\n            <div className='col-xs-3 action'>\n              {copyBarcodeFormButton}\n              {copyBarcodeFormText}\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    this.props.onChange instanceof Function && this.props.onChange();   \n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState(\n      {\n      formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setChildFormData(collectionFormData) {\n    var formData = this.state.formData;\n    \n    for (let field in collectionFormData) {\n      formData[field] = collectionFormData[field]\n    }\n \n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    this.props.setParentFormData(this.state.formData, this.props.barcodeKey);\n  }\n}\n\nSpecimenBarcodeForm.propTypes = {\n  id: React.PropTypes.string,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n}\n\nexport default SpecimenBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/barcodeForm.js","import ContainerParentForm from './containerParentForm'\n\n\n/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenCollectionForm extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      formData: {data:{}},\n      currentSpecimenType: this.props.edit ? this.props.specimenType : null,\n      currentContainerType: this.props.edit ? this.props.containerType : null,\n    };\n\n    this.setFormData = this.setFormData.bind(this);\n    this.setSpecimenTypeFieldFormData = this.setSpecimenTypeFieldFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n    this.setContainerParentFormData = this.setContainerParentFormData.bind(this);\n    this.getSpecimenTypeFields = this.getSpecimenTypeFields.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.updateSpecimen = this.updateSpecimen.bind(this);\n  }\n\n  componentDidMount() {\n    let formData = this.state.formData;\n\n    if (this.props.formData) {\n      formData = this.props.formData;\n      let currentSpecimenType = this.state.currentSpecimenType;\n      \n      this.setState({\n        currentSpecimenType: formData.specimenType\n      });\n    }\n\n    if (this.props.edit) {\n      formData['specimenId']    = this.props.specimenId;\n      formData['containerId']   = this.props.containerId;\n      formData['specimenType']  = this.props.specimenType;\n      formData['containerType'] = this.props.containerType;\n      formData['quantity']      = this.props.collection.quantity;\n      formData['unitId']        = this.props.collection.unitId;\n      formData['date']          = this.props.collection.date;\n      formData['time']          = this.props.collection.time;\n      formData['comments']      = this.props.collection.comments;\n\n      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n      if (specimenTypeFieldsObject) {\n        var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n          formData.data[attribute] = this.props.collection.data[attribute];\n        });\n      }\n    }\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  mapFormOptions(rawObject, targetAttribute) {\n    let data = {};\n    for (let id in rawObject) {\n      data[id] = rawObject[id][targetAttribute];\n    }\n\n    return data;\n  }\n\n  render() {\n    var containerParentForm;\n    if (!this.props.edit) {\n      containerParentForm = (\n        <ContainerParentForm\n          setParentFormData={this.setContainerParentFormData}\n          containersNonPrimary={this.props.containersNonPrimary}\n          containerDimensions={this.props.containerDimensions}\n          containerCoordinates={this.props.containerCoordinates}\n        />\n      );\n    }\n\n    var updateButton;\n    if (this.props.edit) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    }\n\n    //This block of code should potentially be moved to setFormData();\n    //Consider Refactoring...\n    var specimenTypeUnits = {};\n    if (this.state.currentSpecimenType) {\n     \n      //This modifies the selections for unit drop down based on the chosend specimen type \n      for (var id in this.props.specimenTypeUnits[this.state.currentSpecimenType]) {\n        specimenTypeUnits[id] = this.props.specimenTypeUnits[this.state.currentSpecimenType][id].unit;\n      }\n\n      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n      if (specimenTypeFieldsObject) {\n        var specimenTypeFields = this.getSpecimenTypeFields(specimenTypeFieldsObject);\n      }\n    }\n\n    var specimenFields;\n    if (this.state.currentSpecimenType) {\n      specimenFields = (\n        <div>\n          <SelectElement\n            name=\"containerType\"\n            label=\"Container Type\"\n            options={this.props.containerTypesPrimary}\n            onUserInput={this.setFormData}\n            ref=\"containerType\"\n            required={true}\n            value={this.state.formData.containerType}\n          />\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Quantity\"\n            onUserInput={this.setFormData}\n            ref=\"quantity\"\n            required={true}\n            value={this.state.formData.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={specimenTypeUnits}\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.unitId}\n          />\n          {specimenTypeFields}\n          <DateElement\n            name=\"date\"\n            label=\"Date\"\n            minYear=\"2000\"\n            maxYear=\"2018\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.date}\n          />\n          <TimeElement\n            name=\"time\"\n            label=\"Time\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.time}\n          />\n          <TextareaElement\n            name=\"comments\"\n            label=\"Comments\"\n            onUserInput={this.setFormData}\n            ref=\"comments\"\n            value={this.state.formData.comments}\n          />\n          {containerParentForm}\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"biobankSpecimen\"\n        onSubmit={this.handleUpdate}\n        ref=\"form\"\n      >\n        <SelectElement\n          name=\"specimenType\"\n          label=\"Specimen Type\"\n          options={this.props.specimenTypes}\n          onUserInput={this.setFormData}\n          ref=\"specimenType\"\n          required={true}\n          value={this.state.formData.specimenType}\n        />\n        {specimenFields}\n        {updateButton}\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n\n    this.props.onChange instanceof Function && this.props.onChange();\n\n    let formData = this.state.formData;\n    formData[formElement] = value;\n\n    if (formElement === \"specimenType\" && value !== \"\") {\n      //This throws a warning if the specimen type is changed because of the cascading effects this \n      //would cause.\n      if (this.props.edit) {\n        swal({\n          title: \"Warning\",\n          text: \"Changing the specimen type will result in the loss of any preparation or anaylsis \"+\n            \"data for this specimen. You will also need to manually change the specimen type of any \"+\n            \"aliquots derived from this specimen. Proceed with caution.\",\n          type: \"warning\",\n          showCancelButton: true,\n          confirmButtonText: 'Cancel Change',\n          cancelButtonText: 'Proceed',\n        }, \n        function(isConfirm) {\n          if (isConfirm) {\n            this.props.toggleEdit();\n          } else {\n          }\n        }.bind(this));\n      }\n\n      //This is to eliminate the values for the specimen type fields\n      //TODO: This could potentially be improved later to retain the values\n      //for the fields that are common across specimen types\n      formData.data = {}; \n      this.setState({\n        currentSpecimenType: value\n      });\n    }\n\n    if (formElement === \"containerType\" && value !== \"\") {\n      this.setState({\n        currentContainerType: value\n      });\n    }\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setSpecimenTypeFieldFormData(formElement, value) {\n    let formData = this.state.formData;\n    formData.data[formElement] = value;\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  \n  }\n\n  setContainerParentFormData(containerParentFormData) {\n    var formData = this.state.formData;\n\n    for (let field in containerParentFormData) {\n      formData[field] = containerParentFormData[field];\n    }\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    // TODO: This should potentially be changed to if (this.props.setParentFormData)\n    if (!this.props.edit) {\n      var formData = this.state.formData;\n      this.props.setParentFormData(formData);\n    }\n  }\n\n  // TODO: decouple this code from the preaprationForm by making it a React Component\n  // This generates all the form fields for a given specimen type\n  getSpecimenTypeFields(fieldsObject) {\n    var specimenTypeFields = Object.keys(fieldsObject).map((attribute) => {\n      let datatype = this.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"text\" || datatype === \"number\") {\n\n        if (fieldsObject[attribute]['refTableId'] == null) {\n          return (\n            <TextboxElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              onUserInput={this.setSpecimenTypeFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribute]['required']}\n              value={this.state.formData.data[attribute]}\n            />\n          );\n        }\n\n        if (fieldsObject[attribute]['refTableId'] !== null) {\n          return (\n            <SelectElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              options={this.props.attributeOptions[fieldsObject[attribute]['refTableId']]}\n              onUserInput={this.setSpecimenTypeFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribute]['required']}\n              value={this.state.formData.data[attribute]}\n            />\n          );\n        }\n      }\n\n      if (datatype === \"datetime\") {\n        return (\n          <DateElement\n            name={attribute}\n            label={fieldsObject[attribute]['name']}\n            onUserInput={this.setSpecimenTypeFieldFormData}\n            ref={attribute}\n            required={fieldsObject[attribute]['required']}\n            value={this.state.formData.data[attribute]}\n          />\n        );\n      }\n\n      if (datatype === \"boolean\") {\n        // There is currently no CheckboxElement or RadioElement in loris/jsx/Form.js and therefore\n        // this is not possible.     \n      }\n    })\n\n    return specimenTypeFields;\n  }\n\n  handleUpdate(e) {\n    // TODO: Validate Form Here\n\n    this.updateSpecimen();\n  }\n\n  updateSpecimen() {\n    let formData = this.state.formData;\n    formData['data'] = JSON.stringify(formData['data']);\n\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        //Update Parent Specimen Page Here\n        formData.data = JSON.parse(formData.data);\n        this.props.refreshParent();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n}\n\nSpecimenCollectionForm.propTypes = {\n  setParentFormData: React.PropTypes.func,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n}\n\nexport default SpecimenCollectionForm;\n\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/collectionForm.js","/**\n * Biobank Container Parent Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\n\nimport ContainerDisplay from './containerDisplay.js';\n\nclass ContainerParentForm extends React.Component {\n  constructor() {\n    super();\n    this.mapFormOptions = this.mapFormOptions.bind(this);\n  }\n\n  //map options for forms\n  mapFormOptions(rawObject, targetAttribute) {\n    let data = {}; \n    for (let id in rawObject) {\n      data[id] = rawObject[id][targetAttribute];\n    }   \n\n    return data;\n  }\n\n  render() {\n    let containerDisplay;\n    let containerBarcodesNonPrimary = this.mapFormOptions(this.props.containersNonPrimary, 'barcode');\n\n    let parentContainerField = ( \n      <SelectElement\n        name=\"parentContainerId\"\n        label=\"Parent Container Barcode\"\n        options={containerBarcodesNonPrimary}\n        onUserInput={this.props.setContainerData}\n        required={true}\n        value={this.props.container.parentContainerId}\n      />  \n    );  \n\n    // TODO: THIS IS VERY POORLY DONE AND NEEDS REFACTORING\n    if (this.props.container.parentContainerId) {\n      let dimensionId = this.props.containersNonPrimary[\n        this.props.container.parentContainerId\n      ].dimensionId;\n\n      if (dimensionId) {\n        // This will eventually become unecessary\n        let dimensions = this.props.containerDimensions[dimensionId];\n\n        // Total coordinates is determined by the product of the dimensions\n        let coordinatesTotal = 1;\n        for (let dimension in dimensions) {\n          coordinatesTotal = coordinatesTotal * dimensions[dimension];\n        }\n\n        // Mapping of options for the SelectElement\n        let coordinates = {}; \n        for (let i = 1; i <= coordinatesTotal; i++) {\n          // If the coordinate is already taken, skip it.\n          // this doubling of if statements seems unnecessary\n          if (this.props.containerCoordinates[this.props.container.parentContainerId]) {\n            if (this.props.containerCoordinates[this.props.container.parentContainerId][i]) {\n              continue; \n            }\n          }\n\n          coordinates[i] = i;\n        }   \n\n        containerDisplay = (\n          <ContainerDisplay\n            dimensions = {\n              this.props.containerDimensions[\n                this.props.containersNonPrimary[this.props.container.parentContainerId\n              ].dimensionId]\n            }\n            coordinates = {\n              this.props.containerCoordinates[this.props.container.parentContainerId]\n            }\n            containerTypes = {this.props.containerTypes}\n            containerStati = {this.props.containerStati} \n            select = {true}\n            selectedCoordinate = {this.props.container.coordinate}\n            setContainerData = {this.props.setContainerData}\n          />\n        );\n      }\n    }   \n\n    return (\n      <FormElement\n        onSubmit={this.props.saveContainer}\n      >\n        {parentContainerField}\n        {containerDisplay}\n        <br/>\n        <ButtonElement label=\"Update\"/>\n      </FormElement>\n    );\n  }\n}\n\nContainerParentForm.propTypes = {\n};\n\nexport default ContainerParentForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerParentForm.js","/**\n * ContainerDisplay\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass ContainerDisplay extends React.Component {\n  constructor() {\n    super();\n   \n    this.redirectURL = this.redirectURL.bind(this);\n    this.drag = this.drag.bind(this);\n    this.drop = this.drop.bind(this);\n  }\n\n  componentDidMount() {\n    $('[data-toggle=\"tooltip\"]').tooltip();\n  }\n\n  componenDidUpdate() {\n    $('[data-toggle=\"tooltip\"]').tooltip();\n  }\n\n  redirectURL(e) {\n    let coordinate = e.target.id;\n    if (this.props.coordinates[coordinate]) {\n      let type = this.props.types[\n        this.props.children[this.props.coordinates[coordinate]].typeId\n      ].primary ? 'specimen' : 'container';\n      let url = loris.BaseURL+'/biobank/'+type+'/?barcode='+\n        this.props.children[this.props.coordinates[coordinate]].barcode;\n\n      window.location.href = url;\n    }\n  }\n\n  allowDrop(e) {\n      e.preventDefault();\n  }\n  \n  drag(e) {\n      let container = JSON.stringify(\n        this.props.children[this.props.coordinates[e.target.id]]\n      );\n      e.dataTransfer.setData(\"text/plain\", container);\n  }\n  \n  drop(e) {\n    e.preventDefault();\n\n    let container = e.dataTransfer.getData(\"text/plain\");\n    let newCoordinate = parseInt(e.target.id);\n    \n    this.props.updateParent(container, newCoordinate);\n  }\n\n  render() {\n  // This is eventually need to be reworked and cleaned up\n  let column = [];\n  let row = [];\n  let display;\n  var coordinate = 1;\n  if (this.props.dimensions) {\n    for (let y=0; y < this.props.dimensions.y; y++) {\n      column = [];\n      for (let x=1; x <= this.props.dimensions.x; x++) {\n        \n        let nodeWidth = (500/this.props.dimensions.x) - (500/this.props.dimensions.x * 0.08);\n        let nodeStyle = {width: nodeWidth}\n        let nodeClass = 'node';\n        let tooltipTitle = null;\n        let dataHtml = 'false';\n        let dataToggle = null;\n        let dataPlacement = null;\n        let draggable = 'false';\n        let onDragStart = null;\n        let onDragOver = this.allowDrop;\n        let onDrop = this.drop;\n        let onClick = null;\n\n        if (!this.props.select) {\n          // This double if statement doesn't sound great\n          if (this.props.coordinates) {\n            if (this.props.coordinates[coordinate]) {\n              nodeClass = 'node occupied';\n              dataHtml = 'true';\n              dataToggle = 'tooltip';\n              dataPlacement = 'top';\n              tooltipTitle = \n            '<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + \n            '<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + \n            '<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n              draggable = 'true';\n              onDragStart = this.drag;\n              onDragOver = null;\n              onDrop = null;\n              onClick = this.redirectURL;\n            }\n          }\n        }\n      \n        if (this.props.select) {\n          if (coordinate == this.props.selectedCoordinate) {\n            nodeClass = 'node occupied';\n          }\n          else if (!this.props.coordinates) {\n            nodeClass = 'node available';\n            onClick = (e) => this.props.setContainerData('coordinate', e.target.id);\n          } \n          else if (this.props.coordinates) {\n            if (!this.props.coordinates[coordinate]) {\n              nodeClass = 'node available';\n\t\t\t  onClick = (e) => this.props.setContainerData('coordinate', e.target.id);\n            }\n            else if (this.props.coordinates[coordinate]){\n            // TODO: --- This is currently not working ---\n            //  dataHtml = 'true';\n            //  dataToggle = 'tooltip';\n            //  dataPlacement = 'top';\n            //  tooltipTitle = \n            //'<h5>' + this.props.children[this.props.coordinates[coordinate]].barcode + '</h5>' + \n            //'<h5>' + this.props.containerTypes[this.props.children[this.props.coordinates[coordinate]].typeId].label + '</h5>' + \n            //'<h5>' + this.props.containerStati[this.props.children[this.props.coordinates[coordinate]].statusId].status + '</h5>';\n            }\n          }\n        }\n\n        let coordinateDisplay;\n        if (true) {\n          coordinateDisplay = x + (this.props.dimensions.x * y);\n        } else if (false) {\n          coordinateDisplay = String.fromCharCode(65+y)+''+x;\n        }\n\n        column.push(\n          <div\n            id={coordinate}\n            className={nodeClass}\n            data-html={dataHtml}\n            data-toggle={dataToggle}\n            data-placement={dataPlacement}\n            data-original-title={tooltipTitle}\n            style={nodeStyle}\n            onClick={onClick}\n            draggable={draggable}\n            onDragStart={onDragStart}\n            onDragOver={onDragOver}\n            onDrop={onDrop}\n          >\n            {coordinateDisplay}\n          </div>\n        );\n\n        coordinate++;\n      }\n\n      let rowHeight = (500/this.props.dimensions.y) - (500/this.props.dimensions.y * 0.08);\n      let rowMargin = (500/this.props.dimensions.y * 0.04);\n      let rowStyle = {\n        height: rowHeight,\n      }\n      \n      row.push(\n        <div\n          className='row'\n          style={rowStyle} \n        >\n          {column}\n        </div>\n      )\n    }\n    \n    display = row;\n  }\n \n    return (\n      <div className='display'>\n        {display}\n      </div>\n    );\n  }\n}\n\nContainerDisplay.propTypes = {\n}\n\nexport default ContainerDisplay;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerDisplay.js","\n/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenPreparationForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {data:{}},\n      currentProtocol: this.props.preparation ? this.props.preparation.protocolId : null,\n      formErrors: {},\n    };\n\n    this.setFormData = this.setFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n    this.setSpecimenProtocolFieldFormData = this.setSpecimenProtocolFieldFormData.bind(this);\n    this.getSpecimenProtocolFields = this.getSpecimenProtocolFields.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.savePreparation = this.savePreparation.bind(this);\n  }\n\n  componentDidMount() {\n    let formData = this.state.formData;\n\n    // if (this.props.specimenId) ??\n    formData['specimenId'] = this.props.specimenId;\n\n    //TODO: this is a shitty fix to the problem, do better.\n    // Actually, this may be less shitty than I thought\n    if (this.props.formData) {\n      formData = this.props.formData;\n  \n      let currentProtocol;\n      currentProtocol = this.props.formData.protocolId || null;\n      this.setState({currentProtocol});\n    }\n\n    // This for autoloading data and will be used later\n    if (this.props.preparation) {\n      formData['protocolId'] = this.props.preparation.protocolId;\n      formData['locationId'] = this.props.preparation.locationId;\n      formData['date']       = this.props.preparation.date;\n      formData['time']       = this.props.preparation.time;\n      formData['comments']   = this.props.preparation.comments;\n\n      var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.state.currentProtocol];\n      if (specimenProtocolFieldsObject) {\n        var specimenProtocolFields = Object.keys(specimenProtocolFieldsObject).map((attribute) => {\n          formData.data[attribute] = this.props.preparation.data[attribute];\n        });\n      }\n    }\n    this.setState({\n      formData: formData\n    });\n  }\n\n  render() {\n\n    var submitButton;\n    //TODO: fix this second check (!this.props.specimenId) -- it's not great\n    // All it does is signal that we are in the pool specimen form. There must be\n    // a better way!!\n    if (this.props.preparation || !this.props.specimenId) {\n      submitButton = null;\n    } else if (!this.props.preparation) {\n      submitButton = (\n        <ButtonElement label=\"Submit\"/>\n      );\n    }\n\n    var updateButton;\n    var locationField;\n    if (this.props.preparation) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n\n      locationField = (\n        <SelectElement\n          name=\"locationId\"\n          label=\"Location\"\n          options={this.props.sites}\n          onUserInput={this.setFormData}\n          required={true}\n          value={this.state.formData.locationId}\n        />\n      );\n    }\n\n  let specimenProtocolFields;\n  if (this.state.currentProtocol) {\n    var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.state.currentProtocol];\n\n    if (specimenProtocolFieldsObject) {\n      specimenProtocolFields = this.getSpecimenProtocolFields(specimenProtocolFieldsObject);\n    }\n  }\n\n    //This will be for default fields, if there are any eventually\n    if (this.state.currentSpecimenProtocol) {\n      preparationFields = (\n        <div>\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"specimenPreparation\"\n        onSubmit={this.handleSave}\n        ref=\"form\"\n      >\n        <SelectElement\n          name=\"protocolId\"\n          label=\"Protocol\"\n          options={this.props.specimenProtocols}\n          onUserInput={this.setFormData}\n          required={true}\n          value={this.state.formData.protocolId}\n        />\n        {locationField}\n        {specimenProtocolFields}\n        <DateElement\n          name=\"date\"\n          label=\"Date\"\n          onUserInput={this.setFormData}\n          required={true}\n          value={this.state.formData.date}\n        />\n        <TimeElement\n          name=\"time\"\n          label=\"Time\"\n          onUserInput={this.setFormData}\n          required={true}\n          value={this.state.formData.time}\n        />\n        <TextareaElement\n          name=\"comments\"\n          label=\"Comments\"\n          onUserInput={this.setFormData}\n          value={this.state.formData.comments}\n        />\n        {submitButton} \n        {updateButton}\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n\n    let formData = this.state.formData;\n\n    if (formElement === \"protocolId\" && value !== \"\") {\n      //This is to eliminate the values for the specimen protocol fields\n      //TODO: This could potentially be improved later to retain the values\n      //for the fields that are common accross protocols\n      formData.data = {};\n      this.setState({\n        currentProtocol: value\n      });\n    }\n\n    formData[formElement] = value;\n\n    this.setState(\n      {formData}, \n      this.setParentFormData\n    );\n  }\n\n  setSpecimenProtocolFieldFormData(formElement, value) {\n    let formData = this.state.formData;\n    formData.data[formElement] = value;\n  \n    this.setState(\n      {formData}, \n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    if (this.props.setParentFormData) {\n      let formData = this.state.formData;\n      this.props.setParentFormData(formData);\n    }\n  } \n\n  // TODO: decouple this code from the collectionForm by make it a React Component\n  // This generates all the form fields for a given specimen protocol\n  getSpecimenProtocolFields(fieldsObject) {\n    var specimenProtocolFields = Object.keys(fieldsObject).map((attribute) => {\n      let datatype = this.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\n      if (datatype === \"text\" || datatype === \"number\") {\n        if (fieldsObject[attribute]['refTableId'] == null) {\n          return (\n            <TextboxElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              onUserInput={this.setSpecimenProtocolFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribute]['required']}\n              value={this.state.formData.data[attribute]}\n              errorMessage={this.state.formErrors[attribute] ? 'This is a '+datatype+' field.' : null}\n            />\n          );\n        }\n\n        if (fieldsObject[attribute]['refTableId'] !== null) {\n          return (\n            <SelectElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              options={this.props.attributeOptions[fieldsObject[attribute]['refTableId']]}\n              onUserInput={this.setSpecimenProtocolFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribute]['required']}\n              value={this.state.formData.data[attribute]}\n            />\n          );\n        }\n      }\n\n      if (datatype === \"datetime\") {\n        return (\n          <DateElement\n            name={attribute}\n            label={fieldsObject[attribute]['name']}\n            onUserInput={this.setSpecimenProtocolFieldFormData}\n            ref={attribute}\n            required={fieldsObject[attribute]['required']}\n            value={this.state.formData.data[attribute]}\n          />\n        );\n      }\n\n      if (datatype === \"boolean\") {\n      \n      }\n    })\n\n    return specimenProtocolFields;\n  }\n\n  handleSave(e) {\n    //more things will go here later\n    if (!this.props.preparation) {\n      this.savePreparation(this.props.insertAction)\n    }\n    if (this.props.preparation) {\n      this.savePreparation(this.props.updateAction);\n    }\n  }\n\n  savePreparation(action) {\n    let formData = this.state.formData;\n    formData['data'] = JSON.stringify(formData['data']);\n\n    console.log(formData);\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        //Update Parent Specimen Page Here\n        //formData.data = JSON.parse(formData.data);\n        this.props.refreshParent();\n        //swal(\"Specimen Preparation Update Successful!\", \"\", \"success\");\n        //this.props.onSuccess();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n}\n\nSpecimenPreparationForm.propTypes = {\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n  units: React.PropTypes.object.isRequired,\n}\n\nexport default SpecimenPreparationForm;\n\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/preparationForm.js","/**\n * This file contains React components for Modal component.\n *\n * @author Henri Rabalais\n * @version 1.1.0\n *\n */\n\nimport Modal from './Modal';\n\n/**\n * Modal Component.\n * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n *\n * ================================================\n * Usage:\n *\n * =================================================\n *\n */\n\nclass FormModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { show: false, throwWarning: false }\n\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.confirmClose = this.confirmClose.bind(this);\n    this.setWarning = this.setWarning.bind(this);\n  }\n\n  renderChildren() {\n    return React.Children.map(this.props.children, child => {\n      return React.cloneElement(child, { onSuccess: this.closeModal, onChange: this.setWarning });\n    });\n  }\n\n  openModal() {\n    this.setState({\n      show: true\n    });\n  } \n\n  setWarning() {\n    this.setState({\n      throwWarning: true\n    });\n  }\n\n  confirmClose() {\n    if (this.state.throwWarning) {\n      swal({\n        title: \"Are You Sure?\",\n        text: \"Leaving the form will result in the loss of any information entered.\",\n        type: \"warning\",\n        showCancelButton: true,\n        confirmButtonText: 'Proceed',\n        cancelButtonText: 'Cancel',\n      },\n      function() {\n        this.closeModal();\n      }.bind(this));\n    } else {\n      this.closeModal();\n    }\n  }\n\n  closeModal() {\n    this.setState({\n      show: false,\n      throwWarning: false\n    });\n  }\n\n  render() {\n    return (\n      <Modal \n        closeModal={this.confirmClose} \n        openModal={this.openModal} \n        show={this.state.show}\n        {...this.props} \n      >\n        {this.renderChildren()}\n      </Modal>\n    );\n  }\n}\n\nFormModal.propTypes = {\n  title: React.PropTypes.string,\n  buttonClass: React.PropTypes.string,\n  buttonStyle: React.PropTypes.object,\n  buttonContent: React.PropTypes.object,\n};\nFormModal.defaultProps = {\n  buttonClass: 'btn btn-primary'\n};\n\nexport default FormModal;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/FormModal.js","/**\n * This file contains React components for Modal component.\n *\n * @author Henri Rabalais\n * @version 1.1.0\n *\n */\n\n/**\n * Modal Component.\n * React wrapper for a Modal Window. Allows to dynamically toggle a Modal window.\n *\n * ================================================\n * Usage:\n *\n * =================================================\n *\n */\nclass Modal extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n  }\n\n  render() {\n    // Black Background with Alpha Channel\n    const backdropStyle = {\n      position: 'fixed',\n      zIndex: 9998,\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundColor: 'rgba(0,0,0,0.3)',\n      padding: 50\n    };\n\n    // White Modal Window\n    const modalStyle = {\n      position: 'relative',\n      maxWidth: 1000,\n      maxHeight: '100%',\n      margin: '0 auto',\n      backgroundColor: '#fff',\n      borderRadius: 10,\n      overflowY: 'auto',\n      zIndex: 9999\n    };\n\n    const titleStyle = {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      background: '#093782',\n      height: '70px',\n      borderTopRightRadius: '10',\n      color: '#FFFFFF',\n      fontSize: 24,\n      padding: 20,\n    }\n\n    const glyphStyle = {\n      marginLeft: 'auto',\n      cursor: 'pointer'\n    }\n\n    const bodyStyle = {\n      padding: 15\n    }\n  \n    var button = (\n      <div\n        className={this.props.buttonClass}\n        onClick={this.props.openModal}\n      >\n        {this.props.buttonContent}\n      </div>\n    );\n\n    var modal;\n    if (this.props.show) {\n      modal = (\n        <div style={backdropStyle} onClick={this.props.closeModal}>\n          <div\n            style={modalStyle}\n            onClick={e => {\n              e.stopPropagation();\n            }}\n          >\n            <div\n              style={titleStyle}\n            >\n              {this.props.title}\n              <span \n                style={glyphStyle}\n                onClick={this.props.closeModal}\n              >\n                ×\n              </span>\n            </div>\n            <div\n              style={bodyStyle}\n            >\n              {this.props.children}\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div style={this.props.style}>\n        {button}\n        {modal}\n      </div>\n    );\n  }\n}\n\nModal.propTypes = {\n  title: React.PropTypes.string,\n  buttonClass: React.PropTypes.string,\n  buttonStyle: React.PropTypes.object,\n  buttonContent: React.PropTypes.object,\n  show: React.PropTypes.boolean,\n  closeModal: React.PropTypes.func,\n  openModal: React.PropTypes.func\n};\nModal.defaultProps = {\n  buttonClass: 'btn btn-primary'\n};\n\nexport default Modal;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Modal.js","/**\n * This file contains React component for Loader\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n */\n\n/**\n * Loader component\n */\nclass Loader extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n\n    return (\n      <div className='loader-container'>\n        <div className=\"loader\"/>\n      </div>\n\n\n    );\n  }\n}\n\nexport default Loader;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Loader.js","/**\n * Biobank Container Temperature Form\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\n\nclass TemperatureField extends React.Component {\n  render() {\n    return (\n      <div className={this.props.className}>\n        <div className='col-xs-6'> \n            <TextboxElement\n              name='temperature'\n              labelClass='col-xl-0'\n              inputClass='col-lg-12'\n              onUserInput={this.props.setContainerData}\n              value={this.props.container.temperature}\n            />  \n        </div>\n        <div className='col-xs-3'> \n          <ButtonElement\n            label=\"Update\"\n            onUserInput={this.props.saveContainer}\n            columnSize= 'col-lg-12'\n          />\n        </div>\n        <div className='col-xs-3'> \n          <a onClick={this.props.toggle}>\n            Cancel\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nTemperatureField.propTypes = {\n  setContainerData: React.PropTypes.func,\n  container: React.PropTypes.object,\n  saveContainer: React.PropTypes.func,\n  className: React.PropTypes.string\n};\n\nexport default TemperatureField;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/temperatureField.js","/**\n * LifeCycle\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass LifeCycle extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n    \n    };\n   \n  }\n\n  componentDidMount() {\n  }\n\n  mouseOver(e) {\n    //this isn't a very 'react' way of doing things, so consider revision\n      $('.collection').css(\n        {'border': '2px solid #093782',\n         'box-shadow': '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)'});\n  }\n\n  mouseLeave(e) {\n    //this isn't a very 'react' way of doing things, so consider revision\n      $('.collection').css({'border': '2px solid #A6D3F5', 'box-shadow': 'none'});\n  }\n\n  mouseOverPreparation(e) {\n    //this isn't a very 'react' way of doing things, so consider revision\n      $('.preparation').css({'border': '2px solid #093782', 'box-shadow': '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)'});\n  }\n\n  mouseLeavePreparation(e) {\n    //this isn't a very 'react' way of doing things, so consider revision\n      $('.preparation').css({'border': '2px solid #A6D3F5', 'box-shadow': 'none'});\n  }\n\n  render() {\n\n    let collectionNode;\n    let collectionTooltip;\n    if (this.props.collection || this.props.container) {\n      collectionTooltip = (\n        <div>\n          <h>Collection</h>\n          <p>Date:</p> \n        </div>\n      );\n\n      collectionNode = (\n        <div \n          onMouseEnter={(e) => this.mouseOver(e)}\n          onMouseLeave={(e) => this.mouseLeave(e)}\n          className='lifecycle-node collection'\n        >\n          <div className='letter'>\n            C\n          </div>\n        </div>\n      );\n    }\n\n    let preparationNode;\n    if (this.props.preparation) {\n      preparationNode = (\n        <div \n          onMouseEnter={this.mouseOverPreparation}\n          onMouseLeave={this.mouseLeavePreparation}\n          className='lifecycle-node preparation' \n        >\n          <div className='letter'>\n            P\n          </div>\n        </div>\n      );\n    }\n\n    let analysisNode;\n    if (this.props.analysis) {\n      analysisNode = (\n        <div className='lifecycle-node-container'>\n           <div className='lifecycle-node'/>\n           <div className='lifecycle-text'>Analysis</div>\n        </div>\n      );\n    }\n\n    let line;\n    line = (\n        <div className='lifecycle-line'/>\n    );\n\n    return (\n      <div className='lifecycle'>\n        <div className='lifecycle-graphic'>\n          {collectionNode}\n          {preparationNode ? line : null}\n          {preparationNode}\n          {analysisNode} \n        </div>\n      </div>\n    );\n  }\n\n}\n\nLifeCycle.propTypes = {\n}\n\nexport default LifeCycle;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/lifeCycle.js","/**\n * Biobank Container Checkout\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\n\nclass ContainerCheckout extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.checkoutContainer = this.checkoutContainer.bind(this);\n  }\n\n  checkoutContainer() {\n    let formData = {'containerId': this.props.containerId}\n    let formObj = new FormData();\n    //TODO: this seems to be necessary, however the check could be better.\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n    console.log(formObj);\n\n    $.ajax({\n      type: 'POST',\n      url: `${loris.BaseURL}/biobank/ajax/submitData.php?action=checkoutContainer`,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        this.props.refreshParent();\n        swal(\"Container is checked-out!\", \"\", \"success\");\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, '', \"error\");\n      }.bind(this)\n    });\n  }\n\n  render() {\n    let checkoutButton = null;\n    if (this.props.parentContainerId) { \n      checkoutButton = (\n        <div \n          className='action-button update'\n          data-toggle='tooltip'\n          title='Checkout Container'\n          data-placement='right'\n          onClick={this.checkoutContainer}\n        >   \n          <span className='glyphicon glyphicon-share'/>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {checkoutButton}\n      </div>\n    );\n  }\n}\n\nContainerCheckout.propTypes = {\n};\n\nexport default ContainerCheckout;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/containerCheckout.js","/* exported RBiobankSpecimen */\n\nimport SpecimenCollectionForm from './collectionForm';\nimport SpecimenPreparationForm from './preparationForm';\nimport ContainerParentForm from './containerParentForm';\nimport FormModal from 'FormModal';\nimport Loader from 'Loader';\nimport BiobankSpecimenForm from './specimenForm.js';\nimport LifeCycle from './lifeCycle.js';\nimport ContainerCheckout from './containerCheckout.js';\nimport TemperatureField from './temperatureField.js';\nimport QuantityField from './quantityField.js';\n\n/**\n * Biobank Specimen\n *\n * Fetches data corresponding to a given Specimen from Loris backend and\n * displays a page allowing viewing of meta information of the specimen\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n */\nclass BiobankSpecimen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: {},\n      isLoaded: false,\n      loadedData: 0,\n      editTemperature: false,\n      editQuantity: false,\n      editCollection: false,\n      editPreparation: false\n    };\n\n    this.fetchSpecimenData = this.fetchSpecimenData.bind(this);\n    this.fetchOptions = this.fetchOptions.bind(this);\n    this.toggle = this.toggle.bind(this);\n    this.mapFormOptions = this.mapFormOptions.bind(this);\n    this.setContainerData = this.setContainerData.bind(this);\n    this.setSpecimenData = this.setSpecimenData.bind(this);\n    this.updateCollection = this.updateCollection.bind(this);\n    this.updatePreparation = this.updatePreparation.bind(this);\n    this.saveContainer = this.saveContainer.bind(this);\n    this.saveSpecimen = this.saveSpecimen.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchSpecimenData();\n    this.fetchOptions();\n\n    $('[data-toggle=\"tooltip\"]').tooltip();\n  }\n\n  fetchSpecimenData() {\n    var self = this;\n    $.ajax(this.props.specimenPageDataURL, {\n      dataType: 'json',\n      success: function(data) {\n        let specimen = JSON.parse(JSON.stringify(data.specimen));\n        let container = JSON.parse(JSON.stringify(data.container));\n        self.setState({\n          data: data,\n          container: container,\n          specimen: specimen,\n          isLoaded: true,\n        });\n      },\n      error: function(error, errorCode, errorMsg) {\n        console.error(error, errorCode, errorMsg);\n        self.setState({\n          error: 'An error occurred when loading the form!'\n        });\n      }\n    });\n  }\n\n  fetchOptions() {\n    var self = this;\n    $.ajax(this.props.optionsURL, {\n      dataType: 'json',\n      success: function(data) {\n        self.setState({\n          options: data,\n        });\n      },\n      error: function(error, errorCode, errorMsg) {\n        console.error(error, errorCode, errorMsg);\n        self.setState({\n          error: 'An error occurred when loading the form!'\n        });\n      }\n    });\n  }\n\n  //TODO: saveContainer() and saveSpecimen() can be merged into 1 function FOR SURE\n  saveContainer() {\n    let container = this.state.container;\n    let containerObj = new FormData();\n    for (let key in container) {\n      if(container[key] !== \"\") {\n        containerObj.append(key, container[key]);\n      }   \n    }   \n   \n    $.ajax({\n      type: 'POST',\n      url: this.props.saveContainer,\n      data: containerObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        let data = this.state.data;\n        data.container = JSON.parse(JSON.stringify(this.state.container));\n        this.setState({data: data, editTemperature: false})\n        swal(\"Save Successful!\", \"\", \"success\");\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        }); \n        swal(msg, '', \"error\");\n      }.bind(this)\n    }); \n  }\n\n  saveSpecimen() {\n    let specimen = this.state.specimen;\n    let specimenObj = new FormData();\n    for (let key in specimen) {\n      if(specimen[key] !== \"\") {\n        specimenObj.append(key, specimen[key]);\n      }   \n    }   \n   \n    $.ajax({\n      type: 'POST',\n      url: this.props.saveSpecimen,\n      data: specimenObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        let data = this.state.data;\n        data.specimen = JSON.parse(JSON.stringify(this.state.specimen));\n        this.setState({data: data, editQuantity: false})\n        swal(\"Save Successful!\", \"\", \"success\");\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        }); \n        swal(msg, '', \"error\");\n      }.bind(this)\n    }); \n  }\n\n  toggle(stateKey) {\n    let stateValue = this.state[stateKey];\n    this.setState({\n      [stateKey]: !stateValue\n    });\n  }\n\n  updateCollection() {\n    this.fetchSpecimenData();\n    this.toggle('editCollection');\n  } \n\n  updatePreparation() {\n    this.fetchSpecimenData();\n    this.toggle('editPreparation');\n  } \n\n  // TODO: map options for forms - this is used frequently and may need\n  // to be moved to a more global place\n  mapFormOptions(rawObject, targetAttribute) {\n    var data = {};\n    for (var id in rawObject) {\n      data[id] = rawObject[id][targetAttribute];\n    }\n\n    return data;\n  }\n\n  setContainerData(name, value) {\n    let container = this.state.container;\n    container[name] = value;\n\n    this.setState({container});\n  }\n\n  setSpecimenData(name, value) {\n    let specimen = this.state.specimen;\n    specimen[name] = value;\n\n    this.setState({specimen});\n  }\n\n  render() {\n    // Data loading error\n    if (this.state.error !== undefined) {\n      return (\n        <div className=\"alert alert-danger text-center\">\n          <strong>\n            {this.state.error}\n          </strong>\n        </div>\n      );\n    }\n\n    // Waiting for data to load\n    if (!this.state.isLoaded) {\n      return (\n        <Loader/>\n      );\n    }\n\n\t// Checks if parent specimen exists \n  // If exist: returns Barcode value with href\n  // If !exist: returns value 'None'\n  let parentSpecimenBarcodeValue\n  let parentSpecimenBarcode;\n\tif (this.state.data.parentSpecimenBarcode) {\n\t  var specimenURL = loris.BaseURL+\"/biobank/specimen/?barcode=\";\n\t  parentSpecimenBarcodeValue = (\n        <a href={specimenURL+this.state.data.parentSpecimenBarcode}>\n          {this.state.data.parentSpecimenBarcode}\n        </a>\n\t  );\n\n      parentSpecimenBarcode = (\n       <div className='item'>\n         <div className='field'>\n         Parent Specimen\n           <div className='value'>\n             {parentSpecimenBarcodeValue ? parentSpecimenBarcodeValue : 'None'}\n           </div>\n         </div>\n       </div>\n      );\n    }\n\n    // Checks if parent container exists and returns static element with href\n    let parentContainerBarcodeValue\n    if (this.state.data.parentContainer) {\n      var containerURL = loris.BaseURL+\"/biobank/container/?barcode=\";\n      parentContainerBarcodeValue = ( \n          <a href={containerURL+this.state.data.parentContainer.barcode}>   \n            {this.state.data.parentContainer.barcode}\n          </a> \n      );  \n    }\n\n    var parentContainerBarcode = ( \n      <div className=\"item\">\n        <div className='field'>\n          Parent Container\n          <div className='value'>\n            {parentContainerBarcodeValue ? parentContainerBarcodeValue : 'None'}\n          </div>\n          {(parentContainerBarcodeValue && this.state.data.container.coordinate) ? 'Coordinate '+this.state.data.container.coordinate : null}\n        </div>\n        <div\n          className='action'\n          data-toggle='tooltip'\n          title='Move Specimen'\n          data-placement='right'\n         >\n          <FormModal\n            title='Update Parent Container'\n            buttonClass='action-button update'\n            buttonContent={\n              <span\n                className='glyphicon glyphicon-chevron-right'\n              />  \n            }   \n          >   \n            <ContainerParentForm\n              container={this.state.data.container}\n              containersNonPrimary={this.state.options.containersNonPrimary}\n              containerDimensions={this.state.options.containerDimensions}\n              containerCoordinates={this.state.options.containerCoordinates}\n              containerTypes={this.state.options.containerTypes}\n              containerStati={this.state.options.containerStati}\n              action={`${loris.BaseURL}/biobank/ajax/submitData.php?action=updateContainerParent`}\n              refreshParent={this.fetchSpecimenData}\n            />\n          </FormModal>\n        </div>\n      </div>\n    );\n\n    /**\n     * Specimen Form\n     */\n    let addAliquotForm;\n\n    if (loris.userHasPermission('biobank_write')) {\n      /**\n       * Map Options for Form Select Elements\n       */      \n      let specimenTypes = {};\n      //produces options conditionally based on the parentId of the specimen\n      for (let id in this.state.options.specimenTypes) {\n        // if parentTypeId is equal to typeId\n        if (\n             (this.state.options.specimenTypes[id].parentTypeId == \n             this.state.data.specimen.typeId) || \n             (id == this.state.data.specimen.typeId)\n           ) {\n          specimenTypes[id] = this.state.options.specimenTypes[id]['type'];\n        }\n      }\n\n      let specimenUnits = this.mapFormOptions(this.state.options.specimenUnits, 'unit');\n      let containerTypesPrimary = this.mapFormOptions(this.state.options.containerTypesPrimary, 'label');\n\n      let addAliquotButtonContent = (\n        <span>+</span>  \n      );\n\n      addAliquotForm = (\n        <div data-toggle='tooltip' title='Make Aliquots' data-placement='right'>\n          <FormModal\n            title=\"Add Aliquots\"\n            buttonClass='action-button add'\n            buttonContent={addAliquotButtonContent}\n          >\n            <BiobankSpecimenForm\n              action={`${loris.BaseURL}/biobank/ajax/submitData.php?action=submitSpecimen`}\n              parentSpecimenIds={this.state.data.specimen.id}\n              parentSpecimenBarcodes={this.state.data.container.barcode}\n              candidateId={this.state.data.specimen.candidateId}\n              sessionId={this.state.data.specimen.sessionId} \n              pscid={this.state.data.candidate.PSCID}\n              visit={this.state.data.session.Visit_label}\n              unitId={this.state.data.specimen.unitId}\n              specimenTypes={specimenTypes}\n              specimenTypeUnits={this.state.options.specimenTypeUnits}\n              specimenUnits = {specimenUnits}\n              containerTypesPrimary={containerTypesPrimary}\n              containersNonPrimary={this.state.options.containersNonPrimary}\n              containerDimensions={this.state.options.containerDimensions}\n              containerCoordinates={this.state.options.containerCoordinates}\n              specimenTypeAttributes={this.state.options.specimenTypeAttributes}\n              attributeDatatypes={this.state.options.attributeDatatypes}\n              attributeOptions={this.state.options.attributeOptions}\n              refreshParent={this.fetchSpecimenData}\n            />\n          </FormModal>\n        </div>\n      );\n    }\n   \n\n    /** \n     * Collection Form\n     */\n\n    // Declare Variables\n    let collectionPanel;\n    let collectionPanelForm;\n    let cancelEditCollectionButton;\n\n    if (this.state.editCollection) {\n\n      //Map Options for Form Select Elements\n      let specimenTypes = {};\n      //produces options conditionally based on the parentId of the specimen\n      for (var id in this.state.options.specimenTypes) {\n        // if specimen type has a parent type\n        if (this.state.options.specimenTypes[this.state.data.specimen.typeId].parentTypeId) {\n          if (this.state.options.specimenTypes[id].parentTypeId == this.state.options.specimenTypes[this.state.data.specimen.typeId].parentTypeId\n             || id == this.state.data.specimen.typeId) {\n            specimenTypes[id] = this.state.options.specimenTypes[id]['type'];\n          }\n        // else if specimen type has no parent type\n        } else {\n          if (!this.state.options.specimenTypes[id].parentTypeId) {\n            specimenTypes[id] = this.state.options.specimenTypes[id]['type'];\n          }\n        }\n      }\n\n      let containerTypesPrimary = this.mapFormOptions(this.state.options.containerTypesPrimary, 'label');\n\n      collectionPanelForm = (\n        <SpecimenCollectionForm\n          specimenId={this.state.data.specimen.id}\n          specimenType={this.state.data.specimen.typeId}\n          containerId={this.state.data.container.id}\n          containerType={this.state.data.container.typeId}\n          collection={this.state.data.specimen.collection}\n          specimenTypes={specimenTypes}\n          specimenTypeAttributes={this.state.options.specimenTypeAttributes}\n          attributeDatatypes={this.state.options.attributeDatatypes}\n          attributeOptions={this.state.options.attributeOptions}\n          containerTypesPrimary={containerTypesPrimary}\n          specimenTypeUnits={this.state.options.specimenTypeUnits}\n          edit={true}\n          action={`${loris.BaseURL}/biobank/ajax/submitData.php?action=updateSpecimenCollection`}\n          toggleEdit={() => this.toggle('editCollection')}\n          refreshParent={this.updateCollection}\n        />\n      );\n\n      cancelEditCollectionButton = (\n        <a\n          className=\"pull-right\"\n          style={{cursor:'pointer'}}\n          onClick={() => this.toggle('editCollection')}\n        >\n          Cancel\n        </a>\n      );\n\n    } else {\n\n      //loops through data object to produce static elements\n      if (this.state.data.specimen.collection.data) {\n        var dataObject = this.state.data.specimen.collection.data;\n        var specimenTypeAttributes = Object.keys(dataObject).map((key) => {\n          return (\n            <StaticElement\n              label={this.state.options.specimenTypeAttributes[this.state.data.specimen.typeId][key].name}\n              text={dataObject[key]}\n            />\n          );\n        })\n      }\n\n      collectionPanelForm = (\n        <FormElement>\n          <StaticElement\n            label='Quantity'\n            text={this.state.data.specimen.collection.quantity+' '+this.state.options.specimenUnits[this.state.data.specimen.collection.unitId].unit}\n          />\n          <StaticElement\n            label='Location'\n            text={this.state.options.sites[this.state.data.specimen.collection.locationId]}\n          />\n\t      {specimenTypeAttributes}\n          <StaticElement\n            label='Date'\n            text={this.state.data.specimen.collection.date}\n          />\n          <StaticElement\n            label='Time'\n            text={this.state.data.specimen.collection.time}\n          />\n          <StaticElement\n            label='Comments'\n            text={this.state.data.specimen.collection.comments}\n          />\n        </FormElement>\n      );\n    }\n\n    collectionPanel = (\n\t  <div className='panel panel-default'>\n        <div className='panel-heading'>\n          <div className='lifecycle-node collection'>\n            <div className='letter'>C</div>\n          </div>\n          <div className='title'>\n            Collection\n          </div>\n          <span \n            className={this.state.editCollection ? null : 'glyphicon glyphicon-pencil'}\n            onClick={this.state.editCollection ? null : () => this.toggle('editCollection')}\n          />\n        </div>\n        <div className='panel-body'>\n          {collectionPanelForm}\n          {cancelEditCollectionButton}\n        </div>\n\t  </div>\n    );\n\n    /*\n     * Preparation Form\n     */\n    \n    // Preparation Panel variable declaration\n    let preparationPanel;\n    let preparationForm;\n    let specimenProtocolAttributes;\n    let cancelEditPreparationButton;\n\n    // If the form is an edit state\n    if (this.state.editPreparation) {\n      //Map Options for Form Select Elements Here\n      specimenProtocolAttributes = this.state.options.specimenProtocolAttributes[this.state.data.specimen.typeId];\n\n      //This remaps specimen Protocols based on the specimen Type\n      //this may need to be refactored or put into a function later\n      let specimenProtocols = {};\n      for (let id in specimenProtocolAttributes) {\n        specimenProtocols[id] = this.state.options.specimenProtocols[id];\n      }\n\n      specimenProtocols = this.mapFormOptions(specimenProtocols, 'protocol');\n \n      preparationForm = (\n        <SpecimenPreparationForm\n          specimenId={this.state.data.specimen.id}\n          preparation={this.state.data.specimen.preparation ? this.state.data.specimen.preparation : null}\n          specimenProtocols={specimenProtocols}\n          specimenProtocolAttributes={specimenProtocolAttributes}\n          attributeDatatypes={this.state.options.attributeDatatypes}\n          attributeOptions={this.state.options.attributeOptions}\n          sites={this.state.options.sites}\n          insertAction={`${loris.BaseURL}/biobank/ajax/submitData.php?action=insertSpecimenPreparation`}\n          updateAction={`${loris.BaseURL}/biobank/ajax/submitData.php?action=updateSpecimenPreparation`}\n          refreshParent={this.updatePreparation}\n        />\n      );\n\n      cancelEditPreparationButton = (\n        <a className=\"pull-right\" style={{cursor:'pointer'}} onClick={() => this.toggle('editPreparation')}>Cancel</a>\n      );\n    }\n\n    // If Preparation Does Exist and the form is not in an edit state\n    if (this.state.data.specimen.preparation && !this.state.editPreparation) {\n      var dataObject = this.state.data.specimen.preparation.data;\n      \n      if (dataObject) {\n        specimenProtocolAttributes = Object.keys(dataObject).map((key) => {\n          return (\n            <StaticElement\n              label={this.state.options.specimenProtocolAttributes[this.state.data.specimen.typeId][this.state.data.specimen.preparation.protocolId][key].name}\n              text={dataObject[key]}\n            />\n          );\n        })\n      }\n\n      preparationForm = (\n        <FormElement>\n          <StaticElement\n            label='Protocol'\n            text={this.state.options.specimenProtocols[this.state.data.specimen.preparation.protocolId].protocol}\n          />\n          <StaticElement\n            label='Location'\n            text={this.state.options.sites[this.state.data.specimen.preparation.locationId]}\n          />\n          {specimenProtocolAttributes}\n          <StaticElement\n            label='Date'\n            text={this.state.data.specimen.preparation.date}\n          />\n          <StaticElement\n            label='Time'\n            text={this.state.data.specimen.preparation.time}\n          />\n          <StaticElement\n            label='Comments'\n            text={this.state.data.specimen.preparation.comments}\n          />\n        </FormElement>\n      );\n    }\n\n    // If preparation does not exist and if the form is not in an edit state\n    // and a preparation protocol exists for this specimen type\n    if (this.state.options.specimenProtocolAttributes[this.state.data.specimen.typeId] && \n        !this.state.data.specimen.preparation && !this.state.editPreparation) {\n      preparationPanel = (\n        <div\n          className='panel inactive'\n        >\n          <div\n            className='add-process'\n            onClick={() => this.toggle('editPreparation')}\n          >\n            <span className='glyphicon glyphicon-plus'/>\n          </div>\n          <div>\n          ADD PREPARATION\n          </div>\n        </div>\n      );\n\n    } else if (this.state.data.specimen.preparation || this.state.editPreparation) {\n      preparationPanel = (\n        <div className='panel panel-default'>\n          <div className='panel-heading'>\n            <div className='lifecycle-node preparation'>\n              <div className='letter'>P</div>\n            </div>\n            <div className='title'>\n              Preparation\n            </div>\n            <span \n              className={this.state.editPreparation ? null : 'glyphicon glyphicon-pencil'}\n              onClick={this.state.editPreparation ? null : () => this.toggle('editPreparation')}\n            />\n          </div>\n          <div className='panel-body'>\n            {preparationForm}\n            {cancelEditPreparationButton}\n          </div>\n        </div>\n      );\n    }\n\n\n    /**\n     * Analysis Form\n     */\n    let analysisPanel;\n    analysisPanel = (\n\t  <div\n        className='panel inactive'\n\t  >\n        <div\n          className='add-process'\n        >\n          <span className='glyphicon glyphicon-plus'/>\n        </div>\n        <div>\n        ADD ANALYSIS\n        </div>\n      </div>\n    );\n\n    let temperatureField;\n    if (!this.state.editTemperature) {\n      temperatureField = (\n        <div className=\"item\">\n          <div className='field'>\n            Temperature\n            <div className='value'>\n              {this.state.data.container.temperature + '°C'}\n            </div>\n          </div>\n          <div \n            className='action'\n            data-toggle='tooltip'\n            title='Update Temperature'\n            data-placement='right'\n          >\n            <span\n              className='action-button update'\n              onClick={() => this.toggle('editTemperature')}\n            >\n              <span className='glyphicon glyphicon-chevron-right'/>\n            </span>\n          </div>\n        </div>\n      )\n    } else {\n      temperatureField = (\n        <div className=\"item\">\n          <div className='field'>\n            Temperature\n            <TemperatureField\n              className='centered-horizontal'\n              container={this.state.container}\n              toggleEditTemperature={() => this.toggle('editTemperature')}\n              setContainerData={this.setContainerData}\n              saveContainer={this.saveContainer}\n            />\n          </div>\n        </div>\n      )\n    }\n\n    let quantityField;\n    if (!this.state.editQuantity) {\n      quantityField = (\n        <div className=\"item\">\n          <div className='field'>\n            Quantity\n            <div className='value'>\n              {this.state.data.specimen.quantity}\n              {' '+this.state.options.specimenUnits[this.state.data.specimen.unitId].unit}\n            </div>\n          </div>\n          <div\n            className='action'\n            data-toggle='tooltip'\n            title='Update Quantity'\n            data-placement='right'\n          >\n            <div\n              className='action-button update'\n              onClick={() => this.toggle('editQuantity')}\n            >\n              <span className='glyphicon glyphicon-chevron-right'/>  \n            </div>\n          </div>\n        </div>\n      );\n    } else {\n      let specimenUnits = this.state.options.specimenTypeUnits[this.state.data.specimen.typeId];\n      specimenUnits = this.mapFormOptions(specimenUnits, 'unit');\n      quantityField = (\n        <div className=\"item\">\n          <div className='field'>\n            Quantity\n            <QuantityField\n              className='centered-horizontal'\n              specimen={this.state.specimen}\n              units={specimenUnits}\n              toggle={() => this.toggle('editQuantity')}\n              setSpecimenData={this.setSpecimenData}\n              saveSpecimen={this.saveSpecimen}\n            />\n          </div>\n        </div>\n      )\n    }\n\n    //TODO: This should eventually go into its own component \n    let globals = (\n      <div className='globals'>\n        <div className='list'>\n          <div className='item'>\n            <div className='field'>\n              Specimen Type\n              <div className='value'>\n                {this.state.options.specimenTypes[\n                  this.state.data.specimen.typeId\n                ].type}\n              </div>\n            </div>\n          </div>\n          <div className='item'>\n            <div className='field'>\n              Container Type\n              <div className='value'>\n                {this.state.options.containerTypes[this.state.data.container.typeId].label}\n              </div>\n            </div>\n          </div>\n          {quantityField}\n          {temperatureField}\n          <div className=\"item\">\n            <div className='field'>\n              Status\n              <div className='value'>\n                {this.state.options.containerStati[\n                  this.state.data.container.statusId\n                ].status}\n              </div>\n            </div>\n            <div\n              className='action'\n              data-toggle='tooltip'\n              title='Update Status'\n              data-placement='right'\n            >\n              <FormModal\n                title='Update'\n                buttonClass='action-button update'\n                buttonContent={\n                  <span className='glyphicon glyphicon-chevron-right'/>\n                }\n              />\n            </div>\n          </div>\n          <div className=\"item\">\n            <div className='field'>\n              Location\n              <div className='value'>\n                {this.state.options.sites[\n                  this.state.data.container.locationId\n                ]}\n              </div>\n            </div>\n            <div\n              className='action'\n              data-toggle='tooltip'\n              title='Ship Specimen'\n              data-placement='right'\n            >\n              <FormModal\n                title='Ship'\n                buttonClass='action-button update'\n                buttonContent={\n                  <span className='glyphicon glyphicon-chevron-right'/>\n                }\n              />\n            </div>\n          </div>\n          {parentSpecimenBarcode}\n          {parentContainerBarcode}\n          <div className=\"item\">\n            <div className='field'>\n              PSCID\n              <div className='value'>\n                <a href={loris.BaseURL+'/'+this.state.data.specimen.candidateId}>\n                  {this.state.data.candidate.PSCID}\n                </a>\n              </div>\n            </div>\n            <div className='field'>\n              Visit Label\n              <div className='value'>\n                <a href={loris.BaseURL+'/instrument_list/?candID='+this.state.data.specimen.candidateId+'&sessionID='+this.state.data.specimen.sessionId}>\n                  {this.state.data.session.Visit_label}\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n\n    return (\n      <div id='specimen-page'>\n        <div className=\"specimen-header\">\n          <div className='specimen-title'>\n            <div className='barcode'>\n              Barcode\n              <div className='value'>\n                <strong>{this.state.data.container.barcode}</strong>\n              </div>\n            </div>\n            {addAliquotForm}\n            <ContainerCheckout\n              containerId={this.state.data.container.id}\n              parentContainerId={this.state.data.container.parentContainerId}\n              refreshParent={this.fetchSpecimenData}\n            />\n          </div>\n          <LifeCycle\n            collection={this.state.data.specimen.collection}\n            preparation={this.state.data.specimen.preparation}\n            analysis={this.state.data.specimen.analysis}\n            sites={this.state.options.sites}\n          />\n        </div>\n        <div className='summary'>\n          {globals}\n          <div className=\"processing\">\n            {collectionPanel}\n            {preparationPanel}\n            {analysisPanel}\n          </div>\n        </div>\n      </div>\n    ); \n  }\n\n}\n\n  \n\n\nBiobankSpecimen.propTypes = {\n  specimenPageDataURL: React.PropTypes.string.isRequired,\n};\n\nvar RBiobankSpecimen = React.createFactory(BiobankSpecimen);\n\nwindow.BiobankSpecimen = BiobankSpecimen;\nwindow.RBiobankSpecimen = RBiobankSpecimen;\n\nexport default BiobankSpecimen;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimen.js","/**\n * Biobank Specimen Quantity Field\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\n\nclass QuantityField extends React.Component {\n  render() {\n    return (\n      <div className={this.props.className}>\n        <TextboxElement\n          name='quantity'\n          labelClass='col-xl-0'\n          inputClass='col-lg-12'\n          onUserInput={this.props.setSpecimenData}\n          value={this.props.specimen.quantity}\n        />\n        <SelectElement\n          name='unit'\n          labelClass='col-xl-0'\n          inputClass='col-lg-12'\n          options={this.props.units}\n          onUserInput={this.props.setSpecimenData}\n          value={this.props.specimen.unitId}\n        />\n        <ButtonElement\n          label=\"Update\"\n          onUserInput={this.props.saveSpecimen}\n          columnSize= 'col-lg-12'\n        />\n        <a onClick={this.props.toggle}\n        >\n          Cancel\n        </a>\n      </div>\n    );\n  }\n}\n\nQuantityField.propTypes = {\n  setSpecimenData: React.PropTypes.func,\n  specimen: React.PropTypes.object,\n  saveSpecimen: React.PropTypes.func,\n  className: React.PropTypes.string\n};\n\nexport default QuantityField;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/quantityField.js"],"sourceRoot":""}