{"version":3,"sources":["webpack:///modules/biobank/js/specimenIndex.js","webpack:///webpack/bootstrap 2866ecd223a08f57a45b?c060*******","webpack:///./modules/biobank/jsx/specimenIndex.js","webpack:///./jsx/Panel.js?b4c8","webpack:///./modules/biobank/jsx/collectionForm.js?e0f7","webpack:///./modules/biobank/jsx/barcodeForm.js?02a4","webpack:///./modules/biobank/jsx/specimenForm.js?35c0","webpack:///./jsx/Tabs.js?82f5","webpack:///./modules/biobank/jsx/specimen.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_specimen","_specimen2","args","QueryString","get","document","currentScript","src","$","biobankSpecimen","React","createElement","className","DataURL","loris","BaseURL","barcode","collectionFormDataURL","ReactDOM","render","getElementById","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","Panel","_React$Component","this","_this","getPrototypeOf","state","collapsed","initCollapsed","panelClass","toggleCollapsed","bind","setState","glyphClass","pencilGlyph","edit","style","marginRight","cursor","onClick","plusGlyph","add","removeGlyph","cancel","panelHeading","title","data-toggle","data-target","role","height","children","Component","propTypes","PropTypes","string","func","defaultProps","_barcodeForm","_barcodeForm2","BiobankCollectionForm","formData","barcodeFormList","errorMessage","formErrors","countBarcodeForms","handleSubmit","validateForm","setFormData","specimenSubmit","addBarcodeForm","setBarcodeFormData","child","specimenId","candidateId","sessionId","_this2","glyphStyle","color","margin","buttonStyle","appearance","outline","boxShadow","borderColor","backgroundColor","barcodeForms","_loop","push","setParentFormData","specimenTypes","containerTypesPrimary","containerBarcodesNonPrimary","specimenTypeAttributes","attributeDatatypes","capacities","units","button","type","removeBarcodeForm","staticFields","selectFields","StaticElement","label","text","pscid","visit","SelectElement","name","options","pSCIDs","onUserInput","ref","required","visits","visitLabel","disabled","FormElement","onSubmit","ButtonElement","toggleModal","formElement","_this3","test","isNaN","currentContainerType","quantity","specimenTypeFieldsObject","currentSpecimenType","keys","map","attribute","datatype","e","preventDefault","formRefs","refs","isValidForm","JSON","stringify","formObj","FormData","append","ajax","url","action","data","cache","contentType","processData","xhr","window","XMLHttpRequest","success","event","CustomEvent","dispatchEvent","closeModal","swal","error","err","console","msg","responseJSON","message","requiredFields","field","hasError","forceUpdate","sessionData","barcodeFormData","barcodeId","index","splice","isRequired","_specimenForm","_specimenForm2","BiobankBarcodeForm","setSpecimenFormData","TextboxElement","stati","specimenFormData","object","_defineProperty","BiobankSpecimenForm","specimenType","containerType","setSpecimenAttributeFormData","getSpecimenTypeFields","handleUpdate","updateSpecimen","unit","collectDate","notes","parentContainerField","parentContainer","updateButton","specimenFields","specimenTypeFields","DateElement","minYear","maxYear","TextareaElement","_$$ajax","updatePage","parse","Tabs","hash","location","activeTab","updateURL","substr","defaultTab","tabs","handleClick","getTabs","getTabPanes","tabId","onTabChange","scrollDistance","scrollTop","tab","tabClass","href","tabID","tabPanes","Children","cloneElement","tabStyle","marginLeft","marginBottom","array","bool","TabPane","_React$Component2","apply","arguments","classList","TabId","Title","Modal","_React$Component3","show","modalStyle","position","maxWidth","maxHeight","padding","borderRadius","overflowY","zIndex","backdropStyle","top","bottom","left","right","onClose","stopPropagation","node","_collectionForm","_collectionForm2","_Tabs","_Panel","_Panel2","BiobankSpecimen","Data","collectionData","uploadResult","isLoaded","loadedData","editCollection","fetchSpecimenData","fetchCollectionFormData","setCollectionData","showAlertMessage","toggleEditCollection","dataType","specimen","specimenData","container","containerData","parentSpecimenBarcode","parentContainerBarcode","errorCode","errorMsg","method","SpecimenData","isOpen","undefined","alertMessage","alertClass","backURL","concat","specimenURL","LinkElement","containerURL","dataObject","typeId","addSpecimenButton","collectionForm","userHasPermission","candidateInfo","PSCID","sessionInfo","Visit_label","disableEdit","collectionPanelForm","unitId","containerUnits","containerCapacities","capacityId","display","columns","containerStati","statusId","status","myCollectionData","hide","removeClass","upload","addEventListener","evt","lengthComputable","progressbar","progresslabel","percent","Math","round","total","width","html","attr","addClass","alertMsg","fadeTo","delay","slideUp","RBiobankSpecimen","createFactory"],"mappings":"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","file":"./modules/biobank/js/specimenIndex.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _specimen = __webpack_require__(8);\n\t\n\tvar _specimen2 = _interopRequireDefault(_specimen);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar args = QueryString.get(document.currentScript.src); /* global ReactDOM */\n\t\n\t$(function () {\n\t  var biobankSpecimen = React.createElement(\n\t    \"div\",\n\t    { className: \"page-specimen-form\" },\n\t    React.createElement(\n\t      \"div\",\n\t      { className: \"row\" },\n\t      React.createElement(\n\t        \"div\",\n\t        { className: \"col-md-9 col-lg-12\" },\n\t        React.createElement(_specimen2.default, {\n\t          DataURL: loris.BaseURL + \"/biobank/ajax/SpecimenInfo.php?action=getSpecimenData&barcode=\" + args.barcode,\n\t          collectionFormDataURL: loris.BaseURL + \"/biobank/ajax/SpecimenInfo.php?action=getCollectionFormData\"\n\t        })\n\t      )\n\t    )\n\t  );\n\t\n\t  ReactDOM.render(biobankSpecimen, document.getElementById(\"lorisworkspace\"));\n\t});\n\n/***/ },\n/* 1 */,\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Panel\n\t *\n\t * @author Alex I.\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Panel component\n\t * Wraps children in a collapsible bootstrap panel\n\t */\n\tvar Panel = function (_React$Component) {\n\t  _inherits(Panel, _React$Component);\n\t\n\t  function Panel(props) {\n\t    _classCallCheck(this, Panel);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).call(this, props));\n\t\n\t    _this.state = {\n\t      collapsed: _this.props.initCollapsed\n\t    };\n\t\n\t    // Initialize panel class based on collapsed status\n\t    _this.panelClass = _this.props.initCollapsed ? \"panel-collapse collapse\" : \"panel-collapse collapse in\";\n\t\n\t    _this.toggleCollapsed = _this.toggleCollapsed.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Panel, [{\n\t    key: \"toggleCollapsed\",\n\t    value: function toggleCollapsed() {\n\t      this.setState({ collapsed: !this.state.collapsed });\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      // Change arrow direction based on collapse status\n\t      var glyphClass = this.state.collapsed ? \"glyphicon pull-right glyphicon-chevron-down\" : \"glyphicon pull-right glyphicon-chevron-up\";\n\t\n\t      var pencilGlyph = void 0;\n\t      if (this.props.edit) {\n\t        pencilGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-pencil\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.edit\n\t        });\n\t      }\n\t\n\t      var plusGlyph = void 0;\n\t      if (this.props.add) {\n\t        plusGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-plus\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.add\n\t        });\n\t      }\n\t\n\t      var removeGlyph = void 0;\n\t      if (this.props.cancel) {\n\t        removeGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-remove\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.cancel\n\t        });\n\t      }\n\t\n\t      // Add panel header, if title is set\n\t      var panelHeading = this.props.title ? React.createElement(\n\t        \"div\",\n\t        {\n\t          className: \"panel-heading\"\n\t        },\n\t        React.createElement(\"span\", {\n\t          className: glyphClass,\n\t          onClick: this.toggleCollapsed,\n\t          \"data-toggle\": \"collapse\",\n\t          \"data-target\": '#' + this.props.id,\n\t          style: { cursor: 'pointer' }\n\t        }),\n\t        pencilGlyph,\n\t        plusGlyph,\n\t        removeGlyph,\n\t        this.props.title\n\t      ) : '';\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"panel panel-primary\" },\n\t        panelHeading,\n\t        React.createElement(\n\t          \"div\",\n\t          { id: this.props.id, className: this.panelClass, role: \"tabpanel\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"panel-body\", style: { height: this.props.height } },\n\t            this.props.children\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Panel;\n\t}(React.Component);\n\t\n\tPanel.propTypes = {\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  edit: React.PropTypes.func,\n\t  add: React.PropTypes.func\n\t};\n\tPanel.defaultProps = {\n\t  initCollapsed: false,\n\t  id: 'default-panel',\n\t  height: '100%'\n\t};\n\t\n\texports.default = Panel;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _barcodeForm = __webpack_require__(4);\n\t\n\tvar _barcodeForm2 = _interopRequireDefault(_barcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankCollectionForm = function (_React$Component) {\n\t  _inherits(BiobankCollectionForm, _React$Component);\n\t\n\t  function BiobankCollectionForm(props) {\n\t    _classCallCheck(this, BiobankCollectionForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankCollectionForm.__proto__ || Object.getPrototypeOf(BiobankCollectionForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      barcodeFormList: {},\n\t      errorMessage: null,\n\t      formErrors: {},\n\t      countBarcodeForms: [1]\n\t    };\n\t\n\t    //this.getValidFileName = this.getValidFileName.bind(this);\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    //this.isValidFileName = this.isValidFileName.bind(this);\n\t    _this.validateForm = _this.validateForm.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.specimenSubmit = _this.specimenSubmit.bind(_this);\n\t    _this.addBarcodeForm = _this.addBarcodeForm.bind(_this);\n\t    _this.setBarcodeFormData = _this.setBarcodeFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankCollectionForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t\n\t      //if this is a child specimen form then certain formData is set when component mounts\n\t      if (this.props.child) {\n\t        var formData = this.state.formData;\n\t        formData['parentSpecimen'] = this.props.specimenId;\n\t        formData['pscid'] = this.props.candidateId;\n\t        formData['visitLabel'] = this.props.sessionId;\n\t\n\t        this.setState({\n\t          formData: formData\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      //Styling for remove Barcode button\n\t      var glyphStyle = {\n\t        color: '#D3D3D3',\n\t        margin: 'auto'\n\t      };\n\t      var buttonStyle = {\n\t        appearance: 'none',\n\t        outline: 'none',\n\t        boxShadow: 'none',\n\t        borderColor: 'transparent',\n\t        backgroundColor: 'transparent'\n\t\n\t      };\n\t\n\t      //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n\t      var barcodeForms = [];\n\t\n\t      var _loop = function _loop(i) {\n\t        barcodeForms.push(React.createElement(_barcodeForm2.default, {\n\t          setParentFormData: _this2.setBarcodeFormData,\n\t          id: _this2.state.countBarcodeForms[i],\n\t          specimenTypes: _this2.props.specimenTypes,\n\t          containerTypesPrimary: _this2.props.containerTypesPrimary,\n\t          containerBarcodesNonPrimary: _this2.props.containerBarcodesNonPrimary,\n\t          specimenTypeAttributes: _this2.props.specimenTypeAttributes,\n\t          attributeDatatypes: _this2.props.attributeDatatypes,\n\t          capacities: _this2.props.capacities,\n\t          units: _this2.props.units,\n\t          button: i + 1 === _this2.state.countBarcodeForms.length ? React.createElement(\n\t            'button',\n\t            {\n\t              type: 'button',\n\t              className: 'btn btn-success btn-sm',\n\t              onClick: _this2.addBarcodeForm\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-plus' })\n\t          ) : React.createElement(\n\t            'button',\n\t            {\n\t              type: 'button',\n\t              className: 'btn btn-primary-outline btn-sm',\n\t              style: buttonStyle,\n\t              onClick: function onClick() {\n\t                return _this2.removeBarcodeForm(i);\n\t              }\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-remove', style: glyphStyle })\n\t          )\n\t        }));\n\t      };\n\t\n\t      for (var i = 0; i < this.state.countBarcodeForms.length; i++) {\n\t        _loop(i);\n\t      }\n\t\n\t      var staticFields = void 0;\n\t      var selectFields = void 0;\n\t      if (this.props.child) {\n\t        staticFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(StaticElement, {\n\t            label: 'Parent Specimen',\n\t            text: this.props.barcode\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'PSCID',\n\t            text: this.props.pscid\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Visit Label',\n\t            text: this.props.visit\n\t          })\n\t        );\n\t      } else {\n\t        selectFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'pscid',\n\t            label: 'PSCID',\n\t            options: this.props.pSCIDs,\n\t            onUserInput: this.setFormData,\n\t            ref: 'pscid',\n\t            required: true,\n\t            value: this.state.formData.pscid\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'visitLabel',\n\t            label: 'Visit Label',\n\t            options: this.state.visits,\n\t            onUserInput: this.setFormData,\n\t            ref: 'visitLabel',\n\t            required: true,\n\t            value: this.state.formData.visitLabel,\n\t            disabled: this.state.formData.pscid ? false : true\n\t          })\n\t        );\n\t      }\n\t\n\t      //ALLOW THEM TO CANCEL THE FORM AND DELETE BARCODE FORMS\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankCollection',\n\t          onSubmit: this.handleSubmit,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(\n\t          'h3',\n\t          null,\n\t          React.createElement(\n\t            'b',\n\t            null,\n\t            'Add New Specimen',\n\t            this.state.countBarcodeForms > 1 ? \"s\" : \"\"\n\t          )\n\t        ),\n\t        React.createElement('br', null),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            staticFields,\n\t            selectFields\n\t          )\n\t        ),\n\t        barcodeForms,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-xs-3 col-xs-offset-9' },\n\t          React.createElement(ButtonElement, { label: 'Submit' })\n\t        ),\n\t        React.createElement(\n\t          'a',\n\t          { onClick: this.toggleModal },\n\t          'Cancel'\n\t        )\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t    /**\n\t     * Returns a valid name for the file to be specimened\n\t     *\n\t     * @param {string} pscid - PSCID selected from the dropdown\n\t     * @param {string} visitLabel - Visit label selected from the dropdown\n\t     * @param {string} instrument - Instrument selected from the dropdown\n\t     * @return {string} - Generated valid filename for the current selection\n\t     */\n\t    //  getValidFileName(pscid, visitLabel, instrument) {\n\t    //    var fileName = pscid + \"_\" + visitLabel;\n\t    //    if (instrument) fileName += \"_\" + instrument;\n\t    //\n\t    //    return fileName;\n\t    //  }\n\t\n\t\n\t  }, {\n\t    key: 'validateForm',\n\t    value: function validateForm(formElement, value) {\n\t      var _this3 = this;\n\t\n\t      var formErrors = this.state.formErrors;\n\t\n\t      //validate barcode regex\n\t      if (formElement === \"barcode\" && value !== \"\") {\n\t        if (!/^hello/.test(this.state.formData.barcode)) {\n\t          formErrors.barcode = true;\n\t        } else {\n\t          formErrors.barcode = false;\n\t        }\n\t      }\n\t\n\t      //validate that quantity is a number and less than capacity\n\t      if (formElement === \"quantity\" && value !== \"\") {\n\t        if (isNaN(value) || value > this.props.capacities[this.state.currentContainerType]) {\n\t          formErrors.quantity = true;\n\t        } else {\n\t          formErrors.quantity = false;\n\t        }\n\t      }\n\t\n\t      //validate datatypes and regex of generated type attributes\n\t      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t      var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t\n\t        var datatype = _this3.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"number\") {\n\t          if (formElement === attribute) {\n\t            if (isNaN(value) && value !== \"\") {\n\t              formErrors[attribute] = true;\n\t            } else {\n\t              formErrors[attribute] = false;\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      this.setState({\n\t        formErrors: formErrors\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Handle form submission\n\t     * @param {object} e - Form submission event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      var formRefs = this.refs;\n\t      //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\t\n\t      // Validate the form\n\t      if (!this.isValidForm(formRefs, formData)) {\n\t        return;\n\t      }\n\t\n\t      //    // Validate specimened file name\n\t      //    let instrument = formData.instrument ? formData.instrument : null;\n\t      //    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n\t      //    let requiredFileName = this.getValidFileName(\n\t      //      formData.pscid, formData.visitLabel, instrument\n\t      //    );\n\t      //    if (!this.isValidFileName(requiredFileName, fileName)) {\n\t      //      swal(\n\t      //        \"Invalid Specimen name!\",\n\t      //        \"File name should begin with: \" + requiredFileName,\n\t      //        \"error\"\n\t      //      );\n\t      //      return;\n\t      //    }\n\t\n\t      // Check for duplicate file names\n\t      //    let isDuplicate = biobankFiles.indexOf(fileName);\n\t      //    if (isDuplicate >= 0) {\n\t      //      swal({\n\t      //        title: \"Are you sure?\",\n\t      //        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n\t      //        type: \"warning\",\n\t      //        showCancelButton: true,\n\t      //        confirmButtonText: 'Yes, I am sure!',\n\t      //        cancelButtonText: \"No, cancel it!\"\n\t      //      }, function(isConfirm) {\n\t      //        if (isConfirm) {\n\t      //          this.specimenFile();\n\t      //        } else {\n\t      //          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n\t      //        }\n\t      //      }.bind(this));\n\t      //    } else {\n\t\n\t      this.specimenSubmit();\n\t      //    }\n\t    }\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'specimenSubmit',\n\t    value: function specimenSubmit() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          // Trigger an update event to update all observers (i.e DataTable)\n\t          // THIS CURRENTLY DOES NOT WORK\n\t          var event = new CustomEvent('update-datatable');\n\t          window.dispatchEvent(event);\n\t\n\t          this.props.closeModal();\n\t          swal(\"Specimen Submission Successful!\", \"\", \"success\");\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Checks if the inputted file name is valid\n\t     *\n\t     * @param {string} requiredFileName - Required file name\n\t     * @param {string} fileName - Provided file name\n\t     * @return {boolean} - true if fileName starts with requiredFileName, false\n\t     *   otherwise\n\t     */\n\t    //  isValidFileName(requiredFileName, fileName) {\n\t    //    if (fileName === null || requiredFileName === null) {\n\t    //      return false;\n\t    //    }\n\t    //\n\t    //    return (fileName.indexOf(requiredFileName) === 0);\n\t    //  }\n\t\n\t    /**\n\t     * Validate the form\n\t     *\n\t     * @param {object} formRefs - Object containing references to React form elements\n\t     * @param {object} formData - Object containing form data inputed by user\n\t     * @return {boolean} - true if all required fields are filled, false otherwise\n\t     */\n\t\n\t  }, {\n\t    key: 'isValidForm',\n\t    value: function isValidForm(formRefs, formData) {\n\t      var isValidForm = true;\n\t\n\t      var requiredFields = {\n\t        pscid: null,\n\t        visitLabel: null\n\t      };\n\t\n\t      Object.keys(requiredFields).map(function (field) {\n\t        if (formData[field]) {\n\t          requiredFields[field] = formData[field];\n\t        } else if (formRefs[field]) {\n\t          formRefs[field].props.hasError = true;\n\t          isValidForm = false;\n\t        }\n\t      });\n\t      this.forceUpdate();\n\t\n\t      return isValidForm;\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      // Only display visits and sites available for the current pscid\n\t      //let visitLabel = this.state.formData.visitLabel;\n\t      //let pscid = this.state.formData.pscid;\n\t\n\t      //LOOK AT THIS LATER - THE SWITCH TO PROPS MESSED THIS ALL UP \n\t      if (formElement === \"pscid\" && value !== \"\") {\n\t        this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n\t        //this.state.Data.sites = this.state.Data.sessionData[this.state.Data.PSCIDs[value]].sites;\n\t      }\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setBarcodeFormData',\n\t    value: function setBarcodeFormData(barcodeFormData, barcodeId) {\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      barcodeFormList[barcodeId] = barcodeFormData;\n\t      formData['barcodeFormList'] = barcodeFormList;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'addBarcodeForm',\n\t    value: function addBarcodeForm() {\n\t      var countBarcodeForms = this.state.countBarcodeForms;\n\t      countBarcodeForms.push(countBarcodeForms[countBarcodeForms.length - 1] + 1);\n\t      this.setState({\n\t        countBarcodeForms: countBarcodeForms\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removeBarcodeForm',\n\t    value: function removeBarcodeForm(index) {\n\t      var countBarcodeForms = this.state.countBarcodeForms;\n\t      countBarcodeForms.splice(index, 1);\n\t      this.setState({\n\t        countBarcodeForms: countBarcodeForms\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return BiobankCollectionForm;\n\t}(React.Component);\n\t\n\tBiobankCollectionForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired,\n\t  barcode: React.PropTypes.string\n\t};\n\t\n\texports.default = BiobankCollectionForm;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _specimenForm = __webpack_require__(5);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Barcode Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar BiobankBarcodeForm = function (_React$Component) {\n\t  _inherits(BiobankBarcodeForm, _React$Component);\n\t\n\t  function BiobankBarcodeForm(props) {\n\t    _classCallCheck(this, BiobankBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankBarcodeForm.__proto__ || Object.getPrototypeOf(BiobankBarcodeForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      formErrors: {}\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setSpecimenFormData = _this.setSpecimenFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankBarcodeForm, [{\n\t    key: \"render\",\n\t    value: function render() {\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: \"biobankBarcode\"\n\t        },\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-11\" },\n\t            React.createElement(\n\t              \"div\",\n\t              {\n\t                \"data-toggle\": \"collapse\",\n\t                \"data-target\": \"#\" + this.props.id\n\t              },\n\t              React.createElement(TextboxElement, {\n\t                name: \"barcode\",\n\t                label: \"Barcode \" + this.props.id,\n\t                onUserInput: this.setFormData,\n\t                ref: \"barcode\",\n\t                required: true,\n\t                value: this.state.formData[\"barcode\"],\n\t                hasError: this.state.formErrors[\"barcode\"],\n\t                errorMessage: \"Incorrect Barcode format for this Specimen and Container Type\"\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-1\" },\n\t            this.props.button\n\t          )\n\t        ),\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row\" },\n\t          React.createElement(\"div\", { className: \"col-xs-2\" }),\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-9\" },\n\t            React.createElement(\n\t              \"div\",\n\t              { id: this.props.id, className: \"collapse\" },\n\t              React.createElement(_specimenForm2.default, {\n\t                setParentFormData: this.setSpecimenFormData,\n\t                specimenTypes: this.props.specimenTypes,\n\t                specimenTypeAttributes: this.props.specimenTypeAttributes,\n\t                attributeDatatypes: this.props.attributeDatatypes,\n\t                containerTypesPrimary: this.props.containerTypesPrimary,\n\t                containerBarcodesNonPrimary: this.props.containerBarcodesNonPrimary,\n\t                units: this.props.units,\n\t                stati: this.props.stati\n\t              })\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: \"setFormData\",\n\t    value: function setFormData(formElement, value) {\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: \"setSpecimenFormData\",\n\t    value: function setSpecimenFormData(specimenFormData) {\n\t      var formData = this.state.formData;\n\t\n\t      for (var attribute in specimenFormData) {\n\t        formData[attribute] = specimenFormData[attribute];\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: \"setParentFormData\",\n\t    value: function setParentFormData() {\n\t      this.props.setParentFormData(this.state.formData, this.props.id);\n\t    }\n\t  }]);\n\t\n\t  return BiobankBarcodeForm;\n\t}(React.Component);\n\t\n\tBiobankBarcodeForm.propTypes = {\n\t\n\t  id: React.PropTypes.string,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired,\n\t  units: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = BiobankBarcodeForm;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar BiobankSpecimenForm = function (_React$Component) {\n\t  _inherits(BiobankSpecimenForm, _React$Component);\n\t\n\t  function BiobankSpecimenForm(props) {\n\t    _classCallCheck(this, BiobankSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimenForm.__proto__ || Object.getPrototypeOf(BiobankSpecimenForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: { data: {} },\n\t      currentSpecimenType: _this.props.edit ? _this.props.specimenType : null,\n\t      currentContainerType: _this.props.edit ? _this.props.containerType : null,\n\t      formErrors: {}\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setSpecimenAttributeFormData = _this.setSpecimenAttributeFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    _this.getSpecimenTypeFields = _this.getSpecimenTypeFields.bind(_this);\n\t    _this.handleUpdate = _this.handleUpdate.bind(_this);\n\t    _this.updateSpecimen = _this.updateSpecimen.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimenForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var _this2 = this;\n\t\n\t      var formData = this.state.formData;\n\t      if (this.props.edit) {\n\t        formData['barcode'] = this.props.barcode;\n\t        formData['specimenType'] = this.props.specimenType;\n\t        formData['containerType'] = this.props.containerType;\n\t        formData['quantity'] = this.props.quantity;\n\t        formData['unit'] = this.props.unit;\n\t        formData['collectDate'] = this.props.collectDate;\n\t        formData['notes'] = this.props.notes;\n\t\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t        if (specimenTypeFieldsObject) {\n\t          var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t            formData.data[attribute] = _this2.props.data[attribute];\n\t          });\n\t        }\n\t      }\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      var parentContainerField;\n\t      if (!this.props.edit) {\n\t        parentContainerField = React.createElement(SelectElement, {\n\t          name: 'parentContainer',\n\t          label: 'Parent Container Barcode',\n\t          options: this.props.containerBarcodesNonPrimary,\n\t          onUserInput: this.setFormData,\n\t          ref: 'parentContainer',\n\t          required: false,\n\t          value: this.state.formData.parentContainer\n\t        });\n\t      }\n\t\n\t      var updateButton;\n\t      if (this.props.edit) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      }\n\t\n\t      var specimenFields;\n\t      var specimenTypeFields = this.getSpecimenTypeFields();\n\t      if (this.state.currentSpecimenType) {\n\t        specimenFields = React.createElement(\n\t          FormElement,\n\t          {\n\t            name: 'biobankSpecimen',\n\t            onSubmit: this.handleUpdate,\n\t            ref: 'form'\n\t          },\n\t          React.createElement(SelectElement, {\n\t            name: 'containerType',\n\t            label: 'Container Type',\n\t            options: this.props.containerTypesPrimary,\n\t            onUserInput: this.setFormData,\n\t            ref: 'containerType',\n\t            required: true,\n\t            value: this.state.formData.containerType\n\t          }),\n\t          parentContainerField,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Quantity',\n\t            onUserInput: this.setFormData,\n\t            ref: 'quantity',\n\t            required: true,\n\t            value: this.state.formData.quantity,\n\t            hasError: this.state.formErrors.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unit',\n\t            label: 'Unit',\n\t            options: this.props.units,\n\t            onUserInput: this.setFormData,\n\t            ref: 'unit',\n\t            required: true,\n\t            value: this.state.formData.unit\n\t          }),\n\t          specimenTypeFields,\n\t          React.createElement(DateElement, {\n\t            name: 'collectDate',\n\t            label: 'Collection Date',\n\t            minYear: '2000',\n\t            maxYear: '2018',\n\t            onUserInput: this.setFormData,\n\t            ref: 'collectDate',\n\t            required: true,\n\t            value: this.state.formData.collectDate\n\t          }),\n\t          React.createElement(TextareaElement, {\n\t            name: 'notes',\n\t            label: 'Notes',\n\t            onUserInput: this.setFormData,\n\t            ref: 'notes',\n\t            value: this.state.formData.notes\n\t          }),\n\t          updateButton\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankSpecimen'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'specimenType',\n\t            label: 'Specimen Type',\n\t            options: this.props.specimenTypes,\n\t            onUserInput: this.setFormData,\n\t            ref: 'specimenType',\n\t            required: true,\n\t            value: this.state.formData.specimenType\n\t          }),\n\t          specimenFields\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t\n\t      if (formElement === \"specimenType\" && value !== \"\") {\n\t        this.setState({\n\t          currentSpecimenType: value\n\t        });\n\t      }\n\t\n\t      if (formElement === \"containerType\" && value !== \"\") {\n\t        this.setState({\n\t          currentContainerType: value\n\t        });\n\t      }\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setSpecimenAttributeFormData',\n\t    value: function setSpecimenAttributeFormData(formElement, value) {\n\t      var formData = this.state.formData;\n\t      formData.data[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      if (!this.props.edit) {\n\t        var formData = this.state.formData;\n\t        this.props.setParentFormData(formData);\n\t      }\n\t    }\n\t\n\t    // This generates all the form fields for a given specimen type\n\t\n\t  }, {\n\t    key: 'getSpecimenTypeFields',\n\t    value: function getSpecimenTypeFields() {\n\t      var _this3 = this;\n\t\n\t      if (this.state.currentSpecimenType) {\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t        if (specimenTypeFieldsObject) {\n\t          var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t            var datatype = _this3.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t            if (datatype === \"text\" || datatype === \"number\") {\n\t              if (specimenTypeFieldsObject[attribute]['refTableId'] == null) {\n\t                return React.createElement(TextboxElement, {\n\t                  name: attribute,\n\t                  label: specimenTypeFieldsObject[attribute]['name'],\n\t                  onUserInput: _this3.setSpecimenAttributeFormData,\n\t                  ref: attribute,\n\t                  required: specimenTypeFieldsObject[attribute]['required'],\n\t                  value: _this3.state.formData.data[attribute],\n\t                  hasError: _this3.state.formErrors[attribute],\n\t                  errorMessage: \"This is a \" + datatype + \" field.\"\n\t                });\n\t              }\n\t\n\t              // OPTIONS FOR SELECT ELEMENT WILL MOST LIKELY BE PASSED VIA AJAX CALL\n\t              // BUT IT CAN ALSO BE PRELOADED --\n\t              // ASK RIDA HOW THIS SHOULD BE DONE\n\t              if (specimenTypeFieldsObject[attribute]['refTableId'] !== null) {\n\t                return React.createElement(SelectElement, {\n\t                  name: attribute,\n\t                  label: specimenTypeFieldsObject[attribute]['name'],\n\t                  options: '',\n\t                  onUserInput: _this3.setSpecimenAttributeFormData,\n\t                  ref: attribute,\n\t                  required: _this3.state.formData[attribute],\n\t                  value: _this3.state.formData.data[attribute]\n\t                });\n\t              }\n\t            }\n\t\n\t            if (datatype === \"datetime\") {\n\t              return React.createElement(DateElement, {\n\t                name: attribute,\n\t                label: specimenTypeFieldsObject[attribute]['name'],\n\t                onUserInput: _this3.setSpecimenAttributeFormData,\n\t                ref: attribute,\n\t                required: specimenTypeFieldsObject[attribute]['required'],\n\t                value: _this3.state.formData.data[attribute]\n\t              });\n\t            }\n\t\n\t            if (datatype === \"boolean\") {}\n\t          });\n\t\n\t          return specimenTypeFields;\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'handleUpdate',\n\t    value: function handleUpdate(e) {\n\t      //more things will go here later\n\t      this.updateSpecimen();\n\t    }\n\t  }, {\n\t    key: 'updateSpecimen',\n\t    value: function updateSpecimen() {\n\t      var _$$ajax;\n\t\n\t      //it seems as though this updates the state even though there's no set state\n\t      //ask David why this is happening\n\t      var formData = this.state.formData;\n\t      formData['data'] = JSON.stringify(formData['data']);\n\t\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax((_$$ajax = {\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false\n\t      }, _defineProperty(_$$ajax, 'processData', false), _defineProperty(_$$ajax, 'xhr', function () {\n\t        var xhr = new window.XMLHttpRequest();\n\t        return xhr;\n\t      }.bind(this)), _defineProperty(_$$ajax, 'success', function () {\n\t        //Update Parent Specimen Page Here\n\t        this.props.updatePage(formData.specimenType, formData.quantity, formData.unit, JSON.parse(formData.data), formData.collectDate, formData.notes);\n\t        //swal(\"Specimen Update Successful!\", \"\", \"success\");\n\t      }.bind(this)), _defineProperty(_$$ajax, 'error', function (err) {\n\t        console.error(err);\n\t        var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t        //this is necessary because of the automatic state update above ^\n\t        //let formData = this.state.formData;\n\t        //formData['data'] = JSON.parse(formData['data']);\n\t        this.setState({\n\t          //  formData: formData,\n\t          errorMessage: msg\n\t        });\n\t        swal(msg, \"\", \"error\");\n\t      }.bind(this)), _$$ajax));\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimenForm;\n\t}(React.Component);\n\t\n\tBiobankSpecimenForm.propTypes = {\n\t  setParentFormData: React.PropTypes.func,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired,\n\t  units: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = BiobankSpecimenForm;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Tabs component.\n\t *\n\t * @author Loris Team\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Tabs Component.\n\t * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n\t * and corresponding tab panes.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * 1. Define an array of tabs with IDs and labels\n\t *\n\t * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n\t *\n\t * 2. Pass tabList as <Tab> property and <TabPane> as child\n\t *  ```\n\t * <Tabs tabs={tabList} defaultTab=\"tab1\">\n\t *   <TabPane TabId={tabList[0].id}>\n\t *     // Tab content goes here\n\t *   </TabPane>\n\t * </Tabs>\n\t * ```\n\t * =================================================\n\t *\n\t */\n\tvar Tabs = function (_React$Component) {\n\t  _inherits(Tabs, _React$Component);\n\t\n\t  function Tabs(props) {\n\t    _classCallCheck(this, Tabs);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call(this, props));\n\t\n\t    var hash = window.location.hash;\n\t    var activeTab = \"\";\n\t\n\t    /**\n\t     * Determine the initial active tab in this order\n\t     * 1. Try to infer from the URL, otherwise\n\t     * 2. Try to infer from the defaultTab prop, otherwise\n\t     * 3. Set to be the first tab of the list\n\t     */\n\t    if (_this.props.updateURL && hash) {\n\t      activeTab = hash.substr(1);\n\t    } else if (_this.props.defaultTab) {\n\t      activeTab = _this.props.defaultTab;\n\t    } else if (_this.props.tabs.length > 0) {\n\t      activeTab = _this.props.tabs[0].id;\n\t    }\n\t\n\t    _this.state = {\n\t      activeTab: activeTab\n\t    };\n\t\n\t    _this.handleClick = _this.handleClick.bind(_this);\n\t    _this.getTabs = _this.getTabs.bind(_this);\n\t    _this.getTabPanes = _this.getTabPanes.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Tabs, [{\n\t    key: 'handleClick',\n\t    value: function handleClick(tabId, e) {\n\t      this.setState({ activeTab: tabId });\n\t      this.props.onTabChange(tabId);\n\t\n\t      // Add tab href to URL querystring and scroll the page to top\n\t      if (this.props.updateURL) {\n\t        var scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n\t        window.location.hash = e.target.hash;\n\t        $('html,body').scrollTop(scrollDistance);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getTabs',\n\t    value: function getTabs() {\n\t      var tabs = this.props.tabs.map(function (tab) {\n\t        var tabClass = this.state.activeTab === tab.id ? 'active' : null;\n\t        var href = \"#\" + tab.id;\n\t        var tabID = \"tab-\" + tab.id;\n\t        return React.createElement(\n\t          'li',\n\t          {\n\t            role: 'presentation',\n\t            className: tabClass,\n\t            key: tab.id\n\t          },\n\t          React.createElement(\n\t            'a',\n\t            { id: tabID,\n\t              href: href,\n\t              role: 'tab',\n\t              'data-toggle': 'tab',\n\t              onClick: this.handleClick.bind(null, tab.id)\n\t            },\n\t            tab.label\n\t          )\n\t        );\n\t      }.bind(this));\n\t\n\t      return tabs;\n\t    }\n\t  }, {\n\t    key: 'getTabPanes',\n\t    value: function getTabPanes() {\n\t      var tabPanes = React.Children.map(this.props.children, function (child, key) {\n\t        if (child) {\n\t          return React.cloneElement(child, {\n\t            activeTab: this.state.activeTab,\n\t            key: key\n\t          });\n\t        }\n\t      }.bind(this));\n\t\n\t      return tabPanes;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var tabs = this.getTabs();\n\t      var tabPanes = this.getTabPanes();\n\t      var tabStyle = {\n\t        marginLeft: 0,\n\t        marginBottom: '5px'\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'ul',\n\t          { className: 'nav nav-tabs', role: 'tablist', style: tabStyle },\n\t          tabs\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tab-content' },\n\t          tabPanes\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Tabs;\n\t}(React.Component);\n\t\n\tTabs.propTypes = {\n\t  tabs: React.PropTypes.array.isRequired,\n\t  defaultTab: React.PropTypes.string,\n\t  updateURL: React.PropTypes.bool\n\t};\n\tTabs.defaultProps = {\n\t  onTabChange: function onTabChange() {},\n\t  updateURL: false\n\t};\n\t\n\t/*\n\t * TabPane component.\n\t * Used to wrap content for every tab.\n\t */\n\t\n\tvar TabPane = function (_React$Component2) {\n\t  _inherits(TabPane, _React$Component2);\n\t\n\t  function TabPane() {\n\t    _classCallCheck(this, TabPane);\n\t\n\t    return _possibleConstructorReturn(this, (TabPane.__proto__ || Object.getPrototypeOf(TabPane)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(TabPane, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var classList = \"tab-pane\";\n\t      var title = void 0;\n\t\n\t      if (this.props.TabId === this.props.activeTab) {\n\t        classList += \" active\";\n\t      }\n\t      if (this.props.Title) {\n\t        title = React.createElement(\n\t          'h1',\n\t          null,\n\t          this.props.Title\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { role: 'tabpanel', className: classList, id: this.props.TabId },\n\t        title,\n\t        this.props.children\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return TabPane;\n\t}(React.Component);\n\t\n\tTabPane.propTypes = {\n\t  TabId: React.PropTypes.string.isRequired,\n\t  Title: React.PropTypes.string,\n\t  activeTab: React.PropTypes.string\n\t};\n\t\n\tvar Modal = function (_React$Component3) {\n\t  _inherits(Modal, _React$Component3);\n\t\n\t  function Modal() {\n\t    _classCallCheck(this, Modal);\n\t\n\t    return _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Modal, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      // Render nothing if the \"show\" prop is false\n\t      if (!this.props.show) {\n\t        return null;\n\t      }\n\t\n\t      //White Modal Window\n\t      var modalStyle = {\n\t        position: 'relative',\n\t        maxWidth: 1000,\n\t        maxHeight: '100%',\n\t        margin: '0 auto',\n\t        backgroundColor: '#fff',\n\t        padding: 30,\n\t        borderRadius: 10,\n\t        overflowY: 'auto',\n\t        zIndex: 9999\n\t      };\n\t\n\t      //Grey Background\n\t      var backdropStyle = {\n\t        position: 'fixed',\n\t        zIndex: 9998,\n\t        top: 0,\n\t        bottom: 0,\n\t        left: 0,\n\t        right: 0,\n\t        backgroundColor: 'rgba(0,0,0,0.3)',\n\t        padding: 50\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { style: backdropStyle, onClick: this.props.onClose },\n\t        React.createElement(\n\t          'div',\n\t          { style: modalStyle, onClick: function onClick(e) {\n\t              e.stopPropagation();\n\t            } },\n\t          this.props.children\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Modal;\n\t}(React.Component);\n\t\n\tModal.propTypes = {\n\t  onClose: React.PropTypes.func.isRequired,\n\t  show: React.PropTypes.bool,\n\t  children: React.PropTypes.node\n\t};\n\t\n\texports.Tabs = Tabs;\n\texports.TabPane = TabPane;\n\texports.Modal = Modal;\n\n/***/ },\n/* 7 */,\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _collectionForm = __webpack_require__(3);\n\t\n\tvar _collectionForm2 = _interopRequireDefault(_collectionForm);\n\t\n\tvar _Tabs = __webpack_require__(6);\n\t\n\tvar _Panel = __webpack_require__(2);\n\t\n\tvar _Panel2 = _interopRequireDefault(_Panel);\n\t\n\tvar _specimenForm = __webpack_require__(5);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* exported RBiobankSpecimen */\n\t\n\t/**\n\t * Biobank Specimen\n\t *\n\t * Fetches data corresponding to a given Specimen from Loris backend and\n\t * displays a page allowing viewing of meta information of the specimen\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankSpecimen = function (_React$Component) {\n\t  _inherits(BiobankSpecimen, _React$Component);\n\t\n\t  function BiobankSpecimen(props) {\n\t    _classCallCheck(this, BiobankSpecimen);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimen.__proto__ || Object.getPrototypeOf(BiobankSpecimen)).call(this, props));\n\t\n\t    _this.state = {\n\t      Data: {},\n\t      collectionData: {},\n\t      uploadResult: null,\n\t      isLoaded: false,\n\t      loadedData: 0,\n\t      editCollection: false\n\t    };\n\t\n\t    _this.fetchSpecimenData = _this.fetchSpecimenData.bind(_this);\n\t    _this.fetchCollectionFormData = _this.fetchCollectionFormData.bind(_this);\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    _this.setCollectionData = _this.setCollectionData.bind(_this);\n\t    _this.showAlertMessage = _this.showAlertMessage.bind(_this);\n\t    _this.toggleModal = _this.toggleModal.bind(_this);\n\t    _this.toggleEditCollection = _this.toggleEditCollection.bind(_this);\n\t    _this.updatePage = _this.updatePage.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimen, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      this.fetchSpecimenData();\n\t      this.fetchCollectionFormData();\n\t    }\n\t  }, {\n\t    key: 'fetchSpecimenData',\n\t    value: function fetchSpecimenData() {\n\t      var self = this;\n\t      $.ajax(this.props.DataURL, {\n\t        dataType: 'json',\n\t        success: function success(data) {\n\t          var collectionData = {\n\t            specimen: data.specimenData,\n\t            container: data.containerData,\n\t            parentSpecimenBarcode: data.parentSpecimenBarcode,\n\t            parentContainerBarcode: data.parentContainerBarcode\n\t          };\n\t\n\t          self.setState({\n\t            Data: data,\n\t            isLoaded: true,\n\t            collectionData: collectionData\n\t          });\n\t        },\n\t        error: function error(_error, errorCode, errorMsg) {\n\t          console.error(_error, errorCode, errorMsg);\n\t          self.setState({\n\t            error: 'An error occurred when loading the form!'\n\t          });\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'fetchCollectionFormData',\n\t    value: function fetchCollectionFormData() {\n\t      $.ajax(this.props.collectionFormDataURL, {\n\t        method: \"GET\",\n\t        dataType: 'json',\n\t        success: function (data) {\n\t          this.setState({\n\t            SpecimenData: data,\n\t            isLoaded: true\n\t          });\n\t        }.bind(this),\n\t        error: function error(_error2) {\n\t          console.error(_error2);\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'toggleModal',\n\t    value: function toggleModal() {\n\t      this.setState({\n\t        isOpen: !this.state.isOpen\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      // Data loading error\n\t      if (this.state.error !== undefined) {\n\t        return React.createElement(\n\t          'div',\n\t          { className: 'alert alert-danger text-center' },\n\t          React.createElement(\n\t            'strong',\n\t            null,\n\t            this.state.error\n\t          )\n\t        );\n\t      }\n\t\n\t      // Waiting for data to load\n\t      if (!this.state.isLoaded) {\n\t        return React.createElement(\n\t          'button',\n\t          { className: 'btn-info has-spinner' },\n\t          'Loading',\n\t          React.createElement('span', {\n\t            className: 'glyphicon glyphicon-refresh glyphicon-refresh-animate' })\n\t        );\n\t      }\n\t\n\t      var alertMessage = \"\";\n\t      var alertClass = \"alert text-center hide\";\n\t      var backURL = loris.BaseURL.concat('/biobank/');\n\t\n\t      if (this.state.uploadResult) {\n\t        if (this.state.uploadResult === \"success\") {\n\t          alertClass = \"alert alert-success text-center\";\n\t          alertMessage = \"Update Successful!\";\n\t        } else if (this.state.uploadResult === \"error\") {\n\t          alertClass = \"alert alert-danger text-center\";\n\t          alertMessage = \"Failed to update the file\";\n\t        }\n\t      }\n\t\n\t      //checks if parent specimen exists and returns static element with href\n\t      if (this.state.collectionData.parentSpecimenBarcode) {\n\t        var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\";\n\t        var parentSpecimenBarcode = React.createElement(LinkElement, {\n\t          label: 'Parent Specimen',\n\t          text: this.state.collectionData.parentSpecimenBarcode,\n\t          href: specimenURL + this.state.collectionData.parentSpecimenBarcode\n\t        });\n\t      }\n\t\n\t      //checks if parent container exists and returns static element with href\n\t      if (this.state.collectionData.parentContainerBarcode) {\n\t        var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\";\n\t        var parentContainerBarcode = React.createElement(LinkElement, {\n\t          label: 'Parent Container',\n\t          text: this.state.collectionData.parentContainerBarcode,\n\t          href: containerURL + this.state.collectionData.parentContainerBarcode\n\t        });\n\t      }\n\t\n\t      //loops through data object to produce static elements\n\t      if (this.state.Data.specimenData.data) {\n\t        var dataObject = this.state.Data.specimenData.data;\n\t        var specimenTypeAttributes = Object.keys(dataObject).map(function (key) {\n\t          return React.createElement(StaticElement, {\n\t            label: _this2.state.Data.specimenTypeAttributes[_this2.state.Data.specimenData.typeId][key].name,\n\t            text: dataObject[key]\n\t          });\n\t        });\n\t      }\n\t\n\t      var addSpecimenButton = void 0;\n\t      var collectionForm = void 0;\n\t      if (loris.userHasPermission('biobank_write')) {\n\t        addSpecimenButton = React.createElement(\n\t          'button',\n\t          {\n\t            type: 'button',\n\t            className: 'btn btn-success',\n\t            onClick: this.toggleModal,\n\t            style: { marginLeft: '20px' }\n\t          },\n\t          React.createElement('span', {\n\t            className: 'glyphicon glyphicon-plus',\n\t            style: { marginRight: '5px' }\n\t          }),\n\t          'Child'\n\t        );\n\t        collectionForm = React.createElement(\n\t          _Tabs.Modal,\n\t          { show: this.state.isOpen, onClose: this.toggleModal },\n\t          React.createElement(_collectionForm2.default, {\n\t            DataURL: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=getFormData',\n\t            action: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=submitSpecimen',\n\t            child: 'true',\n\t            specimenId: this.state.collectionData.specimen.id,\n\t            barcode: this.state.collectionData.container.barcode,\n\t            candidateId: this.state.collectionData.specimen.candidateId,\n\t            sessionId: this.state.collectionData.specimen.sessionId,\n\t            pscid: this.state.Data.candidateInfo[this.state.collectionData.specimen.candidateId].PSCID,\n\t            visit: this.state.Data.sessionInfo[this.state.collectionData.specimen.sessionId].Visit_label,\n\t            specimenTypes: this.state.SpecimenData.specimenTypes,\n\t            containerTypesPrimary: this.state.SpecimenData.containerTypesPrimary,\n\t            containerBarcodesNonPrimary: this.state.SpecimenData.containerBarcodesNonPrimary,\n\t            specimenTypeAttributes: this.state.SpecimenData.specimenTypeAttributes,\n\t            attributeDatatypes: this.state.SpecimenData.attributeDatatypes,\n\t            capacities: this.state.SpecimenData.capacities,\n\t            units: this.state.SpecimenData.units,\n\t            closeModal: this.toggleModal\n\t          })\n\t        );\n\t      }\n\t\n\t      var disableEdit = void 0;\n\t      var collectionPanelForm = void 0;\n\t      if (this.state.editCollection) {\n\t        disableEdit = React.createElement(\n\t          'a',\n\t          {\n\t            onClick: this.toggleEditCollection,\n\t            style: { cursor: 'pointer' }\n\t          },\n\t          'Cancel'\n\t        );\n\t        collectionPanelForm = React.createElement(_specimenForm2.default, {\n\t          barcode: this.state.Data.containerData.barcode,\n\t          specimenType: this.state.Data.specimenData.typeId,\n\t          containerType: this.state.Data.containerData.typeId,\n\t          quantity: this.state.Data.specimenData.quantity,\n\t          unit: this.state.Data.specimenData.unitId,\n\t          data: this.state.Data.specimenData.data,\n\t          collectDate: this.state.Data.specimenData.collectDate,\n\t          notes: this.state.Data.specimenData.notes,\n\t          specimenTypes: this.state.SpecimenData.specimenTypes,\n\t          specimenTypeAttributes: this.state.SpecimenData.specimenTypeAttributes,\n\t          attributeDatatypes: this.state.SpecimenData.attributeDatatypes,\n\t          containerTypesPrimary: this.state.SpecimenData.containerTypesPrimary,\n\t          capacities: this.state.SpecimenData.capacities,\n\t          units: this.state.SpecimenData.units,\n\t          edit: true,\n\t          action: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=updateSpecimen',\n\t          updatePage: this.updatePage\n\t        });\n\t      } else {\n\t        collectionPanelForm = React.createElement(\n\t          FormElement,\n\t          {\n\t            name: 'specimenCollectionFormStatic',\n\t            onSubmit: this.handleSubmit,\n\t            ref: 'formStatic'\n\t          },\n\t          React.createElement(StaticElement, {\n\t            label: 'Specimen Type',\n\t            text: this.state.Data.specimenTypes[this.state.collectionData.specimen.typeId].type\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Container Type',\n\t            text: this.state.Data.containerTypesPrimary[this.state.collectionData.container.typeId].label\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Quantity',\n\t            text: this.state.collectionData.specimen.quantity + ' ' + this.state.Data.containerUnits[this.state.Data.containerCapacities[this.state.Data.containerTypesPrimary[this.state.collectionData.container.typeId].capacityId].unitId].unit\n\t          }),\n\t          specimenTypeAttributes,\n\t          React.createElement(StaticElement, {\n\t            label: 'Collection Date',\n\t            text: this.state.collectionData.specimen.collectDate\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Notes',\n\t            text: this.state.collectionData.specimen.notes\n\t          })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'div',\n\t          { className: alertClass, role: 'alert', ref: 'alert-message' },\n\t          alertMessage\n\t        ),\n\t        this.state.uploadResult === \"success\" ? React.createElement(\n\t          'a',\n\t          { className: 'btn btn-primary', href: backURL },\n\t          'Back to biobank'\n\t        ) : null,\n\t        React.createElement(\n\t          'h3',\n\t          { style: { display: 'inline-block' } },\n\t          'Specimen ',\n\t          React.createElement(\n\t            'strong',\n\t            null,\n\t            this.state.collectionData.container.barcode\n\t          )\n\t        ),\n\t        addSpecimenButton,\n\t        React.createElement('br', null),\n\t        React.createElement('br', null),\n\t        React.createElement(\n\t          FormElement,\n\t          {\n\t            columns: 4\n\t          },\n\t          React.createElement(LinkElement, {\n\t            label: 'PSCID',\n\t            text: this.state.Data.candidateInfo[this.state.collectionData.specimen.candidateId].PSCID,\n\t            href: loris.BaseURL + '/' + this.state.collectionData.specimen.candidateId\n\t          }),\n\t          React.createElement(LinkElement, {\n\t            label: 'Visit Label',\n\t            text: this.state.Data.sessionInfo[this.state.collectionData.specimen.sessionId].Visit_label,\n\t            href: loris.BaseURL + '/instrument_list/?candID=' + this.state.collectionData.specimen.candidateId + '&sessionID=' + this.state.collectionData.specimen.sessionId\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Status',\n\t            text: this.state.Data.containerStati[this.state.collectionData.container.statusId].status\n\t          }),\n\t          parentSpecimenBarcode,\n\t          parentContainerBarcode\n\t        ),\n\t        React.createElement(\n\t          FormElement,\n\t          {\n\t            columns: 3\n\t          },\n\t          React.createElement(\n\t            _Panel2.default,\n\t            {\n\t              id: 'collection-panel',\n\t              title: 'Collection',\n\t              edit: this.state.editCollection ? null : this.toggleEditCollection,\n\t              cancel: this.state.editCollection ? this.toggleEditCollection : null\n\t            },\n\t            collectionPanelForm\n\t          ),\n\t          React.createElement(_Panel2.default, {\n\t            id: 'preparation-panel',\n\t            title: 'Preparation',\n\t            initCollapsed: true,\n\t            add: this.toggleEditCollection\n\t          }),\n\t          React.createElement(_Panel2.default, {\n\t            id: 'analysis-panel',\n\t            title: 'Analysis',\n\t            initCollapsed: true,\n\t            add: this.toggleEditCollection\n\t          })\n\t        ),\n\t        collectionForm\n\t      );\n\t    }\n\t  }, {\n\t    key: 'toggleEditCollection',\n\t    value: function toggleEditCollection() {\n\t      var editCollection = this.state.editCollection;\n\t      this.setState({\n\t        editCollection: !editCollection\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Handles form submission\n\t     * @param {event} e - Form submition event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      var self = this;\n\t      var myCollectionData = this.state.formData;\n\t\n\t      $('#biobankSpecimenEl').hide();\n\t      $(\"#file-progress\").removeClass('hide');\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: self.props.action,\n\t        data: JSON.stringify(myCollectionData),\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function xhr() {\n\t          var xhr = new window.XMLHttpRequest();\n\t          xhr.upload.addEventListener(\"progress\", function (evt) {\n\t            if (evt.lengthComputable) {\n\t              var progressbar = $(\"#progressbar\");\n\t              var progresslabel = $(\"#progresslabel\");\n\t              var percent = Math.round(evt.loaded / evt.total * 100);\n\t              $(progressbar).width(percent + \"%\");\n\t              $(progresslabel).html(percent + \"%\");\n\t              progressbar.attr('aria-valuenow', percent);\n\t            }\n\t          }, false);\n\t          return xhr;\n\t        },\n\t        success: function success(data) {\n\t          $(\"#file-progress\").addClass('hide');\n\t          self.setState({\n\t            uploadResult: \"success\"\n\t          });\n\t          self.showAlertMessage();\n\t        },\n\t        error: function error(err) {\n\t          console.error(err);\n\t          self.setState({\n\t            uploadResult: \"error\"\n\t          });\n\t          self.showAlertMessage();\n\t        }\n\t\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setCollectionData',\n\t    value: function setCollectionData(formElement, value) {\n\t      var collectionData = this.state.collectionData;\n\t\n\t      if (value === \"\") {\n\t        collectionData[formElement] = null;\n\t      } else {\n\t        collectionData[formElement] = value;\n\t      }\n\t\n\t      this.setState({\n\t        collectionData: collectionData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'updatePage',\n\t    value: function updatePage(specimenType, quantity, unit, data, collectDate, notes) {\n\t      this.toggleEditCollection();\n\t\n\t      var Data = this.state.Data;\n\t\n\t      Data.specimenData.typeId = specimenType;\n\t      Data.specimenData.quantity = quantity;\n\t      Data.specimenData.unitId = unit;\n\t      Data.specimenData.data = data;\n\t      Data.specimenData.collectDate = collectDate;\n\t      Data.specimenData.notes = notes;\n\t\n\t      this.setState({\n\t        Data: Data\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Display a success/error alert message after form submission\n\t     */\n\t\n\t  }, {\n\t    key: 'showAlertMessage',\n\t    value: function showAlertMessage() {\n\t      var self = this;\n\t\n\t      if (this.refs[\"alert-message\"] === null) {\n\t        return;\n\t      }\n\t\n\t      var alertMsg = this.refs[\"alert-message\"];\n\t      $(alertMsg).fadeTo(2000, 500).delay(3000).slideUp(500, function () {\n\t        self.setState({\n\t          uploadResult: null\n\t        });\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimen;\n\t}(React.Component);\n\t\n\tBiobankSpecimen.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired\n\t};\n\t\n\tvar RBiobankSpecimen = React.createFactory(BiobankSpecimen);\n\t\n\twindow.BiobankSpecimen = BiobankSpecimen;\n\twindow.RBiobankSpecimen = RBiobankSpecimen;\n\t\n\texports.default = BiobankSpecimen;\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// modules/biobank/js/specimenIndex.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2866ecd223a08f57a45b","/* global ReactDOM */\n\nimport BiobankSpecimen from './specimen';\nconst args = QueryString.get(document.currentScript.src);\n\n$(function() {\n  const biobankSpecimen = (\n    <div className=\"page-specimen-form\">\n      <div className=\"row\">\n        <div className=\"col-md-9 col-lg-12\">\n          <BiobankSpecimen\n            DataURL={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=getSpecimenData&barcode=${args.barcode}`}\n            collectionFormDataURL={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=getCollectionFormData`}\n          />\n        </div>\n      </div>\n    </div>\n  );\n\n  ReactDOM.render(biobankSpecimen, document.getElementById(\"lorisworkspace\"));\n});\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenIndex.js","/**\n * This file contains React component for Panel\n *\n * @author Alex I.\n * @version 1.0.0\n *\n */\n\n/**\n * Panel component\n * Wraps children in a collapsible bootstrap panel\n */\nclass Panel extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsed: this.props.initCollapsed\n    };\n\n    // Initialize panel class based on collapsed status\n    this.panelClass = (\n      this.props.initCollapsed ?\n        \"panel-collapse collapse\" :\n        \"panel-collapse collapse in\"\n    );\n\n    this.toggleCollapsed = this.toggleCollapsed.bind(this);\n  }\n\n  toggleCollapsed() {\n    this.setState({collapsed: !this.state.collapsed});\n  }\n\n  render() {\n    // Change arrow direction based on collapse status\n    let glyphClass = (\n      this.state.collapsed ?\n        \"glyphicon pull-right glyphicon-chevron-down\" :\n        \"glyphicon pull-right glyphicon-chevron-up\"\n    );\n\n    let pencilGlyph;\n    if (this.props.edit) {\n      pencilGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-pencil\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.edit}\n        /> \n      );\n    } \n\n    let plusGlyph;\n    if (this.props.add) {\n      plusGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-plus\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.add}\n        />\n      );\n    }\n\n    let removeGlyph;\n    if (this.props.cancel) {\n      removeGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-remove\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.cancel}\n        />\n      );\n    }\n\n    // Add panel header, if title is set\n    const panelHeading = this.props.title ? (\n      <div\n        className=\"panel-heading\"\n      >\n        <span \n          className={glyphClass}\n          onClick={this.toggleCollapsed}\n          data-toggle=\"collapse\"\n          data-target={'#' + this.props.id}\n          style={{cursor: 'pointer'}}\n        />\n        {pencilGlyph}\n        {plusGlyph}\n        {removeGlyph}\n        {this.props.title}\n      </div>\n    ) : '';\n\n    return (\n      <div className=\"panel panel-primary\">\n        {panelHeading}\n        <div id={this.props.id} className={this.panelClass} role=\"tabpanel\">\n          <div className=\"panel-body\" style={{height: this.props.height}}>\n            {this.props.children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPanel.propTypes = {\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  edit: React.PropTypes.func,\n  add: React.PropTypes.func\n};\nPanel.defaultProps = {\n  initCollapsed: false,\n  id: 'default-panel',\n  height: '100%'\n};\n\nexport default Panel;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Panel.js","import BiobankBarcodeForm from './barcodeForm.js';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankCollectionForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      barcodeFormList: {},\n      errorMessage: null,\n      formErrors: {},\n      countBarcodeForms: [1] \n    };\n\n    //this.getValidFileName = this.getValidFileName.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    //this.isValidFileName = this.isValidFileName.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.specimenSubmit = this.specimenSubmit.bind(this);\n    this.addBarcodeForm = this.addBarcodeForm.bind(this);\n    this.setBarcodeFormData = this.setBarcodeFormData.bind(this);\n  }\n\n  componentDidMount() {\n\n    //if this is a child specimen form then certain formData is set when component mounts\n    if (this.props.child) {\n      var formData = this.state.formData;\n      formData['parentSpecimen'] = this.props.specimenId;\n      formData['pscid'] = this.props.candidateId;\n      formData['visitLabel'] = this.props.sessionId;\n\n      this.setState({\n        formData: formData\n      });\n    }\n  }\n\n  render() {\n\n    //Styling for remove Barcode button\n    const glyphStyle = {\n     color: '#D3D3D3',\n     margin: 'auto',\n    }; \n    const buttonStyle = {\n      appearance: 'none',\n      outline: 'none',\n      boxShadow: 'none',\n      borderColor: 'transparent',\n      backgroundColor: 'transparent',\n       \n    };\n\n    //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n    var barcodeForms = [];\n    for (let i = 0; i < this.state.countBarcodeForms.length; i++) {\n      barcodeForms.push(\n        <BiobankBarcodeForm\n          setParentFormData={this.setBarcodeFormData}\n          id={this.state.countBarcodeForms[i]}\n          specimenTypes={this.props.specimenTypes}\n          containerTypesPrimary={this.props.containerTypesPrimary}\n          containerBarcodesNonPrimary={this.props.containerBarcodesNonPrimary}\n          specimenTypeAttributes={this.props.specimenTypeAttributes}\n          attributeDatatypes={this.props.attributeDatatypes}\n          capacities={this.props.capacities}\n          units={this.props.units}\n          button={i+1 === this.state.countBarcodeForms.length ? (\n            <button \n              type=\"button\"\n              className=\"btn btn-success btn-sm\"\n              onClick={this.addBarcodeForm}\n            >   \n              <span className=\"glyphicon glyphicon-plus\"/>\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"btn btn-primary-outline btn-sm\"\n              style={buttonStyle}\n              onClick={() => this.removeBarcodeForm(i)}\n            >\n            <span className=\"glyphicon glyphicon-remove\" style={glyphStyle}/>\n            </button>\n          )}\n        />\n      );\n    }\n\n\n    let staticFields;\n    let selectFields;\n    if (this.props.child) {\n      staticFields = (   \n        <div>\n          <StaticElement\n            label=\"Parent Specimen\"\n            text={this.props.barcode}\n          />\n          <StaticElement\n            label=\"PSCID\"\n            text={this.props.pscid}\n          />\n          <StaticElement\n            label=\"Visit Label\"\n            text={this.props.visit}\n          />\n        </div>\n      );\n    } else {\n      selectFields = (\n          <div>\n            <SelectElement\n              name=\"pscid\"\n              label=\"PSCID\"\n              options={this.props.pSCIDs}\n              onUserInput={this.setFormData}\n              ref=\"pscid\"\n              required={true}\n              value={this.state.formData.pscid}\n            />\n            <SelectElement\n              name=\"visitLabel\"\n              label=\"Visit Label\"\n              options={this.state.visits}\n              onUserInput={this.setFormData}\n              ref=\"visitLabel\"\n              required={true}\n              value={this.state.formData.visitLabel}\n              disabled={this.state.formData.pscid ? false : true}\n            />\n          </div>\n      );\n    }\n\n    //ALLOW THEM TO CANCEL THE FORM AND DELETE BARCODE FORMS\n    return (\n      <FormElement\n        name=\"biobankCollection\"\n        onSubmit={this.handleSubmit}\n        ref=\"form\"\n      >\n        <h3><b>Add New Specimen{this.state.countBarcodeForms > 1 ? \"s\" : \"\"}</b></h3>\n        <br/>\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            {staticFields}\n            {selectFields}\n          </div>\n        </div>\n        {barcodeForms}\n          <div className=\"col-xs-3 col-xs-offset-9\">\n            <ButtonElement label=\"Submit\"/>\n          </div>\n        <a onClick={this.toggleModal}>Cancel</a>\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n  /**\n   * Returns a valid name for the file to be specimened\n   *\n   * @param {string} pscid - PSCID selected from the dropdown\n   * @param {string} visitLabel - Visit label selected from the dropdown\n   * @param {string} instrument - Instrument selected from the dropdown\n   * @return {string} - Generated valid filename for the current selection\n   */\n//  getValidFileName(pscid, visitLabel, instrument) {\n//    var fileName = pscid + \"_\" + visitLabel;\n//    if (instrument) fileName += \"_\" + instrument;\n//\n//    return fileName;\n//  }\n\n\n  validateForm(formElement, value) {\n    let formErrors = this.state.formErrors;\n\n    //validate barcode regex\n    if (formElement === \"barcode\" && value !== \"\") {\n      if (!(/^hello/.test(this.state.formData.barcode))) {\n        formErrors.barcode = true;\n      } else {\n        formErrors.barcode = false;\n      }\n    }\n\n    //validate that quantity is a number and less than capacity\n    if (formElement === \"quantity\" && value !== \"\") {\n      if (isNaN(value) || (value > this.props.capacities[this.state.currentContainerType])) {\n        formErrors.quantity = true;\n      } else {\n        formErrors.quantity = false;\n      }\n    }\n\n    //validate datatypes and regex of generated type attributes\n    var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n    var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n\n      let datatype = this.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"number\") {\n        if (formElement === attribute) {\n          if (isNaN(value) && value !== \"\") {\n            formErrors[attribute] = true;\n          } else {\n            formErrors[attribute] = false;\n          }\n        }\n      }\n    })\n\n    this.setState({\n      formErrors: formErrors\n    });\n\n  }\n\n\n  /**\n   * Handle form submission\n   * @param {object} e - Form submission event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    let formRefs = this.refs;\n    //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\n    // Validate the form\n    if (!this.isValidForm(formRefs, formData)) {\n      return;\n    }\n\n\n//    // Validate specimened file name\n//    let instrument = formData.instrument ? formData.instrument : null;\n//    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n//    let requiredFileName = this.getValidFileName(\n//      formData.pscid, formData.visitLabel, instrument\n//    );\n//    if (!this.isValidFileName(requiredFileName, fileName)) {\n//      swal(\n//        \"Invalid Specimen name!\",\n//        \"File name should begin with: \" + requiredFileName,\n//        \"error\"\n//      );\n//      return;\n//    }\n\n    // Check for duplicate file names\n//    let isDuplicate = biobankFiles.indexOf(fileName);\n//    if (isDuplicate >= 0) {\n//      swal({\n//        title: \"Are you sure?\",\n//        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n//        type: \"warning\",\n//        showCancelButton: true,\n//        confirmButtonText: 'Yes, I am sure!',\n//        cancelButtonText: \"No, cancel it!\"\n//      }, function(isConfirm) {\n//        if (isConfirm) {\n//          this.specimenFile();\n//        } else {\n//          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n//        }\n//      }.bind(this));\n//    } else {\n\n    this.specimenSubmit();\n//    }\n  }\n\n  /*\n   * Uploads the file to the server\n   */\n  specimenSubmit() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        // Trigger an update event to update all observers (i.e DataTable)\n        // THIS CURRENTLY DOES NOT WORK\n        let event = new CustomEvent('update-datatable');\n        window.dispatchEvent(event);\n\n        this.props.closeModal();\n        swal(\"Specimen Submission Successful!\", \"\", \"success\");\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Checks if the inputted file name is valid\n   *\n   * @param {string} requiredFileName - Required file name\n   * @param {string} fileName - Provided file name\n   * @return {boolean} - true if fileName starts with requiredFileName, false\n   *   otherwise\n   */\n//  isValidFileName(requiredFileName, fileName) {\n//    if (fileName === null || requiredFileName === null) {\n//      return false;\n//    }\n//\n//    return (fileName.indexOf(requiredFileName) === 0);\n//  }\n\n  /**\n   * Validate the form\n   *\n   * @param {object} formRefs - Object containing references to React form elements\n   * @param {object} formData - Object containing form data inputed by user\n   * @return {boolean} - true if all required fields are filled, false otherwise\n   */\n  isValidForm(formRefs, formData) {\n    var isValidForm = true;\n\n    var requiredFields = {\n      pscid: null,\n      visitLabel: null,\n    };\n\n    Object.keys(requiredFields).map(function(field) {\n      if (formData[field]) {\n        requiredFields[field] = formData[field];\n      } else if (formRefs[field]) {\n        formRefs[field].props.hasError = true;\n        isValidForm = false;\n      }\n    });\n    this.forceUpdate();\n\n    return isValidForm;\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    // Only display visits and sites available for the current pscid\n    //let visitLabel = this.state.formData.visitLabel;\n    //let pscid = this.state.formData.pscid;\n  \n    //LOOK AT THIS LATER - THE SWITCH TO PROPS MESSED THIS ALL UP \n    if (formElement === \"pscid\" && value !== \"\") {\n      this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n      //this.state.Data.sites = this.state.Data.sessionData[this.state.Data.PSCIDs[value]].sites;\n    }\n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  setBarcodeFormData(barcodeFormData, barcodeId) {\n    var formData = this.state.formData;\n    var barcodeFormList = this.state.barcodeFormList;\n    barcodeFormList[barcodeId] = barcodeFormData;\n    formData['barcodeFormList'] = barcodeFormList;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  addBarcodeForm() {\n    let countBarcodeForms = this.state.countBarcodeForms;\n    countBarcodeForms.push(countBarcodeForms[countBarcodeForms.length -1] + 1); \n    this.setState({\n      countBarcodeForms: countBarcodeForms\n    });\n  }\n\n  removeBarcodeForm(index) {\n    let countBarcodeForms = this.state.countBarcodeForms;\n    countBarcodeForms.splice(index, 1);\n    this.setState({\n      countBarcodeForms: countBarcodeForms\n    });\n  }\n}\n\nBiobankCollectionForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired,\n  barcode: React.PropTypes.string\n};\n\nexport default BiobankCollectionForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/collectionForm.js","\nimport BiobankSpecimenForm from './specimenForm'\n\n/**\n * Biobank Barcode Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass BiobankBarcodeForm extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      formData: {},\n      formErrors: {},\n    };\n   \n    this.setFormData = this.setFormData.bind(this);\n    this.setSpecimenFormData = this.setSpecimenFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n  }\n\n  render() {\n\n    return (\n      <FormElement\n        name=\"biobankBarcode\"\n      >\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <div \n              data-toggle=\"collapse\" \n              data-target={\"#\" + this.props.id}\n            >   \n              <TextboxElement\n                name={\"barcode\"}\n                label={\"Barcode \" + this.props.id}\n                onUserInput={this.setFormData}\n                ref={\"barcode\"}\n                required={true}\n                value={this.state.formData[\"barcode\"]}\n                hasError={this.state.formErrors[\"barcode\"]}\n                errorMessage=\"Incorrect Barcode format for this Specimen and Container Type\"\n              />\n            </div>\n          </div>\n          <div className=\"col-xs-1\">\n            {this.props.button}\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xs-2\"/>\n          <div className=\"col-xs-9\">\n            <div id={this.props.id} className=\"collapse\">\n              <BiobankSpecimenForm\n                setParentFormData={this.setSpecimenFormData}\n                specimenTypes={this.props.specimenTypes}\n                specimenTypeAttributes={this.props.specimenTypeAttributes}\n                attributeDatatypes={this.props.attributeDatatypes}\n                containerTypesPrimary={this.props.containerTypesPrimary}\n                containerBarcodesNonPrimary={this.props.containerBarcodesNonPrimary}\n                units={this.props.units}\n                stati={this.props.stati}\n              />\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState(\n      {\n      formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setSpecimenFormData(specimenFormData) {\n    var formData = this.state.formData;\n    \n    for (var attribute in specimenFormData) {\n      formData[attribute] = specimenFormData[attribute]\n    }\n \n    this.setState(\n      {\n      formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    this.props.setParentFormData(this.state.formData, this.props.id);\n  }\n}\n\nBiobankBarcodeForm.propTypes = {\n  \n  id: React.PropTypes.string,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n  units: React.PropTypes.object.isRequired,\n}\n\nexport default BiobankBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/barcodeForm.js","\n/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass BiobankSpecimenForm extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      formData: {data:{}},\n      currentSpecimenType: this.props.edit ? this.props.specimenType : null,\n      currentContainerType: this.props.edit ? this.props.containerType : null,\n      formErrors: {},\n    };\n\n    this.setFormData = this.setFormData.bind(this);\n    this.setSpecimenAttributeFormData = this.setSpecimenAttributeFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n    this.getSpecimenTypeFields = this.getSpecimenTypeFields.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.updateSpecimen = this.updateSpecimen.bind(this);\n  }\n\n  componentDidMount() {\n\n    let formData = this.state.formData;\n    if (this.props.edit) {\n      formData['barcode'] = this.props.barcode;\n      formData['specimenType'] = this.props.specimenType;\n      formData['containerType'] = this.props.containerType;\n      formData['quantity'] = this.props.quantity;\n      formData['unit'] = this.props.unit;\n      formData['collectDate'] = this.props.collectDate;\n      formData['notes'] = this.props.notes;\n\n      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n      if (specimenTypeFieldsObject) {\n        var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n          formData.data[attribute] = this.props.data[attribute];\n        });\n      }\n    }\n    this.setState({\n      formData: formData\n    });\n  }\n\n  render() {\n\n    var parentContainerField;\n    if (!this.props.edit) {\n      parentContainerField = (\n        <SelectElement\n          name=\"parentContainer\"\n          label=\"Parent Container Barcode\"\n          options={this.props.containerBarcodesNonPrimary}\n          onUserInput={this.setFormData}\n          ref=\"parentContainer\"\n          required={false}\n          value={this.state.formData.parentContainer}\n        />\n      );\n    }\n\n    var updateButton;\n    if (this.props.edit) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    }\n\n    var specimenFields;\n    var specimenTypeFields = this.getSpecimenTypeFields();\n    if (this.state.currentSpecimenType) {\n      specimenFields = (\n        <FormElement\n          name=\"biobankSpecimen\"\n          onSubmit={this.handleUpdate}\n          ref=\"form\"\n        >\n          <SelectElement\n            name=\"containerType\"\n            label=\"Container Type\"\n            options={this.props.containerTypesPrimary}\n            onUserInput={this.setFormData}\n            ref=\"containerType\"\n            required={true}\n            value={this.state.formData.containerType}\n          />\n          {parentContainerField}\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Quantity\"\n            onUserInput={this.setFormData}\n            ref=\"quantity\"\n            required={true}\n            value={this.state.formData.quantity}\n            hasError={this.state.formErrors.quantity}\n          />\n          <SelectElement\n            name=\"unit\"\n            label=\"Unit\"\n            options={this.props.units}\n            onUserInput={this.setFormData}\n            ref=\"unit\"\n            required={true}\n            value={this.state.formData.unit}\n          />\n          {specimenTypeFields}\n          <DateElement\n            name=\"collectDate\"\n            label=\"Collection Date\"\n            minYear=\"2000\"\n            maxYear=\"2018\"\n            onUserInput={this.setFormData}\n            ref=\"collectDate\"\n            required={true}\n            value={this.state.formData.collectDate}\n          />\n          <TextareaElement\n            name=\"notes\"\n            label=\"Notes\"\n            onUserInput={this.setFormData}\n            ref=\"notes\"\n            value={this.state.formData.notes}\n          />\n          {updateButton}\n        </FormElement>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"biobankSpecimen\"\n      >\n        <div>\n          <SelectElement\n            name=\"specimenType\"\n            label=\"Specimen Type\"\n            options={this.props.specimenTypes}\n            onUserInput={this.setFormData}\n            ref=\"specimenType\"\n            required={true}\n            value={this.state.formData.specimenType}\n          />\n        {specimenFields}\n        </div>\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n\n    if (formElement === \"specimenType\" && value !== \"\") {\n      this.setState({\n        currentSpecimenType: value\n      });\n    }\n\n    if (formElement === \"containerType\" && value !== \"\") {\n      this.setState({\n        currentContainerType: value\n      });\n    }\n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setSpecimenAttributeFormData(formElement, value) {\n    var formData = this.state.formData;\n    formData.data[formElement] = value;\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  \n  }\n\n  setParentFormData() {\n    if (!this.props.edit) {\n      var formData = this.state.formData;\n      this.props.setParentFormData(formData);\n    }\n  }\n\n  // This generates all the form fields for a given specimen type\n  getSpecimenTypeFields() {\n    if (this.state.currentSpecimenType) {\n      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n      if (specimenTypeFieldsObject) {\n        var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n          let datatype = this.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n          if (datatype === \"text\" || datatype === \"number\") {\n            if (specimenTypeFieldsObject[attribute]['refTableId'] == null) {\n              return (\n                <TextboxElement\n                  name={attribute}\n                  label={specimenTypeFieldsObject[attribute]['name']}\n                  onUserInput={this.setSpecimenAttributeFormData}\n                  ref={attribute}\n                  required={specimenTypeFieldsObject[attribute]['required']}\n                  value={this.state.formData.data[attribute]}\n                  hasError={this.state.formErrors[attribute]}\n                  errorMessage={\"This is a \" + datatype + \" field.\"}\n                />\n              );\n            }\n\n            // OPTIONS FOR SELECT ELEMENT WILL MOST LIKELY BE PASSED VIA AJAX CALL\n            // BUT IT CAN ALSO BE PRELOADED --\n            // ASK RIDA HOW THIS SHOULD BE DONE\n            if (specimenTypeFieldsObject[attribute]['refTableId'] !== null) {\n              return (\n                <SelectElement\n                  name={attribute}\n                  label={specimenTypeFieldsObject[attribute]['name']}\n                  options=\"\"\n                  onUserInput={this.setSpecimenAttributeFormData}\n                  ref={attribute}\n                  required={this.state.formData[attribute]}\n                  value={this.state.formData.data[attribute]}\n                />\n              );\n            }\n          }\n\n          if (datatype === \"datetime\") {\n            return (\n              <DateElement\n                name={attribute}\n                label={specimenTypeFieldsObject[attribute]['name']}\n                onUserInput={this.setSpecimenAttributeFormData}\n                ref={attribute}\n                required={specimenTypeFieldsObject[attribute]['required']}\n                value={this.state.formData.data[attribute]}\n              />\n            );\n          }\n\n          if (datatype === \"boolean\") {\n          \n          }\n        })\n\n        return specimenTypeFields;\n      }\n    }\n  }\n\n  handleUpdate(e) {\n    //more things will go here later\n    this.updateSpecimen();\n  }\n\n  updateSpecimen() {\n    //it seems as though this updates the state even though there's no set state\n    //ask David why this is happening\n    let formData = this.state.formData;\n    formData['data'] = JSON.stringify(formData['data']);\n\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        //Update Parent Specimen Page Here\n        this.props.updatePage(formData.specimenType, formData.quantity, formData.unit, JSON.parse(formData.data), formData.collectDate, formData.notes);\n        //swal(\"Specimen Update Successful!\", \"\", \"success\");\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        //this is necessary because of the automatic state update above ^\n        //let formData = this.state.formData;\n        //formData['data'] = JSON.parse(formData['data']);\n        this.setState({\n        //  formData: formData,\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n}\n\nBiobankSpecimenForm.propTypes = {\n  setParentFormData: React.PropTypes.func,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n  units: React.PropTypes.object.isRequired,\n}\n\nexport default BiobankSpecimenForm;\n\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenForm.js","/**\n * This file contains React components for Tabs component.\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\n/**\n * Tabs Component.\n * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n * and corresponding tab panes.\n *\n * ================================================\n * Usage:\n *\n * 1. Define an array of tabs with IDs and labels\n *\n * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n *\n * 2. Pass tabList as <Tab> property and <TabPane> as child\n *  ```\n * <Tabs tabs={tabList} defaultTab=\"tab1\">\n *   <TabPane TabId={tabList[0].id}>\n *     // Tab content goes here\n *   </TabPane>\n * </Tabs>\n * ```\n * =================================================\n *\n */\nclass Tabs extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    const hash = window.location.hash;\n    let activeTab = \"\";\n\n    /**\n     * Determine the initial active tab in this order\n     * 1. Try to infer from the URL, otherwise\n     * 2. Try to infer from the defaultTab prop, otherwise\n     * 3. Set to be the first tab of the list\n     */\n    if (this.props.updateURL && hash) {\n      activeTab = hash.substr(1);\n    } else if (this.props.defaultTab) {\n      activeTab = this.props.defaultTab;\n    } else if (this.props.tabs.length > 0) {\n      activeTab = this.props.tabs[0].id;\n    }\n\n    this.state = {\n      activeTab: activeTab\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.getTabs = this.getTabs.bind(this);\n    this.getTabPanes = this.getTabPanes.bind(this);\n  }\n\n  handleClick(tabId, e) {\n    this.setState({activeTab: tabId});\n    this.props.onTabChange(tabId);\n\n    // Add tab href to URL querystring and scroll the page to top\n    if (this.props.updateURL) {\n      const scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n      window.location.hash = e.target.hash;\n      $('html,body').scrollTop(scrollDistance);\n    }\n  }\n\n  getTabs() {\n    let tabs = (this.props.tabs).map(function(tab) {\n      let tabClass = this.state.activeTab === tab.id ? 'active' : null;\n      let href = \"#\" + tab.id;\n      let tabID = \"tab-\" + tab.id;\n      return (\n        <li\n          role=\"presentation\"\n          className={tabClass}\n          key={tab.id}\n        >\n          <a id={tabID}\n             href={href}\n             role=\"tab\"\n             data-toggle=\"tab\"\n             onClick={this.handleClick.bind(null, tab.id)}\n          >\n            {tab.label}\n          </a>\n        </li>\n      );\n    }.bind(this));\n\n    return tabs;\n  }\n\n  getTabPanes() {\n    let tabPanes = React.Children.map(this.props.children, function(child, key) {\n      if (child) {\n        return React.cloneElement(child, {\n          activeTab: this.state.activeTab,\n          key: key\n        });\n      }\n    }.bind(this));\n\n    return tabPanes;\n  }\n\n  render() {\n    let tabs = this.getTabs();\n    let tabPanes = this.getTabPanes();\n    let tabStyle = {\n      marginLeft: 0,\n      marginBottom: '5px'\n    };\n\n    return (\n      <div>\n        <ul className=\"nav nav-tabs\" role=\"tablist\" style={tabStyle}>\n          {tabs}\n        </ul>\n        <div className=\"tab-content\">\n          {tabPanes}\n        </div>\n      </div>\n    );\n  }\n}\nTabs.propTypes = {\n  tabs: React.PropTypes.array.isRequired,\n  defaultTab: React.PropTypes.string,\n  updateURL: React.PropTypes.bool\n};\nTabs.defaultProps = {\n  onTabChange: function() {},\n  updateURL: false\n};\n\n/*\n * TabPane component.\n * Used to wrap content for every tab.\n */\nclass TabPane extends React.Component {\n  render() {\n    let classList = \"tab-pane\";\n    let title;\n\n    if (this.props.TabId === this.props.activeTab) {\n      classList += \" active\";\n    }\n    if (this.props.Title) {\n      title = <h1>{this.props.Title}</h1>;\n    }\n\n    return (\n      <div role=\"tabpanel\" className={classList} id={this.props.TabId}>\n        {title}\n        {this.props.children}\n      </div>\n    );\n  }\n}\nTabPane.propTypes = {\n  TabId: React.PropTypes.string.isRequired,\n  Title: React.PropTypes.string,\n  activeTab: React.PropTypes.string\n};\n\nclass Modal extends React.Component {\n\n  render() {\n    // Render nothing if the \"show\" prop is false\n    if(!this.props.show) {\n      return null;\n    }   \n\n    //White Modal Window\n    const modalStyle = { \n      position: 'relative',\n      maxWidth: 1000,        \n      maxHeight: '100%',\n      margin: '0 auto',\n      backgroundColor: '#fff',\n      padding: 30,\n      borderRadius: 10,\n      overflowY: 'auto',\n      zIndex: 9999,\n    };  \n\n    //Grey Background\n    const backdropStyle = {\n      position: 'fixed',\n      zIndex: 9998,\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundColor: 'rgba(0,0,0,0.3)',\n      padding: 50\n    };\n\n    return (\n    <div style={backdropStyle} onClick={this.props.onClose}>\n      <div style={modalStyle} onClick={(e) => {e.stopPropagation()}}>\n        {this.props.children}\n      </div>\n    </div>\n    ); \n  }\n}\nModal.propTypes = { \n  onClose: React.PropTypes.func.isRequired,\n  show: React.PropTypes.bool,\n  children: React.PropTypes.node\n};\n\nexport {\n  Tabs,\n  TabPane,\n  Modal\n};\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Tabs.js","/* exported RBiobankSpecimen */\n\nimport BiobankCollectionForm from './collectionForm';\nimport {Modal} from 'Tabs';\nimport Panel from '../../../jsx/Panel';\nimport BiobankSpecimenForm from './specimenForm.js';\n\n/**\n * Biobank Specimen\n *\n * Fetches data corresponding to a given Specimen from Loris backend and\n * displays a page allowing viewing of meta information of the specimen\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankSpecimen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      Data: {},\n      collectionData: {},\n      uploadResult: null,\n      isLoaded: false,\n      loadedData: 0,\n      editCollection: false\n    };\n\n    this.fetchSpecimenData = this.fetchSpecimenData.bind(this);\n    this.fetchCollectionFormData = this.fetchCollectionFormData.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.setCollectionData = this.setCollectionData.bind(this);\n    this.showAlertMessage = this.showAlertMessage.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n    this.toggleEditCollection = this.toggleEditCollection.bind(this);\n    this.updatePage = this.updatePage.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchSpecimenData();\n    this.fetchCollectionFormData();\n  }\n\n  fetchSpecimenData() {\n    var self = this;\n    $.ajax(this.props.DataURL, {\n      dataType: 'json',\n      success: function(data) {\n        var collectionData = {\n          specimen: data.specimenData,\n\t  \t  container: data.containerData,\n\t      parentSpecimenBarcode: data.parentSpecimenBarcode,\n\t      parentContainerBarcode: data.parentContainerBarcode,\n        };\n\t\t  \n        self.setState({\n          Data: data,\n          isLoaded: true,\n          collectionData: collectionData,\n        });\n      },\n      error: function(error, errorCode, errorMsg) {\n        console.error(error, errorCode, errorMsg);\n        self.setState({\n          error: 'An error occurred when loading the form!'\n        });\n      }\n    });\n  }\n\n  fetchCollectionFormData() {\n    $.ajax(this.props.collectionFormDataURL, {\n      method: \"GET\",\n      dataType: 'json',\n      success: function(data) {\n        this.setState({\n          SpecimenData: data,\n          isLoaded: true\n        });\n      }.bind(this),\n      error: function(error) {\n        console.error(error); \n      }\n    });\n  }\n\n  toggleModal() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n \n  render() {\n    // Data loading error\n    if (this.state.error !== undefined) {\n      return (\n        <div className=\"alert alert-danger text-center\">\n          <strong>\n            {this.state.error}\n          </strong>\n        </div>\n      );\n    }\n\n    // Waiting for data to load\n    if (!this.state.isLoaded) {\n      return (\n        <button className=\"btn-info has-spinner\">\n          Loading\n          <span\n            className=\"glyphicon glyphicon-refresh glyphicon-refresh-animate\">\n          </span>\n        </button>\n      );\n    }\n\n    var alertMessage = \"\";\n    var alertClass = \"alert text-center hide\";\n    var backURL = loris.BaseURL.concat('/biobank/');\n\n    if (this.state.uploadResult) {\n      if (this.state.uploadResult === \"success\") {\n        alertClass = \"alert alert-success text-center\";\n        alertMessage = \"Update Successful!\";\n      } else if (this.state.uploadResult === \"error\") {\n        alertClass = \"alert alert-danger text-center\";\n        alertMessage = \"Failed to update the file\";\n      }\n    }\n\n\t//checks if parent specimen exists and returns static element with href\n\tif (this.state.collectionData.parentSpecimenBarcode) {\n\t  var specimenURL = loris.BaseURL+\"/biobank/specimen/?barcode=\";\n\t  var parentSpecimenBarcode = (\n          <LinkElement\n            label=\"Parent Specimen\"\n            text={this.state.collectionData.parentSpecimenBarcode}\n\t        href={specimenURL+this.state.collectionData.parentSpecimenBarcode}\n          />\n\t  );\n\t}\t\n\n\t//checks if parent container exists and returns static element with href\n\tif (this.state.collectionData.parentContainerBarcode) {\n\t  var containerURL = loris.BaseURL+\"/biobank/container/?barcode=\";\n\t  var parentContainerBarcode = (\n          <LinkElement\n            label=\"Parent Container\"\n            text={this.state.collectionData.parentContainerBarcode}\n\t        href={containerURL+this.state.collectionData.parentContainerBarcode}\n          />\n\t  );\n\t}\t\n\n\t//loops through data object to produce static elements\n    if (this.state.Data.specimenData.data) {\n      var dataObject = this.state.Data.specimenData.data;\n      var specimenTypeAttributes = Object.keys(dataObject).map((key) => {\n        return (\n          <StaticElement\n            label = {this.state.Data.specimenTypeAttributes[this.state.Data.specimenData.typeId][key].name}\n            text = {dataObject[key]}\n          />\n        );\n      })\n    }\n\n\n    let addSpecimenButton;\n    let collectionForm;\n    if (loris.userHasPermission('biobank_write')) {\n      addSpecimenButton = (\n        <button \n          type=\"button\" \n          className=\"btn btn-success\"\n          onClick={this.toggleModal} \n          style={{marginLeft: '20px'}}\n        >\n          <span \n            className=\"glyphicon glyphicon-plus\"\n            style={{marginRight: '5px'}}\n          />\n          Child\n        </button>\n      );\n      collectionForm = (\n        <Modal show={this.state.isOpen} onClose={this.toggleModal}>\n          <BiobankCollectionForm\n            DataURL={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=getFormData`}\n            action={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=submitSpecimen`}\n            child='true'\n            specimenId={this.state.collectionData.specimen.id}\n            barcode={this.state.collectionData.container.barcode}\n            candidateId={this.state.collectionData.specimen.candidateId}\n            sessionId={this.state.collectionData.specimen.sessionId} \n            pscid={this.state.Data.candidateInfo[this.state.collectionData.specimen.candidateId].PSCID}\n            visit={this.state.Data.sessionInfo[this.state.collectionData.specimen.sessionId].Visit_label}\n            specimenTypes={this.state.SpecimenData.specimenTypes}\n            containerTypesPrimary={this.state.SpecimenData.containerTypesPrimary}\n            containerBarcodesNonPrimary={this.state.SpecimenData.containerBarcodesNonPrimary}\n            specimenTypeAttributes={this.state.SpecimenData.specimenTypeAttributes}\n            attributeDatatypes={this.state.SpecimenData.attributeDatatypes}\n            capacities={this.state.SpecimenData.capacities}\n            units={this.state.SpecimenData.units}\n            closeModal={this.toggleModal}\n          />\n        </Modal>\n      );\n    }\n   \n    let disableEdit;\n    let collectionPanelForm;\n    if (this.state.editCollection) {\n      disableEdit = (\n        <a \n          onClick={this.toggleEditCollection} \n          style={{cursor: 'pointer'}}\n        >\n          Cancel\n        </a>\n      );\n      collectionPanelForm = (\n        <BiobankSpecimenForm\n          barcode={this.state.Data.containerData.barcode}\n          specimenType={this.state.Data.specimenData.typeId}\n          containerType={this.state.Data.containerData.typeId}\n          quantity={this.state.Data.specimenData.quantity}\n          unit={this.state.Data.specimenData.unitId}\n          data={this.state.Data.specimenData.data}\n          collectDate={this.state.Data.specimenData.collectDate}\n          notes={this.state.Data.specimenData.notes}\n          specimenTypes={this.state.SpecimenData.specimenTypes}\n          specimenTypeAttributes={this.state.SpecimenData.specimenTypeAttributes}\n          attributeDatatypes={this.state.SpecimenData.attributeDatatypes}\n          containerTypesPrimary={this.state.SpecimenData.containerTypesPrimary}\n          capacities={this.state.SpecimenData.capacities}\n          units={this.state.SpecimenData.units}\n          edit={true}\n          action={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=updateSpecimen`}\n          updatePage={this.updatePage}\n        />\n      );\n    } else {\n      collectionPanelForm = (\n        <FormElement\n          name=\"specimenCollectionFormStatic\"\n          onSubmit={this.handleSubmit}\n          ref=\"formStatic\"\n        >\n          <StaticElement\n            label=\"Specimen Type\"\n            text={this.state.Data.specimenTypes[this.state.collectionData.specimen.typeId].type}\n          />\n          <StaticElement\n            label=\"Container Type\"\n            text={this.state.Data.containerTypesPrimary[this.state.collectionData.container.typeId].label}\n          />\n          <StaticElement\n            label=\"Quantity\"\n            text={this.state.collectionData.specimen.quantity+' '+\n                    this.state.Data.containerUnits[this.state.Data.containerCapacities[\n                    this.state.Data.containerTypesPrimary[this.state.collectionData.container.typeId].capacityId].unitId].unit}\n          />\n\t      {specimenTypeAttributes}\n          <StaticElement\n            label=\"Collection Date\"\n            text={this.state.collectionData.specimen.collectDate}\n          />\n          <StaticElement\n            label=\"Notes\"\n            text={this.state.collectionData.specimen.notes}\n          />\n        </FormElement>\n      );\n    }\n\n    return (\n      <div>\n        <div className={alertClass} role=\"alert\" ref=\"alert-message\">\n          {alertMessage}\n        </div>\n        {\n          this.state.uploadResult === \"success\" ?\n          <a className=\"btn btn-primary\" href={backURL}>Back to biobank</a> :\n          null\n        }\n        <h3 style={{display:'inline-block'}}>Specimen <strong>{this.state.collectionData.container.barcode}</strong></h3>\n        {addSpecimenButton}\n        <br/>\n        <br/>\n        <FormElement\n          columns={4}\n        >\n          <LinkElement\n            label=\"PSCID\"\n            text={this.state.Data.candidateInfo[this.state.collectionData.specimen.candidateId].PSCID}\n            href={loris.BaseURL+'/'+this.state.collectionData.specimen.candidateId}\n          />\n          <LinkElement\n            label=\"Visit Label\"\n            text={this.state.Data.sessionInfo[this.state.collectionData.specimen.sessionId].Visit_label}\n            href={loris.BaseURL+'/instrument_list/?candID='+this.state.collectionData.specimen.candidateId+\n                    '&sessionID='+this.state.collectionData.specimen.sessionId}\n          />\n          <StaticElement\n            label=\"Status\"\n            text={this.state.Data.containerStati[this.state.collectionData.container.statusId].status}\n          />\n\t\t  {parentSpecimenBarcode}\n\t\t  {parentContainerBarcode}\n        </FormElement>\n        <FormElement\n          columns= {3}\n        >\n\t    \t<Panel\n\t    \t  id=\"collection-panel\"\n\t    \t  title=\"Collection\"\n              edit={this.state.editCollection ? null : this.toggleEditCollection}\n              cancel={this.state.editCollection ? this.toggleEditCollection : null}\n\t    \t>\n              {collectionPanelForm}\n\t    \t</Panel>\n\t    \t<Panel\n\t    \t  id=\"preparation-panel\"\n\t    \t  title=\"Preparation\"\n              initCollapsed={true}\n              add={this.toggleEditCollection}\n\t    \t>\n\t    \t</Panel>\n\t    \t<Panel\n\t    \t  id=\"analysis-panel\"\n\t    \t  title=\"Analysis\"\n              initCollapsed={true}\n              add={this.toggleEditCollection}\n\t    \t>\n\t    \t</Panel>\n        </FormElement>\n        {collectionForm}\n      </div>\n    ); \n  }\n\n\n  toggleEditCollection() {\n    let editCollection = this.state.editCollection;\n    this.setState({\n      editCollection: !editCollection\n    });\n  }\n\n  /**\n   * Handles form submission\n   * @param {event} e - Form submition event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    var self = this;\n    var myCollectionData = this.state.formData;\n\n    $('#biobankSpecimenEl').hide();\n    $(\"#file-progress\").removeClass('hide');\n\n    $.ajax({\n      type: 'POST',\n      url: self.props.action,\n      data: JSON.stringify(myCollectionData),\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        var xhr = new window.XMLHttpRequest();\n        xhr.upload.addEventListener(\"progress\", function(evt) {\n          if (evt.lengthComputable) {\n            var progressbar = $(\"#progressbar\");\n            var progresslabel = $(\"#progresslabel\");\n            var percent = Math.round((evt.loaded / evt.total) * 100);\n            $(progressbar).width(percent + \"%\");\n            $(progresslabel).html(percent + \"%\");\n            progressbar.attr('aria-valuenow', percent);\n          }\n        }, false);\n        return xhr;\n      },\n      success: function(data) {\n        $(\"#file-progress\").addClass('hide');\n        self.setState({\n          uploadResult: \"success\"\n        });\n        self.showAlertMessage();\n      },\n      error: function(err) {\n        console.error(err);\n        self.setState({\n          uploadResult: \"error\"\n        });\n        self.showAlertMessage();\n      }\n\n    });\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setCollectionData(formElement, value) {\n    var collectionData = this.state.collectionData;\n\n    if (value === \"\") {\n      collectionData[formElement] = null;\n    } else {\n      collectionData[formElement] = value;\n    }\n\n    this.setState({\n      collectionData: collectionData\n    });\n  }\n\n  updatePage(specimenType, quantity, unit, data, collectDate, notes) {\n    this.toggleEditCollection();\n \n    let Data = this.state.Data;\n\n    Data.specimenData.typeId = specimenType;\n    Data.specimenData.quantity = quantity;\n    Data.specimenData.unitId = unit;\n    Data.specimenData.data = data;\n    Data.specimenData.collectDate = collectDate;\n    Data.specimenData.notes = notes;\n\n    this.setState({\n      Data: Data\n    });\n  } \n\n  /**\n   * Display a success/error alert message after form submission\n   */\n  showAlertMessage() {\n    var self = this;\n\n    if (this.refs[\"alert-message\"] === null) {\n      return;\n    }\n\n    var alertMsg = this.refs[\"alert-message\"];\n    $(alertMsg).fadeTo(2000, 500).delay(3000).slideUp(500, function() {\n      self.setState({\n        uploadResult: null\n      });\n    });\n  }\n\n}\n\nBiobankSpecimen.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired\n};\n\nvar RBiobankSpecimen = React.createFactory(BiobankSpecimen);\n\nwindow.BiobankSpecimen = BiobankSpecimen;\nwindow.RBiobankSpecimen = RBiobankSpecimen;\n\nexport default BiobankSpecimen;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimen.js"],"sourceRoot":""}