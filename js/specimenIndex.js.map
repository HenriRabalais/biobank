{"version":3,"sources":["webpack:///modules/biobank/js/specimenIndex.js","webpack:///webpack/bootstrap 9f922b4f23154ce114a3?3ce3*******","webpack:///./modules/biobank/jsx/specimenIndex.js","webpack:///./jsx/Panel.js?b4c8","webpack:///./modules/biobank/jsx/specimenForm.js?35c0","webpack:///./modules/biobank/jsx/barcodeForm.js?02a4","webpack:///./modules/biobank/jsx/collectionForm.js?e0f7","webpack:///./jsx/Tabs.js?82f5","webpack:///./modules/biobank/jsx/specimen.js","webpack:///./modules/biobank/jsx/preparationForm.js","webpack:///./modules/biobank/jsx/lifeCycle.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_specimen","_specimen2","args","QueryString","get","document","currentScript","src","$","biobankSpecimen","React","createElement","className","specimenPageDataURL","loris","BaseURL","barcode","ReactDOM","render","getElementById","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","Panel","_React$Component","this","_this","getPrototypeOf","state","collapsed","initCollapsed","panelClass","toggleCollapsed","bind","setState","glyphClass","pencilGlyph","edit","style","marginRight","cursor","onClick","plusGlyph","add","removeGlyph","cancel","panelHeading","title","data-toggle","data-target","role","height","children","Component","propTypes","PropTypes","string","func","defaultProps","_barcodeForm","_barcodeForm2","BiobankSpecimenForm","formData","barcodeFormList","errorMessage","formErrors","countBarcodeForms","handleSubmit","validateForm","setFormData","specimenSubmit","addBarcodeForm","setBarcodeFormData","child","specimenId","candidateId","sessionId","unitId","_this2","glyphStyle","color","margin","buttonStyle","appearance","outline","boxShadow","borderColor","backgroundColor","barcodeForms","_loop","push","setParentFormData","specimenTypes","containerTypesPrimary","containerBarcodesNonPrimary","specimenTypeAttributes","attributeDatatypes","capacities","specimenTypeUnits","units","button","type","removeBarcodeForm","staticFields","remainingQuantityFields","selectFields","StaticElement","label","text","pscid","visit","TextboxElement","name","onUserInput","required","quantity","SelectElement","options","specimenUnits","emptyOption","pSCIDs","ref","visits","visitLabel","disabled","FormElement","onSubmit","ButtonElement","toggleModal","formElement","_this3","test","isNaN","currentContainerType","specimenTypeFieldsObject","currentSpecimenType","keys","map","attribute","datatype","e","preventDefault","formRefs","refs","isValidForm","JSON","stringify","formObj","FormData","append","ajax","url","action","data","cache","contentType","processData","xhr","window","XMLHttpRequest","success","event","CustomEvent","dispatchEvent","refreshTable","swal","closeModal","error","err","console","msg","responseJSON","message","requiredFields","field","hasError","forceUpdate","sessionData","barcodeFormData","barcodeId","index","splice","DataURL","isRequired","_collectionForm","_collectionForm2","BiobankBarcodeForm","setSpecimenFormData","stati","specimenFormData","object","_defineProperty","SpecimenCollectionForm","specimenType","containerType","setSpecimenTypeFieldFormData","getSpecimenTypeFields","handleUpdate","updateSpecimen","containerId","collection","date","time","comments","parentContainerField","parentContainer","updateButton","unit","specimenTypeFields","specimenFields","DateElement","minYear","maxYear","TimeElement","TextareaElement","showCancelButton","confirmButtonText","cancelButtonText","isConfirm","toggleEdit","fieldsObject","attribte","_$$ajax","parse","updateCollection","Tabs","hash","location","activeTab","updateURL","substr","defaultTab","tabs","handleClick","getTabs","getTabPanes","tabId","onTabChange","scrollDistance","scrollTop","tab","tabClass","href","tabID","tabPanes","Children","cloneElement","tabStyle","marginLeft","marginBottom","array","bool","TabPane","_React$Component2","apply","arguments","classList","TabId","Title","Modal","_React$Component3","show","modalStyle","position","maxWidth","maxHeight","padding","borderRadius","overflowY","zIndex","backdropStyle","top","bottom","left","right","onClose","stopPropagation","node","_preparationForm","_preparationForm2","_Tabs","_Panel","_Panel2","_specimenForm","_specimenForm2","_lifeCycle","_lifeCycle2","BiobankSpecimen","Data","isLoaded","loadedData","editCollection","addPreparation","editPreparation","fetchSpecimenData","toggleEditCollection","toggleAddPreparation","toggleEditPreparation","mapFormOptions","updatePreparation","dataType","errorCode","errorMsg","isOpen","rawObject","targetAttribute","undefined","parentSpecimenBarcode","specimenURL","LinkElement","parentContainerBarcode","containerURL","addSpecimenButton","specimenForm","userHasPermission","border","parentTypeId","specimen","typeId","containersNonPrimary","container","candidateInfo","PSCID","sessionInfo","Visit_label","collectionPanelForm","cancelEditCollectionButton","dataObject","preparationPanelForm","cancelAddPreparationButton","cancelEditPreparationButton","specimenProtocolAttributes","specimenProtocols","preparation","insertAction","updateAction","protocolId","protocol","display","columns","containerStati","statusId","status","sites","locationId","RBiobankSpecimen","createFactory","SpecimenPreparationForm","currentProtocol","setSpecimenProtocolFieldFormData","getSpecimenProtocolFields","handleSave","savePreparation","specimenProtocolFieldsObject","submitButton","specimenProtocolFields","currentSpecimenProtocol","preparationFields","LifeCycle"],"mappings":"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","file":"./modules/biobank/js/specimenIndex.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _specimen = __webpack_require__(11);\n\t\n\tvar _specimen2 = _interopRequireDefault(_specimen);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar args = QueryString.get(document.currentScript.src); /* global ReactDOM */\n\t\n\t$(function () {\n\t  var biobankSpecimen = React.createElement(\n\t    \"div\",\n\t    { className: \"page-specimen-form\" },\n\t    React.createElement(\n\t      \"div\",\n\t      { className: \"row\" },\n\t      React.createElement(\n\t        \"div\",\n\t        { className: \"col-md-9 col-lg-12\" },\n\t        React.createElement(_specimen2.default, {\n\t          specimenPageDataURL: loris.BaseURL + \"/biobank/ajax/SpecimenInfo.php?action=getSpecimenData&barcode=\" + args.barcode\n\t        })\n\t      )\n\t    )\n\t  );\n\t\n\t  ReactDOM.render(biobankSpecimen, document.getElementById(\"lorisworkspace\"));\n\t});\n\n/***/ },\n/* 1 */,\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Panel\n\t *\n\t * @author Alex I.\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Panel component\n\t * Wraps children in a collapsible bootstrap panel\n\t */\n\tvar Panel = function (_React$Component) {\n\t  _inherits(Panel, _React$Component);\n\t\n\t  function Panel(props) {\n\t    _classCallCheck(this, Panel);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).call(this, props));\n\t\n\t    _this.state = {\n\t      collapsed: _this.props.initCollapsed\n\t    };\n\t\n\t    // Initialize panel class based on collapsed status\n\t    _this.panelClass = _this.props.initCollapsed ? \"panel-collapse collapse\" : \"panel-collapse collapse in\";\n\t\n\t    _this.toggleCollapsed = _this.toggleCollapsed.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Panel, [{\n\t    key: \"toggleCollapsed\",\n\t    value: function toggleCollapsed() {\n\t      this.setState({ collapsed: !this.state.collapsed });\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      // Change arrow direction based on collapse status\n\t      var glyphClass = this.state.collapsed ? \"glyphicon pull-right glyphicon-chevron-down\" : \"glyphicon pull-right glyphicon-chevron-up\";\n\t\n\t      var pencilGlyph = void 0;\n\t      if (this.props.edit) {\n\t        pencilGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-pencil\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.edit\n\t        });\n\t      }\n\t\n\t      var plusGlyph = void 0;\n\t      if (this.props.add) {\n\t        plusGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-plus\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.add\n\t        });\n\t      }\n\t\n\t      var removeGlyph = void 0;\n\t      if (this.props.cancel) {\n\t        removeGlyph = React.createElement(\"span\", {\n\t          className: \"glyphicon pull-right glyphicon-remove\",\n\t          style: { marginRight: '10px', cursor: 'pointer' },\n\t          onClick: this.props.cancel\n\t        });\n\t      }\n\t\n\t      // Add panel header, if title is set\n\t      var panelHeading = this.props.title ? React.createElement(\n\t        \"div\",\n\t        {\n\t          className: \"panel-heading\"\n\t        },\n\t        React.createElement(\"span\", {\n\t          className: glyphClass,\n\t          onClick: this.toggleCollapsed,\n\t          \"data-toggle\": \"collapse\",\n\t          \"data-target\": '#' + this.props.id,\n\t          style: { cursor: 'pointer' }\n\t        }),\n\t        pencilGlyph,\n\t        plusGlyph,\n\t        removeGlyph,\n\t        this.props.title\n\t      ) : '';\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"panel panel-primary\" },\n\t        panelHeading,\n\t        React.createElement(\n\t          \"div\",\n\t          { id: this.props.id, className: this.panelClass, role: \"tabpanel\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"panel-body\", style: { height: this.props.height } },\n\t            this.props.children\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Panel;\n\t}(React.Component);\n\t\n\tPanel.propTypes = {\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string,\n\t  edit: React.PropTypes.func,\n\t  add: React.PropTypes.func\n\t};\n\tPanel.defaultProps = {\n\t  initCollapsed: false,\n\t  id: 'default-panel',\n\t  height: '100%'\n\t};\n\t\n\texports.default = Panel;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _barcodeForm = __webpack_require__(4);\n\t\n\tvar _barcodeForm2 = _interopRequireDefault(_barcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Collection Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankSpecimenForm = function (_React$Component) {\n\t  _inherits(BiobankSpecimenForm, _React$Component);\n\t\n\t  function BiobankSpecimenForm(props) {\n\t    _classCallCheck(this, BiobankSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimenForm.__proto__ || Object.getPrototypeOf(BiobankSpecimenForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      barcodeFormList: {},\n\t      errorMessage: null,\n\t      formErrors: {},\n\t      countBarcodeForms: [1]\n\t    };\n\t\n\t    //this.getValidFileName = this.getValidFileName.bind(this);\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    //this.isValidFileName = this.isValidFileName.bind(this);\n\t    _this.validateForm = _this.validateForm.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.specimenSubmit = _this.specimenSubmit.bind(_this);\n\t    _this.addBarcodeForm = _this.addBarcodeForm.bind(_this);\n\t    _this.setBarcodeFormData = _this.setBarcodeFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimenForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t\n\t      //if this is a child specimen form then certain formData is set when component mounts\n\t      if (this.props.child) {\n\t        var formData = this.state.formData;\n\t        formData['parentSpecimen'] = this.props.specimenId;\n\t        formData['pscid'] = this.props.candidateId;\n\t        formData['visitLabel'] = this.props.sessionId;\n\t        formData['unitId'] = this.props.unitId;\n\t\n\t        this.setState({\n\t          formData: formData\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      //Styling for remove Barcode button\n\t      var glyphStyle = {\n\t        color: '#D3D3D3',\n\t        margin: 'auto'\n\t      };\n\t      var buttonStyle = {\n\t        appearance: 'none',\n\t        outline: 'none',\n\t        boxShadow: 'none',\n\t        borderColor: 'transparent',\n\t        backgroundColor: 'transparent'\n\t\n\t      };\n\t\n\t      //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n\t      var barcodeForms = [];\n\t\n\t      var _loop = function _loop(i) {\n\t        barcodeForms.push(React.createElement(_barcodeForm2.default, {\n\t          setParentFormData: _this2.setBarcodeFormData,\n\t          id: _this2.state.countBarcodeForms[i],\n\t          specimenTypes: _this2.props.specimenTypes,\n\t          containerTypesPrimary: _this2.props.containerTypesPrimary,\n\t          containerBarcodesNonPrimary: _this2.props.containerBarcodesNonPrimary,\n\t          specimenTypeAttributes: _this2.props.specimenTypeAttributes,\n\t          attributeDatatypes: _this2.props.attributeDatatypes,\n\t          capacities: _this2.props.capacities,\n\t          specimenTypeUnits: _this2.props.specimenTypeUnits,\n\t          units: _this2.props.units,\n\t          button: i + 1 === _this2.state.countBarcodeForms.length ? React.createElement(\n\t            'button',\n\t            {\n\t              type: 'button',\n\t              className: 'btn btn-success btn-sm',\n\t              onClick: _this2.addBarcodeForm\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-plus' })\n\t          ) : React.createElement(\n\t            'button',\n\t            {\n\t              type: 'button',\n\t              className: 'btn btn-primary-outline btn-sm',\n\t              style: buttonStyle,\n\t              onClick: function onClick() {\n\t                return _this2.removeBarcodeForm(i);\n\t              }\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-remove', style: glyphStyle })\n\t          )\n\t        }));\n\t      };\n\t\n\t      for (var i = 0; i < this.state.countBarcodeForms.length; i++) {\n\t        _loop(i);\n\t      }\n\t\n\t      var staticFields = void 0;\n\t      var remainingQuantityFields = void 0;\n\t      var selectFields = void 0;\n\t      if (this.props.child) {\n\t        staticFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(StaticElement, {\n\t            label: 'Parent Specimen',\n\t            text: this.props.barcode\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'PSCID',\n\t            text: this.props.pscid\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Visit Label',\n\t            text: this.props.visit\n\t          })\n\t        );\n\t\n\t        //It may be wise to make unit static and forced, or atleast prepopulated --\n\t        remainingQuantityFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Remaining Quantity',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: this.props.specimenUnits,\n\t            onUserInput: this.setFormData,\n\t            emptyOption: false,\n\t            required: true,\n\t            value: this.state.formData.unitId\n\t          })\n\t        );\n\t      } else {\n\t        selectFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'pscid',\n\t            label: 'PSCID',\n\t            options: this.props.pSCIDs,\n\t            onUserInput: this.setFormData,\n\t            ref: 'pscid',\n\t            required: true,\n\t            value: this.state.formData.pscid\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'visitLabel',\n\t            label: 'Visit Label',\n\t            options: this.state.visits,\n\t            onUserInput: this.setFormData,\n\t            ref: 'visitLabel',\n\t            required: true,\n\t            value: this.state.formData.visitLabel,\n\t            disabled: this.state.formData.pscid ? false : true\n\t          })\n\t        );\n\t      }\n\t\n\t      //ALLOW THEM TO CANCEL THE FORM AND DELETE BARCODE FORMS\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenForm',\n\t          onSubmit: this.handleSubmit,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(\n\t          'h3',\n\t          null,\n\t          React.createElement(\n\t            'b',\n\t            null,\n\t            'Add New ',\n\t            this.props.child ? \"Aliquots\" : \"Specimens\"\n\t          )\n\t        ),\n\t        React.createElement('br', null),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            staticFields,\n\t            selectFields\n\t          )\n\t        ),\n\t        barcodeForms,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            remainingQuantityFields\n\t          )\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'col-xs-3 col-xs-offset-9' },\n\t          React.createElement(ButtonElement, { label: 'Submit' })\n\t        ),\n\t        React.createElement(\n\t          'a',\n\t          { onClick: this.toggleModal },\n\t          'Cancel'\n\t        )\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t    /**\n\t     * Returns a valid name for the file to be specimened\n\t     *\n\t     * @param {string} pscid - PSCID selected from the dropdown\n\t     * @param {string} visitLabel - Visit label selected from the dropdown\n\t     * @param {string} instrument - Instrument selected from the dropdown\n\t     * @return {string} - Generated valid filename for the current selection\n\t     */\n\t    //  getValidFileName(pscid, visitLabel, instrument) {\n\t    //    var fileName = pscid + \"_\" + visitLabel;\n\t    //    if (instrument) fileName += \"_\" + instrument;\n\t    //\n\t    //    return fileName;\n\t    //  }\n\t\n\t\n\t  }, {\n\t    key: 'validateForm',\n\t    value: function validateForm(formElement, value) {\n\t      var _this3 = this;\n\t\n\t      var formErrors = this.state.formErrors;\n\t\n\t      //validate barcode regex\n\t      if (formElement === \"barcode\" && value !== \"\") {\n\t        if (!/^hello/.test(this.state.formData.barcode)) {\n\t          formErrors.barcode = true;\n\t        } else {\n\t          formErrors.barcode = false;\n\t        }\n\t      }\n\t\n\t      //validate that quantity is a number and less than capacity\n\t      if (formElement === \"quantity\" && value !== \"\") {\n\t        if (isNaN(value) || value > this.props.capacities[this.state.currentContainerType]) {\n\t          formErrors.quantity = true;\n\t        } else {\n\t          formErrors.quantity = false;\n\t        }\n\t      }\n\t\n\t      //validate datatypes and regex of generated type attributes\n\t      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t      var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t\n\t        var datatype = _this3.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"number\") {\n\t          if (formElement === attribute) {\n\t            if (isNaN(value) && value !== \"\") {\n\t              formErrors[attribute] = true;\n\t            } else {\n\t              formErrors[attribute] = false;\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      this.setState({\n\t        formErrors: formErrors\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Handle form submission\n\t     * @param {object} e - Form submission event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      var formRefs = this.refs;\n\t      //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\t\n\t      // Validate the form\n\t      if (!this.isValidForm(formRefs, formData)) {\n\t        return;\n\t      }\n\t\n\t      //    // Validate specimened file name\n\t      //    let instrument = formData.instrument ? formData.instrument : null;\n\t      //    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n\t      //    let requiredFileName = this.getValidFileName(\n\t      //      formData.pscid, formData.visitLabel, instrument\n\t      //    );\n\t      //    if (!this.isValidFileName(requiredFileName, fileName)) {\n\t      //      swal(\n\t      //        \"Invalid Specimen name!\",\n\t      //        \"File name should begin with: \" + requiredFileName,\n\t      //        \"error\"\n\t      //      );\n\t      //      return;\n\t      //    }\n\t\n\t      // Check for duplicate file names\n\t      //    let isDuplicate = biobankFiles.indexOf(fileName);\n\t      //    if (isDuplicate >= 0) {\n\t      //      swal({\n\t      //        title: \"Are you sure?\",\n\t      //        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n\t      //        type: \"warning\",\n\t      //        showCancelButton: true,\n\t      //        confirmButtonText: 'Yes, I am sure!',\n\t      //        cancelButtonText: \"No, cancel it!\"\n\t      //      }, function(isConfirm) {\n\t      //        if (isConfirm) {\n\t      //          this.specimenFile();\n\t      //        } else {\n\t      //          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n\t      //        }\n\t      //      }.bind(this));\n\t      //    } else {\n\t\n\t      this.specimenSubmit();\n\t      //    }\n\t    }\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'specimenSubmit',\n\t    value: function specimenSubmit() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          // FOR SOME REASON THIS IS NO LONGER WORKING\n\t          // Trigger an update event to update all observers (i.e DataTable)\n\t          // THIS CURRENTLY DOES NOT WORK - LOOK INTO IT\n\t          var event = new CustomEvent('update-datatable');\n\t          window.dispatchEvent(event);\n\t\n\t          //refreshes table if not a child\n\t          if (!this.props.child) {\n\t            this.props.refreshTable();\n\t          }\n\t          swal(\"Specimen Submission Successful!\", \"\", \"success\");\n\t          this.props.closeModal();\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Checks if the inputted file name is valid\n\t     *\n\t     * @param {string} requiredFileName - Required file name\n\t     * @param {string} fileName - Provided file name\n\t     * @return {boolean} - true if fileName starts with requiredFileName, false\n\t     *   otherwise\n\t     */\n\t    //  isValidFileName(requiredFileName, fileName) {\n\t    //    if (fileName === null || requiredFileName === null) {\n\t    //      return false;\n\t    //    }\n\t    //\n\t    //    return (fileName.indexOf(requiredFileName) === 0);\n\t    //  }\n\t\n\t    /**\n\t     * Validate the form\n\t     *\n\t     * @param {object} formRefs - Object containing references to React form elements\n\t     * @param {object} formData - Object containing form data inputed by user\n\t     * @return {boolean} - true if all required fields are filled, false otherwise\n\t     */\n\t\n\t  }, {\n\t    key: 'isValidForm',\n\t    value: function isValidForm(formRefs, formData) {\n\t      var isValidForm = true;\n\t\n\t      var requiredFields = {\n\t        pscid: null,\n\t        visitLabel: null\n\t      };\n\t\n\t      Object.keys(requiredFields).map(function (field) {\n\t        if (formData[field]) {\n\t          requiredFields[field] = formData[field];\n\t        } else if (formRefs[field]) {\n\t          formRefs[field].props.hasError = true;\n\t          isValidForm = false;\n\t        }\n\t      });\n\t      this.forceUpdate();\n\t\n\t      return isValidForm;\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      // Only display visits and sites available for the current pscid\n\t      //let visitLabel = this.state.formData.visitLabel;\n\t      //let pscid = this.state.formData.pscid;\n\t\n\t      //LOOK AT THIS LATER - THE SWITCH TO PROPS MESSED THIS ALL UP \n\t      if (formElement === \"pscid\" && value !== \"\") {\n\t        this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n\t        //this.state.Data.sites = this.state.Data.sessionData[this.state.Data.PSCIDs[value]].sites;\n\t      }\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setBarcodeFormData',\n\t    value: function setBarcodeFormData(barcodeFormData, barcodeId) {\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      barcodeFormList[barcodeId] = barcodeFormData;\n\t      formData['barcodeFormList'] = barcodeFormList;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'addBarcodeForm',\n\t    value: function addBarcodeForm() {\n\t      var countBarcodeForms = this.state.countBarcodeForms;\n\t      countBarcodeForms.push(countBarcodeForms[countBarcodeForms.length - 1] + 1);\n\t      this.setState({\n\t        countBarcodeForms: countBarcodeForms\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removeBarcodeForm',\n\t    value: function removeBarcodeForm(index) {\n\t      var countBarcodeForms = this.state.countBarcodeForms;\n\t      countBarcodeForms.splice(index, 1);\n\t      this.setState({\n\t        countBarcodeForms: countBarcodeForms\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimenForm;\n\t}(React.Component);\n\t\n\tBiobankSpecimenForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired,\n\t  barcode: React.PropTypes.string,\n\t  refreshTable: React.PropTypes.func\n\t};\n\t\n\texports.default = BiobankSpecimenForm;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _collectionForm = __webpack_require__(5);\n\t\n\tvar _collectionForm2 = _interopRequireDefault(_collectionForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Barcode Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar BiobankBarcodeForm = function (_React$Component) {\n\t  _inherits(BiobankBarcodeForm, _React$Component);\n\t\n\t  function BiobankBarcodeForm(props) {\n\t    _classCallCheck(this, BiobankBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankBarcodeForm.__proto__ || Object.getPrototypeOf(BiobankBarcodeForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      formErrors: {}\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setSpecimenFormData = _this.setSpecimenFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankBarcodeForm, [{\n\t    key: \"render\",\n\t    value: function render() {\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: \"biobankBarcode\"\n\t        },\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-11\" },\n\t            React.createElement(\n\t              \"div\",\n\t              {\n\t                \"data-toggle\": \"collapse\",\n\t                \"data-target\": \"#\" + this.props.id\n\t              },\n\t              React.createElement(TextboxElement, {\n\t                name: \"barcode\",\n\t                label: \"Barcode \" + this.props.id,\n\t                onUserInput: this.setFormData,\n\t                ref: \"barcode\",\n\t                required: true,\n\t                value: this.state.formData[\"barcode\"],\n\t                hasError: this.state.formErrors[\"barcode\"],\n\t                errorMessage: \"Incorrect Barcode format for this Specimen and Container Type\"\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-1\" },\n\t            this.props.button\n\t          )\n\t        ),\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row\" },\n\t          React.createElement(\"div\", { className: \"col-xs-2\" }),\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-9\" },\n\t            React.createElement(\n\t              \"div\",\n\t              { id: this.props.id, className: \"collapse\" },\n\t              React.createElement(_collectionForm2.default, {\n\t                setParentFormData: this.setSpecimenFormData,\n\t                specimenTypes: this.props.specimenTypes,\n\t                specimenTypeAttributes: this.props.specimenTypeAttributes,\n\t                attributeDatatypes: this.props.attributeDatatypes,\n\t                containerTypesPrimary: this.props.containerTypesPrimary,\n\t                containerBarcodesNonPrimary: this.props.containerBarcodesNonPrimary,\n\t                specimenTypeUnits: this.props.specimenTypeUnits,\n\t                stati: this.props.stati\n\t              })\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: \"setFormData\",\n\t    value: function setFormData(formElement, value) {\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: \"setSpecimenFormData\",\n\t    value: function setSpecimenFormData(specimenFormData) {\n\t      var formData = this.state.formData;\n\t\n\t      for (var attribute in specimenFormData) {\n\t        formData[attribute] = specimenFormData[attribute];\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: \"setParentFormData\",\n\t    value: function setParentFormData() {\n\t      this.props.setParentFormData(this.state.formData, this.props.id);\n\t    }\n\t  }]);\n\t\n\t  return BiobankBarcodeForm;\n\t}(React.Component);\n\t\n\tBiobankBarcodeForm.propTypes = {\n\t\n\t  id: React.PropTypes.string,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = BiobankBarcodeForm;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenCollectionForm = function (_React$Component) {\n\t  _inherits(SpecimenCollectionForm, _React$Component);\n\t\n\t  function SpecimenCollectionForm(props) {\n\t    _classCallCheck(this, SpecimenCollectionForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenCollectionForm.__proto__ || Object.getPrototypeOf(SpecimenCollectionForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: { data: {} },\n\t      currentSpecimenType: _this.props.edit ? _this.props.specimenType : null,\n\t      currentContainerType: _this.props.edit ? _this.props.containerType : null,\n\t      formErrors: {}\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setSpecimenTypeFieldFormData = _this.setSpecimenTypeFieldFormData.bind(_this);\n\t    _this.setParentFormData = _this.setParentFormData.bind(_this);\n\t    _this.getSpecimenTypeFields = _this.getSpecimenTypeFields.bind(_this);\n\t    _this.handleUpdate = _this.handleUpdate.bind(_this);\n\t    _this.updateSpecimen = _this.updateSpecimen.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenCollectionForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var _this2 = this;\n\t\n\t      var formData = this.state.formData;\n\t      if (this.props.edit) {\n\t        formData['specimenId'] = this.props.specimenId;\n\t        formData['containerId'] = this.props.containerId;\n\t        formData['specimenType'] = this.props.specimenType;\n\t        formData['containerType'] = this.props.containerType;\n\t        formData['quantity'] = this.props.collection.quantity;\n\t        formData['unitId'] = this.props.collection.unitId;\n\t        formData['date'] = this.props.collection.date;\n\t        formData['time'] = this.props.collection.time;\n\t        formData['comments'] = this.props.collection.comments;\n\t\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t        if (specimenTypeFieldsObject) {\n\t          var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t            formData.data[attribute] = _this2.props.collection.data[attribute];\n\t          });\n\t        }\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      var parentContainerField;\n\t      if (!this.props.edit) {\n\t        parentContainerField = React.createElement(SelectElement, {\n\t          name: 'parentContainer',\n\t          label: 'Parent Container Barcode',\n\t          options: this.props.containerBarcodesNonPrimary,\n\t          onUserInput: this.setFormData,\n\t          ref: 'parentContainer',\n\t          required: false,\n\t          value: this.state.formData.parentContainer\n\t        });\n\t      }\n\t\n\t      var updateButton;\n\t      if (this.props.edit) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      }\n\t\n\t      //This block of code should potentially be moved to setFormData();\n\t      //Consider Refactoring...\n\t      var specimenTypeUnits = {};\n\t      if (this.state.currentSpecimenType) {\n\t\n\t        //This modifies the selections for unit drop down based on the chosend specimen type \n\t        for (var id in this.props.specimenTypeUnits[this.state.currentSpecimenType]) {\n\t          specimenTypeUnits[id] = this.props.specimenTypeUnits[this.state.currentSpecimenType][id].unit;\n\t        }\n\t\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t        if (specimenTypeFieldsObject) {\n\t          var specimenTypeFields = this.getSpecimenTypeFields(specimenTypeFieldsObject);\n\t        }\n\t      }\n\t\n\t      var specimenFields;\n\t      if (this.state.currentSpecimenType) {\n\t        specimenFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'containerType',\n\t            label: 'Container Type',\n\t            options: this.props.containerTypesPrimary,\n\t            onUserInput: this.setFormData,\n\t            ref: 'containerType',\n\t            required: true,\n\t            value: this.state.formData.containerType\n\t          }),\n\t          parentContainerField,\n\t          React.createElement(TextboxElement, {\n\t            name: 'quantity',\n\t            label: 'Quantity',\n\t            onUserInput: this.setFormData,\n\t            ref: 'quantity',\n\t            required: true,\n\t            value: this.state.formData.quantity,\n\t            hasError: this.state.formErrors.quantity\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'unitId',\n\t            label: 'Unit',\n\t            options: specimenTypeUnits,\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.unitId\n\t          }),\n\t          specimenTypeFields,\n\t          React.createElement(DateElement, {\n\t            name: 'date',\n\t            label: 'Date',\n\t            minYear: '2000',\n\t            maxYear: '2018',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.date\n\t          }),\n\t          React.createElement(TimeElement, {\n\t            name: 'time',\n\t            label: 'Time',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.time\n\t          }),\n\t          React.createElement(TextareaElement, {\n\t            name: 'comments',\n\t            label: 'Comments',\n\t            onUserInput: this.setFormData,\n\t            ref: 'comments',\n\t            value: this.state.formData.comments\n\t          }),\n\t          updateButton\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankSpecimen',\n\t          onSubmit: this.handleUpdate,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'specimenType',\n\t            label: 'Specimen Type',\n\t            options: this.props.specimenTypes,\n\t            onUserInput: this.setFormData,\n\t            ref: 'specimenType',\n\t            required: true,\n\t            value: this.state.formData.specimenType\n\t          }),\n\t          specimenFields\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      if (formElement === \"specimenType\" && value !== \"\") {\n\t        //This throws a warning if the specimen type is changed because of the cascading effects this \n\t        //would cause.\n\t        if (this.props.edit) {\n\t          swal({\n\t            title: \"Warning\",\n\t            text: \"Changing the specimen type will result in the loss of any preparation or anaylsis \" + \"data for this specimen. You will also need to manually change the specimen type of any \" + \"aliquots derived from this specimen. Proceed with caution.\",\n\t            type: \"warning\",\n\t            showCancelButton: true,\n\t            confirmButtonText: 'Cancel Change',\n\t            cancelButtonText: 'Proceed'\n\t          }, function (isConfirm) {\n\t            if (isConfirm) {\n\t              this.props.toggleEdit();\n\t            } else {}\n\t          }.bind(this));\n\t        }\n\t\n\t        //This is to eliminate the values for the specimen type fields\n\t        //This could potentially be improved later to retain the values\n\t        //for the fields that are common across specimen types\n\t        formData.data = {};\n\t        this.setState({\n\t          currentSpecimenType: value\n\t        });\n\t      }\n\t\n\t      if (formElement === \"containerType\" && value !== \"\") {\n\t        this.setState({\n\t          currentContainerType: value\n\t        });\n\t      }\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setSpecimenTypeFieldFormData',\n\t    value: function setSpecimenTypeFieldFormData(formElement, value) {\n\t      var formData = this.state.formData;\n\t      formData.data[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      }, this.setParentFormData);\n\t    }\n\t  }, {\n\t    key: 'setParentFormData',\n\t    value: function setParentFormData() {\n\t      if (!this.props.edit) {\n\t        var formData = this.state.formData;\n\t        this.props.setParentFormData(formData);\n\t      }\n\t    }\n\t\n\t    // This generates all the form fields for a given specimen type\n\t\n\t  }, {\n\t    key: 'getSpecimenTypeFields',\n\t    value: function getSpecimenTypeFields(fieldsObject) {\n\t      var _this3 = this;\n\t\n\t      var specimenTypeFields = Object.keys(fieldsObject).map(function (attribute) {\n\t        var datatype = _this3.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"text\" || datatype === \"number\") {\n\t          if (fieldsObject[attribute]['refTableId'] == null) {\n\t            return React.createElement(TextboxElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this3.state.formData.data[attribute],\n\t              hasError: _this3.state.formErrors[attribute],\n\t              errorMessage: \"This is a \" + datatype + \" field.\"\n\t            });\n\t          }\n\t\n\t          // OPTIONS FOR SELECT ELEMENT WILL MOST LIKELY BE PASSED VIA AJAX CALL\n\t          // BUT IT CAN ALSO BE PRELOADED --\n\t          // ASK RIDA HOW THIS SHOULD BE DONE\n\t          if (fieldsObject[attribute]['refTableId'] !== null) {\n\t            return React.createElement(SelectElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              options: '',\n\t              onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribte]['required'],\n\t              value: _this3.state.formData.data[attribute]\n\t            });\n\t          }\n\t        }\n\t\n\t        if (datatype === \"datetime\") {\n\t          return React.createElement(DateElement, {\n\t            name: attribute,\n\t            label: fieldsObject[attribute]['name'],\n\t            onUserInput: _this3.setSpecimenTypeFieldFormData,\n\t            ref: attribute,\n\t            required: fieldsObject[attribute]['required'],\n\t            value: _this3.state.formData.data[attribute]\n\t          });\n\t        }\n\t\n\t        if (datatype === \"boolean\") {}\n\t      });\n\t\n\t      return specimenTypeFields;\n\t    }\n\t  }, {\n\t    key: 'handleUpdate',\n\t    value: function handleUpdate(e) {\n\t      //more things will go here later\n\t      this.updateSpecimen();\n\t    }\n\t  }, {\n\t    key: 'updateSpecimen',\n\t    value: function updateSpecimen() {\n\t      var _$$ajax;\n\t\n\t      var formData = this.state.formData;\n\t      formData['data'] = JSON.stringify(formData['data']);\n\t\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax((_$$ajax = {\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false\n\t      }, _defineProperty(_$$ajax, 'processData', false), _defineProperty(_$$ajax, 'xhr', function () {\n\t        var xhr = new window.XMLHttpRequest();\n\t        return xhr;\n\t      }.bind(this)), _defineProperty(_$$ajax, 'success', function () {\n\t        //Update Parent Specimen Page Here\n\t        formData.data = JSON.parse(formData.data);\n\t        this.props.updateCollection(formData);\n\t      }.bind(this)), _defineProperty(_$$ajax, 'error', function (err) {\n\t        console.error(err);\n\t        var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t        this.setState({\n\t          errorMessage: msg\n\t        });\n\t        swal(msg, \"\", \"error\");\n\t      }.bind(this)), _$$ajax));\n\t    }\n\t  }]);\n\t\n\t  return SpecimenCollectionForm;\n\t}(React.Component);\n\t\n\tSpecimenCollectionForm.propTypes = {\n\t  setParentFormData: React.PropTypes.func,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = SpecimenCollectionForm;\n\n/***/ },\n/* 6 */,\n/* 7 */,\n/* 8 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Tabs component.\n\t *\n\t * @author Loris Team\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Tabs Component.\n\t * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n\t * and corresponding tab panes.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * 1. Define an array of tabs with IDs and labels\n\t *\n\t * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n\t *\n\t * 2. Pass tabList as <Tab> property and <TabPane> as child\n\t *  ```\n\t * <Tabs tabs={tabList} defaultTab=\"tab1\">\n\t *   <TabPane TabId={tabList[0].id}>\n\t *     // Tab content goes here\n\t *   </TabPane>\n\t * </Tabs>\n\t * ```\n\t * =================================================\n\t *\n\t */\n\tvar Tabs = function (_React$Component) {\n\t  _inherits(Tabs, _React$Component);\n\t\n\t  function Tabs(props) {\n\t    _classCallCheck(this, Tabs);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call(this, props));\n\t\n\t    var hash = window.location.hash;\n\t    var activeTab = \"\";\n\t\n\t    /**\n\t     * Determine the initial active tab in this order\n\t     * 1. Try to infer from the URL, otherwise\n\t     * 2. Try to infer from the defaultTab prop, otherwise\n\t     * 3. Set to be the first tab of the list\n\t     */\n\t    if (_this.props.updateURL && hash) {\n\t      activeTab = hash.substr(1);\n\t    } else if (_this.props.defaultTab) {\n\t      activeTab = _this.props.defaultTab;\n\t    } else if (_this.props.tabs.length > 0) {\n\t      activeTab = _this.props.tabs[0].id;\n\t    }\n\t\n\t    _this.state = {\n\t      activeTab: activeTab\n\t    };\n\t\n\t    _this.handleClick = _this.handleClick.bind(_this);\n\t    _this.getTabs = _this.getTabs.bind(_this);\n\t    _this.getTabPanes = _this.getTabPanes.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Tabs, [{\n\t    key: 'handleClick',\n\t    value: function handleClick(tabId, e) {\n\t      this.setState({ activeTab: tabId });\n\t      this.props.onTabChange(tabId);\n\t\n\t      // Add tab href to URL querystring and scroll the page to top\n\t      if (this.props.updateURL) {\n\t        var scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n\t        window.location.hash = e.target.hash;\n\t        $('html,body').scrollTop(scrollDistance);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getTabs',\n\t    value: function getTabs() {\n\t      var tabs = this.props.tabs.map(function (tab) {\n\t        var tabClass = this.state.activeTab === tab.id ? 'active' : null;\n\t        var href = \"#\" + tab.id;\n\t        var tabID = \"tab-\" + tab.id;\n\t        return React.createElement(\n\t          'li',\n\t          {\n\t            role: 'presentation',\n\t            className: tabClass,\n\t            key: tab.id\n\t          },\n\t          React.createElement(\n\t            'a',\n\t            { id: tabID,\n\t              href: href,\n\t              role: 'tab',\n\t              'data-toggle': 'tab',\n\t              onClick: this.handleClick.bind(null, tab.id)\n\t            },\n\t            tab.label\n\t          )\n\t        );\n\t      }.bind(this));\n\t\n\t      return tabs;\n\t    }\n\t  }, {\n\t    key: 'getTabPanes',\n\t    value: function getTabPanes() {\n\t      var tabPanes = React.Children.map(this.props.children, function (child, key) {\n\t        if (child) {\n\t          return React.cloneElement(child, {\n\t            activeTab: this.state.activeTab,\n\t            key: key\n\t          });\n\t        }\n\t      }.bind(this));\n\t\n\t      return tabPanes;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var tabs = this.getTabs();\n\t      var tabPanes = this.getTabPanes();\n\t      var tabStyle = {\n\t        marginLeft: 0,\n\t        marginBottom: '5px'\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'ul',\n\t          { className: 'nav nav-tabs', role: 'tablist', style: tabStyle },\n\t          tabs\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tab-content' },\n\t          tabPanes\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Tabs;\n\t}(React.Component);\n\t\n\tTabs.propTypes = {\n\t  tabs: React.PropTypes.array.isRequired,\n\t  defaultTab: React.PropTypes.string,\n\t  updateURL: React.PropTypes.bool\n\t};\n\tTabs.defaultProps = {\n\t  onTabChange: function onTabChange() {},\n\t  updateURL: false\n\t};\n\t\n\t/*\n\t * TabPane component.\n\t * Used to wrap content for every tab.\n\t */\n\t\n\tvar TabPane = function (_React$Component2) {\n\t  _inherits(TabPane, _React$Component2);\n\t\n\t  function TabPane() {\n\t    _classCallCheck(this, TabPane);\n\t\n\t    return _possibleConstructorReturn(this, (TabPane.__proto__ || Object.getPrototypeOf(TabPane)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(TabPane, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var classList = \"tab-pane\";\n\t      var title = void 0;\n\t\n\t      if (this.props.TabId === this.props.activeTab) {\n\t        classList += \" active\";\n\t      }\n\t      if (this.props.Title) {\n\t        title = React.createElement(\n\t          'h1',\n\t          null,\n\t          this.props.Title\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { role: 'tabpanel', className: classList, id: this.props.TabId },\n\t        title,\n\t        this.props.children\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return TabPane;\n\t}(React.Component);\n\t\n\tTabPane.propTypes = {\n\t  TabId: React.PropTypes.string.isRequired,\n\t  Title: React.PropTypes.string,\n\t  activeTab: React.PropTypes.string\n\t};\n\t\n\tvar Modal = function (_React$Component3) {\n\t  _inherits(Modal, _React$Component3);\n\t\n\t  function Modal() {\n\t    _classCallCheck(this, Modal);\n\t\n\t    return _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Modal, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      // Render nothing if the \"show\" prop is false\n\t      if (!this.props.show) {\n\t        return null;\n\t      }\n\t\n\t      //White Modal Window\n\t      var modalStyle = {\n\t        position: 'relative',\n\t        maxWidth: 1000,\n\t        maxHeight: '100%',\n\t        margin: '0 auto',\n\t        backgroundColor: '#fff',\n\t        padding: 30,\n\t        borderRadius: 10,\n\t        overflowY: 'auto',\n\t        zIndex: 9999\n\t      };\n\t\n\t      //Grey Background\n\t      var backdropStyle = {\n\t        position: 'fixed',\n\t        zIndex: 9998,\n\t        top: 0,\n\t        bottom: 0,\n\t        left: 0,\n\t        right: 0,\n\t        backgroundColor: 'rgba(0,0,0,0.3)',\n\t        padding: 50\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { style: backdropStyle, onClick: this.props.onClose },\n\t        React.createElement(\n\t          'div',\n\t          { style: modalStyle, onClick: function onClick(e) {\n\t              e.stopPropagation();\n\t            } },\n\t          this.props.children\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Modal;\n\t}(React.Component);\n\t\n\tModal.propTypes = {\n\t  onClose: React.PropTypes.func.isRequired,\n\t  show: React.PropTypes.bool,\n\t  children: React.PropTypes.node\n\t};\n\t\n\texports.Tabs = Tabs;\n\texports.TabPane = TabPane;\n\texports.Modal = Modal;\n\n/***/ },\n/* 9 */,\n/* 10 */,\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _collectionForm = __webpack_require__(5);\n\t\n\tvar _collectionForm2 = _interopRequireDefault(_collectionForm);\n\t\n\tvar _preparationForm = __webpack_require__(12);\n\t\n\tvar _preparationForm2 = _interopRequireDefault(_preparationForm);\n\t\n\tvar _Tabs = __webpack_require__(8);\n\t\n\tvar _Panel = __webpack_require__(2);\n\t\n\tvar _Panel2 = _interopRequireDefault(_Panel);\n\t\n\tvar _specimenForm = __webpack_require__(3);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tvar _lifeCycle = __webpack_require__(13);\n\t\n\tvar _lifeCycle2 = _interopRequireDefault(_lifeCycle);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* exported RBiobankSpecimen */\n\t\n\t/**\n\t * Biobank Specimen\n\t *\n\t * Fetches data corresponding to a given Specimen from Loris backend and\n\t * displays a page allowing viewing of meta information of the specimen\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankSpecimen = function (_React$Component) {\n\t  _inherits(BiobankSpecimen, _React$Component);\n\t\n\t  function BiobankSpecimen(props) {\n\t    _classCallCheck(this, BiobankSpecimen);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimen.__proto__ || Object.getPrototypeOf(BiobankSpecimen)).call(this, props));\n\t\n\t    _this.state = {\n\t      Data: {},\n\t      isLoaded: false,\n\t      loadedData: 0,\n\t      editCollection: false,\n\t      addPreparation: false,\n\t      editPreparation: false\n\t    };\n\t\n\t    _this.fetchSpecimenData = _this.fetchSpecimenData.bind(_this);\n\t    _this.toggleModal = _this.toggleModal.bind(_this);\n\t    _this.toggleEditCollection = _this.toggleEditCollection.bind(_this);\n\t    _this.toggleAddPreparation = _this.toggleAddPreparation.bind(_this);\n\t    _this.toggleEditPreparation = _this.toggleEditPreparation.bind(_this);\n\t    _this.mapFormOptions = _this.mapFormOptions.bind(_this);\n\t    _this.updateCollection = _this.updateCollection.bind(_this);\n\t    _this.updatePreparation = _this.updatePreparation.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimen, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      this.fetchSpecimenData();\n\t    }\n\t  }, {\n\t    key: 'fetchSpecimenData',\n\t    value: function fetchSpecimenData() {\n\t      var self = this;\n\t      $.ajax(this.props.specimenPageDataURL, {\n\t        dataType: 'json',\n\t        success: function success(data) {\n\t          self.setState({\n\t            Data: data,\n\t            isLoaded: true\n\t          });\n\t        },\n\t        error: function error(_error, errorCode, errorMsg) {\n\t          console.error(_error, errorCode, errorMsg);\n\t          self.setState({\n\t            error: 'An error occurred when loading the form!'\n\t          });\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'toggleModal',\n\t    value: function toggleModal() {\n\t      this.setState({\n\t        isOpen: !this.state.isOpen\n\t      });\n\t    }\n\t  }, {\n\t    key: 'toggleEditCollection',\n\t    value: function toggleEditCollection() {\n\t      var editCollection = this.state.editCollection;\n\t      this.setState({\n\t        editCollection: !editCollection\n\t      });\n\t    }\n\t  }, {\n\t    key: 'toggleAddPreparation',\n\t    value: function toggleAddPreparation() {\n\t      var addPreparation = this.state.addPreparation;\n\t      this.setState({\n\t        addPreparation: !addPreparation\n\t      });\n\t    }\n\t  }, {\n\t    key: 'toggleEditPreparation',\n\t    value: function toggleEditPreparation() {\n\t      var editPreparation = this.state.editPreparation;\n\t      this.setState({\n\t        editPreparation: !editPreparation\n\t      });\n\t    }\n\t\n\t    //map options for forms\n\t\n\t  }, {\n\t    key: 'mapFormOptions',\n\t    value: function mapFormOptions(rawObject, targetAttribute) {\n\t      var data = {};\n\t      for (var id in rawObject) {\n\t        data[id] = rawObject[id][targetAttribute];\n\t      }\n\t\n\t      return data;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      // Data loading error\n\t      if (this.state.error !== undefined) {\n\t        return React.createElement(\n\t          'div',\n\t          { className: 'alert alert-danger text-center' },\n\t          React.createElement(\n\t            'strong',\n\t            null,\n\t            this.state.error\n\t          )\n\t        );\n\t      }\n\t\n\t      // Waiting for data to load\n\t      if (!this.state.isLoaded) {\n\t        return React.createElement(\n\t          'button',\n\t          { className: 'btn-info has-spinner' },\n\t          'Loading',\n\t          React.createElement('span', {\n\t            className: 'glyphicon glyphicon-refresh glyphicon-refresh-animate' })\n\t        );\n\t      }\n\t\n\t      //checks if parent specimen exists and returns static element with href\n\t      if (this.state.Data.parentSpecimenBarcode) {\n\t        var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\";\n\t        var parentSpecimenBarcode = React.createElement(LinkElement, {\n\t          label: 'Parent Specimen',\n\t          text: this.state.Data.parentSpecimenBarcode,\n\t          href: specimenURL + this.state.Data.parentSpecimenBarcode\n\t        });\n\t      }\n\t\n\t      //checks if parent container exists and returns static element with href\n\t      if (this.state.Data.parentContainerBarcode) {\n\t        var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\";\n\t        var parentContainerBarcode = React.createElement(LinkElement, {\n\t          label: 'Parent Container',\n\t          text: this.state.Data.parentContainerBarcode,\n\t          href: containerURL + this.state.Data.parentContainerBarcode\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Specimen Form\n\t       */\n\t      var addSpecimenButton = void 0;\n\t      var specimenForm = void 0;\n\t      if (loris.userHasPermission('biobank_write')) {\n\t        addSpecimenButton = React.createElement(\n\t          'button',\n\t          {\n\t            type: 'button',\n\t            className: 'btn-sm btn-success',\n\t            onClick: this.toggleModal,\n\t            style: { marginLeft: '20px', border: 'none' }\n\t          },\n\t          React.createElement('span', {\n\t            className: 'glyphicon glyphicon-plus',\n\t            style: { marginRight: '5px' }\n\t          }),\n\t          'Aliquot'\n\t        );\n\t\n\t        /**\n\t         * Map Options for Form Select Elements\n\t         */\n\t        var specimenTypes = {};\n\t        //produces options conditionally based on the parentId of the specimen\n\t        for (var _id in this.state.Data.specimenTypes) {\n\t          // if parentTypeId is equal to typeId\n\t          if (this.state.Data.specimenTypes[_id].parentTypeId == this.state.Data.specimen.typeId || _id == this.state.Data.specimen.typeId) {\n\t            specimenTypes[_id] = this.state.Data.specimenTypes[_id]['type'];\n\t          }\n\t        }\n\t\n\t        var specimenUnits = this.mapFormOptions(this.state.Data.specimenUnits, 'unit');\n\t        var containerTypesPrimary = this.mapFormOptions(this.state.Data.containerTypesPrimary, 'label');\n\t        var containerBarcodesNonPrimary = this.mapFormOptions(this.state.Data.containersNonPrimary, 'barcode');\n\t\n\t        specimenForm = React.createElement(\n\t          _Tabs.Modal,\n\t          { show: this.state.isOpen, onClose: this.toggleModal },\n\t          React.createElement(_specimenForm2.default, {\n\t            action: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=submitSpecimen',\n\t            child: 'true',\n\t            specimenId: this.state.Data.specimen.id,\n\t            barcode: this.state.Data.container.barcode,\n\t            candidateId: this.state.Data.specimen.candidateId,\n\t            sessionId: this.state.Data.specimen.sessionId,\n\t            pscid: this.state.Data.candidateInfo[this.state.Data.specimen.candidateId].PSCID,\n\t            visit: this.state.Data.sessionInfo[this.state.Data.specimen.sessionId].Visit_label,\n\t            unitId: this.state.Data.specimen.unitId,\n\t            specimenTypes: specimenTypes,\n\t            specimenTypeUnits: this.state.Data.specimenTypeUnits,\n\t            specimenUnits: specimenUnits,\n\t            containerTypesPrimary: containerTypesPrimary,\n\t            containerBarcodesNonPrimary: containerBarcodesNonPrimary,\n\t            specimenTypeAttributes: this.state.Data.specimenTypeAttributes,\n\t            attributeDatatypes: this.state.Data.attributeDatatypes,\n\t            closeModal: this.toggleModal\n\t          })\n\t        );\n\t      }\n\t\n\t      /** \n\t       * Collection Form\n\t       */\n\t      var collectionPanelForm = void 0;\n\t      var cancelEditCollectionButton = void 0;\n\t      if (this.state.editCollection) {\n\t\n\t        //Map Options for Form Select Elements\n\t        var _specimenTypes = {};\n\t        //produces options conditionally based on the parentId of the specimen\n\t        for (var id in this.state.Data.specimenTypes) {\n\t          // if specimen type has a parent type\n\t          if (this.state.Data.specimenTypes[this.state.Data.specimen.typeId].parentTypeId) {\n\t            if (this.state.Data.specimenTypes[id].parentTypeId == this.state.Data.specimenTypes[this.state.Data.specimen.typeId].parentTypeId || id == this.state.Data.specimen.typeId) {\n\t              _specimenTypes[id] = this.state.Data.specimenTypes[id]['type'];\n\t            }\n\t            // else if specimen type has no parent type\n\t          } else {\n\t            if (!this.state.Data.specimenTypes[id].parentTypeId) {\n\t              _specimenTypes[id] = this.state.Data.specimenTypes[id]['type'];\n\t            }\n\t          }\n\t        }\n\t\n\t        var _containerTypesPrimary = this.mapFormOptions(this.state.Data.containerTypesPrimary, 'label');\n\t\n\t        collectionPanelForm = React.createElement(_collectionForm2.default, {\n\t          specimenId: this.state.Data.specimen.id,\n\t          specimenType: this.state.Data.specimen.typeId,\n\t          containerId: this.state.Data.container.id,\n\t          containerType: this.state.Data.container.typeId,\n\t          collection: this.state.Data.specimen.collection,\n\t          specimenTypes: _specimenTypes,\n\t          specimenTypeAttributes: this.state.Data.specimenTypeAttributes,\n\t          attributeDatatypes: this.state.Data.attributeDatatypes,\n\t          containerTypesPrimary: _containerTypesPrimary,\n\t          specimenTypeUnits: this.state.Data.specimenTypeUnits,\n\t          edit: true,\n\t          action: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=updateSpecimenCollection',\n\t          toggleEdit: this.toggleEditCollection,\n\t          updateCollection: this.updateCollection\n\t        });\n\t\n\t        cancelEditCollectionButton = React.createElement(\n\t          'a',\n\t          { className: 'pull-right', style: { cursor: 'pointer' }, onClick: this.toggleEditCollection },\n\t          'Cancel'\n\t        );\n\t      } else {\n\t\n\t        //loops through data object to produce static elements\n\t        if (this.state.Data.specimen.collection.data) {\n\t          var dataObject = this.state.Data.specimen.collection.data;\n\t          var specimenTypeAttributes = Object.keys(dataObject).map(function (key) {\n\t            return React.createElement(StaticElement, {\n\t              label: _this2.state.Data.specimenTypeAttributes[_this2.state.Data.specimen.typeId][key].name,\n\t              text: dataObject[key]\n\t            });\n\t          });\n\t        }\n\t\n\t        collectionPanelForm = React.createElement(\n\t          FormElement,\n\t          {\n\t            name: 'specimenPreparationFormStatic',\n\t            ref: 'formStatic'\n\t          },\n\t          React.createElement(StaticElement, {\n\t            label: 'Specimen Type',\n\t            text: this.state.Data.specimenTypes[this.state.Data.specimen.typeId].type\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Container Type',\n\t            text: this.state.Data.containerTypesPrimary[this.state.Data.container.typeId].label\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Quantity',\n\t            text: this.state.Data.specimen.collection.quantity + ' ' + this.state.Data.specimenUnits[this.state.Data.specimen.collection.unitId].unit\n\t          }),\n\t          specimenTypeAttributes,\n\t          React.createElement(StaticElement, {\n\t            label: 'Date',\n\t            text: this.state.Data.specimen.collection.date\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Time',\n\t            text: this.state.Data.specimen.collection.time\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Comments',\n\t            text: this.state.Data.specimen.collection.comments\n\t          })\n\t        );\n\t      }\n\t\n\t      /*\n\t       * Preparation Form\n\t       */\n\t      var preparationPanelForm = void 0;\n\t      var cancelAddPreparationButton = void 0;\n\t      var cancelEditPreparationButton = void 0;\n\t      if (this.state.addPreparation || this.state.editPreparation) {\n\t\n\t        //Map Options for Form Select Elements Here\n\t        var _specimenProtocolAttributes = this.state.Data.specimenProtocolAttributes[this.state.Data.specimen.typeId];\n\t\n\t        //This remaps specimen Protocols based on the specimen Type\n\t        //this may need to be refactored or put into a function later\n\t        var specimenProtocols = {};\n\t        for (var id in _specimenProtocolAttributes) {\n\t          specimenProtocols[id] = this.state.Data.specimenProtocols[id];\n\t        }\n\t\n\t        specimenProtocols = this.mapFormOptions(specimenProtocols, 'protocol');\n\t\n\t        preparationPanelForm = React.createElement(_preparationForm2.default, {\n\t          specimenId: this.state.Data.specimen.id,\n\t          preparation: this.state.Data.specimen.preparation ? this.state.Data.specimen.preparation : null,\n\t          specimenProtocols: specimenProtocols,\n\t          specimenProtocolAttributes: _specimenProtocolAttributes,\n\t          attributeDatatypes: this.state.Data.attributeDatatypes,\n\t          add: this.state.addPreparation,\n\t          edit: this.state.editPreparation,\n\t          insertAction: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=insertSpecimenPreparation',\n\t          updateAction: loris.BaseURL + '/biobank/ajax/SpecimenInfo.php?action=updateSpecimenPreparation',\n\t          updatePreparation: this.updatePreparation\n\t        });\n\t\n\t        //Cancel Add Button\n\t        if (this.state.addPreparation) {\n\t          cancelAddPreparationButton = React.createElement(\n\t            'a',\n\t            { className: 'pull-right', style: { cursor: 'pointer' }, onClick: this.toggleAddPreparation },\n\t            'Cancel'\n\t          );\n\t        }\n\t\n\t        //Cancel Edit Button\n\t        if (this.state.editPreparation) {\n\t          cancelEditPreparationButton = React.createElement(\n\t            'a',\n\t            { className: 'pull-right', style: { cursor: 'pointer' }, onClick: this.toggleEditPreparation },\n\t            'Cancel'\n\t          );\n\t        }\n\t      } else if (this.state.Data.specimen.preparation) {\n\t        var dataObject = this.state.Data.specimen.preparation.data;\n\t\n\t        if (dataObject) {\n\t          var specimenProtocolAttributes = Object.keys(dataObject).map(function (key) {\n\t            return React.createElement(StaticElement, {\n\t              label: _this2.state.Data.specimenProtocolAttributes[_this2.state.Data.specimen.typeId][_this2.state.Data.specimen.preparation.protocolId][key].name,\n\t              text: dataObject[key]\n\t            });\n\t          });\n\t        }\n\t\n\t        preparationPanelForm = React.createElement(\n\t          FormElement,\n\t          {\n\t            name: 'specimenPreparationFormStatic',\n\t            ref: 'formStatic'\n\t          },\n\t          React.createElement(StaticElement, {\n\t            label: 'Protocol',\n\t            text: this.state.Data.specimenProtocols[this.state.Data.specimen.preparation.protocolId].protocol\n\t          }),\n\t          specimenProtocolAttributes,\n\t          React.createElement(StaticElement, {\n\t            label: 'Date',\n\t            text: this.state.Data.specimen.preparation.date\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Time',\n\t            text: this.state.Data.specimen.preparation.time\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Comments',\n\t            text: this.state.Data.specimen.preparation.comments\n\t          })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'h3',\n\t          { style: { display: 'inline-block' } },\n\t          'Specimen ',\n\t          React.createElement(\n\t            'strong',\n\t            null,\n\t            this.state.Data.container.barcode\n\t          )\n\t        ),\n\t        addSpecimenButton,\n\t        React.createElement(_lifeCycle2.default, null),\n\t        React.createElement(\n\t          FormElement,\n\t          {\n\t            columns: 5\n\t          },\n\t          React.createElement(LinkElement, {\n\t            label: 'PSCID',\n\t            text: this.state.Data.candidateInfo[this.state.Data.specimen.candidateId].PSCID,\n\t            href: loris.BaseURL + '/' + this.state.Data.specimen.candidateId\n\t          }),\n\t          React.createElement(LinkElement, {\n\t            label: 'Visit Label',\n\t            text: this.state.Data.sessionInfo[this.state.Data.specimen.sessionId].Visit_label,\n\t            href: loris.BaseURL + '/instrument_list/?candID=' + this.state.Data.specimen.candidateId + '&sessionID=' + this.state.Data.specimen.sessionId\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Quantity',\n\t            text: this.state.Data.specimen.quantity + ' ' + this.state.Data.specimenUnits[this.state.Data.specimen.unitId].unit\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Status',\n\t            text: this.state.Data.containerStati[this.state.Data.container.statusId].status\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Location',\n\t            text: this.state.Data.sites[this.state.Data.container.locationId]\n\t          }),\n\t          parentSpecimenBarcode,\n\t          parentContainerBarcode\n\t        ),\n\t        React.createElement(\n\t          FormElement,\n\t          {\n\t            columns: 3\n\t          },\n\t          React.createElement(\n\t            _Panel2.default,\n\t            {\n\t              id: 'collection-panel',\n\t              title: 'Collection',\n\t              edit: this.state.editCollection ? null : this.toggleEditCollection\n\t            },\n\t            collectionPanelForm,\n\t            cancelEditCollectionButton\n\t          ),\n\t          React.createElement(\n\t            _Panel2.default,\n\t            {\n\t              id: 'preparation-panel',\n\t              title: 'Preparation',\n\t              initCollapsed: this.state.Data.specimen.preparation ? false : true,\n\t              add: this.state.Data.specimen.preparation ? null : this.state.addPreparation ? null : this.toggleAddPreparation,\n\t              edit: this.state.Data.specimen.preparation ? this.state.editPreparation ? null : this.toggleEditPreparation : null\n\t            },\n\t            preparationPanelForm,\n\t            cancelAddPreparationButton,\n\t            cancelEditPreparationButton\n\t          ),\n\t          React.createElement(_Panel2.default, {\n\t            id: 'analysis-panel',\n\t            title: 'Analysis',\n\t            initCollapsed: true,\n\t            add: this.toggleEditCollection\n\t          })\n\t        ),\n\t        specimenForm\n\t      );\n\t    }\n\t  }, {\n\t    key: 'updateCollection',\n\t    value: function updateCollection(collection) {\n\t      this.toggleEditCollection();\n\t\n\t      var Data = this.state.Data;\n\t\n\t      Data.specimen.typeId = collection.specimenType;\n\t      Data.specimen.collection.quantity = collection.quantity;\n\t      Data.specimen.collection.unitId = collection.unitId;\n\t      Data.specimen.collection.date = collection.date;\n\t      Data.specimen.collection.time = collection.time;\n\t      Data.specimen.collection.data = collection.data;\n\t      Data.specimen.collection.comments = collection.comments;\n\t\n\t      this.setState({\n\t        Data: Data\n\t      });\n\t    }\n\t  }, {\n\t    key: 'updatePreparation',\n\t    value: function updatePreparation(preparation) {\n\t      if (this.state.editPreparation) {\n\t        this.toggleEditPreparation();\n\t      }\n\t\n\t      if (this.state.addPreparation) {\n\t        this.toggleAddPreparation();\n\t      }\n\t\n\t      var Data = this.state.Data;\n\t      Data.specimen.preparation = preparation;\n\t\n\t      this.setState({\n\t        Data: Data\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimen;\n\t}(React.Component);\n\t\n\tBiobankSpecimen.propTypes = {\n\t  specimenPageDataURL: React.PropTypes.string.isRequired\n\t};\n\t\n\tvar RBiobankSpecimen = React.createFactory(BiobankSpecimen);\n\t\n\twindow.BiobankSpecimen = BiobankSpecimen;\n\twindow.RBiobankSpecimen = RBiobankSpecimen;\n\t\n\texports.default = BiobankSpecimen;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Acts a subform for BiobankCollectionForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar SpecimenPreparationForm = function (_React$Component) {\n\t  _inherits(SpecimenPreparationForm, _React$Component);\n\t\n\t  function SpecimenPreparationForm(props) {\n\t    _classCallCheck(this, SpecimenPreparationForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (SpecimenPreparationForm.__proto__ || Object.getPrototypeOf(SpecimenPreparationForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: { data: {} },\n\t      currentProtocol: _this.props.edit ? _this.props.preparation.protocolId : null,\n\t      formErrors: {}\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.setSpecimenProtocolFieldFormData = _this.setSpecimenProtocolFieldFormData.bind(_this);\n\t    _this.getSpecimenProtocolFields = _this.getSpecimenProtocolFields.bind(_this);\n\t    _this.handleSave = _this.handleSave.bind(_this);\n\t    _this.savePreparation = _this.savePreparation.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(SpecimenPreparationForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var _this2 = this;\n\t\n\t      var formData = this.state.formData;\n\t\n\t      formData['specimenId'] = this.props.specimenId;\n\t\n\t      // This for autoloading data and will be used later\n\t      if (this.props.edit) {\n\t        formData['protocolId'] = this.props.preparation.protocolId;\n\t        formData['date'] = this.props.preparation.date;\n\t        formData['time'] = this.props.preparation.time;\n\t        formData['comments'] = this.props.preparation.comments;\n\t\n\t        var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.state.currentProtocol];\n\t        if (specimenProtocolFieldsObject) {\n\t          var specimenProtocolFields = Object.keys(specimenProtocolFieldsObject).map(function (attribute) {\n\t            formData.data[attribute] = _this2.props.preparation.data[attribute];\n\t          });\n\t        }\n\t      }\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      var submitButton;\n\t      if (this.props.add) {\n\t        submitButton = React.createElement(ButtonElement, { label: 'Submit' });\n\t      }\n\t\n\t      var updateButton;\n\t      if (this.props.edit) {\n\t        updateButton = React.createElement(ButtonElement, { label: 'Update' });\n\t      }\n\t\n\t      var specimenProtocolFields = void 0;\n\t      if (this.state.currentProtocol) {\n\t        var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.state.currentProtocol];\n\t\n\t        if (specimenProtocolFieldsObject) {\n\t          specimenProtocolFields = this.getSpecimenProtocolFields(specimenProtocolFieldsObject);\n\t        }\n\t      }\n\t\n\t      //This will be for default fields, if there are any eventually\n\t      if (this.state.currentSpecimenProtocol) {\n\t        preparationFields = React.createElement('div', null);\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'specimenPreparation',\n\t          onSubmit: this.handleSave,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'protocolId',\n\t            label: 'Protocol',\n\t            options: this.props.specimenProtocols,\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.protocolId\n\t          }),\n\t          specimenProtocolFields,\n\t          React.createElement(DateElement, {\n\t            name: 'date',\n\t            label: 'Date',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.date\n\t          }),\n\t          React.createElement(TimeElement, {\n\t            name: 'time',\n\t            label: 'Time',\n\t            onUserInput: this.setFormData,\n\t            required: true,\n\t            value: this.state.formData.time\n\t          }),\n\t          React.createElement(TextareaElement, {\n\t            name: 'comments',\n\t            label: 'Comments',\n\t            onUserInput: this.setFormData,\n\t            value: this.state.formData.comments\n\t          }),\n\t          submitButton,\n\t          updateButton\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t\n\t      var formData = this.state.formData;\n\t\n\t      if (formElement === \"protocolId\" && value !== \"\") {\n\t        //This is to eliminate the values for the specimen protocol fields\n\t        //This could potentially be improved later to retain the values\n\t        //for the fields that are common accross protocols\n\t        formData.data = {};\n\t        this.setState({\n\t          currentProtocol: value\n\t        });\n\t      }\n\t\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setSpecimenProtocolFieldFormData',\n\t    value: function setSpecimenProtocolFieldFormData(formElement, value) {\n\t      var formData = this.state.formData;\n\t      formData.data[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t\n\t    // This generates all the form fields for a given specimen protocol\n\t\n\t  }, {\n\t    key: 'getSpecimenProtocolFields',\n\t    value: function getSpecimenProtocolFields(fieldsObject) {\n\t      var _this3 = this;\n\t\n\t      var specimenProtocolFields = Object.keys(fieldsObject).map(function (attribute) {\n\t        var datatype = _this3.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\t\n\t        if (datatype === \"text\" || datatype === \"number\") {\n\t          if (fieldsObject[attribute]['refTableId'] == null) {\n\t            return React.createElement(TextboxElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              onUserInput: _this3.setSpecimenProtocolFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this3.state.formData.data[attribute],\n\t              hasError: _this3.state.formErrors[attribute],\n\t              errorMessage: \"This is a \" + datatype + \" field.\"\n\t            });\n\t          }\n\t\n\t          if (fieldsObject[attribute]['refTableId'] !== null) {\n\t            return React.createElement(SelectElement, {\n\t              name: attribute,\n\t              label: fieldsObject[attribute]['name'],\n\t              options: '',\n\t              onUserInput: _this3.setSpecimenProtocolFieldFormData,\n\t              ref: attribute,\n\t              required: fieldsObject[attribute]['required'],\n\t              value: _this3.state.formData.data[attribute]\n\t            });\n\t          }\n\t        }\n\t\n\t        if (datatype === \"datetime\") {\n\t          return React.createElement(DateElement, {\n\t            name: attribute,\n\t            label: fieldsObject[attribute]['name'],\n\t            onUserInput: _this3.setSpecimenProtocolFieldFormData,\n\t            ref: attribute,\n\t            required: fieldsObject[attribute]['required'],\n\t            value: _this3.state.formData.data[attribute]\n\t          });\n\t        }\n\t\n\t        if (datatype === \"boolean\") {}\n\t      });\n\t\n\t      return specimenProtocolFields;\n\t    }\n\t  }, {\n\t    key: 'handleSave',\n\t    value: function handleSave(e) {\n\t      //more things will go here later\n\t      if (this.props.add) {\n\t        this.savePreparation(this.props.insertAction);\n\t      }\n\t      if (this.props.edit) {\n\t        this.savePreparation(this.props.updateAction);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'savePreparation',\n\t    value: function savePreparation(action) {\n\t      var formData = this.state.formData;\n\t      formData['data'] = JSON.stringify(formData['data']);\n\t\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          //Update Parent Specimen Page Here\n\t          formData.data = JSON.parse(formData.data);\n\t          this.props.updatePreparation(formData);\n\t          //swal(\"Specimen Update Successful!\", \"\", \"success\");\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return SpecimenPreparationForm;\n\t}(React.Component);\n\t\n\tSpecimenPreparationForm.propTypes = {\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired,\n\t  units: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = SpecimenPreparationForm;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * LifeCycle\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar LifeCycle = function (_React$Component) {\n\t  _inherits(LifeCycle, _React$Component);\n\t\n\t  function LifeCycle(props) {\n\t    _classCallCheck(this, LifeCycle);\n\t\n\t    var _this = _possibleConstructorReturn(this, (LifeCycle.__proto__ || Object.getPrototypeOf(LifeCycle)).call(this, props));\n\t\n\t    _this.state = {};\n\t\n\t    return _this;\n\t  }\n\t\n\t  _createClass(LifeCycle, [{\n\t    key: 'render',\n\t    value: function render() {\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { className: 'lifecycle-container' },\n\t        React.createElement(\n\t          'div',\n\t          { className: 'lifecycle' },\n\t          'Test',\n\t          React.createElement('span', { className: 'lifecycle-node tracking-bar__item--active' }),\n\t          React.createElement('span', { className: 'lifecycle-bar' }),\n\t          React.createElement('span', { className: 'lifecycle-node tracking-bar__item--active' }),\n\t          React.createElement('span', { className: 'lifecycle-bar' }),\n\t          React.createElement('span', { className: 'lifecycle-node tracking-bar__item--active' })\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return LifeCycle;\n\t}(React.Component);\n\t\n\tLifeCycle.propTypes = {};\n\t\n\texports.default = LifeCycle;\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// modules/biobank/js/specimenIndex.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9f922b4f23154ce114a3","/* global ReactDOM */\n\nimport BiobankSpecimen from './specimen';\nconst args = QueryString.get(document.currentScript.src);\n\n$(function() {\n  const biobankSpecimen = (\n    <div className=\"page-specimen-form\">\n      <div className=\"row\">\n        <div className=\"col-md-9 col-lg-12\">\n          <BiobankSpecimen\n            specimenPageDataURL={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=getSpecimenData&barcode=${args.barcode}`}\n          />\n        </div>\n      </div>\n    </div>\n  );\n\n  ReactDOM.render(biobankSpecimen, document.getElementById(\"lorisworkspace\"));\n});\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenIndex.js","/**\n * This file contains React component for Panel\n *\n * @author Alex I.\n * @version 1.0.0\n *\n */\n\n/**\n * Panel component\n * Wraps children in a collapsible bootstrap panel\n */\nclass Panel extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsed: this.props.initCollapsed\n    };\n\n    // Initialize panel class based on collapsed status\n    this.panelClass = (\n      this.props.initCollapsed ?\n        \"panel-collapse collapse\" :\n        \"panel-collapse collapse in\"\n    );\n\n    this.toggleCollapsed = this.toggleCollapsed.bind(this);\n  }\n\n  toggleCollapsed() {\n    this.setState({collapsed: !this.state.collapsed});\n  }\n\n  render() {\n    // Change arrow direction based on collapse status\n    let glyphClass = (\n      this.state.collapsed ?\n        \"glyphicon pull-right glyphicon-chevron-down\" :\n        \"glyphicon pull-right glyphicon-chevron-up\"\n    );\n\n    let pencilGlyph;\n    if (this.props.edit) {\n      pencilGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-pencil\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.edit}\n        /> \n      );\n    } \n\n    let plusGlyph;\n    if (this.props.add) {\n      plusGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-plus\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.add}\n        />\n      );\n    }\n\n    let removeGlyph;\n    if (this.props.cancel) {\n      removeGlyph = (\n        <span\n          className=\"glyphicon pull-right glyphicon-remove\"\n          style={{marginRight:'10px', cursor: 'pointer'}}\n          onClick={this.props.cancel}\n        />\n      );\n    }\n\n    // Add panel header, if title is set\n    const panelHeading = this.props.title ? (\n      <div\n        className=\"panel-heading\"\n      >\n        <span \n          className={glyphClass}\n          onClick={this.toggleCollapsed}\n          data-toggle=\"collapse\"\n          data-target={'#' + this.props.id}\n          style={{cursor: 'pointer'}}\n        />\n        {pencilGlyph}\n        {plusGlyph}\n        {removeGlyph}\n        {this.props.title}\n      </div>\n    ) : '';\n\n    return (\n      <div className=\"panel panel-primary\">\n        {panelHeading}\n        <div id={this.props.id} className={this.panelClass} role=\"tabpanel\">\n          <div className=\"panel-body\" style={{height: this.props.height}}>\n            {this.props.children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPanel.propTypes = {\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string,\n  edit: React.PropTypes.func,\n  add: React.PropTypes.func\n};\nPanel.defaultProps = {\n  initCollapsed: false,\n  id: 'default-panel',\n  height: '100%'\n};\n\nexport default Panel;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Panel.js","import BiobankBarcodeForm from './barcodeForm.js';\n\n/**\n * Biobank Collection Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankSpecimenForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {},\n      barcodeFormList: {},\n      errorMessage: null,\n      formErrors: {},\n      countBarcodeForms: [1] \n    };\n\n    //this.getValidFileName = this.getValidFileName.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    //this.isValidFileName = this.isValidFileName.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.specimenSubmit = this.specimenSubmit.bind(this);\n    this.addBarcodeForm = this.addBarcodeForm.bind(this);\n    this.setBarcodeFormData = this.setBarcodeFormData.bind(this);\n  }\n\n  componentDidMount() {\n\n    //if this is a child specimen form then certain formData is set when component mounts\n    if (this.props.child) {\n      var formData = this.state.formData;\n      formData['parentSpecimen'] = this.props.specimenId;\n      formData['pscid'] = this.props.candidateId;\n      formData['visitLabel'] = this.props.sessionId;\n      formData['unitId'] = this.props.unitId;\n\n      this.setState({\n        formData: formData\n      });\n    }\n  }\n\n  render() {\n\n    //Styling for remove Barcode button\n    const glyphStyle = {\n     color: '#D3D3D3',\n     margin: 'auto',\n    }; \n    const buttonStyle = {\n      appearance: 'none',\n      outline: 'none',\n      boxShadow: 'none',\n      borderColor: 'transparent',\n      backgroundColor: 'transparent',\n       \n    };\n\n    //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n    var barcodeForms = [];\n    for (let i = 0; i < this.state.countBarcodeForms.length; i++) {\n      barcodeForms.push(\n        <BiobankBarcodeForm\n          setParentFormData={this.setBarcodeFormData}\n          id={this.state.countBarcodeForms[i]}\n          specimenTypes={this.props.specimenTypes}\n          containerTypesPrimary={this.props.containerTypesPrimary}\n          containerBarcodesNonPrimary={this.props.containerBarcodesNonPrimary}\n          specimenTypeAttributes={this.props.specimenTypeAttributes}\n          attributeDatatypes={this.props.attributeDatatypes}\n          capacities={this.props.capacities}\n          specimenTypeUnits={this.props.specimenTypeUnits}\n          units={this.props.units}\n          button={i+1 === this.state.countBarcodeForms.length ? (\n            <button \n              type=\"button\"\n              className=\"btn btn-success btn-sm\"\n              onClick={this.addBarcodeForm}\n            >   \n              <span className=\"glyphicon glyphicon-plus\"/>\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"btn btn-primary-outline btn-sm\"\n              style={buttonStyle}\n              onClick={() => this.removeBarcodeForm(i)}\n            >\n            <span className=\"glyphicon glyphicon-remove\" style={glyphStyle}/>\n            </button>\n          )}\n        />\n      );\n    }\n\n\n    let staticFields;\n    let remainingQuantityFields;\n    let selectFields;\n    if (this.props.child) {\n      staticFields = (   \n        <div>\n          <StaticElement\n            label=\"Parent Specimen\"\n            text={this.props.barcode}\n          />\n          <StaticElement\n            label=\"PSCID\"\n            text={this.props.pscid}\n          />\n          <StaticElement\n            label=\"Visit Label\"\n            text={this.props.visit}\n          />\n        </div>\n      );\n\n      //It may be wise to make unit static and forced, or atleast prepopulated --\n      remainingQuantityFields = (\n        <div>\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Remaining Quantity\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={this.props.specimenUnits}\n            onUserInput={this.setFormData}\n            emptyOption={false}\n            required={true}\n            value={this.state.formData.unitId}\n          />\n        </div>\n      );\n\n    } else {\n      selectFields = (\n          <div>\n            <SelectElement\n              name=\"pscid\"\n              label=\"PSCID\"\n              options={this.props.pSCIDs}\n              onUserInput={this.setFormData}\n              ref=\"pscid\"\n              required={true}\n              value={this.state.formData.pscid}\n            />\n            <SelectElement\n              name=\"visitLabel\"\n              label=\"Visit Label\"\n              options={this.state.visits}\n              onUserInput={this.setFormData}\n              ref=\"visitLabel\"\n              required={true}\n              value={this.state.formData.visitLabel}\n              disabled={this.state.formData.pscid ? false : true}\n            />\n          </div>\n      );\n    }\n\n    //ALLOW THEM TO CANCEL THE FORM AND DELETE BARCODE FORMS\n    return (\n      <FormElement\n        name=\"specimenForm\"\n        onSubmit={this.handleSubmit}\n        ref=\"form\"\n      >\n        <h3><b>Add New {this.props.child ? \"Aliquots\" : \"Specimens\"}</b></h3>\n        <br/>\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            {staticFields}\n            {selectFields}\n          </div>\n        </div>\n        {barcodeForms}\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            {remainingQuantityFields}\n          </div>\n        </div>\n          <div className=\"col-xs-3 col-xs-offset-9\">\n            <ButtonElement label=\"Submit\"/>\n          </div>\n        <a onClick={this.toggleModal}>Cancel</a>\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n  /**\n   * Returns a valid name for the file to be specimened\n   *\n   * @param {string} pscid - PSCID selected from the dropdown\n   * @param {string} visitLabel - Visit label selected from the dropdown\n   * @param {string} instrument - Instrument selected from the dropdown\n   * @return {string} - Generated valid filename for the current selection\n   */\n//  getValidFileName(pscid, visitLabel, instrument) {\n//    var fileName = pscid + \"_\" + visitLabel;\n//    if (instrument) fileName += \"_\" + instrument;\n//\n//    return fileName;\n//  }\n\n\n  validateForm(formElement, value) {\n    let formErrors = this.state.formErrors;\n\n    //validate barcode regex\n    if (formElement === \"barcode\" && value !== \"\") {\n      if (!(/^hello/.test(this.state.formData.barcode))) {\n        formErrors.barcode = true;\n      } else {\n        formErrors.barcode = false;\n      }\n    }\n\n    //validate that quantity is a number and less than capacity\n    if (formElement === \"quantity\" && value !== \"\") {\n      if (isNaN(value) || (value > this.props.capacities[this.state.currentContainerType])) {\n        formErrors.quantity = true;\n      } else {\n        formErrors.quantity = false;\n      }\n    }\n\n    //validate datatypes and regex of generated type attributes\n    var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n    var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n\n      let datatype = this.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"number\") {\n        if (formElement === attribute) {\n          if (isNaN(value) && value !== \"\") {\n            formErrors[attribute] = true;\n          } else {\n            formErrors[attribute] = false;\n          }\n        }\n      }\n    })\n\n    this.setState({\n      formErrors: formErrors\n    });\n\n  }\n\n\n  /**\n   * Handle form submission\n   * @param {object} e - Form submission event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    let formRefs = this.refs;\n    //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\n    // Validate the form\n    if (!this.isValidForm(formRefs, formData)) {\n      return;\n    }\n\n\n//    // Validate specimened file name\n//    let instrument = formData.instrument ? formData.instrument : null;\n//    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n//    let requiredFileName = this.getValidFileName(\n//      formData.pscid, formData.visitLabel, instrument\n//    );\n//    if (!this.isValidFileName(requiredFileName, fileName)) {\n//      swal(\n//        \"Invalid Specimen name!\",\n//        \"File name should begin with: \" + requiredFileName,\n//        \"error\"\n//      );\n//      return;\n//    }\n\n    // Check for duplicate file names\n//    let isDuplicate = biobankFiles.indexOf(fileName);\n//    if (isDuplicate >= 0) {\n//      swal({\n//        title: \"Are you sure?\",\n//        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n//        type: \"warning\",\n//        showCancelButton: true,\n//        confirmButtonText: 'Yes, I am sure!',\n//        cancelButtonText: \"No, cancel it!\"\n//      }, function(isConfirm) {\n//        if (isConfirm) {\n//          this.specimenFile();\n//        } else {\n//          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n//        }\n//      }.bind(this));\n//    } else {\n\n    this.specimenSubmit();\n//    }\n  }\n\n  /*\n   * Uploads the file to the server\n   */\n  specimenSubmit() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        // FOR SOME REASON THIS IS NO LONGER WORKING\n        // Trigger an update event to update all observers (i.e DataTable)\n        // THIS CURRENTLY DOES NOT WORK - LOOK INTO IT\n        let event = new CustomEvent('update-datatable');\n        window.dispatchEvent(event);\n\n        //refreshes table if not a child\n        if (!this.props.child) {\n          this.props.refreshTable();\n        }\n        swal(\"Specimen Submission Successful!\", \"\", \"success\");\n        this.props.closeModal();\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Checks if the inputted file name is valid\n   *\n   * @param {string} requiredFileName - Required file name\n   * @param {string} fileName - Provided file name\n   * @return {boolean} - true if fileName starts with requiredFileName, false\n   *   otherwise\n   */\n//  isValidFileName(requiredFileName, fileName) {\n//    if (fileName === null || requiredFileName === null) {\n//      return false;\n//    }\n//\n//    return (fileName.indexOf(requiredFileName) === 0);\n//  }\n\n  /**\n   * Validate the form\n   *\n   * @param {object} formRefs - Object containing references to React form elements\n   * @param {object} formData - Object containing form data inputed by user\n   * @return {boolean} - true if all required fields are filled, false otherwise\n   */\n  isValidForm(formRefs, formData) {\n    var isValidForm = true;\n\n    var requiredFields = {\n      pscid: null,\n      visitLabel: null,\n    };\n\n    Object.keys(requiredFields).map(function(field) {\n      if (formData[field]) {\n        requiredFields[field] = formData[field];\n      } else if (formRefs[field]) {\n        formRefs[field].props.hasError = true;\n        isValidForm = false;\n      }\n    });\n    this.forceUpdate();\n\n    return isValidForm;\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    // Only display visits and sites available for the current pscid\n    //let visitLabel = this.state.formData.visitLabel;\n    //let pscid = this.state.formData.pscid;\n  \n    //LOOK AT THIS LATER - THE SWITCH TO PROPS MESSED THIS ALL UP \n    if (formElement === \"pscid\" && value !== \"\") {\n      this.state.visits = this.props.sessionData[this.props.pSCIDs[value]].visits;\n      //this.state.Data.sites = this.state.Data.sessionData[this.state.Data.PSCIDs[value]].sites;\n    }\n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  setBarcodeFormData(barcodeFormData, barcodeId) {\n    var formData = this.state.formData;\n    var barcodeFormList = this.state.barcodeFormList;\n    barcodeFormList[barcodeId] = barcodeFormData;\n    formData['barcodeFormList'] = barcodeFormList;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  addBarcodeForm() {\n    let countBarcodeForms = this.state.countBarcodeForms;\n    countBarcodeForms.push(countBarcodeForms[countBarcodeForms.length -1] + 1); \n    this.setState({\n      countBarcodeForms: countBarcodeForms\n    });\n  }\n\n  removeBarcodeForm(index) {\n    let countBarcodeForms = this.state.countBarcodeForms;\n    countBarcodeForms.splice(index, 1);\n    this.setState({\n      countBarcodeForms: countBarcodeForms\n    });\n  }\n\n}\n\nBiobankSpecimenForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired,\n  barcode: React.PropTypes.string,\n  refreshTable: React.PropTypes.func\n};\n\nexport default BiobankSpecimenForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenForm.js","import SpecimenCollectionForm from './collectionForm'\n\n/**\n * Biobank Barcode Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass BiobankBarcodeForm extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      formData: {},\n      formErrors: {},\n    };\n   \n    this.setFormData = this.setFormData.bind(this);\n    this.setSpecimenFormData = this.setSpecimenFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n  }\n\n  render() {\n\n    return (\n      <FormElement\n        name=\"biobankBarcode\"\n      >\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <div \n              data-toggle=\"collapse\" \n              data-target={\"#\" + this.props.id}\n            >   \n              <TextboxElement\n                name={\"barcode\"}\n                label={\"Barcode \" + this.props.id}\n                onUserInput={this.setFormData}\n                ref={\"barcode\"}\n                required={true}\n                value={this.state.formData[\"barcode\"]}\n                hasError={this.state.formErrors[\"barcode\"]}\n                errorMessage=\"Incorrect Barcode format for this Specimen and Container Type\"\n              />\n            </div>\n          </div>\n          <div className=\"col-xs-1\">\n            {this.props.button}\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xs-2\"/>\n          <div className=\"col-xs-9\">\n            <div id={this.props.id} className=\"collapse\">\n              <SpecimenCollectionForm\n                setParentFormData={this.setSpecimenFormData}\n                specimenTypes={this.props.specimenTypes}\n                specimenTypeAttributes={this.props.specimenTypeAttributes}\n                attributeDatatypes={this.props.attributeDatatypes}\n                containerTypesPrimary={this.props.containerTypesPrimary}\n                containerBarcodesNonPrimary={this.props.containerBarcodesNonPrimary}\n                specimenTypeUnits={this.props.specimenTypeUnits}\n                stati={this.props.stati}\n              />\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState(\n      {\n      formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setSpecimenFormData(specimenFormData) {\n    var formData = this.state.formData;\n    \n    for (var attribute in specimenFormData) {\n      formData[attribute] = specimenFormData[attribute]\n    }\n \n    this.setState(\n      {\n      formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setParentFormData() {\n    this.props.setParentFormData(this.state.formData, this.props.id);\n  }\n}\n\nBiobankBarcodeForm.propTypes = {\n  \n  id: React.PropTypes.string,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n}\n\nexport default BiobankBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/barcodeForm.js","\n/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenCollectionForm extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      formData: {data:{}},\n      currentSpecimenType: this.props.edit ? this.props.specimenType : null,\n      currentContainerType: this.props.edit ? this.props.containerType : null,\n      formErrors: {},\n    };\n\n    this.setFormData = this.setFormData.bind(this);\n    this.setSpecimenTypeFieldFormData = this.setSpecimenTypeFieldFormData.bind(this);\n    this.setParentFormData = this.setParentFormData.bind(this);\n    this.getSpecimenTypeFields = this.getSpecimenTypeFields.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.updateSpecimen = this.updateSpecimen.bind(this);\n  }\n\n  componentDidMount() {\n    let formData = this.state.formData;\n    if (this.props.edit) {\n      formData['specimenId']    = this.props.specimenId;\n      formData['containerId']   = this.props.containerId;\n      formData['specimenType']  = this.props.specimenType;\n      formData['containerType'] = this.props.containerType;\n      formData['quantity']      = this.props.collection.quantity;\n      formData['unitId']        = this.props.collection.unitId;\n      formData['date']          = this.props.collection.date;\n      formData['time']          = this.props.collection.time;\n      formData['comments']      = this.props.collection.comments;\n\n      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n      if (specimenTypeFieldsObject) {\n        var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n          formData.data[attribute] = this.props.collection.data[attribute];\n        });\n      }\n    }\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  render() {\n\n    var parentContainerField;\n    if (!this.props.edit) {\n      parentContainerField = (\n        <SelectElement\n          name=\"parentContainer\"\n          label=\"Parent Container Barcode\"\n          options={this.props.containerBarcodesNonPrimary}\n          onUserInput={this.setFormData}\n          ref=\"parentContainer\"\n          required={false}\n          value={this.state.formData.parentContainer}\n        />\n      );\n    }\n\n    var updateButton;\n    if (this.props.edit) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    }\n\n    //This block of code should potentially be moved to setFormData();\n    //Consider Refactoring...\n    var specimenTypeUnits = {};\n    if (this.state.currentSpecimenType) {\n     \n      //This modifies the selections for unit drop down based on the chosend specimen type \n      for (var id in this.props.specimenTypeUnits[this.state.currentSpecimenType]) {\n        specimenTypeUnits[id] = this.props.specimenTypeUnits[this.state.currentSpecimenType][id].unit;\n      }\n\n      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n      if (specimenTypeFieldsObject) {\n        var specimenTypeFields = this.getSpecimenTypeFields(specimenTypeFieldsObject);\n      }\n    }\n\n    var specimenFields;\n    if (this.state.currentSpecimenType) {\n      specimenFields = (\n        <div>\n          <SelectElement\n            name=\"containerType\"\n            label=\"Container Type\"\n            options={this.props.containerTypesPrimary}\n            onUserInput={this.setFormData}\n            ref=\"containerType\"\n            required={true}\n            value={this.state.formData.containerType}\n          />\n          {parentContainerField}\n          <TextboxElement\n            name=\"quantity\"\n            label=\"Quantity\"\n            onUserInput={this.setFormData}\n            ref=\"quantity\"\n            required={true}\n            value={this.state.formData.quantity}\n            hasError={this.state.formErrors.quantity}\n          />\n          <SelectElement\n            name=\"unitId\"\n            label=\"Unit\"\n            options={specimenTypeUnits}\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.unitId}\n          />\n          {specimenTypeFields}\n          <DateElement\n            name=\"date\"\n            label=\"Date\"\n            minYear=\"2000\"\n            maxYear=\"2018\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.date}\n          />\n          <TimeElement\n            name=\"time\"\n            label=\"Time\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.time}\n          />\n          <TextareaElement\n            name=\"comments\"\n            label=\"Comments\"\n            onUserInput={this.setFormData}\n            ref=\"comments\"\n            value={this.state.formData.comments}\n          />\n          {updateButton}\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"biobankSpecimen\"\n        onSubmit={this.handleUpdate}\n        ref=\"form\"\n      >\n        <div>\n          <SelectElement\n            name=\"specimenType\"\n            label=\"Specimen Type\"\n            options={this.props.specimenTypes}\n            onUserInput={this.setFormData}\n            ref=\"specimenType\"\n            required={true}\n            value={this.state.formData.specimenType}\n          />\n        {specimenFields}\n        </div>\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n\n    let formData = this.state.formData;\n    formData[formElement] = value;\n\n    if (formElement === \"specimenType\" && value !== \"\") {\n      //This throws a warning if the specimen type is changed because of the cascading effects this \n      //would cause.\n      if (this.props.edit) {\n        swal({\n          title: \"Warning\",\n          text: \"Changing the specimen type will result in the loss of any preparation or anaylsis \"+\n            \"data for this specimen. You will also need to manually change the specimen type of any \"+\n            \"aliquots derived from this specimen. Proceed with caution.\",\n          type: \"warning\",\n          showCancelButton: true,\n          confirmButtonText: 'Cancel Change',\n          cancelButtonText: 'Proceed',\n        }, \n        function(isConfirm) {\n          if (isConfirm) {\n            this.props.toggleEdit();\n          } else {\n          }\n        }.bind(this));\n      }\n\n      //This is to eliminate the values for the specimen type fields\n      //This could potentially be improved later to retain the values\n      //for the fields that are common across specimen types\n      formData.data = {}; \n      this.setState({\n        currentSpecimenType: value\n      });\n    }\n\n    if (formElement === \"containerType\" && value !== \"\") {\n      this.setState({\n        currentContainerType: value\n      });\n    }\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  }\n\n  setSpecimenTypeFieldFormData(formElement, value) {\n    let formData = this.state.formData;\n    formData.data[formElement] = value;\n\n    this.setState(\n      {\n        formData: formData\n      },\n      this.setParentFormData\n    );\n  \n  }\n\n  setParentFormData() {\n    if (!this.props.edit) {\n      var formData = this.state.formData;\n      this.props.setParentFormData(formData);\n    }\n  }\n\n  // This generates all the form fields for a given specimen type\n  getSpecimenTypeFields(fieldsObject) {\n    var specimenTypeFields = Object.keys(fieldsObject).map((attribute) => {\n      let datatype = this.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"text\" || datatype === \"number\") {\n        if (fieldsObject[attribute]['refTableId'] == null) {\n          return (\n            <TextboxElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              onUserInput={this.setSpecimenTypeFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribute]['required']}\n              value={this.state.formData.data[attribute]}\n              hasError={this.state.formErrors[attribute]}\n              errorMessage={\"This is a \" + datatype + \" field.\"}\n            />\n          );\n        }\n\n        // OPTIONS FOR SELECT ELEMENT WILL MOST LIKELY BE PASSED VIA AJAX CALL\n        // BUT IT CAN ALSO BE PRELOADED --\n        // ASK RIDA HOW THIS SHOULD BE DONE\n        if (fieldsObject[attribute]['refTableId'] !== null) {\n          return (\n            <SelectElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              options=\"\"\n              onUserInput={this.setSpecimenTypeFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribte]['required']}\n              value={this.state.formData.data[attribute]}\n            />\n          );\n        }\n      }\n\n      if (datatype === \"datetime\") {\n        return (\n          <DateElement\n            name={attribute}\n            label={fieldsObject[attribute]['name']}\n            onUserInput={this.setSpecimenTypeFieldFormData}\n            ref={attribute}\n            required={fieldsObject[attribute]['required']}\n            value={this.state.formData.data[attribute]}\n          />\n        );\n      }\n\n      if (datatype === \"boolean\") {\n      \n      }\n    })\n\n    return specimenTypeFields;\n  }\n\n  handleUpdate(e) {\n    //more things will go here later\n    this.updateSpecimen();\n  }\n\n  updateSpecimen() {\n    let formData = this.state.formData;\n    formData['data'] = JSON.stringify(formData['data']);\n\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        //Update Parent Specimen Page Here\n        formData.data = JSON.parse(formData.data);\n        this.props.updateCollection(formData);\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n}\n\nSpecimenCollectionForm.propTypes = {\n  setParentFormData: React.PropTypes.func,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n}\n\nexport default SpecimenCollectionForm;\n\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/collectionForm.js","/**\n * This file contains React components for Tabs component.\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\n/**\n * Tabs Component.\n * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n * and corresponding tab panes.\n *\n * ================================================\n * Usage:\n *\n * 1. Define an array of tabs with IDs and labels\n *\n * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n *\n * 2. Pass tabList as <Tab> property and <TabPane> as child\n *  ```\n * <Tabs tabs={tabList} defaultTab=\"tab1\">\n *   <TabPane TabId={tabList[0].id}>\n *     // Tab content goes here\n *   </TabPane>\n * </Tabs>\n * ```\n * =================================================\n *\n */\nclass Tabs extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    const hash = window.location.hash;\n    let activeTab = \"\";\n\n    /**\n     * Determine the initial active tab in this order\n     * 1. Try to infer from the URL, otherwise\n     * 2. Try to infer from the defaultTab prop, otherwise\n     * 3. Set to be the first tab of the list\n     */\n    if (this.props.updateURL && hash) {\n      activeTab = hash.substr(1);\n    } else if (this.props.defaultTab) {\n      activeTab = this.props.defaultTab;\n    } else if (this.props.tabs.length > 0) {\n      activeTab = this.props.tabs[0].id;\n    }\n\n    this.state = {\n      activeTab: activeTab\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.getTabs = this.getTabs.bind(this);\n    this.getTabPanes = this.getTabPanes.bind(this);\n  }\n\n  handleClick(tabId, e) {\n    this.setState({activeTab: tabId});\n    this.props.onTabChange(tabId);\n\n    // Add tab href to URL querystring and scroll the page to top\n    if (this.props.updateURL) {\n      const scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n      window.location.hash = e.target.hash;\n      $('html,body').scrollTop(scrollDistance);\n    }\n  }\n\n  getTabs() {\n    let tabs = (this.props.tabs).map(function(tab) {\n      let tabClass = this.state.activeTab === tab.id ? 'active' : null;\n      let href = \"#\" + tab.id;\n      let tabID = \"tab-\" + tab.id;\n      return (\n        <li\n          role=\"presentation\"\n          className={tabClass}\n          key={tab.id}\n        >\n          <a id={tabID}\n             href={href}\n             role=\"tab\"\n             data-toggle=\"tab\"\n             onClick={this.handleClick.bind(null, tab.id)}\n          >\n            {tab.label}\n          </a>\n        </li>\n      );\n    }.bind(this));\n\n    return tabs;\n  }\n\n  getTabPanes() {\n    let tabPanes = React.Children.map(this.props.children, function(child, key) {\n      if (child) {\n        return React.cloneElement(child, {\n          activeTab: this.state.activeTab,\n          key: key\n        });\n      }\n    }.bind(this));\n\n    return tabPanes;\n  }\n\n  render() {\n    let tabs = this.getTabs();\n    let tabPanes = this.getTabPanes();\n    let tabStyle = {\n      marginLeft: 0,\n      marginBottom: '5px'\n    };\n\n    return (\n      <div>\n        <ul className=\"nav nav-tabs\" role=\"tablist\" style={tabStyle}>\n          {tabs}\n        </ul>\n        <div className=\"tab-content\">\n          {tabPanes}\n        </div>\n      </div>\n    );\n  }\n}\nTabs.propTypes = {\n  tabs: React.PropTypes.array.isRequired,\n  defaultTab: React.PropTypes.string,\n  updateURL: React.PropTypes.bool\n};\nTabs.defaultProps = {\n  onTabChange: function() {},\n  updateURL: false\n};\n\n/*\n * TabPane component.\n * Used to wrap content for every tab.\n */\nclass TabPane extends React.Component {\n  render() {\n    let classList = \"tab-pane\";\n    let title;\n\n    if (this.props.TabId === this.props.activeTab) {\n      classList += \" active\";\n    }\n    if (this.props.Title) {\n      title = <h1>{this.props.Title}</h1>;\n    }\n\n    return (\n      <div role=\"tabpanel\" className={classList} id={this.props.TabId}>\n        {title}\n        {this.props.children}\n      </div>\n    );\n  }\n}\nTabPane.propTypes = {\n  TabId: React.PropTypes.string.isRequired,\n  Title: React.PropTypes.string,\n  activeTab: React.PropTypes.string\n};\n\nclass Modal extends React.Component {\n\n  render() {\n    // Render nothing if the \"show\" prop is false\n    if(!this.props.show) {\n      return null;\n    }   \n\n    //White Modal Window\n    const modalStyle = { \n      position: 'relative',\n      maxWidth: 1000,        \n      maxHeight: '100%',\n      margin: '0 auto',\n      backgroundColor: '#fff',\n      padding: 30,\n      borderRadius: 10,\n      overflowY: 'auto',\n      zIndex: 9999,\n    };  \n\n    //Grey Background\n    const backdropStyle = {\n      position: 'fixed',\n      zIndex: 9998,\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundColor: 'rgba(0,0,0,0.3)',\n      padding: 50\n    };\n\n    return (\n    <div style={backdropStyle} onClick={this.props.onClose}>\n      <div style={modalStyle} onClick={(e) => {e.stopPropagation()}}>\n        {this.props.children}\n      </div>\n    </div>\n    ); \n  }\n}\nModal.propTypes = { \n  onClose: React.PropTypes.func.isRequired,\n  show: React.PropTypes.bool,\n  children: React.PropTypes.node\n};\n\nexport {\n  Tabs,\n  TabPane,\n  Modal\n};\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Tabs.js","/* exported RBiobankSpecimen */\n\nimport SpecimenCollectionForm from './collectionForm';\nimport SpecimenPreparationForm from './preparationForm';\nimport {Modal} from 'Tabs';\nimport Panel from '../../../jsx/Panel';\nimport BiobankSpecimenForm from './specimenForm.js';\nimport LifeCycle from './lifeCycle.js';\n\n/**\n * Biobank Specimen\n *\n * Fetches data corresponding to a given Specimen from Loris backend and\n * displays a page allowing viewing of meta information of the specimen\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankSpecimen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      Data: {},\n      isLoaded: false,\n      loadedData: 0,\n      editCollection: false,\n      addPreparation: false,\n      editPreparation: false\n    };\n\n    this.fetchSpecimenData = this.fetchSpecimenData.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n    this.toggleEditCollection = this.toggleEditCollection.bind(this);\n    this.toggleAddPreparation = this.toggleAddPreparation.bind(this);\n    this.toggleEditPreparation = this.toggleEditPreparation.bind(this);\n    this.mapFormOptions = this.mapFormOptions.bind(this);\n    this.updateCollection = this.updateCollection.bind(this);\n    this.updatePreparation = this.updatePreparation.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchSpecimenData();\n  }\n\n  fetchSpecimenData() {\n    var self = this;\n    $.ajax(this.props.specimenPageDataURL, {\n      dataType: 'json',\n      success: function(data) {\n        self.setState({\n          Data: data,\n          isLoaded: true,\n        });\n      },\n      error: function(error, errorCode, errorMsg) {\n        console.error(error, errorCode, errorMsg);\n        self.setState({\n          error: 'An error occurred when loading the form!'\n        });\n      }\n    });\n  }\n\n  toggleModal() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n \n  toggleEditCollection() {\n    let editCollection = this.state.editCollection;\n    this.setState({\n      editCollection: !editCollection\n    });\n  }\n\n  toggleAddPreparation() {\n    let addPreparation = this.state.addPreparation;\n    this.setState({\n      addPreparation: !addPreparation\n    });\n  }\n\n  toggleEditPreparation() {\n    let editPreparation = this.state.editPreparation;\n    this.setState({\n     editPreparation: !editPreparation\n    });\n  }\n\n  //map options for forms\n  mapFormOptions(rawObject, targetAttribute) {\n    var data = {};\n    for (var id in rawObject) {\n      data[id] = rawObject[id][targetAttribute];\n    }\n\n    return data;\n  }\n\n  render() {\n    // Data loading error\n    if (this.state.error !== undefined) {\n      return (\n        <div className=\"alert alert-danger text-center\">\n          <strong>\n            {this.state.error}\n          </strong>\n        </div>\n      );\n    }\n\n    // Waiting for data to load\n    if (!this.state.isLoaded) {\n      return (\n        <button className=\"btn-info has-spinner\">\n          Loading\n          <span\n            className=\"glyphicon glyphicon-refresh glyphicon-refresh-animate\">\n          </span>\n        </button>\n      );\n    }\n\n\t//checks if parent specimen exists and returns static element with href\n\tif (this.state.Data.parentSpecimenBarcode) {\n\t  var specimenURL = loris.BaseURL+\"/biobank/specimen/?barcode=\";\n\t  var parentSpecimenBarcode = (\n          <LinkElement\n            label=\"Parent Specimen\"\n            text={this.state.Data.parentSpecimenBarcode}\n\t        href={specimenURL+this.state.Data.parentSpecimenBarcode}\n          />\n\t  );\n\t}\t\n\n\t//checks if parent container exists and returns static element with href\n\tif (this.state.Data.parentContainerBarcode) {\n\t  var containerURL = loris.BaseURL+\"/biobank/container/?barcode=\";\n\t  var parentContainerBarcode = (\n          <LinkElement\n            label=\"Parent Container\"\n            text={this.state.Data.parentContainerBarcode}\n\t        href={containerURL+this.state.Data.parentContainerBarcode}\n          />\n\t  );\n\t}\t\n\n    /**\n     * Specimen Form\n     */\n    let addSpecimenButton;\n    let specimenForm;\n    if (loris.userHasPermission('biobank_write')) {\n      addSpecimenButton = (\n        <button \n          type=\"button\" \n          className=\"btn-sm btn-success\"\n          onClick={this.toggleModal} \n          style={{marginLeft: '20px', border: 'none'}}\n        >\n          <span \n            className=\"glyphicon glyphicon-plus\"\n            style={{marginRight: '5px'}}\n          />\n          Aliquot\n        </button>\n      );\n\n      /**\n       * Map Options for Form Select Elements\n       */      \n      let specimenTypes = {};\n      //produces options conditionally based on the parentId of the specimen\n      for (let id in this.state.Data.specimenTypes) {\n        // if parentTypeId is equal to typeId\n        if ((this.state.Data.specimenTypes[id].parentTypeId == this.state.Data.specimen.typeId) || \n                                                    (id == this.state.Data.specimen.typeId)) {\n          specimenTypes[id] = this.state.Data.specimenTypes[id]['type'];\n        }\n      }\n\n      let specimenUnits = this.mapFormOptions(this.state.Data.specimenUnits, 'unit');\n      let containerTypesPrimary = this.mapFormOptions(this.state.Data.containerTypesPrimary, 'label');\n      let containerBarcodesNonPrimary = this.mapFormOptions(this.state.Data.containersNonPrimary, 'barcode');\n      \n      specimenForm = (\n        <Modal show={this.state.isOpen} onClose={this.toggleModal}>\n          <BiobankSpecimenForm\n            action={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=submitSpecimen`}\n            child='true'\n            specimenId={this.state.Data.specimen.id}\n            barcode={this.state.Data.container.barcode}\n            candidateId={this.state.Data.specimen.candidateId}\n            sessionId={this.state.Data.specimen.sessionId} \n            pscid={this.state.Data.candidateInfo[this.state.Data.specimen.candidateId].PSCID}\n            visit={this.state.Data.sessionInfo[this.state.Data.specimen.sessionId].Visit_label}\n            unitId={this.state.Data.specimen.unitId}\n            specimenTypes={specimenTypes}\n            specimenTypeUnits={this.state.Data.specimenTypeUnits}\n            specimenUnits = {specimenUnits}\n            containerTypesPrimary={containerTypesPrimary}\n            containerBarcodesNonPrimary={containerBarcodesNonPrimary}\n            specimenTypeAttributes={this.state.Data.specimenTypeAttributes}\n            attributeDatatypes={this.state.Data.attributeDatatypes}\n            closeModal={this.toggleModal}\n          />\n        </Modal>\n      );\n    }\n   \n    /** \n     * Collection Form\n     */\n    let collectionPanelForm;\n    let cancelEditCollectionButton;\n    if (this.state.editCollection) {\n\n      //Map Options for Form Select Elements\n      let specimenTypes = {};\n      //produces options conditionally based on the parentId of the specimen\n      for (var id in this.state.Data.specimenTypes) {\n        // if specimen type has a parent type\n        if (this.state.Data.specimenTypes[this.state.Data.specimen.typeId].parentTypeId) {\n          if (this.state.Data.specimenTypes[id].parentTypeId == this.state.Data.specimenTypes[this.state.Data.specimen.typeId].parentTypeId\n             || id == this.state.Data.specimen.typeId) {\n            specimenTypes[id] = this.state.Data.specimenTypes[id]['type'];\n          }\n        // else if specimen type has no parent type\n        } else {\n          if (!this.state.Data.specimenTypes[id].parentTypeId) {\n            specimenTypes[id] = this.state.Data.specimenTypes[id]['type'];\n          }\n        }\n      }\n\n      let containerTypesPrimary = this.mapFormOptions(this.state.Data.containerTypesPrimary, 'label');\n\n      collectionPanelForm = (\n        <SpecimenCollectionForm\n          specimenId={this.state.Data.specimen.id}\n          specimenType={this.state.Data.specimen.typeId}\n          containerId={this.state.Data.container.id}\n          containerType={this.state.Data.container.typeId}\n          collection={this.state.Data.specimen.collection}\n          specimenTypes={specimenTypes}\n          specimenTypeAttributes={this.state.Data.specimenTypeAttributes}\n          attributeDatatypes={this.state.Data.attributeDatatypes}\n          containerTypesPrimary={containerTypesPrimary}\n          specimenTypeUnits={this.state.Data.specimenTypeUnits}\n          edit={true}\n          action={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=updateSpecimenCollection`}\n          toggleEdit={this.toggleEditCollection}\n          updateCollection={this.updateCollection}\n        />\n      );\n\n      cancelEditCollectionButton = (\n        <a className=\"pull-right\" style={{cursor:'pointer'}} onClick={this.toggleEditCollection}>Cancel</a>\n      );\n    } else {\n\n      //loops through data object to produce static elements\n      if (this.state.Data.specimen.collection.data) {\n        var dataObject = this.state.Data.specimen.collection.data;\n        var specimenTypeAttributes = Object.keys(dataObject).map((key) => {\n          return (\n            <StaticElement\n              label = {this.state.Data.specimenTypeAttributes[this.state.Data.specimen.typeId][key].name}\n              text = {dataObject[key]}\n            />\n          );\n        })\n      }\n\n      collectionPanelForm = (\n        <FormElement\n          name=\"specimenPreparationFormStatic\"\n          ref=\"formStatic\"\n        >\n          <StaticElement\n            label=\"Specimen Type\"\n            text={this.state.Data.specimenTypes[this.state.Data.specimen.typeId].type}\n          />\n          <StaticElement\n            label=\"Container Type\"\n            text={this.state.Data.containerTypesPrimary[this.state.Data.container.typeId].label}\n          />\n          <StaticElement\n            label=\"Quantity\"\n            text={this.state.Data.specimen.collection.quantity+' '+this.state.Data.specimenUnits[this.state.Data.specimen.collection.unitId].unit}\n          />\n\t      {specimenTypeAttributes}\n          <StaticElement\n            label=\"Date\"\n            text={this.state.Data.specimen.collection.date}\n          />\n          <StaticElement\n            label=\"Time\"\n            text={this.state.Data.specimen.collection.time}\n          />\n          <StaticElement\n            label=\"Comments\"\n            text={this.state.Data.specimen.collection.comments}\n          />\n        </FormElement>\n      );\n    }\n\n    /*\n     * Preparation Form\n     */\n    let preparationPanelForm;\n    let cancelAddPreparationButton;\n    let cancelEditPreparationButton;\n    if (this.state.addPreparation || this.state.editPreparation) {\n\n      //Map Options for Form Select Elements Here\n      let specimenProtocolAttributes = this.state.Data.specimenProtocolAttributes[this.state.Data.specimen.typeId];\n\n      //This remaps specimen Protocols based on the specimen Type\n      //this may need to be refactored or put into a function later\n      let specimenProtocols = {};\n      for (var id in specimenProtocolAttributes) {\n        specimenProtocols[id] = this.state.Data.specimenProtocols[id];\n      }\n\n      specimenProtocols = this.mapFormOptions(specimenProtocols, 'protocol');\n \n      preparationPanelForm = (\n        <SpecimenPreparationForm\n          specimenId={this.state.Data.specimen.id}\n          preparation={this.state.Data.specimen.preparation ? this.state.Data.specimen.preparation : null}\n          specimenProtocols={specimenProtocols}\n          specimenProtocolAttributes={specimenProtocolAttributes}\n          attributeDatatypes={this.state.Data.attributeDatatypes}\n          add={this.state.addPreparation}\n          edit={this.state.editPreparation}\n          insertAction={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=insertSpecimenPreparation`}\n          updateAction={`${loris.BaseURL}/biobank/ajax/SpecimenInfo.php?action=updateSpecimenPreparation`}\n          updatePreparation={this.updatePreparation}\n        />\n      );\n\n      //Cancel Add Button\n      if (this.state.addPreparation) {\n        cancelAddPreparationButton = (\n          <a className=\"pull-right\" style={{cursor:'pointer'}} onClick={this.toggleAddPreparation}>Cancel</a>\n        );\n      }\n\n      //Cancel Edit Button\n      if (this.state.editPreparation) {\n        cancelEditPreparationButton = (\n          <a className=\"pull-right\" style={{cursor:'pointer'}} onClick={this.toggleEditPreparation}>Cancel</a>\n        );\n      }\n\n    } else if (this.state.Data.specimen.preparation) {\n      var dataObject = this.state.Data.specimen.preparation.data;\n      \n      if (dataObject) {\n        var specimenProtocolAttributes = Object.keys(dataObject).map((key) => {\n          return (\n            <StaticElement\n              label = {this.state.Data.specimenProtocolAttributes[this.state.Data.specimen.typeId][this.state.Data.specimen.preparation.protocolId][key].name}\n              text = {dataObject[key]}\n            />\n          );\n        })\n      }\n\n      preparationPanelForm = (\n        <FormElement\n          name=\"specimenPreparationFormStatic\"\n          ref=\"formStatic\"\n        >\n          <StaticElement\n            label=\"Protocol\"\n            text={this.state.Data.specimenProtocols[this.state.Data.specimen.preparation.protocolId].protocol}\n          />\n          {specimenProtocolAttributes}\n          <StaticElement\n            label=\"Date\"\n            text={this.state.Data.specimen.preparation.date}\n          />\n          <StaticElement\n            label=\"Time\"\n            text={this.state.Data.specimen.preparation.time}\n          />\n          <StaticElement\n            label=\"Comments\"\n            text={this.state.Data.specimen.preparation.comments}\n          />\n        </FormElement>\n      );\n    }\n\n    return (\n      <div>\n        <h3 style={{display:'inline-block'}}>Specimen <strong>{this.state.Data.container.barcode}</strong></h3>\n        {addSpecimenButton}\n        <LifeCycle/>\n        <FormElement\n          columns={5}\n        >\n          <LinkElement\n            label=\"PSCID\"\n            text={this.state.Data.candidateInfo[this.state.Data.specimen.candidateId].PSCID}\n            href={loris.BaseURL+'/'+this.state.Data.specimen.candidateId}\n          />\n          <LinkElement\n            label=\"Visit Label\"\n            text={this.state.Data.sessionInfo[this.state.Data.specimen.sessionId].Visit_label}\n            href={loris.BaseURL+'/instrument_list/?candID='+this.state.Data.specimen.candidateId+\n                    '&sessionID='+this.state.Data.specimen.sessionId}\n          />\n          <StaticElement\n            label=\"Quantity\"\n            text={this.state.Data.specimen.quantity+' '+this.state.Data.specimenUnits[this.state.Data.specimen.unitId].unit}\n          />\n          <StaticElement\n            label=\"Status\"\n            text={this.state.Data.containerStati[this.state.Data.container.statusId].status}\n          />\n          <StaticElement\n            label=\"Location\"\n            text={this.state.Data.sites[this.state.Data.container.locationId]}\n          />\n\t\t  {parentSpecimenBarcode}\n\t\t  {parentContainerBarcode}\n        </FormElement>\n        <FormElement\n          columns= {3}\n        >\n\t    \t<Panel\n\t    \t  id=\"collection-panel\"\n\t    \t  title=\"Collection\"\n              edit={this.state.editCollection ? null : this.toggleEditCollection}\n\t    \t>\n              {collectionPanelForm}\n              {cancelEditCollectionButton}\n\t    \t</Panel>\n\t    \t<Panel\n\t    \t  id=\"preparation-panel\"\n\t    \t  title=\"Preparation\"\n              initCollapsed={this.state.Data.specimen.preparation ? false : true}\n              add={this.state.Data.specimen.preparation ? \n                    null : (this.state.addPreparation ? null : this.toggleAddPreparation)}\n              edit={this.state.Data.specimen.preparation ? \n                    (this.state.editPreparation ? null : this.toggleEditPreparation) : null}\n\t    \t>\n              {preparationPanelForm}\n              {cancelAddPreparationButton}\n              {cancelEditPreparationButton}\n\t    \t</Panel>\n\t    \t<Panel\n\t    \t  id=\"analysis-panel\"\n\t    \t  title=\"Analysis\"\n              initCollapsed={true}\n              add={this.toggleEditCollection}\n\t    \t>\n\t    \t</Panel>\n        </FormElement>\n        {specimenForm}\n      </div>\n    ); \n  }\n\n\n  updateCollection(collection) {\n    this.toggleEditCollection();\n \n    let Data = this.state.Data;\n\n    Data.specimen.typeId = collection.specimenType;\n    Data.specimen.collection.quantity = collection.quantity;\n    Data.specimen.collection.unitId = collection.unitId;\n    Data.specimen.collection.date = collection.date;\n    Data.specimen.collection.time = collection.time;\n    Data.specimen.collection.data = collection.data;\n    Data.specimen.collection.comments = collection.comments;\n\n    this.setState({\n      Data: Data\n    });\n  } \n\n  updatePreparation(preparation) {\n    if (this.state.editPreparation) {\n      this.toggleEditPreparation();\n    } \n\n    if (this.state.addPreparation) {\n      this.toggleAddPreparation();\n    }\n\n    let Data = this.state.Data;\n    Data.specimen.preparation = preparation;\n\n    this.setState({\n      Data: Data\n    });\n  } \n\n}\n\nBiobankSpecimen.propTypes = {\n  specimenPageDataURL: React.PropTypes.string.isRequired,\n};\n\nvar RBiobankSpecimen = React.createFactory(BiobankSpecimen);\n\nwindow.BiobankSpecimen = BiobankSpecimen;\nwindow.RBiobankSpecimen = RBiobankSpecimen;\n\nexport default BiobankSpecimen;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimen.js","\n/**\n * Biobank Specimen Form\n *\n * Acts a subform for BiobankCollectionForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass SpecimenPreparationForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formData: {data:{}},\n      currentProtocol: this.props.edit ? this.props.preparation.protocolId : null,\n      formErrors: {},\n    };\n\n    this.setFormData = this.setFormData.bind(this);\n    this.setSpecimenProtocolFieldFormData = this.setSpecimenProtocolFieldFormData.bind(this);\n    this.getSpecimenProtocolFields = this.getSpecimenProtocolFields.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.savePreparation = this.savePreparation.bind(this);\n  }\n\n  componentDidMount() {\n    let formData = this.state.formData;\n\n    formData['specimenId'] = this.props.specimenId;\n\n    // This for autoloading data and will be used later\n    if (this.props.edit) {\n      formData['protocolId'] = this.props.preparation.protocolId;\n      formData['date']       = this.props.preparation.date;\n      formData['time']       = this.props.preparation.time;\n      formData['comments']   = this.props.preparation.comments;\n\n      var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.state.currentProtocol];\n      if (specimenProtocolFieldsObject) {\n        var specimenProtocolFields = Object.keys(specimenProtocolFieldsObject).map((attribute) => {\n          formData.data[attribute] = this.props.preparation.data[attribute];\n        });\n      }\n    }\n    this.setState({\n      formData: formData\n    });\n  }\n\n  render() {\n\n    var submitButton;\n    if (this.props.add) {\n      submitButton = (\n        <ButtonElement label=\"Submit\"/>\n      );\n    }\n\n    var updateButton;\n    if (this.props.edit) {\n      updateButton = (\n        <ButtonElement label=\"Update\"/>\n      );\n    }\n\n  let specimenProtocolFields;\n  if (this.state.currentProtocol) {\n    var specimenProtocolFieldsObject = this.props.specimenProtocolAttributes[this.state.currentProtocol];\n\n    if (specimenProtocolFieldsObject) {\n      specimenProtocolFields = this.getSpecimenProtocolFields(specimenProtocolFieldsObject);\n    }\n  }\n\n    //This will be for default fields, if there are any eventually\n    if (this.state.currentSpecimenProtocol) {\n      preparationFields = (\n        <div>\n        </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"specimenPreparation\"\n        onSubmit={this.handleSave}\n        ref=\"form\"\n      >\n        <div>\n          <SelectElement\n            name=\"protocolId\"\n            label=\"Protocol\"\n            options={this.props.specimenProtocols}\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.protocolId}\n          />\n        {specimenProtocolFields}\n          <DateElement\n            name=\"date\"\n            label=\"Date\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.date}\n          />\n          <TimeElement\n            name=\"time\"\n            label=\"Time\"\n            onUserInput={this.setFormData}\n            required={true}\n            value={this.state.formData.time}\n          />\n          <TextareaElement\n            name=\"comments\"\n            label=\"Comments\"\n            onUserInput={this.setFormData}\n            value={this.state.formData.comments}\n          />\n        {submitButton} \n        {updateButton}\n        </div>\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n\n    let formData = this.state.formData;\n\n    if (formElement === \"protocolId\" && value !== \"\") {\n      //This is to eliminate the values for the specimen protocol fields\n      //This could potentially be improved later to retain the values\n      //for the fields that are common accross protocols\n      formData.data = {};\n      this.setState({\n        currentProtocol: value\n      });\n    }\n\n    formData[formElement] = value;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  setSpecimenProtocolFieldFormData(formElement, value) {\n    let formData = this.state.formData;\n    formData.data[formElement] = value;\n  \n    this.setState({\n        formData: formData\n    });\n  }\n\n  // This generates all the form fields for a given specimen protocol\n  getSpecimenProtocolFields(fieldsObject) {\n    var specimenProtocolFields = Object.keys(fieldsObject).map((attribute) => {\n      let datatype = this.props.attributeDatatypes[fieldsObject[attribute]['datatypeId']].datatype;\n\n      if (datatype === \"text\" || datatype === \"number\") {\n        if (fieldsObject[attribute]['refTableId'] == null) {\n          return (\n            <TextboxElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              onUserInput={this.setSpecimenProtocolFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribute]['required']}\n              value={this.state.formData.data[attribute]}\n              hasError={this.state.formErrors[attribute]}\n              errorMessage={\"This is a \" + datatype + \" field.\"}\n            />\n          );\n        }\n\n        if (fieldsObject[attribute]['refTableId'] !== null) {\n          return (\n            <SelectElement\n              name={attribute}\n              label={fieldsObject[attribute]['name']}\n              options=\"\"\n              onUserInput={this.setSpecimenProtocolFieldFormData}\n              ref={attribute}\n              required={fieldsObject[attribute]['required']}\n              value={this.state.formData.data[attribute]}\n            />\n          );\n        }\n      }\n\n      if (datatype === \"datetime\") {\n        return (\n          <DateElement\n            name={attribute}\n            label={fieldsObject[attribute]['name']}\n            onUserInput={this.setSpecimenProtocolFieldFormData}\n            ref={attribute}\n            required={fieldsObject[attribute]['required']}\n            value={this.state.formData.data[attribute]}\n          />\n        );\n      }\n\n      if (datatype === \"boolean\") {\n      \n      }\n    })\n\n    return specimenProtocolFields;\n  }\n\n  handleSave(e) {\n    //more things will go here later\n    if (this.props.add) {\n      this.savePreparation(this.props.insertAction)\n    }\n    if (this.props.edit) {\n      this.savePreparation(this.props.updateAction);\n    }\n  }\n\n  savePreparation(action) {\n    let formData = this.state.formData;\n    formData['data'] = JSON.stringify(formData['data']);\n\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        //Update Parent Specimen Page Here\n        formData.data = JSON.parse(formData.data);\n        this.props.updatePreparation(formData);\n        //swal(\"Specimen Update Successful!\", \"\", \"success\");\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n}\n\nSpecimenPreparationForm.propTypes = {\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n  units: React.PropTypes.object.isRequired,\n}\n\nexport default SpecimenPreparationForm;\n\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/preparationForm.js","/**\n * LifeCycle\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass LifeCycle extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n    };\n   \n  }\n\n  render() {\n\n    return (\n      <div className='lifecycle-container'>\n        <div className='lifecycle'>\n            Test\n            <span className='lifecycle-node tracking-bar__item--active'/>\n            <span className='lifecycle-bar'/>\n            <span className='lifecycle-node tracking-bar__item--active'/>\n            <span className='lifecycle-bar'/>\n            <span className='lifecycle-node tracking-bar__item--active'/>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nLifeCycle.propTypes = {\n}\n\nexport default LifeCycle;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/lifeCycle.js"],"sourceRoot":""}