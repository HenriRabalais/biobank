{"version":3,"sources":["webpack:///modules/biobank/js/specimenIndex.js","webpack:///webpack/bootstrap cd8b274bcd979feae2ae?7603*******","webpack:///./modules/biobank/jsx/specimenIndex.js","webpack:///./jsx/Panel.js?b4c8","webpack:///./modules/biobank/jsx/specimenForm.js?35c0","webpack:///./modules/biobank/jsx/barcodeForm.js?02a4","webpack:///./jsx/Tabs.js?82f5","webpack:///./modules/biobank/jsx/specimen.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_specimen","_specimen2","args","QueryString","get","document","currentScript","src","$","biobankSpecimen","React","createElement","className","DataURL","loris","BaseURL","barcode","action","ReactDOM","render","getElementById","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","Panel","_React$Component","this","_this","getPrototypeOf","state","collapsed","initCollapsed","panelClass","toggleCollapsed","bind","setState","glyphClass","panelHeading","title","onClick","data-toggle","data-target","style","cursor","role","height","children","Component","propTypes","PropTypes","string","defaultProps","_barcodeForm","_barcodeForm2","BiobankSpecimenForm","Data","formData","barcodeFormList","errorMessage","isLoaded","formErrors","countBarcodeForms","handleSubmit","validateForm","setFormData","specimenSubmit","addBarcodeForm","setBarcodeFormData","ajax","dataType","success","data","error","errorCode","errorMsg","console","child","specimenId","candidateId","sessionId","_this2","undefined","glyphStyle","color","margin","buttonStyle","appearance","outline","boxShadow","borderColor","backgroundColor","barcodeForms","_loop","push","setSpecimenFormData","specimenTypes","containerTypesPrimary","containerBarcodesNonPrimary","specimenTypeAttributes","attributeDatatypes","capacities","units","button","type","removeBarcodeForm","staticFields","selectFields","StaticElement","label","text","PSCIDs","sessionData","visits","SelectElement","name","options","onUserInput","ref","required","pscid","visitLabel","FormElement","onSubmit","DateElement","minYear","maxYear","timeCollect","ButtonElement","formElement","_this3","test","isNaN","currentContainerType","quantity","specimenTypeFieldsObject","currentSpecimenType","keys","map","attribute","datatype","e","preventDefault","formRefs","refs","isValidForm","JSON","stringify","formObj","FormData","append","url","cache","contentType","processData","xhr","window","XMLHttpRequest","event","CustomEvent","dispatchEvent","swal","err","msg","responseJSON","message","requiredFields","field","hasError","forceUpdate","barcodeFormData","barcodeId","index","splice","isRequired","BiobankBarcodeForm","getSpecimenTypeFields","specimenFields","specimenTypeFields","containerType","parentContainer","TextboxElement","TextareaElement","notes","specimenType","object","Tabs","hash","location","activeTab","updateURL","substr","defaultTab","tabs","handleClick","getTabs","getTabPanes","tabId","onTabChange","scrollDistance","scrollTop","tab","tabClass","href","tabID","tabPanes","Children","cloneElement","tabStyle","marginLeft","marginBottom","array","bool","TabPane","_React$Component2","apply","arguments","classList","TabId","Title","Modal","_React$Component3","show","modalStyle","position","maxWidth","maxHeight","padding","borderRadius","overflowY","zIndex","backdropStyle","top","bottom","left","right","onClose","stopPropagation","func","node","_specimenForm","_specimenForm2","_Tabs","_Panel","_Panel2","BiobankSpecimen","collectionData","uploadResult","loadedData","setCollectionData","showAlertMessage","toggleModal","specimen","specimenData","container","containerData","parentSpecimenBarcode","parentContainerBarcode","isOpen","alertMessage","alertClass","backURL","concat","specimenURL","LinkElement","containerURL","dataObject","dataArray","containerLoci","locusId","location_id","siteInfo","Name","destination_id","addSpecimenButton","specimenForm","userHasPermission","buttonClass","columnSize","candidateInfo","ID","sessionInfo","columns","PSCID","CandID","Visit_label","containerStati","statusId","typeId","containerUnits","containerCapacities","capacity_id","unit_id","unit","origin_id","myCollectionData","hide","removeClass","upload","addEventListener","evt","lengthComputable","progressbar","progresslabel","percent","Math","round","total","width","html","attr","addClass","alertMsg","fadeTo","delay","slideUp","RBiobankSpecimen","createFactory"],"mappings":"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","file":"./modules/biobank/js/specimenIndex.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _specimen = __webpack_require__(7);\n\t\n\tvar _specimen2 = _interopRequireDefault(_specimen);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar args = QueryString.get(document.currentScript.src); /* global ReactDOM */\n\t\n\t$(function () {\n\t  var biobankSpecimen = React.createElement(\n\t    \"div\",\n\t    { className: \"page-specimen-form\" },\n\t    React.createElement(\n\t      \"div\",\n\t      { className: \"row\" },\n\t      React.createElement(\n\t        \"div\",\n\t        { className: \"col-md-9 col-lg-12\" },\n\t        React.createElement(_specimen2.default, {\n\t          DataURL: loris.BaseURL + \"/biobank/ajax/FileUpload.php?action=getSpecimenData&barcode=\" + args.barcode,\n\t          action: loris.BaseURL + \"/biobank/ajax/FileUpload.php?action=specimen\"\n\t        })\n\t      )\n\t    )\n\t  );\n\t\n\t  ReactDOM.render(biobankSpecimen, document.getElementById(\"lorisworkspace\"));\n\t});\n\n/***/ },\n/* 1 */,\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React component for Panel\n\t *\n\t * @author Alex I.\n\t * @version 1.0.0\n\t *\n\t */\n\t\n\t/**\n\t * Panel component\n\t * Wraps children in a collapsible bootstrap panel\n\t */\n\tvar Panel = function (_React$Component) {\n\t  _inherits(Panel, _React$Component);\n\t\n\t  function Panel(props) {\n\t    _classCallCheck(this, Panel);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).call(this, props));\n\t\n\t    _this.state = {\n\t      collapsed: _this.props.initCollapsed\n\t    };\n\t\n\t    // Initialize panel class based on collapsed status\n\t    _this.panelClass = _this.props.initCollapsed ? \"panel-collapse collapse\" : \"panel-collapse collapse in\";\n\t\n\t    _this.toggleCollapsed = _this.toggleCollapsed.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Panel, [{\n\t    key: \"toggleCollapsed\",\n\t    value: function toggleCollapsed() {\n\t      this.setState({ collapsed: !this.state.collapsed });\n\t    }\n\t  }, {\n\t    key: \"render\",\n\t    value: function render() {\n\t      // Change arrow direction based on collapse status\n\t      var glyphClass = this.state.collapsed ? \"glyphicon pull-right glyphicon-chevron-down\" : \"glyphicon pull-right glyphicon-chevron-up\";\n\t\n\t      // Add panel header, if title is set\n\t      var panelHeading = this.props.title ? React.createElement(\n\t        \"div\",\n\t        {\n\t          className: \"panel-heading\",\n\t          onClick: this.toggleCollapsed,\n\t          \"data-toggle\": \"collapse\",\n\t          \"data-target\": '#' + this.props.id,\n\t          style: { cursor: 'pointer' }\n\t        },\n\t        this.props.title,\n\t        React.createElement(\"span\", { className: glyphClass })\n\t      ) : '';\n\t\n\t      return React.createElement(\n\t        \"div\",\n\t        { className: \"panel panel-primary\" },\n\t        panelHeading,\n\t        React.createElement(\n\t          \"div\",\n\t          { id: this.props.id, className: this.panelClass, role: \"tabpanel\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"panel-body\", style: { height: this.props.height } },\n\t            this.props.children\n\t          )\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Panel;\n\t}(React.Component);\n\t\n\tPanel.propTypes = {\n\t  id: React.PropTypes.string,\n\t  height: React.PropTypes.string,\n\t  title: React.PropTypes.string\n\t};\n\tPanel.defaultProps = {\n\t  initCollapsed: false,\n\t  id: 'default-panel',\n\t  height: '100%'\n\t};\n\t\n\texports.default = Panel;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _barcodeForm = __webpack_require__(4);\n\t\n\tvar _barcodeForm2 = _interopRequireDefault(_barcodeForm);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Specimen Form\n\t *\n\t * Fetches data from Loris backend and displays a form allowing\n\t * to specimen a biobank file attached to a specific instrument\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankSpecimenForm = function (_React$Component) {\n\t  _inherits(BiobankSpecimenForm, _React$Component);\n\t\n\t  function BiobankSpecimenForm(props) {\n\t    _classCallCheck(this, BiobankSpecimenForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimenForm.__proto__ || Object.getPrototypeOf(BiobankSpecimenForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      Data: {},\n\t      formData: {},\n\t      barcodeFormList: {},\n\t      errorMessage: null,\n\t      isLoaded: false,\n\t      formErrors: {},\n\t      countBarcodeForms: [1]\n\t    };\n\t\n\t    //this.getValidFileName = this.getValidFileName.bind(this);\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    //this.isValidFileName = this.isValidFileName.bind(this);\n\t    _this.validateForm = _this.validateForm.bind(_this);\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.specimenSubmit = _this.specimenSubmit.bind(_this);\n\t    _this.addBarcodeForm = _this.addBarcodeForm.bind(_this);\n\t    _this.setBarcodeFormData = _this.setBarcodeFormData.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimenForm, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var self = this;\n\t      $.ajax(this.props.DataURL, {\n\t        dataType: 'json',\n\t        success: function success(data) {\n\t          self.setState({\n\t            Data: data,\n\t            isLoaded: true\n\t          });\n\t        },\n\t        error: function error(data, errorCode, errorMsg) {\n\t          console.error(data, errorCode, errorMsg);\n\t          self.setState({\n\t            error: 'An error occurred when loading the form!'\n\t          });\n\t        }\n\t      });\n\t\n\t      //if this is a child specimen form then certain formData is set when component mounts\n\t      if (this.props.child) {\n\t        var formData = this.state.formData;\n\t        formData['parentSpecimen'] = this.props.specimenId;\n\t        formData['pscid'] = this.props.candidateId;\n\t        formData['visitLabel'] = this.props.sessionId;\n\t\n\t        this.setState({\n\t          formData: formData\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var _this2 = this;\n\t\n\t      // Data loading error\n\t      if (this.state.error !== undefined) {\n\t        return React.createElement(\n\t          'div',\n\t          { className: 'alert alert-danger text-center' },\n\t          React.createElement(\n\t            'strong',\n\t            null,\n\t            this.state.error\n\t          )\n\t        );\n\t      }\n\t\n\t      // Waiting for data to load\n\t      if (!this.state.isLoaded) {\n\t        return React.createElement(\n\t          'button',\n\t          { className: 'btn-info has-spinner' },\n\t          'Loading',\n\t          React.createElement('span', {\n\t            className: 'glyphicon glyphicon-refresh glyphicon-refresh-animate' })\n\t        );\n\t      }\n\t\n\t      //Styling for remove Barcode button\n\t      var glyphStyle = {\n\t        color: '#D3D3D3',\n\t        margin: 'auto'\n\t      };\n\t      var buttonStyle = {\n\t        appearance: 'none',\n\t        outline: 'none',\n\t        boxShadow: 'none',\n\t        borderColor: 'transparent',\n\t        backgroundColor: 'transparent'\n\t\n\t      };\n\t\n\t      //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n\t      var barcodeForms = [];\n\t\n\t      var _loop = function _loop(i) {\n\t        barcodeForms.push(React.createElement(_barcodeForm2.default, {\n\t          setSpecimenFormData: _this2.setBarcodeFormData,\n\t          id: _this2.state.countBarcodeForms[i],\n\t          specimenTypes: _this2.state.Data.specimenTypes,\n\t          containerTypesPrimary: _this2.state.Data.containerTypesPrimary,\n\t          containerBarcodesNonPrimary: _this2.state.Data.containerBarcodesNonPrimary,\n\t          specimenTypeAttributes: _this2.state.Data.specimenTypeAttributes,\n\t          attributeDatatypes: _this2.state.Data.attributeDatatypes,\n\t          capacities: _this2.state.Data.capacities,\n\t          units: _this2.state.Data.units,\n\t          button: i + 1 === _this2.state.countBarcodeForms.length ? React.createElement(\n\t            'button',\n\t            {\n\t              type: 'button',\n\t              className: 'btn btn-success btn-sm',\n\t              onClick: _this2.addBarcodeForm\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-plus' })\n\t          ) : React.createElement(\n\t            'button',\n\t            {\n\t              type: 'button',\n\t              className: 'btn btn-primary-outline btn-sm',\n\t              style: buttonStyle,\n\t              onClick: function onClick() {\n\t                return _this2.removeBarcodeForm(i);\n\t              }\n\t            },\n\t            React.createElement('span', { className: 'glyphicon glyphicon-remove', style: glyphStyle })\n\t          )\n\t        }));\n\t      };\n\t\n\t      for (var i = 0; i < this.state.countBarcodeForms.length; i++) {\n\t        _loop(i);\n\t      }\n\t\n\t      //Since Static Elements Can't be submitted as part of the form we need to decide if we should keep\n\t      //static elements or make the Select and Textbox Elements Disabled\n\t      var staticFields = void 0;\n\t      var selectFields = void 0;\n\t      if (this.props.child) {\n\t        staticFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(StaticElement, {\n\t            label: 'Parent Specimen',\n\t            text: this.props.barcode\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'PSCID',\n\t            text: this.state.Data.PSCIDs[this.props.candidateId]\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Visit Label',\n\t            text: this.state.Data.sessionData[this.state.Data.PSCIDs[this.props.candidateId]].visits[this.props.sessionId]\n\t          })\n\t        );\n\t      } else {\n\t        selectFields = React.createElement(\n\t          'div',\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: 'pscid',\n\t            label: 'PSCID',\n\t            options: this.state.Data.PSCIDs,\n\t            onUserInput: this.setFormData,\n\t            ref: 'pscid',\n\t            required: true,\n\t            value: this.state.formData.pscid\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: 'visitLabel',\n\t            label: 'Visit Label',\n\t            options: this.state.Data.visits,\n\t            onUserInput: this.setFormData,\n\t            ref: 'visitLabel',\n\t            required: true,\n\t            value: this.state.formData.visitLabel\n\t          })\n\t        );\n\t      }\n\t\n\t      //REPLACE PARENT CONTAINER TYPE WITH PARENT CONTAINER AND LIST ALL THE NON-PRIMARY\n\t      //CONTAINERS IN THE DATABASE YOU SILLY - Figure out if this is even necessary\n\t      //ALSO ALLOW THEM TO CANCEL THE FORM AND DELETE BARCODE FORMS\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: 'biobankSpecimen',\n\t          onSubmit: this.handleSubmit,\n\t          ref: 'form'\n\t        },\n\t        React.createElement(\n\t          'h3',\n\t          null,\n\t          React.createElement(\n\t            'b',\n\t            null,\n\t            'Add New Specimen',\n\t            this.state.countBarcodeForms > 1 ? \"s\" : \"\"\n\t          )\n\t        ),\n\t        React.createElement('br', null),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-11' },\n\t            staticFields,\n\t            selectFields,\n\t            React.createElement(DateElement, {\n\t              name: 'timeCollect',\n\t              label: 'Collection Time',\n\t              minYear: '2000',\n\t              maxYear: '2017',\n\t              onUserInput: this.setFormData,\n\t              ref: 'timeCollect',\n\t              required: true,\n\t              value: this.state.formData.timeCollect\n\t            })\n\t          )\n\t        ),\n\t        barcodeForms,\n\t        React.createElement(\n\t          'div',\n\t          { className: 'row' },\n\t          React.createElement('div', { className: 'col-xs-9' }),\n\t          React.createElement(\n\t            'div',\n\t            { className: 'col-xs-3' },\n\t            React.createElement(ButtonElement, { label: 'Submit' })\n\t          )\n\t        )\n\t      );\n\t    }\n\t\n\t    /** *******************************************************************************\n\t     *                      ******     Helper methods     *******\n\t     *********************************************************************************/\n\t\n\t    /**\n\t     * Returns a valid name for the file to be specimened\n\t     *\n\t     * @param {string} pscid - PSCID selected from the dropdown\n\t     * @param {string} visitLabel - Visit label selected from the dropdown\n\t     * @param {string} instrument - Instrument selected from the dropdown\n\t     * @return {string} - Generated valid filename for the current selection\n\t     */\n\t    //  getValidFileName(pscid, visitLabel, instrument) {\n\t    //    var fileName = pscid + \"_\" + visitLabel;\n\t    //    if (instrument) fileName += \"_\" + instrument;\n\t    //\n\t    //    return fileName;\n\t    //  }\n\t\n\t\n\t  }, {\n\t    key: 'validateForm',\n\t    value: function validateForm(formElement, value) {\n\t      var _this3 = this;\n\t\n\t      var formErrors = this.state.formErrors;\n\t\n\t      //validate barcode regex\n\t      if (formElement === \"barcode\" && value !== \"\") {\n\t        if (!/^hello/.test(this.state.formData.barcode)) {\n\t          formErrors.barcode = true;\n\t        } else {\n\t          formErrors.barcode = false;\n\t        }\n\t      }\n\t\n\t      //validate that quantity is a number and less than capacity\n\t      if (formElement === \"quantity\" && value !== \"\") {\n\t        if (isNaN(value) || value > this.state.Data.capacities[this.state.currentContainerType]) {\n\t          formErrors.quantity = true;\n\t        } else {\n\t          formErrors.quantity = false;\n\t        }\n\t      }\n\t\n\t      //validate datatypes and regex of generated type attributes\n\t      var specimenTypeFieldsObject = this.state.Data.specimenTypeAttributes[this.state.currentSpecimenType];\n\t      var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t\n\t        var datatype = _this3.state.Data.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t        if (datatype === \"number\") {\n\t          if (formElement === attribute) {\n\t            if (isNaN(value) && value !== \"\") {\n\t              formErrors[attribute] = true;\n\t            } else {\n\t              formErrors[attribute] = false;\n\t            }\n\t          }\n\t        }\n\t      });\n\t\n\t      this.setState({\n\t        formErrors: formErrors\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Handle form submission\n\t     * @param {object} e - Form submission event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      var formRefs = this.refs;\n\t      //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\t\n\t      // Validate the form\n\t      if (!this.isValidForm(formRefs, formData)) {\n\t        return;\n\t      }\n\t\n\t      //    // Validate specimened file name\n\t      //    let instrument = formData.instrument ? formData.instrument : null;\n\t      //    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n\t      //    let requiredFileName = this.getValidFileName(\n\t      //      formData.pscid, formData.visitLabel, instrument\n\t      //    );\n\t      //    if (!this.isValidFileName(requiredFileName, fileName)) {\n\t      //      swal(\n\t      //        \"Invalid Specimen name!\",\n\t      //        \"File name should begin with: \" + requiredFileName,\n\t      //        \"error\"\n\t      //      );\n\t      //      return;\n\t      //    }\n\t\n\t      // Check for duplicate file names\n\t      //    let isDuplicate = biobankFiles.indexOf(fileName);\n\t      //    if (isDuplicate >= 0) {\n\t      //      swal({\n\t      //        title: \"Are you sure?\",\n\t      //        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n\t      //        type: \"warning\",\n\t      //        showCancelButton: true,\n\t      //        confirmButtonText: 'Yes, I am sure!',\n\t      //        cancelButtonText: \"No, cancel it!\"\n\t      //      }, function(isConfirm) {\n\t      //        if (isConfirm) {\n\t      //          this.specimenFile();\n\t      //        } else {\n\t      //          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n\t      //        }\n\t      //      }.bind(this));\n\t      //    } else {\n\t      formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t\n\t      this.specimenSubmit();\n\t      //    }\n\t    }\n\t\n\t    /*\n\t     * Uploads the file to the server\n\t     */\n\t\n\t  }, {\n\t    key: 'specimenSubmit',\n\t    value: function specimenSubmit() {\n\t      // Set form data and specimen the biobank file\n\t      var formData = this.state.formData;\n\t      var formObj = new FormData();\n\t      for (var key in formData) {\n\t        if (formData[key] !== \"\") {\n\t          formObj.append(key, formData[key]);\n\t        }\n\t      }\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: this.props.action,\n\t        data: formObj,\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function () {\n\t          var xhr = new window.XMLHttpRequest();\n\t          return xhr;\n\t        }.bind(this),\n\t        success: function () {\n\t          // Trigger an update event to update all observers (i.e DataTable)\n\t          var event = new CustomEvent('update-datatable');\n\t          window.dispatchEvent(event);\n\t\n\t          this.setState({\n\t            formData: {}, // reset form data after successful file specimen\n\t            barcodeFormList: {}\n\t          });\n\t          swal(\"Specimen Submission Successful!\", \"\", \"success\");\n\t        }.bind(this),\n\t        error: function (err) {\n\t          console.error(err);\n\t          var msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n\t          this.setState({\n\t            errorMessage: msg\n\t          });\n\t          swal(msg, \"\", \"error\");\n\t        }.bind(this)\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Checks if the inputted file name is valid\n\t     *\n\t     * @param {string} requiredFileName - Required file name\n\t     * @param {string} fileName - Provided file name\n\t     * @return {boolean} - true if fileName starts with requiredFileName, false\n\t     *   otherwise\n\t     */\n\t    //  isValidFileName(requiredFileName, fileName) {\n\t    //    if (fileName === null || requiredFileName === null) {\n\t    //      return false;\n\t    //    }\n\t    //\n\t    //    return (fileName.indexOf(requiredFileName) === 0);\n\t    //  }\n\t\n\t    /**\n\t     * Validate the form\n\t     *\n\t     * @param {object} formRefs - Object containing references to React form elements\n\t     * @param {object} formData - Object containing form data inputed by user\n\t     * @return {boolean} - true if all required fields are filled, false otherwise\n\t     */\n\t\n\t  }, {\n\t    key: 'isValidForm',\n\t    value: function isValidForm(formRefs, formData) {\n\t      var isValidForm = true;\n\t\n\t      var requiredFields = {\n\t        pscid: null,\n\t        visitLabel: null\n\t      };\n\t\n\t      Object.keys(requiredFields).map(function (field) {\n\t        if (formData[field]) {\n\t          requiredFields[field] = formData[field];\n\t        } else if (formRefs[field]) {\n\t          formRefs[field].props.hasError = true;\n\t          isValidForm = false;\n\t        }\n\t      });\n\t      this.forceUpdate();\n\t\n\t      return isValidForm;\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setFormData',\n\t    value: function setFormData(formElement, value) {\n\t      // Only display visits and sites available for the current pscid\n\t      //let visitLabel = this.state.formData.visitLabel;\n\t      //let pscid = this.state.formData.pscid;\n\t\n\t      if (formElement === \"pscid\" && value !== \"\") {\n\t        this.state.Data.visits = this.state.Data.sessionData[this.state.Data.PSCIDs[value]].visits;\n\t        //this.state.Data.sites = this.state.Data.sessionData[this.state.Data.PSCIDs[value]].sites;\n\t      }\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'setBarcodeFormData',\n\t    value: function setBarcodeFormData(barcodeFormData, barcodeId) {\n\t      var formData = this.state.formData;\n\t      var barcodeFormList = this.state.barcodeFormList;\n\t      barcodeFormList[barcodeId] = barcodeFormData;\n\t      formData['barcodeFormList'] = barcodeFormList;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t    }\n\t  }, {\n\t    key: 'addBarcodeForm',\n\t    value: function addBarcodeForm() {\n\t      var countBarcodeForms = this.state.countBarcodeForms;\n\t      countBarcodeForms.push(countBarcodeForms[countBarcodeForms.length - 1] + 1);\n\t      this.setState({\n\t        countBarcodeForms: countBarcodeForms\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removeBarcodeForm',\n\t    value: function removeBarcodeForm(index) {\n\t      var countBarcodeForms = this.state.countBarcodeForms;\n\t      countBarcodeForms.splice(index, 1);\n\t      this.setState({\n\t        countBarcodeForms: countBarcodeForms\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimenForm;\n\t}(React.Component);\n\t\n\tBiobankSpecimenForm.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired,\n\t  barcode: React.PropTypes.string\n\t};\n\t\n\texports.default = BiobankSpecimenForm;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * Biobank Barcode Form\n\t *\n\t * Acts a subform for BiobankSpecimenForm\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t **/\n\t\n\tvar BiobankBarcodeForm = function (_React$Component) {\n\t  _inherits(BiobankBarcodeForm, _React$Component);\n\t\n\t  function BiobankBarcodeForm(props) {\n\t    _classCallCheck(this, BiobankBarcodeForm);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankBarcodeForm.__proto__ || Object.getPrototypeOf(BiobankBarcodeForm)).call(this, props));\n\t\n\t    _this.state = {\n\t      formData: {},\n\t      currentSpecimenType: null,\n\t      currentContainerType: null,\n\t      formErrors: {}\n\t    };\n\t\n\t    _this.setFormData = _this.setFormData.bind(_this);\n\t    _this.getSpecimenTypeFields = _this.getSpecimenTypeFields.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankBarcodeForm, [{\n\t    key: \"render\",\n\t    value: function render() {\n\t\n\t      var specimenFields;\n\t      var specimenTypeFields = this.getSpecimenTypeFields();\n\t      if (this.state.currentSpecimenType) {\n\t        specimenFields = React.createElement(\n\t          \"div\",\n\t          null,\n\t          React.createElement(SelectElement, {\n\t            name: \"containerType\",\n\t            label: \"Container Type\",\n\t            options: this.props.containerTypesPrimary,\n\t            onUserInput: this.setFormData,\n\t            ref: \"containerType\",\n\t            required: true,\n\t            value: this.state.formData.containerType\n\t          }),\n\t          React.createElement(SelectElement, {\n\t            name: \"parentContainer\",\n\t            label: \"Parent Container Barcode\",\n\t            options: this.props.containerBarcodesNonPrimary,\n\t            onUserInput: this.setFormData,\n\t            ref: \"parentContainer\",\n\t            required: false,\n\t            value: this.state.formData.parentContainer\n\t          }),\n\t          React.createElement(TextboxElement, {\n\t            name: \"quantity\",\n\t            label: \"Quantity\" + (this.state.currentContainerType ? \" (\" + this.props.units[this.state.currentContainerType] + \")\" : \"\"),\n\t            onUserInput: this.setFormData,\n\t            ref: \"quantity\",\n\t            required: true,\n\t            value: this.state.formData.quantity,\n\t            hasError: this.state.formErrors.quantity\n\t          }),\n\t          specimenTypeFields,\n\t          React.createElement(TextareaElement, {\n\t            name: \"notes\",\n\t            label: \"Notes\",\n\t            onUserInput: this.setFormData,\n\t            ref: \"notes\",\n\t            value: this.state.formData.notes\n\t          })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        FormElement,\n\t        {\n\t          name: \"biobankBarcode\"\n\t        },\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row\" },\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-11\" },\n\t            React.createElement(\n\t              \"div\",\n\t              {\n\t                \"data-toggle\": \"collapse\",\n\t                \"data-target\": \"#\" + this.props.id,\n\t                color: \"blue\"\n\t              },\n\t              React.createElement(TextboxElement, {\n\t                name: \"barcode\",\n\t                label: \"Barcode \" + this.props.id,\n\t                onUserInput: this.setFormData,\n\t                ref: \"barcode\",\n\t                required: true,\n\t                value: this.state.formData[\"barcode\"],\n\t                hasError: this.state.formErrors[\"barcode\"],\n\t                errorMessage: \"Incorrect Barcode format for this Specimen and Container Type\"\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-1\" },\n\t            this.props.button\n\t          )\n\t        ),\n\t        React.createElement(\n\t          \"div\",\n\t          { className: \"row\" },\n\t          React.createElement(\"div\", { className: \"col-xs-2\" }),\n\t          React.createElement(\n\t            \"div\",\n\t            { className: \"col-xs-9\" },\n\t            React.createElement(\n\t              \"div\",\n\t              { id: this.props.id, className: \"collapse\" },\n\t              React.createElement(SelectElement, {\n\t                name: \"specimenType\",\n\t                label: \"Specimen Type\",\n\t                options: this.props.specimenTypes,\n\t                onUserInput: this.setFormData,\n\t                ref: \"specimenType\",\n\t                required: true,\n\t                value: this.state.formData.specimenType\n\t              }),\n\t              specimenFields\n\t            )\n\t          )\n\t        )\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: \"setFormData\",\n\t    value: function setFormData(formElement, value) {\n\t\n\t      if (formElement === \"specimenType\" && value !== \"\") {\n\t        this.setState({\n\t          currentSpecimenType: value\n\t        });\n\t      }\n\t\n\t      if (formElement === \"containerType\" && value !== \"\") {\n\t        this.setState({\n\t          currentContainerType: value\n\t        });\n\t      }\n\t\n\t      var formData = this.state.formData;\n\t      formData[formElement] = value;\n\t\n\t      this.setState({\n\t        formData: formData\n\t      });\n\t\n\t      this.props.setSpecimenFormData(this.state.formData, this.props.id);\n\t    }\n\t\n\t    // This generates all the form fields for a given specimen type\n\t\n\t  }, {\n\t    key: \"getSpecimenTypeFields\",\n\t    value: function getSpecimenTypeFields() {\n\t      var _this2 = this;\n\t\n\t      if (this.state.currentSpecimenType) {\n\t        var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n\t        if (specimenTypeFieldsObject) {\n\t          var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map(function (attribute) {\n\t            var datatype = _this2.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n\t            if (datatype === \"text\" || datatype === \"number\") {\n\t              if (specimenTypeFieldsObject[attribute]['refTableId'] == null) {\n\t                return React.createElement(TextboxElement, {\n\t                  name: attribute,\n\t                  label: specimenTypeFieldsObject[attribute]['name'],\n\t                  onUserInput: _this2.setFormData,\n\t                  ref: attribute,\n\t                  required: specimenTypeFieldsObject[attribute]['required'],\n\t                  value: _this2.state.formData[attribute],\n\t                  hasError: _this2.state.formErrors[attribute],\n\t                  errorMessage: \"This is a \" + datatype + \" field.\"\n\t                });\n\t              }\n\t\n\t              // OPTIONS FOR SELECT ELEMENT WILL MOST LIKELY BE PASSED VIA AJAX CALL\n\t              // BUT IT CAN ALSO BE PRELOADED --\n\t              // ASK RIDA HOW THIS SHOULD BE DONE\n\t              if (specimenTypeFieldsObject[attribute]['refTableId'] !== null) {\n\t                return React.createElement(SelectElement, {\n\t                  name: attribute,\n\t                  label: specimenTypeFieldsObject[attribute]['name'],\n\t                  options: \"\",\n\t                  onUserInput: _this2.setFormData,\n\t                  ref: attribute,\n\t                  required: _this2.state.formData[attribute],\n\t                  value: _this2.state.formData[attribute]\n\t                });\n\t              }\n\t            }\n\t\n\t            if (datatype === \"datetime\") {\n\t              return React.createElement(DateElement, {\n\t                name: attribute,\n\t                label: specimenTypeFieldsObject[attribute]['name'],\n\t                onUserInput: _this2.setFormData,\n\t                ref: attribute,\n\t                required: specimenTypeFieldsObject[attribute]['required'],\n\t                value: _this2.state.formData[attribute]\n\t              });\n\t            }\n\t          });\n\t\n\t          return specimenTypeFields;\n\t        }\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return BiobankBarcodeForm;\n\t}(React.Component);\n\t\n\tBiobankBarcodeForm.propTypes = {\n\t\n\t  id: React.PropTypes.string,\n\t  specimenTypes: React.PropTypes.object.isRequired,\n\t  containerTypesPrimary: React.PropTypes.object.isRequired,\n\t  specimenTypeAttributes: React.PropTypes.object.isRequired,\n\t  attributeDatatypes: React.PropTypes.object.isRequired,\n\t  capacities: React.PropTypes.object.isRequired,\n\t  units: React.PropTypes.object.isRequired\n\t};\n\t\n\texports.default = BiobankBarcodeForm;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t/**\n\t * This file contains React components for Tabs component.\n\t *\n\t * @author Loris Team\n\t * @version 1.1.0\n\t *\n\t */\n\t\n\t/**\n\t * Tabs Component.\n\t * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n\t * and corresponding tab panes.\n\t *\n\t * ================================================\n\t * Usage:\n\t *\n\t * 1. Define an array of tabs with IDs and labels\n\t *\n\t * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n\t *\n\t * 2. Pass tabList as <Tab> property and <TabPane> as child\n\t *  ```\n\t * <Tabs tabs={tabList} defaultTab=\"tab1\">\n\t *   <TabPane TabId={tabList[0].id}>\n\t *     // Tab content goes here\n\t *   </TabPane>\n\t * </Tabs>\n\t * ```\n\t * =================================================\n\t *\n\t */\n\tvar Tabs = function (_React$Component) {\n\t  _inherits(Tabs, _React$Component);\n\t\n\t  function Tabs(props) {\n\t    _classCallCheck(this, Tabs);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call(this, props));\n\t\n\t    var hash = window.location.hash;\n\t    var activeTab = \"\";\n\t\n\t    /**\n\t     * Determine the initial active tab in this order\n\t     * 1. Try to infer from the URL, otherwise\n\t     * 2. Try to infer from the defaultTab prop, otherwise\n\t     * 3. Set to be the first tab of the list\n\t     */\n\t    if (_this.props.updateURL && hash) {\n\t      activeTab = hash.substr(1);\n\t    } else if (_this.props.defaultTab) {\n\t      activeTab = _this.props.defaultTab;\n\t    } else if (_this.props.tabs.length > 0) {\n\t      activeTab = _this.props.tabs[0].id;\n\t    }\n\t\n\t    _this.state = {\n\t      activeTab: activeTab\n\t    };\n\t\n\t    _this.handleClick = _this.handleClick.bind(_this);\n\t    _this.getTabs = _this.getTabs.bind(_this);\n\t    _this.getTabPanes = _this.getTabPanes.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Tabs, [{\n\t    key: 'handleClick',\n\t    value: function handleClick(tabId, e) {\n\t      this.setState({ activeTab: tabId });\n\t      this.props.onTabChange(tabId);\n\t\n\t      // Add tab href to URL querystring and scroll the page to top\n\t      if (this.props.updateURL) {\n\t        var scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n\t        window.location.hash = e.target.hash;\n\t        $('html,body').scrollTop(scrollDistance);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'getTabs',\n\t    value: function getTabs() {\n\t      var tabs = this.props.tabs.map(function (tab) {\n\t        var tabClass = this.state.activeTab === tab.id ? 'active' : null;\n\t        var href = \"#\" + tab.id;\n\t        var tabID = \"tab-\" + tab.id;\n\t        return React.createElement(\n\t          'li',\n\t          {\n\t            role: 'presentation',\n\t            className: tabClass,\n\t            key: tab.id\n\t          },\n\t          React.createElement(\n\t            'a',\n\t            { id: tabID,\n\t              href: href,\n\t              role: 'tab',\n\t              'data-toggle': 'tab',\n\t              onClick: this.handleClick.bind(null, tab.id)\n\t            },\n\t            tab.label\n\t          )\n\t        );\n\t      }.bind(this));\n\t\n\t      return tabs;\n\t    }\n\t  }, {\n\t    key: 'getTabPanes',\n\t    value: function getTabPanes() {\n\t      var tabPanes = React.Children.map(this.props.children, function (child, key) {\n\t        if (child) {\n\t          return React.cloneElement(child, {\n\t            activeTab: this.state.activeTab,\n\t            key: key\n\t          });\n\t        }\n\t      }.bind(this));\n\t\n\t      return tabPanes;\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      var tabs = this.getTabs();\n\t      var tabPanes = this.getTabPanes();\n\t      var tabStyle = {\n\t        marginLeft: 0,\n\t        marginBottom: '5px'\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'ul',\n\t          { className: 'nav nav-tabs', role: 'tablist', style: tabStyle },\n\t          tabs\n\t        ),\n\t        React.createElement(\n\t          'div',\n\t          { className: 'tab-content' },\n\t          tabPanes\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Tabs;\n\t}(React.Component);\n\t\n\tTabs.propTypes = {\n\t  tabs: React.PropTypes.array.isRequired,\n\t  defaultTab: React.PropTypes.string,\n\t  updateURL: React.PropTypes.bool\n\t};\n\tTabs.defaultProps = {\n\t  onTabChange: function onTabChange() {},\n\t  updateURL: false\n\t};\n\t\n\t/*\n\t * TabPane component.\n\t * Used to wrap content for every tab.\n\t */\n\t\n\tvar TabPane = function (_React$Component2) {\n\t  _inherits(TabPane, _React$Component2);\n\t\n\t  function TabPane() {\n\t    _classCallCheck(this, TabPane);\n\t\n\t    return _possibleConstructorReturn(this, (TabPane.__proto__ || Object.getPrototypeOf(TabPane)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(TabPane, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var classList = \"tab-pane\";\n\t      var title = void 0;\n\t\n\t      if (this.props.TabId === this.props.activeTab) {\n\t        classList += \" active\";\n\t      }\n\t      if (this.props.Title) {\n\t        title = React.createElement(\n\t          'h1',\n\t          null,\n\t          this.props.Title\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { role: 'tabpanel', className: classList, id: this.props.TabId },\n\t        title,\n\t        this.props.children\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return TabPane;\n\t}(React.Component);\n\t\n\tTabPane.propTypes = {\n\t  TabId: React.PropTypes.string.isRequired,\n\t  Title: React.PropTypes.string,\n\t  activeTab: React.PropTypes.string\n\t};\n\t\n\tvar Modal = function (_React$Component3) {\n\t  _inherits(Modal, _React$Component3);\n\t\n\t  function Modal() {\n\t    _classCallCheck(this, Modal);\n\t\n\t    return _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Modal, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      // Render nothing if the \"show\" prop is false\n\t      if (!this.props.show) {\n\t        return null;\n\t      }\n\t\n\t      //White Modal Window\n\t      var modalStyle = {\n\t        position: 'relative',\n\t        maxWidth: 1000,\n\t        maxHeight: '100%',\n\t        margin: '0 auto',\n\t        backgroundColor: '#fff',\n\t        padding: 30,\n\t        borderRadius: 10,\n\t        overflowY: 'auto',\n\t        zIndex: 9999\n\t      };\n\t\n\t      //Grey Background\n\t      var backdropStyle = {\n\t        position: 'fixed',\n\t        zIndex: 9998,\n\t        top: 0,\n\t        bottom: 0,\n\t        left: 0,\n\t        right: 0,\n\t        backgroundColor: 'rgba(0,0,0,0.3)',\n\t        padding: 50\n\t      };\n\t\n\t      return React.createElement(\n\t        'div',\n\t        { style: backdropStyle, onClick: this.props.onClose },\n\t        React.createElement(\n\t          'div',\n\t          { style: modalStyle, onClick: function onClick(e) {\n\t              e.stopPropagation();\n\t            } },\n\t          this.props.children\n\t        )\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return Modal;\n\t}(React.Component);\n\t\n\tModal.propTypes = {\n\t  onClose: React.PropTypes.func.isRequired,\n\t  show: React.PropTypes.bool,\n\t  children: React.PropTypes.node\n\t};\n\t\n\texports.Tabs = Tabs;\n\texports.TabPane = TabPane;\n\texports.Modal = Modal;\n\n/***/ },\n/* 6 */,\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _specimenForm = __webpack_require__(3);\n\t\n\tvar _specimenForm2 = _interopRequireDefault(_specimenForm);\n\t\n\tvar _Tabs = __webpack_require__(5);\n\t\n\tvar _Panel = __webpack_require__(2);\n\t\n\tvar _Panel2 = _interopRequireDefault(_Panel);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* exported RBiobankSpecimen */\n\t\n\t/**\n\t * Biobank Specimen\n\t *\n\t * Fetches data corresponding to a given Specimen from Loris backend and\n\t * displays a page allowing viewing of meta information of the specimen\n\t *\n\t * @author Henri Rabalais\n\t * @version 1.0.0\n\t *\n\t * */\n\tvar BiobankSpecimen = function (_React$Component) {\n\t  _inherits(BiobankSpecimen, _React$Component);\n\t\n\t  function BiobankSpecimen(props) {\n\t    _classCallCheck(this, BiobankSpecimen);\n\t\n\t    var _this = _possibleConstructorReturn(this, (BiobankSpecimen.__proto__ || Object.getPrototypeOf(BiobankSpecimen)).call(this, props));\n\t\n\t    _this.state = {\n\t      Data: {},\n\t      collectionData: {},\n\t      uploadResult: null,\n\t      isLoaded: false,\n\t      loadedData: 0\n\t    };\n\t\n\t    _this.handleSubmit = _this.handleSubmit.bind(_this);\n\t    _this.setCollectionData = _this.setCollectionData.bind(_this);\n\t    _this.showAlertMessage = _this.showAlertMessage.bind(_this);\n\t    _this.toggleModal = _this.toggleModal.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(BiobankSpecimen, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var self = this;\n\t      $.ajax(this.props.DataURL, {\n\t        dataType: 'json',\n\t        success: function success(data) {\n\t          var collectionData = {\n\t            specimen: data.specimenData,\n\t            container: data.containerData,\n\t            parentSpecimenBarcode: data.parentSpecimenBarcode,\n\t            parentContainerBarcode: data.parentContainerBarcode\n\t          };\n\t\n\t          var mappingData = {\n\t            specimenTypes: data.specimenTypes,\n\t            containerTypesPrimary: data.containerTypesPrimary\n\t          };\n\t\n\t          self.setState({\n\t            Data: data,\n\t            isLoaded: true,\n\t            collectionData: collectionData\n\t          });\n\t        },\n\t        error: function error(_error, errorCode, errorMsg) {\n\t          console.error(_error, errorCode, errorMsg);\n\t          self.setState({\n\t            error: 'An error occurred when loading the form!'\n\t          });\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'toggleModal',\n\t    value: function toggleModal() {\n\t      this.setState({\n\t        isOpen: !this.state.isOpen\n\t      });\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      // Data loading error\n\t      if (this.state.error !== undefined) {\n\t        return React.createElement(\n\t          'div',\n\t          { className: 'alert alert-danger text-center' },\n\t          React.createElement(\n\t            'strong',\n\t            null,\n\t            this.state.error\n\t          )\n\t        );\n\t      }\n\t\n\t      // Waiting for data to load\n\t      if (!this.state.isLoaded) {\n\t        return React.createElement(\n\t          'button',\n\t          { className: 'btn-info has-spinner' },\n\t          'Loading',\n\t          React.createElement('span', {\n\t            className: 'glyphicon glyphicon-refresh glyphicon-refresh-animate' })\n\t        );\n\t      }\n\t\n\t      var alertMessage = \"\";\n\t      var alertClass = \"alert text-center hide\";\n\t      var backURL = loris.BaseURL.concat('/biobank/');\n\t\n\t      if (this.state.uploadResult) {\n\t        if (this.state.uploadResult === \"success\") {\n\t          alertClass = \"alert alert-success text-center\";\n\t          alertMessage = \"Update Successful!\";\n\t        } else if (this.state.uploadResult === \"error\") {\n\t          alertClass = \"alert alert-danger text-center\";\n\t          alertMessage = \"Failed to update the file\";\n\t        }\n\t      }\n\t\n\t      //checks if parent specimen exists and returns static element with href\n\t      if (this.state.collectionData.parentSpecimenBarcode) {\n\t        var specimenURL = loris.BaseURL + \"/biobank/specimen/?barcode=\";\n\t        var parentSpecimenBarcode = React.createElement(LinkElement, {\n\t          label: 'Parent Specimen',\n\t          text: this.state.collectionData.parentSpecimenBarcode,\n\t          href: specimenURL + this.state.collectionData.parentSpecimenBarcode\n\t        });\n\t      }\n\t\n\t      //checks if parent container exists and returns static element with href\n\t      if (this.state.collectionData.parentContainerBarcode) {\n\t        var containerURL = loris.BaseURL + \"/biobank/container/?barcode=\";\n\t        var parentContainerBarcode = React.createElement(LinkElement, {\n\t          label: 'Parent Container',\n\t          text: this.state.collectionData.parentContainerBarcode,\n\t          href: containerURL + this.state.collectionData.parentContainerBarcode\n\t        });\n\t      }\n\t\n\t      //loops through data object to produce static elements\n\t      if (this.state.collectionData.specimen.data) {\n\t        var dataObject = this.state.collectionData.specimen.data;\n\t        var dataArray = Object.keys(dataObject).map(function (key) {\n\t          return React.createElement(StaticElement, {\n\t            label: key,\n\t            text: dataObject[key]\n\t          });\n\t        });\n\t      }\n\t\n\t      //checks if location exists, if not posts destination\n\t      var location;\n\t      if (this.state.Data.containerLoci[this.state.collectionData.container.locusId].location_id) {\n\t        location = React.createElement(StaticElement, {\n\t          label: 'Location ',\n\t          text: this.state.Data.siteInfo[this.state.Data.containerLoci[this.state.collectionData.container.locusId].location_id].Name\n\t        });\n\t      } else {\n\t        location = React.createElement(StaticElement, {\n\t          label: 'Destination ',\n\t          text: this.state.Data.siteInfo[this.state.Data.containerLoci[this.state.collectionData.container.locusId].destination_id].Name + \" (In Transit)\"\n\t        });\n\t      }\n\t\n\t      var addSpecimenButton = void 0;\n\t      var specimenForm = void 0;\n\t      if (loris.userHasPermission('biobank_write')) {\n\t        addSpecimenButton = React.createElement(ButtonElement, {\n\t          buttonClass: 'btn btn-success',\n\t          columnSize: 'col-sm-2',\n\t          onUserInput: this.toggleModal,\n\t          label: 'Add Children',\n\t          type: 'button' });\n\t        specimenForm = React.createElement(\n\t          _Tabs.Modal,\n\t          { show: this.state.isOpen, onClose: this.toggleModal },\n\t          React.createElement(_specimenForm2.default, {\n\t            DataURL: loris.BaseURL + '/biobank/ajax/FileUpload.php?action=getFormData',\n\t            action: loris.BaseURL + '/biobank/ajax/FileUpload.php?action=submitSpecimen',\n\t            child: 'true',\n\t            specimenId: this.state.collectionData.specimen.id,\n\t            barcode: this.state.collectionData.container.barcode,\n\t            candidateId: this.state.Data.candidateInfo[''].ID,\n\t            sessionId: this.state.Data.sessionInfo[''].ID\n\t          })\n\t        );\n\t      }\n\t\n\t      return React.createElement(\n\t        'div',\n\t        null,\n\t        React.createElement(\n\t          'div',\n\t          { className: alertClass, role: 'alert', ref: 'alert-message' },\n\t          alertMessage\n\t        ),\n\t        this.state.uploadResult === \"success\" ? React.createElement(\n\t          'a',\n\t          { className: 'btn btn-primary', href: backURL },\n\t          'Back to biobank'\n\t        ) : null,\n\t        React.createElement(\n\t          'h3',\n\t          null,\n\t          'Specimen ',\n\t          React.createElement(\n\t            'strong',\n\t            null,\n\t            this.state.collectionData.container.barcode\n\t          )\n\t        ),\n\t        addSpecimenButton,\n\t        React.createElement(\n\t          FormElement,\n\t          {\n\t            columns: 4\n\t          },\n\t          React.createElement(LinkElement, {\n\t            label: 'PSCID',\n\t            text: this.state.Data.candidateInfo[''].PSCID,\n\t            href: loris.BaseURL + '/' + this.state.Data.candidateInfo[''].CandID\n\t          }),\n\t          React.createElement(LinkElement, {\n\t            label: 'Visit Label',\n\t            text: this.state.Data.sessionInfo[''].Visit_label,\n\t            href: loris.BaseURL + '/instrument_list/?candID=' + this.state.Data.candidateInfo[''].CandID + '&sessionID=' + this.state.Data.sessionInfo[''].ID\n\t          }),\n\t          React.createElement(StaticElement, {\n\t            label: 'Status',\n\t            text: this.state.Data.containerStati[this.state.collectionData.container.statusId].label\n\t          }),\n\t          location,\n\t          parentSpecimenBarcode,\n\t          parentContainerBarcode\n\t        ),\n\t        React.createElement(\n\t          FormElement,\n\t          {\n\t            columns: 3\n\t          },\n\t          React.createElement(\n\t            _Panel2.default,\n\t            {\n\t              id: 'collection-panel',\n\t              title: 'Collection'\n\t            },\n\t            React.createElement(\n\t              FormElement,\n\t              {\n\t                name: 'biobankSpecimen',\n\t                onSubmit: this.handleSubmit,\n\t                ref: 'form'\n\t              },\n\t              React.createElement(StaticElement, {\n\t                label: 'Type',\n\t                text: this.state.Data.specimenTypes[this.state.collectionData.specimen.typeId].label\n\t              }),\n\t              React.createElement(StaticElement, {\n\t                label: 'Quantity',\n\t                text: this.state.collectionData.specimen.quantity + ' ' + this.state.Data.containerUnits[this.state.Data.containerCapacities[this.state.Data.containerTypesPrimary[this.state.collectionData.container.typeId].capacity_id].unit_id].unit\n\t              }),\n\t              React.createElement(StaticElement, {\n\t                label: 'Container Type',\n\t                text: this.state.Data.containerTypesPrimary[this.state.collectionData.container.typeId].label\n\t              }),\n\t              React.createElement(StaticElement, {\n\t                label: 'Site',\n\t                text: this.state.Data.siteInfo[this.state.Data.containerLoci[this.state.collectionData.container.locusId].origin_id].Name\n\t              }),\n\t              React.createElement(StaticElement, {\n\t                label: 'Collection Time',\n\t                text: this.state.collectionData.specimen.timeCollect\n\t              }),\n\t              dataArray,\n\t              React.createElement(StaticElement, {\n\t                label: 'Notes',\n\t                text: this.state.collectionData.specimen.notes\n\t              })\n\t            )\n\t          ),\n\t          React.createElement(_Panel2.default, {\n\t            id: 'preparation-panel',\n\t            title: 'Preparation'\n\t          }),\n\t          React.createElement(_Panel2.default, {\n\t            id: 'analysis-panel',\n\t            title: 'Analysis'\n\t          })\n\t        ),\n\t        specimenForm\n\t      );\n\t    }\n\t\n\t    /**\n\t     * Handles form submission\n\t     * @param {event} e - Form submition event\n\t     */\n\t\n\t  }, {\n\t    key: 'handleSubmit',\n\t    value: function handleSubmit(e) {\n\t      e.preventDefault();\n\t\n\t      var self = this;\n\t      var myCollectionData = this.state.formData;\n\t\n\t      $('#biobankSpecimenEl').hide();\n\t      $(\"#file-progress\").removeClass('hide');\n\t\n\t      $.ajax({\n\t        type: 'POST',\n\t        url: self.props.action,\n\t        data: JSON.stringify(myCollectionData),\n\t        cache: false,\n\t        contentType: false,\n\t        processData: false,\n\t        xhr: function xhr() {\n\t          var xhr = new window.XMLHttpRequest();\n\t          xhr.upload.addEventListener(\"progress\", function (evt) {\n\t            if (evt.lengthComputable) {\n\t              var progressbar = $(\"#progressbar\");\n\t              var progresslabel = $(\"#progresslabel\");\n\t              var percent = Math.round(evt.loaded / evt.total * 100);\n\t              $(progressbar).width(percent + \"%\");\n\t              $(progresslabel).html(percent + \"%\");\n\t              progressbar.attr('aria-valuenow', percent);\n\t            }\n\t          }, false);\n\t          return xhr;\n\t        },\n\t        success: function success(data) {\n\t          $(\"#file-progress\").addClass('hide');\n\t          self.setState({\n\t            uploadResult: \"success\"\n\t          });\n\t          self.showAlertMessage();\n\t        },\n\t        error: function error(err) {\n\t          console.error(err);\n\t          self.setState({\n\t            uploadResult: \"error\"\n\t          });\n\t          self.showAlertMessage();\n\t        }\n\t\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Set the form data based on state values of child elements/componenets\n\t     *\n\t     * @param {string} formElement - name of the selected element\n\t     * @param {string} value - selected value for corresponding form element\n\t     */\n\t\n\t  }, {\n\t    key: 'setCollectionData',\n\t    value: function setCollectionData(formElement, value) {\n\t      var collectionData = this.state.collectionData;\n\t\n\t      if (value === \"\") {\n\t        collectionData[formElement] = null;\n\t      } else {\n\t        collectionData[formElement] = value;\n\t      }\n\t\n\t      this.setState({\n\t        collectionData: collectionData\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Display a success/error alert message after form submission\n\t     */\n\t\n\t  }, {\n\t    key: 'showAlertMessage',\n\t    value: function showAlertMessage() {\n\t      var self = this;\n\t\n\t      if (this.refs[\"alert-message\"] === null) {\n\t        return;\n\t      }\n\t\n\t      var alertMsg = this.refs[\"alert-message\"];\n\t      $(alertMsg).fadeTo(2000, 500).delay(3000).slideUp(500, function () {\n\t        self.setState({\n\t          uploadResult: null\n\t        });\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return BiobankSpecimen;\n\t}(React.Component);\n\t\n\tBiobankSpecimen.propTypes = {\n\t  DataURL: React.PropTypes.string.isRequired,\n\t  action: React.PropTypes.string.isRequired\n\t};\n\t\n\tvar RBiobankSpecimen = React.createFactory(BiobankSpecimen);\n\t\n\twindow.BiobankSpecimen = BiobankSpecimen;\n\twindow.RBiobankSpecimen = RBiobankSpecimen;\n\t\n\texports.default = BiobankSpecimen;\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// modules/biobank/js/specimenIndex.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap cd8b274bcd979feae2ae","/* global ReactDOM */\n\nimport BiobankSpecimen from './specimen';\nconst args = QueryString.get(document.currentScript.src);\n\n$(function() {\n  const biobankSpecimen = (\n    <div className=\"page-specimen-form\">\n      <div className=\"row\">\n        <div className=\"col-md-9 col-lg-12\">\n          <BiobankSpecimen\n            DataURL={`${loris.BaseURL}/biobank/ajax/FileUpload.php?action=getSpecimenData&barcode=${args.barcode}`}\n            action={`${loris.BaseURL}/biobank/ajax/FileUpload.php?action=specimen`}\n          />\n        </div>\n      </div>\n    </div>\n  );\n\n  ReactDOM.render(biobankSpecimen, document.getElementById(\"lorisworkspace\"));\n});\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenIndex.js","/**\n * This file contains React component for Panel\n *\n * @author Alex I.\n * @version 1.0.0\n *\n */\n\n/**\n * Panel component\n * Wraps children in a collapsible bootstrap panel\n */\nclass Panel extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsed: this.props.initCollapsed\n    };\n\n    // Initialize panel class based on collapsed status\n    this.panelClass = (\n      this.props.initCollapsed ?\n        \"panel-collapse collapse\" :\n        \"panel-collapse collapse in\"\n    );\n\n    this.toggleCollapsed = this.toggleCollapsed.bind(this);\n  }\n\n  toggleCollapsed() {\n    this.setState({collapsed: !this.state.collapsed});\n  }\n\n  render() {\n    // Change arrow direction based on collapse status\n    let glyphClass = (\n      this.state.collapsed ?\n        \"glyphicon pull-right glyphicon-chevron-down\" :\n        \"glyphicon pull-right glyphicon-chevron-up\"\n    );\n\n    // Add panel header, if title is set\n    const panelHeading = this.props.title ? (\n      <div\n        className=\"panel-heading\"\n        onClick={this.toggleCollapsed}\n        data-toggle=\"collapse\"\n        data-target={'#' + this.props.id}\n        style={{cursor: 'pointer'}}\n      >\n        {this.props.title}\n        <span className={glyphClass}></span>\n      </div>\n    ) : '';\n\n    return (\n      <div className=\"panel panel-primary\">\n        {panelHeading}\n        <div id={this.props.id} className={this.panelClass} role=\"tabpanel\">\n          <div className=\"panel-body\" style={{height: this.props.height}}>\n            {this.props.children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPanel.propTypes = {\n  id: React.PropTypes.string,\n  height: React.PropTypes.string,\n  title: React.PropTypes.string\n};\nPanel.defaultProps = {\n  initCollapsed: false,\n  id: 'default-panel',\n  height: '100%'\n};\n\nexport default Panel;\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Panel.js","import BiobankBarcodeForm from './barcodeForm.js';\n\n/**\n * Biobank Specimen Form\n *\n * Fetches data from Loris backend and displays a form allowing\n * to specimen a biobank file attached to a specific instrument\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankSpecimenForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      Data: {},\n      formData: {},\n      barcodeFormList: {},\n      errorMessage: null,\n      isLoaded: false,\n      formErrors: {},\n      countBarcodeForms: [1] \n    };\n\n    //this.getValidFileName = this.getValidFileName.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    //this.isValidFileName = this.isValidFileName.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.setFormData = this.setFormData.bind(this);\n    this.specimenSubmit = this.specimenSubmit.bind(this);\n    this.addBarcodeForm = this.addBarcodeForm.bind(this);\n    this.setBarcodeFormData = this.setBarcodeFormData.bind(this);\n  }\n\n  componentDidMount() {\n    var self = this;\n    $.ajax(this.props.DataURL, {\n      dataType: 'json',\n      success: function(data) {\n        self.setState({\n          Data: data,\n          isLoaded: true\n        });\n      },\n      error: function(data, errorCode, errorMsg) {\n        console.error(data, errorCode, errorMsg);\n        self.setState({\n          error: 'An error occurred when loading the form!'\n        });\n      }\n    });\n\n    //if this is a child specimen form then certain formData is set when component mounts\n    if (this.props.child) {\n      var formData = this.state.formData;\n      formData['parentSpecimen'] = this.props.specimenId;\n      formData['pscid'] = this.props.candidateId;\n      formData['visitLabel'] = this.props.sessionId;\n\n      this.setState({\n        formData: formData\n      });\n    }\n  }\n\n  render() {\n    // Data loading error\n    if (this.state.error !== undefined) {\n      return (\n        <div className=\"alert alert-danger text-center\">\n          <strong>\n            {this.state.error}\n          </strong>\n        </div>\n      );\n    }\n\n    // Waiting for data to load\n    if (!this.state.isLoaded) {\n      return (\n        <button className=\"btn-info has-spinner\">\n          Loading\n          <span\n            className=\"glyphicon glyphicon-refresh glyphicon-refresh-animate\">\n          </span>\n        </button>\n      );\n    }\n\n    //Styling for remove Barcode button\n    const glyphStyle = {\n     color: '#D3D3D3',\n     margin: 'auto',\n    }; \n    const buttonStyle = {\n      appearance: 'none',\n      outline: 'none',\n      boxShadow: 'none',\n      borderColor: 'transparent',\n      backgroundColor: 'transparent',\n       \n    };\n\n    //Generates new Barcode Form everytime the addBarcodeForm button is pressed\n    var barcodeForms = [];\n    for (let i = 0; i < this.state.countBarcodeForms.length; i++) {\n      barcodeForms.push(\n        <BiobankBarcodeForm\n          setSpecimenFormData={this.setBarcodeFormData}\n          id={this.state.countBarcodeForms[i]}\n          specimenTypes={this.state.Data.specimenTypes}\n          containerTypesPrimary={this.state.Data.containerTypesPrimary}\n          containerBarcodesNonPrimary={this.state.Data.containerBarcodesNonPrimary}\n          specimenTypeAttributes={this.state.Data.specimenTypeAttributes}\n          attributeDatatypes={this.state.Data.attributeDatatypes}\n          capacities={this.state.Data.capacities}\n          units={this.state.Data.units}\n          button={i+1 === this.state.countBarcodeForms.length ? (\n            <button \n              type=\"button\"\n              className=\"btn btn-success btn-sm\"\n              onClick={this.addBarcodeForm}\n            >   \n              <span className=\"glyphicon glyphicon-plus\"/>\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"btn btn-primary-outline btn-sm\"\n              style={buttonStyle}\n              onClick={() => this.removeBarcodeForm(i)}\n            >\n            <span className=\"glyphicon glyphicon-remove\" style={glyphStyle}/>\n            </button>\n          )}\n        />\n      );\n    }\n\n\n    //Since Static Elements Can't be submitted as part of the form we need to decide if we should keep\n    //static elements or make the Select and Textbox Elements Disabled\n    let staticFields;\n    let selectFields;\n    if (this.props.child) {\n      staticFields = (   \n        <div>\n          <StaticElement\n            label=\"Parent Specimen\"\n            text={this.props.barcode}\n          />\n          <StaticElement\n            label=\"PSCID\"\n            text={this.state.Data.PSCIDs[this.props.candidateId]}\n          />\n          <StaticElement\n            label=\"Visit Label\"\n            text={this.state.Data.sessionData[this.state.Data.PSCIDs[this.props.candidateId]].visits[this.props.sessionId]}\n          />\n        </div>\n      );\n    } else {\n      selectFields = (\n          <div>\n            <SelectElement\n              name=\"pscid\"\n              label=\"PSCID\"\n              options={this.state.Data.PSCIDs}\n              onUserInput={this.setFormData}\n              ref=\"pscid\"\n              required={true}\n              value={this.state.formData.pscid}\n            />\n            <SelectElement\n              name=\"visitLabel\"\n              label=\"Visit Label\"\n              options={this.state.Data.visits}\n              onUserInput={this.setFormData}\n              ref=\"visitLabel\"\n              required={true}\n              value={this.state.formData.visitLabel}\n            />\n          </div>\n      );\n    }\n\n    //REPLACE PARENT CONTAINER TYPE WITH PARENT CONTAINER AND LIST ALL THE NON-PRIMARY\n    //CONTAINERS IN THE DATABASE YOU SILLY - Figure out if this is even necessary\n    //ALSO ALLOW THEM TO CANCEL THE FORM AND DELETE BARCODE FORMS\n    return (\n      <FormElement\n        name=\"biobankSpecimen\"\n        onSubmit={this.handleSubmit}\n        ref=\"form\"\n      >\n        <h3><b>Add New Specimen{this.state.countBarcodeForms > 1 ? \"s\" : \"\"}</b></h3>\n        <br/>\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            {staticFields}\n            {selectFields}\n            <DateElement\n              name=\"timeCollect\"\n              label=\"Collection Time\"\n              minYear=\"2000\"\n              maxYear=\"2017\"\n              onUserInput={this.setFormData}\n              ref=\"timeCollect\"\n              required={true}\n              value={this.state.formData.timeCollect}\n            />\n          </div>\n        </div>\n        {barcodeForms}\n        <div className=\"row\">\n          <div className=\"col-xs-9\"/>\n          <div className=\"col-xs-3\">\n            <ButtonElement label=\"Submit\"/>\n          </div>\n        </div>\n        {/*<ButtonElement label=\"Cancel\" type=\"button\" onUserInput={this.toggleModal}/>*/}\n      </FormElement>\n    );\n  }\n\n/** *******************************************************************************\n *                      ******     Helper methods     *******\n *********************************************************************************/\n\n  /**\n   * Returns a valid name for the file to be specimened\n   *\n   * @param {string} pscid - PSCID selected from the dropdown\n   * @param {string} visitLabel - Visit label selected from the dropdown\n   * @param {string} instrument - Instrument selected from the dropdown\n   * @return {string} - Generated valid filename for the current selection\n   */\n//  getValidFileName(pscid, visitLabel, instrument) {\n//    var fileName = pscid + \"_\" + visitLabel;\n//    if (instrument) fileName += \"_\" + instrument;\n//\n//    return fileName;\n//  }\n\n\n  validateForm(formElement, value) {\n    let formErrors = this.state.formErrors;\n\n    //validate barcode regex\n    if (formElement === \"barcode\" && value !== \"\") {\n      if (!(/^hello/.test(this.state.formData.barcode))) {\n        formErrors.barcode = true;\n      } else {\n        formErrors.barcode = false;\n      }\n    }\n\n    //validate that quantity is a number and less than capacity\n    if (formElement === \"quantity\" && value !== \"\") {\n      if (isNaN(value) || (value > this.state.Data.capacities[this.state.currentContainerType])) {\n        formErrors.quantity = true;\n      } else {\n        formErrors.quantity = false;\n      }\n    }\n\n    //validate datatypes and regex of generated type attributes\n    var specimenTypeFieldsObject = this.state.Data.specimenTypeAttributes[this.state.currentSpecimenType];\n    var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n\n      let datatype = this.state.Data.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n      if (datatype === \"number\") {\n        if (formElement === attribute) {\n          if (isNaN(value) && value !== \"\") {\n            formErrors[attribute] = true;\n          } else {\n            formErrors[attribute] = false;\n          }\n        }\n      }\n    })\n    \n\n    this.setState({\n      formErrors: formErrors\n    });\n\n\n  }\n\n\n  /**\n   * Handle form submission\n   * @param {object} e - Form submission event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    let formData = this.state.formData;\n    let barcodeFormList = this.state.barcodeFormList;\n    let formRefs = this.refs;\n    //let biobankFiles = this.state.Data.biobankFiles ? this.state.Data.biobankFiles : [];\n\n    // Validate the form\n    if (!this.isValidForm(formRefs, formData)) {\n      return;\n    }\n\n\n//    // Validate specimened file name\n//    let instrument = formData.instrument ? formData.instrument : null;\n//    let fileName = formData.file ? formData.file.name.replace(/\\s+/g, '_') : null;\n//    let requiredFileName = this.getValidFileName(\n//      formData.pscid, formData.visitLabel, instrument\n//    );\n//    if (!this.isValidFileName(requiredFileName, fileName)) {\n//      swal(\n//        \"Invalid Specimen name!\",\n//        \"File name should begin with: \" + requiredFileName,\n//        \"error\"\n//      );\n//      return;\n//    }\n\n    // Check for duplicate file names\n//    let isDuplicate = biobankFiles.indexOf(fileName);\n//    if (isDuplicate >= 0) {\n//      swal({\n//        title: \"Are you sure?\",\n//        text: \"A file with this name already exists!\\n Would you like to override existing file?\",\n//        type: \"warning\",\n//        showCancelButton: true,\n//        confirmButtonText: 'Yes, I am sure!',\n//        cancelButtonText: \"No, cancel it!\"\n//      }, function(isConfirm) {\n//        if (isConfirm) {\n//          this.specimenFile();\n//        } else {\n//          swal(\"Cancelled\", \"Your imaginary file is safe :)\", \"error\");\n//        }\n//      }.bind(this));\n//    } else {\n      formData['barcodeFormList'] = JSON.stringify(barcodeFormList);\n\n      this.setState({\n        formData: formData\n      });\n\n      this.specimenSubmit();\n//    }\n  }\n\n  /*\n   * Uploads the file to the server\n   */\n  specimenSubmit() {\n    // Set form data and specimen the biobank file\n    let formData = this.state.formData;\n    let formObj = new FormData();\n    for (let key in formData) {\n      if (formData[key] !== \"\") {\n        formObj.append(key, formData[key]);\n      }\n    }\n\n    $.ajax({\n      type: 'POST',\n      url: this.props.action,\n      data: formObj,\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        let xhr = new window.XMLHttpRequest();\n        return xhr;\n      }.bind(this),\n      success: function() {\n        // Trigger an update event to update all observers (i.e DataTable)\n        let event = new CustomEvent('update-datatable');\n        window.dispatchEvent(event);\n\n        this.setState({\n          formData: {}, // reset form data after successful file specimen\n          barcodeFormList: {}\n        });\n        swal(\"Specimen Submission Successful!\", \"\", \"success\");\n      }.bind(this),\n      error: function(err) {\n        console.error(err);\n        let msg = err.responseJSON ? err.responseJSON.message : \"Specimen error!\";\n        this.setState({\n          errorMessage: msg,\n        });\n        swal(msg, \"\", \"error\");\n      }.bind(this)\n    });\n  }\n\n  /**\n   * Checks if the inputted file name is valid\n   *\n   * @param {string} requiredFileName - Required file name\n   * @param {string} fileName - Provided file name\n   * @return {boolean} - true if fileName starts with requiredFileName, false\n   *   otherwise\n   */\n//  isValidFileName(requiredFileName, fileName) {\n//    if (fileName === null || requiredFileName === null) {\n//      return false;\n//    }\n//\n//    return (fileName.indexOf(requiredFileName) === 0);\n//  }\n\n  /**\n   * Validate the form\n   *\n   * @param {object} formRefs - Object containing references to React form elements\n   * @param {object} formData - Object containing form data inputed by user\n   * @return {boolean} - true if all required fields are filled, false otherwise\n   */\n  isValidForm(formRefs, formData) {\n    var isValidForm = true;\n\n    var requiredFields = {\n      pscid: null,\n      visitLabel: null,\n    };\n\n    Object.keys(requiredFields).map(function(field) {\n      if (formData[field]) {\n        requiredFields[field] = formData[field];\n      } else if (formRefs[field]) {\n        formRefs[field].props.hasError = true;\n        isValidForm = false;\n      }\n    });\n    this.forceUpdate();\n\n    return isValidForm;\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n    // Only display visits and sites available for the current pscid\n    //let visitLabel = this.state.formData.visitLabel;\n    //let pscid = this.state.formData.pscid;\n   \n    if (formElement === \"pscid\" && value !== \"\") {\n      this.state.Data.visits = this.state.Data.sessionData[this.state.Data.PSCIDs[value]].visits;\n      //this.state.Data.sites = this.state.Data.sessionData[this.state.Data.PSCIDs[value]].sites;\n    }\n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  setBarcodeFormData(barcodeFormData, barcodeId) {\n    var formData = this.state.formData;\n    var barcodeFormList = this.state.barcodeFormList;\n    barcodeFormList[barcodeId] = barcodeFormData;\n    formData['barcodeFormList'] = barcodeFormList;\n\n    this.setState({\n      formData: formData\n    });\n  }\n\n  addBarcodeForm() {\n    let countBarcodeForms = this.state.countBarcodeForms;\n    countBarcodeForms.push(countBarcodeForms[countBarcodeForms.length -1] + 1); \n    this.setState({\n      countBarcodeForms: countBarcodeForms\n    });\n  }\n\n  removeBarcodeForm(index) {\n    let countBarcodeForms = this.state.countBarcodeForms;\n    countBarcodeForms.splice(index, 1);\n    this.setState({\n      countBarcodeForms: countBarcodeForms\n    });\n  }\n}\n\nBiobankSpecimenForm.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired,\n  barcode: React.PropTypes.string\n};\n\nexport default BiobankSpecimenForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimenForm.js","\n/**\n * Biobank Barcode Form\n *\n * Acts a subform for BiobankSpecimenForm\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n **/\n\nclass BiobankBarcodeForm extends React.Component {\n  constructor(props) {\n    super(props);\n \n    this.state = {\n      formData: {},\n      currentSpecimenType: null,\n      currentContainerType: null,\n      formErrors: {},\n    };\n   \n    this.setFormData = this.setFormData.bind(this);\n    this.getSpecimenTypeFields = this.getSpecimenTypeFields.bind(this);\n  }\n\n  render() {\n\n    var specimenFields;\n    var specimenTypeFields = this.getSpecimenTypeFields();\n    if (this.state.currentSpecimenType) {\n      specimenFields = (\n       <div>\n         <SelectElement\n           name=\"containerType\"\n           label=\"Container Type\"\n           options={this.props.containerTypesPrimary}\n           onUserInput={this.setFormData}\n           ref=\"containerType\"\n           required={true}\n           value={this.state.formData.containerType}\n         />\n         <SelectElement\n           name=\"parentContainer\"\n           label=\"Parent Container Barcode\"\n           options={this.props.containerBarcodesNonPrimary}\n           onUserInput={this.setFormData}\n           ref=\"parentContainer\"\n           required={false}\n           value={this.state.formData.parentContainer}\n         />\n         <TextboxElement\n           name=\"quantity\"\n           label={\"Quantity\" + (this.state.currentContainerType ?\n             \" (\" + this.props.units[this.state.currentContainerType] + \")\" : \"\")}\n           onUserInput={this.setFormData}\n           ref=\"quantity\"\n           required={true}\n           value={this.state.formData.quantity}\n           hasError={this.state.formErrors.quantity}\n         />\n         {specimenTypeFields}\n         <TextareaElement\n           name=\"notes\"\n           label=\"Notes\"\n           onUserInput={this.setFormData}\n           ref=\"notes\"\n           value={this.state.formData.notes}\n         />\n       </div>\n      );\n    }\n\n    return (\n      <FormElement\n        name=\"biobankBarcode\"\n      >\n        <div className=\"row\">\n          <div className=\"col-xs-11\">\n            <div \n              data-toggle=\"collapse\" \n              data-target={\"#\" + this.props.id}\n              color=\"blue\"\n            >\n              <TextboxElement\n              name={\"barcode\"}\n              label={\"Barcode \" + this.props.id}\n              onUserInput={this.setFormData}\n              ref={\"barcode\"}\n              required={true}\n              value={this.state.formData[\"barcode\"]}\n              hasError={this.state.formErrors[\"barcode\"]}\n              errorMessage=\"Incorrect Barcode format for this Specimen and Container Type\"\n              />\n            </div>\n          </div>\n          <div className=\"col-xs-1\">\n            {this.props.button}\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xs-2\"/>\n          <div className=\"col-xs-9\">\n            <div id={this.props.id} className=\"collapse\">\n              <SelectElement\n                name=\"specimenType\"\n                label=\"Specimen Type\"\n                options={this.props.specimenTypes}\n                onUserInput={this.setFormData}\n                ref=\"specimenType\"\n                required={true}\n                value={this.state.formData.specimenType}\n              />\n            {specimenFields}\n            </div>\n          </div>\n        </div>\n      </FormElement>\n    );\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setFormData(formElement, value) {\n\n    if (formElement === \"specimenType\" && value !== \"\") {\n      this.setState({\n        currentSpecimenType: value\n      });\n    }\n\n    if (formElement === \"containerType\" && value !== \"\") {\n      this.setState({\n        currentContainerType: value\n      });\n    }\n\n    var formData = this.state.formData;\n    formData[formElement] = value;\n\n    this.setState({\n      formData: formData\n    });\n \n    this.props.setSpecimenFormData(this.state.formData, this.props.id);\t\n  }\n\n  // This generates all the form fields for a given specimen type\n  getSpecimenTypeFields() {\n    if (this.state.currentSpecimenType) {\n      var specimenTypeFieldsObject = this.props.specimenTypeAttributes[this.state.currentSpecimenType];\n      if (specimenTypeFieldsObject) {\n        var specimenTypeFields = Object.keys(specimenTypeFieldsObject).map((attribute) => {\n          let datatype = this.props.attributeDatatypes[specimenTypeFieldsObject[attribute]['datatypeId']].datatype;\n          if (datatype === \"text\" || datatype === \"number\") {\n            if (specimenTypeFieldsObject[attribute]['refTableId'] == null) {\n              return (\n                <TextboxElement\n                  name={attribute}\n                  label={specimenTypeFieldsObject[attribute]['name']}\n                  onUserInput={this.setFormData}\n                  ref={attribute}\n                  required={specimenTypeFieldsObject[attribute]['required']}\n                  value={this.state.formData[attribute]}\n                  hasError={this.state.formErrors[attribute]}\n                  errorMessage={\"This is a \" + datatype + \" field.\"}\n                />\n              );\n            }\n\n            // OPTIONS FOR SELECT ELEMENT WILL MOST LIKELY BE PASSED VIA AJAX CALL\n            // BUT IT CAN ALSO BE PRELOADED --\n            // ASK RIDA HOW THIS SHOULD BE DONE\n            if (specimenTypeFieldsObject[attribute]['refTableId'] !== null) {\n              return (\n                <SelectElement\n                  name={attribute}\n                  label={specimenTypeFieldsObject[attribute]['name']}\n                  options=\"\"\n                  onUserInput={this.setFormData}\n                  ref={attribute}\n                  required={this.state.formData[attribute]}\n                  value={this.state.formData[attribute]}\n                />\n              );\n            }\n          }\n\n          if (datatype === \"datetime\") {\n            return (\n              <DateElement\n                name={attribute}\n                label={specimenTypeFieldsObject[attribute]['name']}\n                onUserInput={this.setFormData}\n                ref={attribute}\n                required={specimenTypeFieldsObject[attribute]['required']}\n                value={this.state.formData[attribute]}\n              />\n            );\n          }\n        })\n\n        return specimenTypeFields;\n      }\n    }\n  }\n}\n\nBiobankBarcodeForm.propTypes = {\n  \n  id: React.PropTypes.string,\n  specimenTypes: React.PropTypes.object.isRequired,\n  containerTypesPrimary: React.PropTypes.object.isRequired,\n  specimenTypeAttributes: React.PropTypes.object.isRequired,\n  attributeDatatypes: React.PropTypes.object.isRequired,\n  capacities: React.PropTypes.object.isRequired,\n  units: React.PropTypes.object.isRequired,\n}\n\nexport default BiobankBarcodeForm;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/barcodeForm.js","/**\n * This file contains React components for Tabs component.\n *\n * @author Loris Team\n * @version 1.1.0\n *\n */\n\n/**\n * Tabs Component.\n * React wrapper for Bootstrap tabs. Allows to dynamically render tabs\n * and corresponding tab panes.\n *\n * ================================================\n * Usage:\n *\n * 1. Define an array of tabs with IDs and labels\n *\n * `let tabList = [{id: \"tab1\", label: \"This is tab title\"}];`\n *\n * 2. Pass tabList as <Tab> property and <TabPane> as child\n *  ```\n * <Tabs tabs={tabList} defaultTab=\"tab1\">\n *   <TabPane TabId={tabList[0].id}>\n *     // Tab content goes here\n *   </TabPane>\n * </Tabs>\n * ```\n * =================================================\n *\n */\nclass Tabs extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    const hash = window.location.hash;\n    let activeTab = \"\";\n\n    /**\n     * Determine the initial active tab in this order\n     * 1. Try to infer from the URL, otherwise\n     * 2. Try to infer from the defaultTab prop, otherwise\n     * 3. Set to be the first tab of the list\n     */\n    if (this.props.updateURL && hash) {\n      activeTab = hash.substr(1);\n    } else if (this.props.defaultTab) {\n      activeTab = this.props.defaultTab;\n    } else if (this.props.tabs.length > 0) {\n      activeTab = this.props.tabs[0].id;\n    }\n\n    this.state = {\n      activeTab: activeTab\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.getTabs = this.getTabs.bind(this);\n    this.getTabPanes = this.getTabPanes.bind(this);\n  }\n\n  handleClick(tabId, e) {\n    this.setState({activeTab: tabId});\n    this.props.onTabChange(tabId);\n\n    // Add tab href to URL querystring and scroll the page to top\n    if (this.props.updateURL) {\n      const scrollDistance = $('body').scrollTop() || $('html').scrollTop();\n      window.location.hash = e.target.hash;\n      $('html,body').scrollTop(scrollDistance);\n    }\n  }\n\n  getTabs() {\n    let tabs = (this.props.tabs).map(function(tab) {\n      let tabClass = this.state.activeTab === tab.id ? 'active' : null;\n      let href = \"#\" + tab.id;\n      let tabID = \"tab-\" + tab.id;\n      return (\n        <li\n          role=\"presentation\"\n          className={tabClass}\n          key={tab.id}\n        >\n          <a id={tabID}\n             href={href}\n             role=\"tab\"\n             data-toggle=\"tab\"\n             onClick={this.handleClick.bind(null, tab.id)}\n          >\n            {tab.label}\n          </a>\n        </li>\n      );\n    }.bind(this));\n\n    return tabs;\n  }\n\n  getTabPanes() {\n    let tabPanes = React.Children.map(this.props.children, function(child, key) {\n      if (child) {\n        return React.cloneElement(child, {\n          activeTab: this.state.activeTab,\n          key: key\n        });\n      }\n    }.bind(this));\n\n    return tabPanes;\n  }\n\n  render() {\n    let tabs = this.getTabs();\n    let tabPanes = this.getTabPanes();\n    let tabStyle = {\n      marginLeft: 0,\n      marginBottom: '5px'\n    };\n\n    return (\n      <div>\n        <ul className=\"nav nav-tabs\" role=\"tablist\" style={tabStyle}>\n          {tabs}\n        </ul>\n        <div className=\"tab-content\">\n          {tabPanes}\n        </div>\n      </div>\n    );\n  }\n}\nTabs.propTypes = {\n  tabs: React.PropTypes.array.isRequired,\n  defaultTab: React.PropTypes.string,\n  updateURL: React.PropTypes.bool\n};\nTabs.defaultProps = {\n  onTabChange: function() {},\n  updateURL: false\n};\n\n/*\n * TabPane component.\n * Used to wrap content for every tab.\n */\nclass TabPane extends React.Component {\n  render() {\n    let classList = \"tab-pane\";\n    let title;\n\n    if (this.props.TabId === this.props.activeTab) {\n      classList += \" active\";\n    }\n    if (this.props.Title) {\n      title = <h1>{this.props.Title}</h1>;\n    }\n\n    return (\n      <div role=\"tabpanel\" className={classList} id={this.props.TabId}>\n        {title}\n        {this.props.children}\n      </div>\n    );\n  }\n}\nTabPane.propTypes = {\n  TabId: React.PropTypes.string.isRequired,\n  Title: React.PropTypes.string,\n  activeTab: React.PropTypes.string\n};\n\nclass Modal extends React.Component {\n\n  render() {\n    // Render nothing if the \"show\" prop is false\n    if(!this.props.show) {\n      return null;\n    }   \n\n    //White Modal Window\n    const modalStyle = { \n      position: 'relative',\n      maxWidth: 1000,        \n      maxHeight: '100%',\n      margin: '0 auto',\n      backgroundColor: '#fff',\n      padding: 30,\n      borderRadius: 10,\n      overflowY: 'auto',\n      zIndex: 9999,\n    };  \n\n    //Grey Background\n    const backdropStyle = {\n      position: 'fixed',\n      zIndex: 9998,\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundColor: 'rgba(0,0,0,0.3)',\n      padding: 50\n    };\n\n    return (\n    <div style={backdropStyle} onClick={this.props.onClose}>\n      <div style={modalStyle} onClick={(e) => {e.stopPropagation()}}>\n        {this.props.children}\n      </div>\n    </div>\n    ); \n  }\n}\nModal.propTypes = { \n  onClose: React.PropTypes.func.isRequired,\n  show: React.PropTypes.bool,\n  children: React.PropTypes.node\n};\n\nexport {\n  Tabs,\n  TabPane,\n  Modal\n};\n\n\n\n// WEBPACK FOOTER //\n// ./jsx/Tabs.js","/* exported RBiobankSpecimen */\n\nimport BiobankSpecimenForm from './specimenForm';\nimport {Modal} from 'Tabs';\nimport Panel from '../../../jsx/Panel';\n\n/**\n * Biobank Specimen\n *\n * Fetches data corresponding to a given Specimen from Loris backend and\n * displays a page allowing viewing of meta information of the specimen\n *\n * @author Henri Rabalais\n * @version 1.0.0\n *\n * */\nclass BiobankSpecimen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      Data: {},\n      collectionData: {},\n      uploadResult: null,\n      isLoaded: false,\n      loadedData: 0\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.setCollectionData = this.setCollectionData.bind(this);\n    this.showAlertMessage = this.showAlertMessage.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n  }\n\n  componentDidMount() {\n    var self = this;\n    $.ajax(this.props.DataURL, {\n      dataType: 'json',\n      success: function(data) {\n        var collectionData = {\n          specimen: data.specimenData,\n\t  \t  container: data.containerData,\n\t      parentSpecimenBarcode: data.parentSpecimenBarcode,\n\t      parentContainerBarcode: data.parentContainerBarcode,\n        };\n\t\t  \n\t\tvar mappingData = {\n\t\t  specimenTypes: data.specimenTypes,\n\t\t  containerTypesPrimary: data.containerTypesPrimary,\n\t\t};\n\n        self.setState({\n          Data: data,\n          isLoaded: true,\n          collectionData: collectionData,\n        });\n      },\n      error: function(error, errorCode, errorMsg) {\n        console.error(error, errorCode, errorMsg);\n        self.setState({\n          error: 'An error occurred when loading the form!'\n        });\n      }\n    });\n  }\n\n  toggleModal() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n \n  render() {\n    // Data loading error\n    if (this.state.error !== undefined) {\n      return (\n        <div className=\"alert alert-danger text-center\">\n          <strong>\n            {this.state.error}\n          </strong>\n        </div>\n      );\n    }\n\n    // Waiting for data to load\n    if (!this.state.isLoaded) {\n      return (\n        <button className=\"btn-info has-spinner\">\n          Loading\n          <span\n            className=\"glyphicon glyphicon-refresh glyphicon-refresh-animate\">\n          </span>\n        </button>\n      );\n    }\n\n    var alertMessage = \"\";\n    var alertClass = \"alert text-center hide\";\n    var backURL = loris.BaseURL.concat('/biobank/');\n\n    if (this.state.uploadResult) {\n      if (this.state.uploadResult === \"success\") {\n        alertClass = \"alert alert-success text-center\";\n        alertMessage = \"Update Successful!\";\n      } else if (this.state.uploadResult === \"error\") {\n        alertClass = \"alert alert-danger text-center\";\n        alertMessage = \"Failed to update the file\";\n      }\n    }\n\n\t//checks if parent specimen exists and returns static element with href\n\tif (this.state.collectionData.parentSpecimenBarcode) {\n\t  var specimenURL = loris.BaseURL+\"/biobank/specimen/?barcode=\";\n\t  var parentSpecimenBarcode = (\n          <LinkElement\n            label=\"Parent Specimen\"\n            text={this.state.collectionData.parentSpecimenBarcode}\n\t        href={specimenURL+this.state.collectionData.parentSpecimenBarcode}\n          />\n\t  );\n\t}\t\n\n\t//checks if parent container exists and returns static element with href\n\tif (this.state.collectionData.parentContainerBarcode) {\n\t  var containerURL = loris.BaseURL+\"/biobank/container/?barcode=\";\n\t  var parentContainerBarcode = (\n          <LinkElement\n            label=\"Parent Container\"\n            text={this.state.collectionData.parentContainerBarcode}\n\t        href={containerURL+this.state.collectionData.parentContainerBarcode}\n          />\n\t  );\n\t}\t\n\n\t//loops through data object to produce static elements\n    if (this.state.collectionData.specimen.data) {\n      var dataObject = this.state.collectionData.specimen.data;\n      var dataArray = Object.keys(dataObject).map(function(key) {\n        return (\n          <StaticElement\n            label = {key}\n            text = {dataObject[key]}\n          />\n        );\n      })\n    }\n\n\t//checks if location exists, if not posts destination\n    var location;\n    if (this.state.Data.containerLoci[this.state.collectionData.container.locusId].location_id) {\n      location = (\n        <StaticElement\n          label=\"Location \"\n          text={this.state.Data.siteInfo[this.state.Data.containerLoci[this.state.collectionData.container.locusId].location_id].Name}\n        />\n      );\n     } else {\n      location = (\n        <StaticElement\n          label=\"Destination \"\n          text={this.state.Data.siteInfo[this.state.Data.containerLoci[this.state.collectionData.container.locusId].destination_id].Name+\" (In Transit)\"}\n        />\n      );\n    } \n\n    let addSpecimenButton;\n    let specimenForm;\n    if (loris.userHasPermission('biobank_write')) {\n      addSpecimenButton = (\n        <ButtonElement \n          buttonClass=\"btn btn-success\" \n          columnSize=\"col-sm-2\"\n          onUserInput={this.toggleModal} \n          label=\"Add Children\" \n          type=\"button\"/>\n      );\n      specimenForm = (\n        <Modal show={this.state.isOpen} onClose={this.toggleModal}>\n          <BiobankSpecimenForm\n            DataURL={`${loris.BaseURL}/biobank/ajax/FileUpload.php?action=getFormData`}\n            action={`${loris.BaseURL}/biobank/ajax/FileUpload.php?action=submitSpecimen`}\n            child='true'\n            specimenId={this.state.collectionData.specimen.id}\n            barcode={this.state.collectionData.container.barcode}\n            candidateId={this.state.Data.candidateInfo[''].ID}\n            sessionId={this.state.Data.sessionInfo[''].ID} \n          />\n        </Modal>\n      );\n    }\n\n    return (\n      <div>\n        <div className={alertClass} role=\"alert\" ref=\"alert-message\">\n          {alertMessage}\n        </div>\n        {\n          this.state.uploadResult === \"success\" ?\n          <a className=\"btn btn-primary\" href={backURL}>Back to biobank</a> :\n          null\n        }\n        <h3>Specimen <strong>{this.state.collectionData.container.barcode}</strong></h3>\n        {addSpecimenButton}\n        <FormElement\n          columns={4}\n        >\n            <LinkElement\n              label=\"PSCID\"\n              text={this.state.Data.candidateInfo[''].PSCID}\n              href={loris.BaseURL+'/'+this.state.Data.candidateInfo[''].CandID}\n            />\n            <LinkElement\n              label=\"Visit Label\"\n              text={this.state.Data.sessionInfo[''].Visit_label}\n              href={loris.BaseURL+'/instrument_list/?candID='+this.state.Data.candidateInfo[''].CandID+'&sessionID='+this.state.Data.sessionInfo[''].ID}\n            />\n            <StaticElement\n              label=\"Status\"\n              text={this.state.Data.containerStati[this.state.collectionData.container.statusId].label}\n            />\n            {location}\n\t\t    {parentSpecimenBarcode}\n\t\t    {parentContainerBarcode}\n        </FormElement>\n        <FormElement\n          columns={3}\n        >\n\t\t<Panel\n\t\t  id=\"collection-panel\"\n\t\t  title=\"Collection\"\n\t\t>\n          <FormElement\n            name=\"biobankSpecimen\"\n            onSubmit={this.handleSubmit}\n            ref=\"form\"\n          >\n            <StaticElement\n              label=\"Type\"\n              text={this.state.Data.specimenTypes[this.state.collectionData.specimen.typeId].label}\n            />\n            <StaticElement\n              label=\"Quantity\"\n              text={this.state.collectionData.specimen.quantity+' '+this.state.Data.containerUnits[this.state.Data.containerCapacities[this.state.Data.containerTypesPrimary[this.state.collectionData.container.typeId].capacity_id].unit_id].unit}\n            />\n            <StaticElement\n              label=\"Container Type\"\n              text={this.state.Data.containerTypesPrimary[this.state.collectionData.container.typeId].label}\n            />\n            <StaticElement\n              label=\"Site\"\n              text={this.state.Data.siteInfo[this.state.Data.containerLoci[this.state.collectionData.container.locusId].origin_id].Name}\n            />\n            <StaticElement\n              label=\"Collection Time\"\n              text={this.state.collectionData.specimen.timeCollect}\n            />\n\t        {dataArray}\n            <StaticElement\n              label=\"Notes\"\n              text={this.state.collectionData.specimen.notes}\n            />\n          </FormElement>\n\t\t</Panel>\n\t\t<Panel\n\t\t  id=\"preparation-panel\"\n\t\t  title=\"Preparation\"\n\t\t>\n\t\t</Panel>\n\t\t<Panel\n\t\t  id=\"analysis-panel\"\n\t\t  title=\"Analysis\"\n\t\t>\n\t\t</Panel>\n        </FormElement>\n        {specimenForm}\n      </div>\n    ); \n  }\n\n  /**\n   * Handles form submission\n   * @param {event} e - Form submition event\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n\n    var self = this;\n    var myCollectionData = this.state.formData;\n\n    $('#biobankSpecimenEl').hide();\n    $(\"#file-progress\").removeClass('hide');\n\n    $.ajax({\n      type: 'POST',\n      url: self.props.action,\n      data: JSON.stringify(myCollectionData),\n      cache: false,\n      contentType: false,\n      processData: false,\n      xhr: function() {\n        var xhr = new window.XMLHttpRequest();\n        xhr.upload.addEventListener(\"progress\", function(evt) {\n          if (evt.lengthComputable) {\n            var progressbar = $(\"#progressbar\");\n            var progresslabel = $(\"#progresslabel\");\n            var percent = Math.round((evt.loaded / evt.total) * 100);\n            $(progressbar).width(percent + \"%\");\n            $(progresslabel).html(percent + \"%\");\n            progressbar.attr('aria-valuenow', percent);\n          }\n        }, false);\n        return xhr;\n      },\n      success: function(data) {\n        $(\"#file-progress\").addClass('hide');\n        self.setState({\n          uploadResult: \"success\"\n        });\n        self.showAlertMessage();\n      },\n      error: function(err) {\n        console.error(err);\n        self.setState({\n          uploadResult: \"error\"\n        });\n        self.showAlertMessage();\n      }\n\n    });\n  }\n\n  /**\n   * Set the form data based on state values of child elements/componenets\n   *\n   * @param {string} formElement - name of the selected element\n   * @param {string} value - selected value for corresponding form element\n   */\n  setCollectionData(formElement, value) {\n    var collectionData = this.state.collectionData;\n\n    if (value === \"\") {\n      collectionData[formElement] = null;\n    } else {\n      collectionData[formElement] = value;\n    }\n\n    this.setState({\n      collectionData: collectionData\n    });\n  }\n\n  /**\n   * Display a success/error alert message after form submission\n   */\n  showAlertMessage() {\n    var self = this;\n\n    if (this.refs[\"alert-message\"] === null) {\n      return;\n    }\n\n    var alertMsg = this.refs[\"alert-message\"];\n    $(alertMsg).fadeTo(2000, 500).delay(3000).slideUp(500, function() {\n      self.setState({\n        uploadResult: null\n      });\n    });\n  }\n\n}\n\nBiobankSpecimen.propTypes = {\n  DataURL: React.PropTypes.string.isRequired,\n  action: React.PropTypes.string.isRequired\n};\n\nvar RBiobankSpecimen = React.createFactory(BiobankSpecimen);\n\nwindow.BiobankSpecimen = BiobankSpecimen;\nwindow.RBiobankSpecimen = RBiobankSpecimen;\n\nexport default BiobankSpecimen;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/biobank/jsx/specimen.js"],"sourceRoot":""}